/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:10:39 GMT 2014
 */

package org.jfree.chart.plot;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Canvas;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.event.MouseEvent;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.Collection;
import java.util.List;
import javax.swing.Icon;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JRadioButton;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyledDocument;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;

import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAnchor;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.chart.renderer.xy.XYBubbleRenderer;
import org.jfree.chart.renderer.xy.XYDotRenderer;
import org.jfree.chart.renderer.xy.YIntervalRenderer;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.SortOrder;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

 
public class CategoryPlotEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot1 = (CombinedRangeCategoryPlot)combinedRangeCategoryPlot0.clone();
      assertNotNull(combinedRangeCategoryPlot1);
      assertTrue(combinedRangeCategoryPlot1.equals((Object)combinedRangeCategoryPlot0));
      assertTrue(combinedRangeCategoryPlot0.equals((Object)combinedRangeCategoryPlot1));
      assertEquals(true, combinedRangeCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot1.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot1.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot1.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot1.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot1.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot1.getWeight());
      assertEquals(false, combinedRangeCategoryPlot1.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot1.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot1.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot1.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot1.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot1.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotSame(combinedRangeCategoryPlot1, combinedRangeCategoryPlot0);
      assertNotSame(combinedRangeCategoryPlot0, combinedRangeCategoryPlot1);
  }

  @Test
  public void test001()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      
      NumberAxis numberAxis0 = (NumberAxis)combinedRangeCategoryPlot0.getRangeAxis();
      assertNotNull(numberAxis0);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot1 = new CombinedRangeCategoryPlot((ValueAxis) numberAxis0);
      assertNotNull(combinedRangeCategoryPlot1);
      assertTrue(combinedRangeCategoryPlot1.equals((Object)combinedRangeCategoryPlot0));
      assertTrue(combinedRangeCategoryPlot0.equals((Object)combinedRangeCategoryPlot1));
      assertEquals(true, combinedRangeCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot1.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot1.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot1.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot1.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot1.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot1.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot1.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot1.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot1.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot1.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot1.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot1.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot1.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNotSame(combinedRangeCategoryPlot1, combinedRangeCategoryPlot0);
      assertNotSame(combinedRangeCategoryPlot0, combinedRangeCategoryPlot1);
      
      combinedRangeCategoryPlot0.setRangeAxis((ValueAxis) numberAxis0);
      assertTrue(combinedRangeCategoryPlot0.equals((Object)combinedRangeCategoryPlot1));
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNotSame(combinedRangeCategoryPlot0, combinedRangeCategoryPlot1);
  }

  @Test
  public void test002()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      
      boolean boolean0 = combinedDomainCategoryPlot0.getDrawSharedDomainAxis();
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertFalse(boolean0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      
      float[] floatArray0 = new float[2];
      combinedRangeCategoryPlot0.setAnchorValue((double) floatArray0[0], boolean0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "";
      LogAxis logAxis0 = new LogAxis(string0);
      assertNotNull(logAxis0);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(10, logAxis0.getMinorTickCount());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals("", logAxis0.getLabel());
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      
      int int0 = 50;
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertNotNull(extendedCategoryAxis0);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals("", extendedCategoryAxis0.getLabel());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertNotNull(groupedStackedBarRenderer0);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, groupedStackedBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(2, groupedStackedBarRenderer0.getPassCount());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultCategoryDataset0, (CategoryAxis) extendedCategoryAxis0, (ValueAxis) logAxis0, (CategoryItemRenderer) groupedStackedBarRenderer0);
      assertNotNull(categoryPlot0);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, groupedStackedBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(2, groupedStackedBarRenderer0.getPassCount());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(10, logAxis0.getMinorTickCount());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals("", logAxis0.getLabel());
      assertNull(logAxis0.getLabelURL());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals("", extendedCategoryAxis0.getLabel());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      
      Point2D.Double point2D_Double0 = new Point2D.Double((double) int0, (double) int0);
      assertNotNull(point2D_Double0);
      assertEquals(50.0, point2D_Double0.y, 0.01D);
      assertEquals(50.0, point2D_Double0.x, 0.01D);
      
      PlotRenderingInfo plotRenderingInfo0 = null;
      categoryPlot0.zoomRangeAxes((double) int0, (double) int0, plotRenderingInfo0, (Point2D) point2D_Double0);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, groupedStackedBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(2, groupedStackedBarRenderer0.getPassCount());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(10, logAxis0.getMinorTickCount());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(Double.NaN, logAxis0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, logAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logAxis0.isAutoRange());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals("", logAxis0.getLabel());
      assertNull(logAxis0.getLabelURL());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals("", extendedCategoryAxis0.getLabel());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(50.0, point2D_Double0.y, 0.01D);
      assertEquals(50.0, point2D_Double0.x, 0.01D);
  }

  @Test
  public void test004()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      
      List list0 = combinedRangeCategoryPlot0.getCategories();
      assertNull(list0);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
  }

  @Test
  public void test005()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      
      int int0 = 975;
      CategoryAxis categoryAxis0 = combinedRangeCategoryPlot0.getDomainAxisForDataset(int0);
      assertNull(categoryAxis0);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      
      List list0 = combinedRangeCategoryPlot0.getCategoriesForAxis(categoryAxis0);
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
  }

  @Test
  public void test006()  throws Throwable  {
      int int0 = 2738;
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      
      String string0 = "fgD]";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) int0, string0);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals("fgD]", cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(2738.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      
      Range range0 = combinedDomainCategoryPlot0.getDataRange((ValueAxis) cyclicNumberAxis0);
      assertNull(range0);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals("fgD]", cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(2738.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
  }

  @Test
  public void test007()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      
      Graphics2D graphics2D0 = null;
      String string0 = "";
      boolean boolean0 = true;
      JCheckBox jCheckBox0 = new JCheckBox(string0, boolean0);
      assertNotNull(jCheckBox0);
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      
      Rectangle rectangle0 = jCheckBox0.getVisibleRect();
      assertNotNull(rectangle0);
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      
      PlotOrientation plotOrientation0 = combinedDomainCategoryPlot0.getOrientation();
      assertNotNull(plotOrientation0);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      
      double double0 = 4.0;
      NumberAxis numberAxis0 = new NumberAxis();
      assertNotNull(numberAxis0);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      assertNotNull(xYDotRenderer0);
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYDotRenderer0.getBaseCreateEntities());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYDotRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisibleInLegend());
      
      Stroke stroke0 = xYDotRenderer0.getSeriesOutlineStroke(rectangle0.width);
      assertNull(stroke0);
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYDotRenderer0.getBaseCreateEntities());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYDotRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      
      Color color0 = (Color)AbstractRenderer.DEFAULT_PAINT;
      assertNotNull(color0);
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      
      combinedDomainCategoryPlot0.drawRangeCrosshair(graphics2D0, rectangle0, plotOrientation0, double0, numberAxis0, stroke0, color0);
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYDotRenderer0.getBaseCreateEntities());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYDotRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
  }

  @Test
  public void test008()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      
      Graphics2D graphics2D0 = null;
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource0 = new DefaultTableCellRenderer.UIResource();
      assertNotNull(defaultTableCellRenderer_UIResource0);
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      
      Rectangle rectangle0 = defaultTableCellRenderer_UIResource0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      combinedRangeCategoryPlot0.drawDomainMarkers(graphics2D0, rectangle0, rectangle0.height, layer0);
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
  }

  @Test
  public void test009()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      
      Graphics2D graphics2D0 = null;
      String string0 = "";
      boolean boolean0 = true;
      JCheckBox jCheckBox0 = new JCheckBox(string0, boolean0);
      assertNotNull(jCheckBox0);
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(0, jCheckBox0.countComponents());
      
      Rectangle rectangle0 = jCheckBox0.getVisibleRect();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      
      EntityCollection entityCollection0 = null;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(entityCollection0);
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      combinedDomainCategoryPlot0.drawAnnotations(graphics2D0, rectangle0, plotRenderingInfo0);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
  }

  @Test
  public void test010()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      
      int int0 = SwingConstants.EAST;
      assertEquals(3, int0);
      
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedRangeCategoryPlot0);
      assertNotNull(jFreeChart0);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0, chartRenderingInfo0);
      assertNotNull(bufferedImage0);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertNotNull(sunGraphics2D0);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals("sun.java2d.SunGraphics2D[font=java.awt.Font[family=Dialog,name=Dialog,style=plain,size=12],color=java.awt.Color[r=255,g=255,b=255]]", sunGraphics2D0.toString());
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      
      Canvas canvas0 = new Canvas();
      assertNotNull(canvas0);
      assertEquals(false, canvas0.getIgnoreRepaint());
      assertEquals(Component.BaselineResizeBehavior.OTHER, canvas0.getBaselineResizeBehavior());
      assertEquals(false, canvas0.isOpaque());
      assertEquals(true, canvas0.isVisible());
      assertEquals(false, canvas0.isForegroundSet());
      assertEquals(false, canvas0.isPreferredSizeSet());
      assertEquals(true, canvas0.isEnabled());
      assertEquals(false, canvas0.isDisplayable());
      assertEquals(0, canvas0.getWidth());
      assertEquals(true, canvas0.getFocusTraversalKeysEnabled());
      assertEquals(0, canvas0.getHeight());
      assertEquals(false, canvas0.isValid());
      assertEquals(0.5F, canvas0.getAlignmentX(), 0.01F);
      assertEquals(0, canvas0.getY());
      assertEquals(0, canvas0.getX());
      assertEquals(0.5F, canvas0.getAlignmentY(), 0.01F);
      assertEquals(false, canvas0.isCursorSet());
      assertEquals(false, canvas0.isMaximumSizeSet());
      assertEquals(false, canvas0.isShowing());
      assertEquals(false, canvas0.isFontSet());
      assertEquals(false, canvas0.isLightweight());
      assertEquals(false, canvas0.isDoubleBuffered());
      assertEquals(false, canvas0.isBackgroundSet());
      assertEquals(false, canvas0.isMinimumSizeSet());
      
      Container container0 = canvas0.getParent();
      assertNull(container0);
      assertEquals(false, canvas0.getIgnoreRepaint());
      assertEquals(Component.BaselineResizeBehavior.OTHER, canvas0.getBaselineResizeBehavior());
      assertEquals(false, canvas0.isOpaque());
      assertEquals(true, canvas0.isVisible());
      assertEquals(false, canvas0.isForegroundSet());
      assertEquals(false, canvas0.isPreferredSizeSet());
      assertEquals(true, canvas0.isEnabled());
      assertEquals(false, canvas0.isDisplayable());
      assertEquals(0, canvas0.getWidth());
      assertEquals(true, canvas0.getFocusTraversalKeysEnabled());
      assertEquals(0, canvas0.getHeight());
      assertEquals(false, canvas0.isValid());
      assertEquals(0.5F, canvas0.getAlignmentX(), 0.01F);
      assertEquals(0, canvas0.getY());
      assertEquals(0, canvas0.getX());
      assertEquals(0.5F, canvas0.getAlignmentY(), 0.01F);
      assertEquals(false, canvas0.isCursorSet());
      assertEquals(false, canvas0.isMaximumSizeSet());
      assertEquals(false, canvas0.isShowing());
      assertEquals(false, canvas0.isFontSet());
      assertEquals(false, canvas0.isLightweight());
      assertEquals(false, canvas0.isDoubleBuffered());
      assertEquals(false, canvas0.isBackgroundSet());
      assertEquals(false, canvas0.isMinimumSizeSet());
      
      JScrollPane jScrollPane0 = new JScrollPane((Component) container0);
      assertNotNull(jScrollPane0);
      assertEquals(false, canvas0.getIgnoreRepaint());
      assertEquals(Component.BaselineResizeBehavior.OTHER, canvas0.getBaselineResizeBehavior());
      assertEquals(false, canvas0.isOpaque());
      assertEquals(true, canvas0.isVisible());
      assertEquals(false, canvas0.isForegroundSet());
      assertEquals(false, canvas0.isPreferredSizeSet());
      assertEquals(true, canvas0.isEnabled());
      assertEquals(false, canvas0.isDisplayable());
      assertEquals(0, canvas0.getWidth());
      assertEquals(true, canvas0.getFocusTraversalKeysEnabled());
      assertEquals(0, canvas0.getHeight());
      assertEquals(false, canvas0.isValid());
      assertEquals(0.5F, canvas0.getAlignmentX(), 0.01F);
      assertEquals(0, canvas0.getY());
      assertEquals(0, canvas0.getX());
      assertEquals(0.5F, canvas0.getAlignmentY(), 0.01F);
      assertEquals(false, canvas0.isCursorSet());
      assertEquals(false, canvas0.isMaximumSizeSet());
      assertEquals(false, canvas0.isShowing());
      assertEquals(false, canvas0.isFontSet());
      assertEquals(false, canvas0.isLightweight());
      assertEquals(false, canvas0.isDoubleBuffered());
      assertEquals(false, canvas0.isBackgroundSet());
      assertEquals(false, canvas0.isMinimumSizeSet());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicySet());
      assertEquals(false, jScrollPane0.isMinimumSizeSet());
      assertEquals(false, jScrollPane0.isDisplayable());
      assertEquals(true, jScrollPane0.isBackgroundSet());
      assertEquals(true, jScrollPane0.isFontSet());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jScrollPane0.isEnabled());
      assertEquals(3, jScrollPane0.getComponentCount());
      assertEquals(true, jScrollPane0.isForegroundSet());
      assertEquals(false, jScrollPane0.isValid());
      assertEquals(false, jScrollPane0.isMaximumSizeSet());
      assertEquals(false, jScrollPane0.isPreferredSizeSet());
      assertEquals(3, jScrollPane0.countComponents());
      assertEquals(false, jScrollPane0.isLightweight());
      assertEquals(false, jScrollPane0.isCursorSet());
      assertEquals(true, jScrollPane0.isVisible());
      assertEquals(false, jScrollPane0.isShowing());
      assertEquals(false, jScrollPane0.getIgnoreRepaint());
      assertEquals(false, jScrollPane0.isFocusCycleRoot());
      assertEquals(true, jScrollPane0.getFocusTraversalKeysEnabled());
      
      JScrollBar jScrollBar0 = jScrollPane0.createHorizontalScrollBar();
      assertNotNull(jScrollBar0);
      assertEquals(false, canvas0.getIgnoreRepaint());
      assertEquals(Component.BaselineResizeBehavior.OTHER, canvas0.getBaselineResizeBehavior());
      assertEquals(false, canvas0.isOpaque());
      assertEquals(true, canvas0.isVisible());
      assertEquals(false, canvas0.isForegroundSet());
      assertEquals(false, canvas0.isPreferredSizeSet());
      assertEquals(true, canvas0.isEnabled());
      assertEquals(false, canvas0.isDisplayable());
      assertEquals(0, canvas0.getWidth());
      assertEquals(true, canvas0.getFocusTraversalKeysEnabled());
      assertEquals(0, canvas0.getHeight());
      assertEquals(false, canvas0.isValid());
      assertEquals(0.5F, canvas0.getAlignmentX(), 0.01F);
      assertEquals(0, canvas0.getY());
      assertEquals(0, canvas0.getX());
      assertEquals(0.5F, canvas0.getAlignmentY(), 0.01F);
      assertEquals(false, canvas0.isCursorSet());
      assertEquals(false, canvas0.isMaximumSizeSet());
      assertEquals(false, canvas0.isShowing());
      assertEquals(false, canvas0.isFontSet());
      assertEquals(false, canvas0.isLightweight());
      assertEquals(false, canvas0.isDoubleBuffered());
      assertEquals(false, canvas0.isBackgroundSet());
      assertEquals(false, canvas0.isMinimumSizeSet());
      assertEquals(true, jScrollBar0.isEnabled());
      assertEquals(false, jScrollBar0.isValid());
      assertEquals(false, jScrollBar0.isFocusCycleRoot());
      assertEquals(false, jScrollBar0.isMaximumSizeSet());
      assertEquals(false, jScrollBar0.isFontSet());
      assertEquals(false, jScrollBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jScrollBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jScrollBar0.getIgnoreRepaint());
      assertEquals(true, jScrollBar0.isBackgroundSet());
      assertEquals(true, jScrollBar0.isForegroundSet());
      assertEquals(false, jScrollBar0.isShowing());
      assertEquals(false, jScrollBar0.isDisplayable());
      assertEquals(false, jScrollBar0.isPreferredSizeSet());
      assertEquals(false, jScrollBar0.isMinimumSizeSet());
      assertEquals(false, jScrollBar0.isCursorSet());
      assertEquals(true, jScrollBar0.isVisible());
      assertEquals(false, jScrollBar0.isLightweight());
      assertEquals(2, jScrollBar0.getComponentCount());
      assertEquals(2, jScrollBar0.countComponents());
      assertEquals(false, jScrollBar0.isFocusTraversalPolicySet());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicySet());
      assertEquals(false, jScrollPane0.isMinimumSizeSet());
      assertEquals(false, jScrollPane0.isDisplayable());
      assertEquals(true, jScrollPane0.isBackgroundSet());
      assertEquals(true, jScrollPane0.isFontSet());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jScrollPane0.isEnabled());
      assertEquals(3, jScrollPane0.getComponentCount());
      assertEquals(true, jScrollPane0.isForegroundSet());
      assertEquals(false, jScrollPane0.isValid());
      assertEquals(false, jScrollPane0.isMaximumSizeSet());
      assertEquals(false, jScrollPane0.isPreferredSizeSet());
      assertEquals(3, jScrollPane0.countComponents());
      assertEquals(false, jScrollPane0.isLightweight());
      assertEquals(false, jScrollPane0.isCursorSet());
      assertEquals(true, jScrollPane0.isVisible());
      assertEquals(false, jScrollPane0.isShowing());
      assertEquals(false, jScrollPane0.getIgnoreRepaint());
      assertEquals(false, jScrollPane0.isFocusCycleRoot());
      assertEquals(true, jScrollPane0.getFocusTraversalKeysEnabled());
      
      Rectangle rectangle0 = jScrollBar0.bounds();
      assertNotNull(rectangle0);
      assertEquals(false, canvas0.getIgnoreRepaint());
      assertEquals(Component.BaselineResizeBehavior.OTHER, canvas0.getBaselineResizeBehavior());
      assertEquals(false, canvas0.isOpaque());
      assertEquals(true, canvas0.isVisible());
      assertEquals(false, canvas0.isForegroundSet());
      assertEquals(false, canvas0.isPreferredSizeSet());
      assertEquals(true, canvas0.isEnabled());
      assertEquals(false, canvas0.isDisplayable());
      assertEquals(0, canvas0.getWidth());
      assertEquals(true, canvas0.getFocusTraversalKeysEnabled());
      assertEquals(0, canvas0.getHeight());
      assertEquals(false, canvas0.isValid());
      assertEquals(0.5F, canvas0.getAlignmentX(), 0.01F);
      assertEquals(0, canvas0.getY());
      assertEquals(0, canvas0.getX());
      assertEquals(0.5F, canvas0.getAlignmentY(), 0.01F);
      assertEquals(false, canvas0.isCursorSet());
      assertEquals(false, canvas0.isMaximumSizeSet());
      assertEquals(false, canvas0.isShowing());
      assertEquals(false, canvas0.isFontSet());
      assertEquals(false, canvas0.isLightweight());
      assertEquals(false, canvas0.isDoubleBuffered());
      assertEquals(false, canvas0.isBackgroundSet());
      assertEquals(false, canvas0.isMinimumSizeSet());
      assertEquals(true, jScrollBar0.isEnabled());
      assertEquals(false, jScrollBar0.isValid());
      assertEquals(false, jScrollBar0.isFocusCycleRoot());
      assertEquals(false, jScrollBar0.isMaximumSizeSet());
      assertEquals(false, jScrollBar0.isFontSet());
      assertEquals(false, jScrollBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jScrollBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jScrollBar0.getIgnoreRepaint());
      assertEquals(true, jScrollBar0.isBackgroundSet());
      assertEquals(true, jScrollBar0.isForegroundSet());
      assertEquals(false, jScrollBar0.isShowing());
      assertEquals(false, jScrollBar0.isDisplayable());
      assertEquals(false, jScrollBar0.isPreferredSizeSet());
      assertEquals(false, jScrollBar0.isMinimumSizeSet());
      assertEquals(false, jScrollBar0.isCursorSet());
      assertEquals(true, jScrollBar0.isVisible());
      assertEquals(false, jScrollBar0.isLightweight());
      assertEquals(2, jScrollBar0.getComponentCount());
      assertEquals(2, jScrollBar0.countComponents());
      assertEquals(false, jScrollBar0.isFocusTraversalPolicySet());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(false, jScrollPane0.isFocusTraversalPolicySet());
      assertEquals(false, jScrollPane0.isMinimumSizeSet());
      assertEquals(false, jScrollPane0.isDisplayable());
      assertEquals(true, jScrollPane0.isBackgroundSet());
      assertEquals(true, jScrollPane0.isFontSet());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jScrollPane0.isEnabled());
      assertEquals(3, jScrollPane0.getComponentCount());
      assertEquals(true, jScrollPane0.isForegroundSet());
      assertEquals(false, jScrollPane0.isValid());
      assertEquals(false, jScrollPane0.isMaximumSizeSet());
      assertEquals(false, jScrollPane0.isPreferredSizeSet());
      assertEquals(3, jScrollPane0.countComponents());
      assertEquals(false, jScrollPane0.isLightweight());
      assertEquals(false, jScrollPane0.isCursorSet());
      assertEquals(true, jScrollPane0.isVisible());
      assertEquals(false, jScrollPane0.isShowing());
      assertEquals(false, jScrollPane0.getIgnoreRepaint());
      assertEquals(false, jScrollPane0.isFocusCycleRoot());
      assertEquals(true, jScrollPane0.getFocusTraversalKeysEnabled());
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      
      AxisSpace axisSpace0 = null;
      AxisSpace axisSpace1 = combinedRangeCategoryPlot0.calculateRangeAxisSpace(sunGraphics2D0, rectangle0, axisSpace0);
      assertNotNull(axisSpace1);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, canvas0.getIgnoreRepaint());
      assertEquals(Component.BaselineResizeBehavior.OTHER, canvas0.getBaselineResizeBehavior());
      assertEquals(false, canvas0.isOpaque());
      assertEquals(true, canvas0.isVisible());
      assertEquals(false, canvas0.isForegroundSet());
      assertEquals(false, canvas0.isPreferredSizeSet());
      assertEquals(true, canvas0.isEnabled());
      assertEquals(false, canvas0.isDisplayable());
      assertEquals(0, canvas0.getWidth());
      assertEquals(true, canvas0.getFocusTraversalKeysEnabled());
      assertEquals(0, canvas0.getHeight());
      assertEquals(false, canvas0.isValid());
      assertEquals(0.5F, canvas0.getAlignmentX(), 0.01F);
      assertEquals(0, canvas0.getY());
      assertEquals(0, canvas0.getX());
      assertEquals(0.5F, canvas0.getAlignmentY(), 0.01F);
      assertEquals(false, canvas0.isCursorSet());
      assertEquals(false, canvas0.isMaximumSizeSet());
      assertEquals(false, canvas0.isShowing());
      assertEquals(false, canvas0.isFontSet());
      assertEquals(false, canvas0.isLightweight());
      assertEquals(false, canvas0.isDoubleBuffered());
      assertEquals(false, canvas0.isBackgroundSet());
      assertEquals(false, canvas0.isMinimumSizeSet());
      assertEquals(0.0, axisSpace1.getBottom(), 0.01D);
      assertEquals(0.0, axisSpace1.getRight(), 0.01D);
      assertEquals(0.0, axisSpace1.getTop(), 0.01D);
      assertEquals(14.0, axisSpace1.getLeft(), 0.01D);
      assertEquals(true, jScrollBar0.isEnabled());
      assertEquals(false, jScrollBar0.isValid());
      assertEquals(false, jScrollBar0.isFocusCycleRoot());
      assertEquals(false, jScrollBar0.isMaximumSizeSet());
      assertEquals(false, jScrollBar0.isFontSet());
      assertEquals(false, jScrollBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jScrollBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jScrollBar0.getIgnoreRepaint());
      assertEquals(true, jScrollBar0.isBackgroundSet());
      assertEquals(true, jScrollBar0.isForegroundSet());
      assertEquals(false, jScrollBar0.isShowing());
      assertEquals(false, jScrollBar0.isDisplayable());
      assertEquals(false, jScrollBar0.isPreferredSizeSet());
      assertEquals(false, jScrollBar0.isMinimumSizeSet());
      assertEquals(false, jScrollBar0.isCursorSet());
      assertEquals(true, jScrollBar0.isVisible());
      assertEquals(false, jScrollBar0.isLightweight());
      assertEquals(2, jScrollBar0.getComponentCount());
      assertEquals(2, jScrollBar0.countComponents());
      assertEquals(false, jScrollBar0.isFocusTraversalPolicySet());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(false, jScrollPane0.isFocusTraversalPolicySet());
      assertEquals(false, jScrollPane0.isMinimumSizeSet());
      assertEquals(false, jScrollPane0.isDisplayable());
      assertEquals(true, jScrollPane0.isBackgroundSet());
      assertEquals(true, jScrollPane0.isFontSet());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jScrollPane0.isEnabled());
      assertEquals(3, jScrollPane0.getComponentCount());
      assertEquals(true, jScrollPane0.isForegroundSet());
      assertEquals(false, jScrollPane0.isValid());
      assertEquals(false, jScrollPane0.isMaximumSizeSet());
      assertEquals(false, jScrollPane0.isPreferredSizeSet());
      assertEquals(3, jScrollPane0.countComponents());
      assertEquals(false, jScrollPane0.isLightweight());
      assertEquals(false, jScrollPane0.isCursorSet());
      assertEquals(true, jScrollPane0.isVisible());
      assertEquals(false, jScrollPane0.isShowing());
      assertEquals(false, jScrollPane0.getIgnoreRepaint());
      assertEquals(false, jScrollPane0.isFocusCycleRoot());
      assertEquals(true, jScrollPane0.getFocusTraversalKeysEnabled());
      assertEquals("sun.java2d.SunGraphics2D[font=java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10],color=java.awt.Color[r=255,g=255,b=255]]", sunGraphics2D0.toString());
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      
      AxisSpace axisSpace2 = combinedRangeCategoryPlot0.calculateDomainAxisSpace(sunGraphics2D0, rectangle0, axisSpace1);
      assertNotNull(axisSpace2);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, canvas0.getIgnoreRepaint());
      assertEquals(Component.BaselineResizeBehavior.OTHER, canvas0.getBaselineResizeBehavior());
      assertEquals(false, canvas0.isOpaque());
      assertEquals(true, canvas0.isVisible());
      assertEquals(false, canvas0.isForegroundSet());
      assertEquals(false, canvas0.isPreferredSizeSet());
      assertEquals(true, canvas0.isEnabled());
      assertEquals(false, canvas0.isDisplayable());
      assertEquals(0, canvas0.getWidth());
      assertEquals(true, canvas0.getFocusTraversalKeysEnabled());
      assertEquals(0, canvas0.getHeight());
      assertEquals(false, canvas0.isValid());
      assertEquals(0.5F, canvas0.getAlignmentX(), 0.01F);
      assertEquals(0, canvas0.getY());
      assertEquals(0, canvas0.getX());
      assertEquals(0.5F, canvas0.getAlignmentY(), 0.01F);
      assertEquals(false, canvas0.isCursorSet());
      assertEquals(false, canvas0.isMaximumSizeSet());
      assertEquals(false, canvas0.isShowing());
      assertEquals(false, canvas0.isFontSet());
      assertEquals(false, canvas0.isLightweight());
      assertEquals(false, canvas0.isDoubleBuffered());
      assertEquals(false, canvas0.isBackgroundSet());
      assertEquals(false, canvas0.isMinimumSizeSet());
      assertEquals(0.0, axisSpace1.getBottom(), 0.01D);
      assertEquals(0.0, axisSpace1.getRight(), 0.01D);
      assertEquals(0.0, axisSpace1.getTop(), 0.01D);
      assertEquals(14.0, axisSpace1.getLeft(), 0.01D);
      assertEquals(true, jScrollBar0.isEnabled());
      assertEquals(false, jScrollBar0.isValid());
      assertEquals(false, jScrollBar0.isFocusCycleRoot());
      assertEquals(false, jScrollBar0.isMaximumSizeSet());
      assertEquals(false, jScrollBar0.isFontSet());
      assertEquals(false, jScrollBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jScrollBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jScrollBar0.getIgnoreRepaint());
      assertEquals(true, jScrollBar0.isBackgroundSet());
      assertEquals(true, jScrollBar0.isForegroundSet());
      assertEquals(false, jScrollBar0.isShowing());
      assertEquals(false, jScrollBar0.isDisplayable());
      assertEquals(false, jScrollBar0.isPreferredSizeSet());
      assertEquals(false, jScrollBar0.isMinimumSizeSet());
      assertEquals(false, jScrollBar0.isCursorSet());
      assertEquals(true, jScrollBar0.isVisible());
      assertEquals(false, jScrollBar0.isLightweight());
      assertEquals(2, jScrollBar0.getComponentCount());
      assertEquals(2, jScrollBar0.countComponents());
      assertEquals(false, jScrollBar0.isFocusTraversalPolicySet());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0.0, axisSpace2.getBottom(), 0.01D);
      assertEquals(0.0, axisSpace2.getRight(), 0.01D);
      assertEquals(0.0, axisSpace2.getTop(), 0.01D);
      assertEquals(14.0, axisSpace2.getLeft(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(false, jScrollPane0.isFocusTraversalPolicySet());
      assertEquals(false, jScrollPane0.isMinimumSizeSet());
      assertEquals(false, jScrollPane0.isDisplayable());
      assertEquals(true, jScrollPane0.isBackgroundSet());
      assertEquals(true, jScrollPane0.isFontSet());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jScrollPane0.isEnabled());
      assertEquals(3, jScrollPane0.getComponentCount());
      assertEquals(true, jScrollPane0.isForegroundSet());
      assertEquals(false, jScrollPane0.isValid());
      assertEquals(false, jScrollPane0.isMaximumSizeSet());
      assertEquals(false, jScrollPane0.isPreferredSizeSet());
      assertEquals(3, jScrollPane0.countComponents());
      assertEquals(false, jScrollPane0.isLightweight());
      assertEquals(false, jScrollPane0.isCursorSet());
      assertEquals(true, jScrollPane0.isVisible());
      assertEquals(false, jScrollPane0.isShowing());
      assertEquals(false, jScrollPane0.getIgnoreRepaint());
      assertEquals(false, jScrollPane0.isFocusCycleRoot());
      assertEquals(true, jScrollPane0.getFocusTraversalKeysEnabled());
      assertEquals("sun.java2d.SunGraphics2D[font=java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10],color=java.awt.Color[r=255,g=255,b=255]]", sunGraphics2D0.toString());
      assertSame(axisSpace1, axisSpace2);
      assertSame(axisSpace2, axisSpace1);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(1, sunGraphics2D0.antialiasHint);
  }

  @Test
  public void test011()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      
      int int0 = 1491;
      String string0 = "SQ/VS";
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation(string0, (Comparable) string0, (double) int0);
      assertNotNull(categoryTextAnnotation0);
      assertEquals(0.0, categoryTextAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(1491.0, categoryTextAnnotation0.getValue(), 0.01D);
      assertEquals("SQ/VS", categoryTextAnnotation0.getText());
      
      boolean boolean0 = combinedRangeCategoryPlot0.removeAnnotation((CategoryAnnotation) categoryTextAnnotation0);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, categoryTextAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(1491.0, categoryTextAnnotation0.getValue(), 0.01D);
      assertEquals("SQ/VS", categoryTextAnnotation0.getText());
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      double double0 = (-4585.9489519);
      double double1 = Line2D.ptLineDistSq(double0, double0, double0, double0, double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double1, 0.01D);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      
      String string0 = "?00%U{0+j&ZMFt`";
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation(string0, (Comparable) double1, double1);
      assertNotNull(categoryTextAnnotation0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals("?00%U{0+j&ZMFt`", categoryTextAnnotation0.getText());
      assertEquals(0.0, categoryTextAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(Double.NaN, categoryTextAnnotation0.getValue(), 0.01D);
      
      combinedDomainCategoryPlot0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("?00%U{0+j&ZMFt`", categoryTextAnnotation0.getText());
      assertEquals(0.0, categoryTextAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(Double.NaN, categoryTextAnnotation0.getValue(), 0.01D);
  }

  @Test
  public void test013()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      
      Color color0 = (Color)PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT;
      assertNotNull(color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=192]", color0.toString());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(-64, color0.getRGB());
      
      combinedDomainCategoryPlot0.setRangeCrosshairPaint((Paint) color0);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=192]", color0.toString());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(-64, color0.getRGB());
  }

  @Test
  public void test014()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeCategoryPlot0.getRangeGridlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      
      combinedRangeCategoryPlot0.setRangeCrosshairStroke((Stroke) basicStroke0);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
  }

  @Test
  public void test015()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      
      boolean boolean0 = combinedDomainCategoryPlot0.isRangeCrosshairVisible();
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(boolean0);
      
      String string0 = "S[ZMZrgtnl[dPw0Sq";
      PeriodAxis periodAxis0 = new PeriodAxis(string0);
      assertNotNull(periodAxis0);
      assertEquals("S[ZMZrgtnl[dPw0Sq", periodAxis0.getLabel());
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelToolTip());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) periodAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals("S[ZMZrgtnl[dPw0Sq", periodAxis0.getLabel());
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelToolTip());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      
      combinedRangeCategoryPlot0.setRangeCrosshairLockedOnData(boolean0);
      assertEquals("S[ZMZrgtnl[dPw0Sq", periodAxis0.getLabel());
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelToolTip());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
  }

  @Test
  public void test016()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertNotNull(categoryPlot0);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      
      boolean boolean0 = true;
      categoryPlot0.setRangeCrosshairLockedOnData(boolean0);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertNull(categoryPlot0.getNoDataMessage());
  }

  @Test
  public void test017()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      
      boolean boolean0 = combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData();
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertTrue(boolean0);
      
      combinedDomainCategoryPlot0.setRangeCrosshairVisible(boolean0);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
  }

  //@Test
  public void test018()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      CategoryAxis categoryAxis0 = null;
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      
      combinedDomainCategoryPlot0.setRangeCrosshairVisible(boolean0);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
  }

  @Test
  public void test019()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      
      int int0 = (-2244);
      Layer layer0 = null;
      Collection collection0 = combinedRangeCategoryPlot0.getRangeMarkers(int0, layer0);
      assertNull(collection0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test020()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertNotNull(categoryPlot0);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      
      int int0 = 2738;
      Layer layer0 = Layer.FOREGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      Collection collection0 = categoryPlot0.getRangeMarkers(int0, layer0);
      assertNull(collection0);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals("Layer.FOREGROUND", layer0.toString());
  }

  @Test
  public void test021()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      
      double double0 = 748.508;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(double0, double0, double0, double0);
      assertNotNull(rectangle2D_Double0);
      assertEquals(1122.7620000000002, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(1497.016, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(1497.016, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(1122.7620000000002, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(748.508, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(748.508, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(748.508, rectangle2D_Double0.height, 0.01D);
      assertEquals(748.508, rectangle2D_Double0.width, 0.01D);
      assertEquals(748.508, rectangle2D_Double0.y, 0.01D);
      assertEquals(748.508, rectangle2D_Double0.x, 0.01D);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(double0, rectangle2D_Double0.height);
      assertNotNull(intervalMarker0);
      assertEquals(1122.7620000000002, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(1497.016, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(1497.016, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(1122.7620000000002, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(748.508, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(748.508, rectangle2D_Double0.getMinX(), 0.01D);
      assertNull(intervalMarker0.getLabel());
      assertEquals(748.508, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(748.508, intervalMarker0.getEndValue(), 0.01D);
      assertEquals(748.508, rectangle2D_Double0.height, 0.01D);
      assertEquals(748.508, rectangle2D_Double0.width, 0.01D);
      assertEquals(748.508, rectangle2D_Double0.y, 0.01D);
      assertEquals(748.508, rectangle2D_Double0.x, 0.01D);
      
      Layer layer0 = Layer.FOREGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      combinedRangeCategoryPlot0.addRangeMarker((Marker) intervalMarker0, layer0);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1122.7620000000002, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(1497.016, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(1497.016, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(1122.7620000000002, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(748.508, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(748.508, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNull(intervalMarker0.getLabel());
      assertEquals(748.508, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(748.508, intervalMarker0.getEndValue(), 0.01D);
      assertEquals(748.508, rectangle2D_Double0.height, 0.01D);
      assertEquals(748.508, rectangle2D_Double0.width, 0.01D);
      assertEquals(748.508, rectangle2D_Double0.y, 0.01D);
      assertEquals(748.508, rectangle2D_Double0.x, 0.01D);
      
      combinedRangeCategoryPlot0.clearRangeMarkers();
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test022()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      
      combinedDomainCategoryPlot0.clearRangeMarkers();
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
  }

  @Test
  public void test023()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      
      int int0 = 724;
      combinedDomainCategoryPlot0.clearDomainMarkers(int0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
  }

  @Test
  public void test024()  throws Throwable  {
      int int0 = 2;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      Collection collection0 = combinedRangeCategoryPlot0.getDomainMarkers(int0, layer0);
      assertNull(collection0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
  }

  @Test
  public void test025()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      
      Layer layer0 = null;
      int int0 = combinedRangeCategoryPlot0.getRangeAxisCount();
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, int0);
      
      Collection collection0 = combinedRangeCategoryPlot0.getDomainMarkers(int0, layer0);
      assertNull(collection0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
  }

  @Test
  public void test026()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      
      combinedDomainCategoryPlot0.clearDomainMarkers();
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test027()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      
      int int0 = 724;
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainCategoryPlot0.getRangeGridlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      
      Color color0 = (Color)Axis.DEFAULT_AXIS_LABEL_PAINT;
      assertNotNull(color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) int0, (Paint) color0, (Stroke) basicStroke0);
      assertNotNull(categoryMarker0);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      combinedDomainCategoryPlot0.addDomainMarker(categoryMarker0, layer0);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
  }

  @Test
  public void test028()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertNotNull(thermometerPlot0);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      
      combinedDomainCategoryPlot0.setParent((Plot) thermometerPlot0);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      assertNotNull(stackedBarRenderer3D0);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, stackedBarRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent((Object) stackedBarRenderer3D0);
      assertNotNull(rendererChangeEvent0);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, stackedBarRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      
      // Undeclared exception!
      try {
        combinedDomainCategoryPlot0.rendererChanged(rendererChangeEvent0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The renderer has changed and I don't know what to do!
         //
      }
  }

  @Test
  public void test029()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      
      NumberAxis numberAxis0 = (NumberAxis)combinedRangeCategoryPlot0.getRangeAxis();
      assertNotNull(numberAxis0);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent((Object) numberAxis0);
      assertNotNull(rendererChangeEvent0);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      
      combinedRangeCategoryPlot0.rendererChanged(rendererChangeEvent0);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
  }

  @Test
  public void test030()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      
      int int0 = 352;
      combinedRangeCategoryPlot0.add((CategoryPlot) combinedDomainCategoryPlot0, int0);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(352, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      
      CategoryDataset categoryDataset0 = combinedRangeCategoryPlot0.getDataset();
      assertNull(categoryDataset0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      
      combinedDomainCategoryPlot0.setDataset(categoryDataset0);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(352, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
  }

  @Test
  public void test031()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      
      double double0 = 614.01149;
      combinedRangeCategoryPlot0.zoom(double0);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test032()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      
      int int0 = (-2244);
      combinedRangeCategoryPlot0.zoom((double) int0);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
  }

  @Test
  public void test033()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      
      int int0 = 0;
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertNotNull(ganttRenderer0);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      
      Color color0 = (Color)ganttRenderer0.getItemOutlinePaint(int0, int0);
      assertNotNull(color0);
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      
      combinedDomainCategoryPlot0.setRangeGridlinePaint((Paint) color0);
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
  }

  @Test
  public void test034()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      
      BasicStroke basicStroke0 = (BasicStroke)Axis.DEFAULT_AXIS_LINE_STROKE;
      assertNotNull(basicStroke0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      
      combinedDomainCategoryPlot0.setRangeGridlineStroke((Stroke) basicStroke0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
  }

  @Test
  public void test035()  throws Throwable  {
      String string0 = "SasSrif";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertNotNull(dateAxis0);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isInverted());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals("SasSrif", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) dateAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isInverted());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals("SasSrif", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      
      boolean boolean0 = false;
      combinedRangeCategoryPlot0.setRangeGridlinesVisible(boolean0);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isInverted());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals("SasSrif", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
  }

  @Test
  public void test036()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      
      boolean boolean0 = true;
      combinedRangeCategoryPlot0.setRangeGridlinesVisible(boolean0);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
  }

  @Test
  public void test037()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      
      DateAxis dateAxis0 = new DateAxis();
      assertNotNull(dateAxis0);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      
      int int0 = combinedRangeCategoryPlot0.getRangeAxisIndex((ValueAxis) dateAxis0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals((-1), int0);
      
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      assertNotNull(yIntervalRenderer0);
      assertEquals(true, yIntervalRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, yIntervalRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, yIntervalRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, yIntervalRenderer0.getBaseCreateEntities());
      assertEquals(true, yIntervalRenderer0.getBaseSeriesVisible());
      assertEquals(1, yIntervalRenderer0.getPassCount());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, yIntervalRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, yIntervalRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, yIntervalRenderer0.getDefaultEntityRadius());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesFillPaint());
      
      Paint paint0 = yIntervalRenderer0.getSeriesOutlinePaint(int0);
      assertNull(paint0);
      assertEquals(true, yIntervalRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, yIntervalRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, yIntervalRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, yIntervalRenderer0.getBaseCreateEntities());
      assertEquals(true, yIntervalRenderer0.getBaseSeriesVisible());
      assertEquals(1, yIntervalRenderer0.getPassCount());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, yIntervalRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, yIntervalRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, yIntervalRenderer0.getDefaultEntityRadius());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      
      // Undeclared exception!
      try {
        combinedRangeCategoryPlot0.setDomainGridlinePaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test038()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      
      Color color0 = (Color)Plot.DEFAULT_BACKGROUND_PAINT;
      assertNotNull(color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(-4144960, color0.getRGB());
      assertEquals(192, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=192,g=192,b=192]", color0.toString());
      assertEquals(192, color0.getGreen());
      assertEquals(192, color0.getBlue());
      
      combinedRangeCategoryPlot0.setDomainGridlinePaint((Paint) color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(-4144960, color0.getRGB());
      assertEquals(192, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=192,g=192,b=192]", color0.toString());
      assertEquals(192, color0.getGreen());
      assertEquals(192, color0.getBlue());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
  }

  @Test
  public void test039()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      
      String string0 = "";
      boolean boolean0 = true;
      JCheckBox jCheckBox0 = new JCheckBox(string0, boolean0);
      assertNotNull(jCheckBox0);
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      
      Rectangle rectangle0 = jCheckBox0.getVisibleRect();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      assertNotNull(stackedXYBarRenderer0);
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedXYBarRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, stackedXYBarRenderer0.getPassCount());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01D);
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(false, stackedXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedXYBarRenderer0.getUseYInterval());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisibleInLegend());
      
      BasicStroke basicStroke0 = (BasicStroke)stackedXYBarRenderer0.lookupSeriesOutlineStroke(rectangle0.height);
      assertNotNull(basicStroke0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedXYBarRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, stackedXYBarRenderer0.getPassCount());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01D);
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(false, stackedXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedXYBarRenderer0.getUseYInterval());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      
      combinedDomainCategoryPlot0.setDomainGridlineStroke((Stroke) basicStroke0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedXYBarRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, stackedXYBarRenderer0.getPassCount());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01D);
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(false, stackedXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedXYBarRenderer0.getUseYInterval());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
  }

  @Test
  public void test040()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      
      CategoryAnchor categoryAnchor0 = combinedDomainCategoryPlot0.getDomainGridlinePosition();
      assertNotNull(categoryAnchor0);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("CategoryAnchor.MIDDLE", categoryAnchor0.toString());
      
      combinedDomainCategoryPlot0.setDomainGridlinePosition(categoryAnchor0);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("CategoryAnchor.MIDDLE", categoryAnchor0.toString());
  }

  @Test
  public void test041()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      
      boolean boolean0 = combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData();
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertTrue(boolean0);
      
      combinedDomainCategoryPlot0.setDomainGridlinesVisible(boolean0);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
  }

  @Test
  public void test042()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      
      boolean boolean0 = combinedDomainCategoryPlot0.isRangeCrosshairVisible();
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(boolean0);
      
      combinedDomainCategoryPlot0.setDomainGridlinesVisible(boolean0);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
  }

  @Test
  public void test043()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      
      SortOrder sortOrder0 = combinedDomainCategoryPlot0.getColumnRenderingOrder();
      assertNotNull(sortOrder0);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      
      combinedDomainCategoryPlot0.setRowRenderingOrder(sortOrder0);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
  }

  @Test
  public void test044()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      
      SortOrder sortOrder0 = combinedRangeCategoryPlot0.getRowRenderingOrder();
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      
      combinedRangeCategoryPlot0.setColumnRenderingOrder(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
  }

  @Test
  public void test045()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      
      DatasetRenderingOrder datasetRenderingOrder0 = combinedDomainXYPlot0.getDatasetRenderingOrder();
      assertNotNull(datasetRenderingOrder0);
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      
      combinedDomainCategoryPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test046()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      
      CategoryItemRenderer categoryItemRenderer0 = combinedRangeCategoryPlot0.getRendererForDataset((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNull(categoryItemRenderer0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test047()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      
      CategoryAxis categoryAxis0 = combinedRangeCategoryPlot0.getDomainAxis();
      assertNull(categoryAxis0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      
      CategoryItemRenderer[] categoryItemRendererArray0 = new CategoryItemRenderer[10];
      combinedDomainCategoryPlot0.setRenderers(categoryItemRendererArray0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
  }

  @Test
  public void test048()  throws Throwable  {
      String string0 = "SasSrif";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertNotNull(dateAxis0);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals("SasSrif", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertNull(dateAxis0.getLabelURL());
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) dateAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals("SasSrif", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertNull(dateAxis0.getLabelURL());
      
      int int0 = 483;
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertNotNull(levelRenderer0);
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(0, levelRenderer0.getRowCount());
      
      combinedRangeCategoryPlot0.setRenderer((CategoryItemRenderer) levelRenderer0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals("SasSrif", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertNull(dateAxis0.getLabelURL());
      
      boolean boolean0 = dateAxis0.isHiddenValue((long) int0);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals("SasSrif", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertNull(dateAxis0.getLabelURL());
      assertFalse(boolean0);
      
      combinedRangeCategoryPlot0.setRenderer((CategoryItemRenderer) levelRenderer0, boolean0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals("SasSrif", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertNull(dateAxis0.getLabelURL());
  }

  //@Test
  public void test049()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertNotNull(categoryPlot0);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      
      int int0 = 1;
      Graphics2D graphics2D0 = null;
      String string0 = "zq9sLSNZ'K";
      JRadioButton jRadioButton0 = new JRadioButton(string0);
      assertNotNull(jRadioButton0);
      assertEquals(true, jRadioButton0.isFontSet());
      assertEquals(false, jRadioButton0.isCursorSet());
      assertEquals(true, jRadioButton0.isBackgroundSet());
      assertEquals(0, jRadioButton0.getComponentCount());
      assertEquals(false, jRadioButton0.isFocusTraversalPolicySet());
      assertEquals(false, jRadioButton0.isShowing());
      assertEquals(false, jRadioButton0.isPreferredSizeSet());
      assertEquals(false, jRadioButton0.isValid());
      assertEquals(true, jRadioButton0.isVisible());
      assertEquals(true, jRadioButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jRadioButton0.isMaximumSizeSet());
      assertEquals(false, jRadioButton0.isLightweight());
      assertEquals(false, jRadioButton0.isFocusCycleRoot());
      assertEquals(true, jRadioButton0.isEnabled());
      assertEquals(false, jRadioButton0.isFocusTraversalPolicyProvider());
      assertEquals(0, jRadioButton0.countComponents());
      assertEquals(false, jRadioButton0.getIgnoreRepaint());
      assertEquals(false, jRadioButton0.isDisplayable());
      assertEquals(false, jRadioButton0.isMinimumSizeSet());
      assertEquals(true, jRadioButton0.isForegroundSet());
      
      Rectangle rectangle0 = jRadioButton0.bounds();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, jRadioButton0.isFontSet());
      assertEquals(false, jRadioButton0.isCursorSet());
      assertEquals(true, jRadioButton0.isBackgroundSet());
      assertEquals(0, jRadioButton0.getComponentCount());
      assertEquals(false, jRadioButton0.isFocusTraversalPolicySet());
      assertEquals(false, jRadioButton0.isShowing());
      assertEquals(false, jRadioButton0.isPreferredSizeSet());
      assertEquals(false, jRadioButton0.isValid());
      assertEquals(true, jRadioButton0.isVisible());
      assertEquals(true, jRadioButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jRadioButton0.isMaximumSizeSet());
      assertEquals(false, jRadioButton0.isLightweight());
      assertEquals(false, jRadioButton0.isFocusCycleRoot());
      assertEquals(true, jRadioButton0.isEnabled());
      assertEquals(false, jRadioButton0.isFocusTraversalPolicyProvider());
      assertEquals(0, jRadioButton0.countComponents());
      assertEquals(false, jRadioButton0.getIgnoreRepaint());
      assertEquals(false, jRadioButton0.isDisplayable());
      assertEquals(false, jRadioButton0.isMinimumSizeSet());
      assertEquals(true, jRadioButton0.isForegroundSet());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      categoryPlot0.drawRangeMarkers(graphics2D0, rectangle0, int0, layer0);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(true, jRadioButton0.isFontSet());
      assertEquals(false, jRadioButton0.isCursorSet());
      assertEquals(true, jRadioButton0.isBackgroundSet());
      assertEquals(0, jRadioButton0.getComponentCount());
      assertEquals(false, jRadioButton0.isFocusTraversalPolicySet());
      assertEquals(false, jRadioButton0.isShowing());
      assertEquals(false, jRadioButton0.isPreferredSizeSet());
      assertEquals(false, jRadioButton0.isValid());
      assertEquals(true, jRadioButton0.isVisible());
      assertEquals(true, jRadioButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jRadioButton0.isMaximumSizeSet());
      assertEquals(false, jRadioButton0.isLightweight());
      assertEquals(false, jRadioButton0.isFocusCycleRoot());
      assertEquals(true, jRadioButton0.isEnabled());
      assertEquals(false, jRadioButton0.isFocusTraversalPolicyProvider());
      assertEquals(0, jRadioButton0.countComponents());
      assertEquals(false, jRadioButton0.getIgnoreRepaint());
      assertEquals(false, jRadioButton0.isDisplayable());
      assertEquals(false, jRadioButton0.isMinimumSizeSet());
      assertEquals(true, jRadioButton0.isForegroundSet());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
  }

  @Test
  public void test050()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      
      int int0 = 0;
      NumberAxis numberAxis0 = (NumberAxis)combinedRangeCategoryPlot0.getRangeAxisForDataset(int0);
      assertNotNull(numberAxis0);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
  }

  @Test
  public void test051()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      
      int int0 = 3;
      NumberAxis numberAxis0 = (NumberAxis)combinedRangeCategoryPlot0.getRangeAxisForDataset(int0);
      assertNotNull(numberAxis0);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test052()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource0 = new DefaultTableCellRenderer.UIResource();
      assertNotNull(defaultTableCellRenderer_UIResource0);
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      
      Rectangle rectangle0 = defaultTableCellRenderer_UIResource0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      
      CategoryAxis categoryAxis0 = combinedRangeCategoryPlot0.getDomainAxis();
      assertNull(categoryAxis0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      
      CategoryAxis categoryAxis1 = combinedDomainCategoryPlot0.getDomainAxisForDataset(rectangle0.y);
      assertNull(categoryAxis1);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
  }

  @Test
  public void test053()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      
      int int0 = 0;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      combinedDomainCategoryPlot0.setDataset(int0, (CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
  }

  @Test
  public void test054()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      
      combinedRangeCategoryPlot0.clearRangeAxes();
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test
  public void test055()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      
      combinedDomainCategoryPlot0.clearRangeAxes();
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
  }

  @Test
  public void test056()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      
      int int0 = 1;
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getRangeAxisLocation(int0);
      assertNotNull(axisLocation0);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
  }

  @Test
  public void test057()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      
      NumberAxis numberAxis0 = (NumberAxis)combinedRangeCategoryPlot0.getRangeAxis();
      assertNotNull(numberAxis0);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      
      int int0 = combinedRangeCategoryPlot0.getRangeAxisIndex((ValueAxis) numberAxis0);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, int0);
  }

  @Test
  public void test058()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      combinedDomainCategoryPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
  }

  @Test
  public void test059()  throws Throwable  {
      CategoryAxis categoryAxis0 = null;
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertNotNull(combinedDomainCategoryPlot0);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      
      int int0 = combinedDomainCategoryPlot0.getDomainAxisCount();
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1, int0);
      
      ValueAxis valueAxis0 = combinedDomainCategoryPlot0.getRangeAxis(int0);
      assertNull(valueAxis0);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
  }

  @Test
  public void test060()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      
      combinedDomainCategoryPlot0.clearDomainAxes();
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
  }

  @Test
  public void test061()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertNotNull(categoryPlot0);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      
      int int0 = 1;
      RectangleEdge rectangleEdge0 = categoryPlot0.getDomainAxisEdge(int0);
      assertNotNull(rectangleEdge0);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
  }

  @Test
  public void test062()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      
      CategoryAxis categoryAxis0 = combinedRangeCategoryPlot0.getDomainAxis();
      assertNull(categoryAxis0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      
      // Undeclared exception!
      try {
        int int0 = combinedDomainCategoryPlot0.getDomainAxisIndex(categoryAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'axis' argument.
         //
      }
  }

  @Test
  public void test063()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      
      String string0 = ",s>jr1Mj";
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(string0);
      assertNotNull(categoryAxis3D0);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(",s>jr1Mj", categoryAxis3D0.getLabel());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      
      int int0 = combinedDomainCategoryPlot0.getDomainAxisIndex((CategoryAxis) categoryAxis3D0);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(",s>jr1Mj", categoryAxis3D0.getLabel());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals((-1), int0);
  }

  @Test
  public void test064()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      
      CategoryAxis[] categoryAxisArray0 = new CategoryAxis[14];
      combinedRangeCategoryPlot0.setDomainAxes(categoryAxisArray0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test065()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = (CombinedDomainCategoryPlot)combinedDomainCategoryPlot0.clone();
      assertNotNull(combinedDomainCategoryPlot1);
      assertTrue(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot1));
      assertTrue(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot1.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot1.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot1.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot1.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot1.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot1.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot1.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot1.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot1.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot1.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot1.getDrawSharedDomainAxis());
      assertEquals(15, combinedDomainCategoryPlot1.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot1.getWeight());
      assertNotSame(combinedDomainCategoryPlot0, combinedDomainCategoryPlot1);
      assertNotSame(combinedDomainCategoryPlot1, combinedDomainCategoryPlot0);
  }

  @Test
  public void test066()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      
      CategoryAxis categoryAxis0 = combinedDomainCategoryPlot0.getDomainAxis();
      assertNotNull(categoryAxis0);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
  }

  @Test
  public void test067()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertNotNull(categoryAxis3D0);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      assertNotNull(combinedDomainCategoryPlot0);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      
      int int0 = 1;
      CategoryAxis categoryAxis0 = combinedDomainCategoryPlot0.getDomainAxis(int0);
      assertNull(categoryAxis0);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test
  public void test068()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      
      String string0 = ":";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertNotNull(logarithmicAxis0);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(":", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      
      RectangleInsets rectangleInsets0 = logarithmicAxis0.getLabelInsets();
      assertNotNull(rectangleInsets0);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(":", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      
      combinedDomainCategoryPlot0.setAxisOffset(rectangleInsets0);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(":", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
  }

  @Test
  public void test069()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertNotNull(categoryPlot0);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      
      double double0 = 4.0;
      categoryPlot0.setAnchorValue(double0);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(4.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
  }

  @Test
  public void test070()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainCategoryPlot0.getDomainGridlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
  }

  @Test
  public void test071()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      
      AxisSpace axisSpace0 = new AxisSpace();
      assertNotNull(axisSpace0);
      assertEquals(0.0, axisSpace0.getTop(), 0.01D);
      assertEquals(0.0, axisSpace0.getRight(), 0.01D);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01D);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01D);
      
      combinedRangeCategoryPlot0.setFixedDomainAxisSpace(axisSpace0);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, axisSpace0.getTop(), 0.01D);
      assertEquals(0.0, axisSpace0.getRight(), 0.01D);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01D);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01D);
  }

  @Test
  public void test072()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainCategoryPlot0.getRangeCrosshairStroke();
      assertNotNull(basicStroke0);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
  }

  @Test
  public void test073()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      
      double double0 = 748.508;
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeCategoryPlot0.getRangeGridlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      
      int int0 = 975;
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      assertNotNull(xYBubbleRenderer0);
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYBubbleRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertEquals(true, xYBubbleRenderer0.getBaseCreateEntities());
      assertEquals(false, xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01D);
      
      Color color0 = (Color)xYBubbleRenderer0.getItemFillPaint(int0, int0);
      assertNotNull(color0);
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYBubbleRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertEquals(true, xYBubbleRenderer0.getBaseCreateEntities());
      assertEquals(false, xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getGreen());
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) double0, (Paint) color0, (Stroke) basicStroke0);
      assertNotNull(categoryMarker0);
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYBubbleRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertEquals(true, xYBubbleRenderer0.getBaseCreateEntities());
      assertEquals(false, xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      
      combinedRangeCategoryPlot0.addRangeMarker((Marker) categoryMarker0);
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYBubbleRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertEquals(true, xYBubbleRenderer0.getBaseCreateEntities());
      assertEquals(false, xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
  }

  @Test
  public void test074()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      
      int int0 = combinedDomainCategoryPlot0.getDatasetCount();
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1, int0);
  }

  @Test
  public void test075()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertNotNull(categoryPlot0);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, categoryPlot0.getWeight());
      
      int int0 = 1;
      AxisLocation axisLocation0 = null;
      categoryPlot0.setRangeAxisLocation(int0, axisLocation0);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, categoryPlot0.getWeight());
  }

  @Test
  public void test076()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      
      int int0 = 1491;
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      assertNotNull(axisLocation0);
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      
      combinedRangeCategoryPlot0.setDomainAxisLocation(int0, axisLocation0);
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
  }

  @Test
  public void test077()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      
      CategoryAxis categoryAxis0 = combinedRangeCategoryPlot0.getDomainAxis();
      assertNull(categoryAxis0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      assertNotNull(lineAndShapeRenderer0);
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesVisible());
      
      int int0 = combinedDomainCategoryPlot0.getIndexOf((CategoryItemRenderer) lineAndShapeRenderer0);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals((-1), int0);
  }

  @Test
  public void test078()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      
      CategoryItemRenderer categoryItemRenderer0 = combinedRangeCategoryPlot0.getRenderer();
      assertNull(categoryItemRenderer0);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
  }

  @Test
  public void test079()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertNotNull(categoryAxis0);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      
      combinedDomainCategoryPlot0.setDomainAxis(categoryAxis0);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
  }

  @Test
  public void test080()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      
      Graphics2D graphics2D0 = null;
      String string0 = "";
      JCheckBox jCheckBox0 = new JCheckBox(string0);
      assertNotNull(jCheckBox0);
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      
      Icon icon0 = jCheckBox0.getIcon();
      assertNull(icon0);
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      
      JLabel jLabel0 = new JLabel(icon0);
      assertNotNull(jLabel0);
      assertEquals(true, jLabel0.getFocusTraversalKeysEnabled());
      assertEquals(0, jLabel0.getComponentCount());
      assertEquals(false, jLabel0.isLightweight());
      assertEquals(true, jLabel0.isFontSet());
      assertEquals(true, jLabel0.isBackgroundSet());
      assertEquals(false, jLabel0.isFocusTraversalPolicyProvider());
      assertEquals(true, jLabel0.isForegroundSet());
      assertEquals(false, jLabel0.getIgnoreRepaint());
      assertEquals(true, jLabel0.isEnabled());
      assertEquals(false, jLabel0.isFocusTraversalPolicySet());
      assertEquals(false, jLabel0.isFocusCycleRoot());
      assertEquals(false, jLabel0.isValid());
      assertEquals(false, jLabel0.isPreferredSizeSet());
      assertEquals(0, jLabel0.countComponents());
      assertEquals(false, jLabel0.isShowing());
      assertEquals(false, jLabel0.isMaximumSizeSet());
      assertEquals(false, jLabel0.isMinimumSizeSet());
      assertEquals(true, jLabel0.isVisible());
      assertEquals(false, jLabel0.isDisplayable());
      assertEquals(false, jLabel0.isCursorSet());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      
      Rectangle rectangle0 = jLabel0.getVisibleRect();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, jLabel0.getFocusTraversalKeysEnabled());
      assertEquals(0, jLabel0.getComponentCount());
      assertEquals(false, jLabel0.isLightweight());
      assertEquals(true, jLabel0.isFontSet());
      assertEquals(true, jLabel0.isBackgroundSet());
      assertEquals(false, jLabel0.isFocusTraversalPolicyProvider());
      assertEquals(true, jLabel0.isForegroundSet());
      assertEquals(false, jLabel0.getIgnoreRepaint());
      assertEquals(true, jLabel0.isEnabled());
      assertEquals(false, jLabel0.isFocusTraversalPolicySet());
      assertEquals(false, jLabel0.isFocusCycleRoot());
      assertEquals(false, jLabel0.isValid());
      assertEquals(false, jLabel0.isPreferredSizeSet());
      assertEquals(0, jLabel0.countComponents());
      assertEquals(false, jLabel0.isShowing());
      assertEquals(false, jLabel0.isMaximumSizeSet());
      assertEquals(false, jLabel0.isMinimumSizeSet());
      assertEquals(true, jLabel0.isVisible());
      assertEquals(false, jLabel0.isDisplayable());
      assertEquals(false, jLabel0.isCursorSet());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      
      combinedDomainCategoryPlot0.drawDomainGridlines(graphics2D0, rectangle0);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, jLabel0.getFocusTraversalKeysEnabled());
      assertEquals(0, jLabel0.getComponentCount());
      assertEquals(false, jLabel0.isLightweight());
      assertEquals(true, jLabel0.isFontSet());
      assertEquals(true, jLabel0.isBackgroundSet());
      assertEquals(false, jLabel0.isFocusTraversalPolicyProvider());
      assertEquals(true, jLabel0.isForegroundSet());
      assertEquals(false, jLabel0.getIgnoreRepaint());
      assertEquals(true, jLabel0.isEnabled());
      assertEquals(false, jLabel0.isFocusTraversalPolicySet());
      assertEquals(false, jLabel0.isFocusCycleRoot());
      assertEquals(false, jLabel0.isValid());
      assertEquals(false, jLabel0.isPreferredSizeSet());
      assertEquals(0, jLabel0.countComponents());
      assertEquals(false, jLabel0.isShowing());
      assertEquals(false, jLabel0.isMaximumSizeSet());
      assertEquals(false, jLabel0.isMinimumSizeSet());
      assertEquals(true, jLabel0.isVisible());
      assertEquals(false, jLabel0.isDisplayable());
      assertEquals(false, jLabel0.isCursorSet());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
  }

  @Test
  public void test081()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      
      CategoryAxis categoryAxis0 = combinedRangeCategoryPlot0.getDomainAxis();
      assertNull(categoryAxis0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      
      RectangleEdge rectangleEdge0 = combinedDomainCategoryPlot0.getDomainAxisEdge();
      assertNotNull(rectangleEdge0);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
  }

  @Test
  public void test082()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      
      CategoryAxis categoryAxis0 = combinedRangeCategoryPlot0.getDomainAxis();
      assertNull(categoryAxis0);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      
      Color color0 = (Color)combinedDomainCategoryPlot0.getDomainGridlinePaint();
      assertNotNull(color0);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(255, color0.getBlue());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getGreen());
      assertEquals(-1, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
  }

  @Test
  public void test083()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      
      CategoryAxis categoryAxis0 = combinedRangeCategoryPlot0.getDomainAxis();
      assertNull(categoryAxis0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      
      combinedDomainCategoryPlot0.clearAnnotations();
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
  }

  @Test
  public void test084()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      
      boolean boolean0 = false;
      combinedDomainCategoryPlot0.setDrawSharedDomainAxis(boolean0);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
  }

  @Test
  public void test085()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      
      int int0 = 488;
      boolean boolean0 = true;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(boolean0);
      assertNotNull(stackedAreaRenderer0);
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      
      combinedDomainCategoryPlot0.setRenderer(int0, (CategoryItemRenderer) stackedAreaRenderer0);
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
  }

  @Test
  public void test086()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getDomainAxisLocation();
      assertNotNull(axisLocation0);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      
      combinedDomainCategoryPlot0.setDomainAxisLocation(axisLocation0);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
  }

  @Test
  public void test087()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertNotNull(scatterRenderer0);
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      
      int int0 = 2;
      boolean boolean0 = scatterRenderer0.getAutoPopulateSeriesOutlineStroke();
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertFalse(boolean0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedRangeCategoryPlot0);
      assertNotNull(jFreeChart0);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(false, jFreeChart0.isBorderVisible());
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, boolean0, boolean0, boolean0, boolean0, boolean0);
      assertNotNull(chartPanel0);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(true, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(false, jFreeChart0.isBorderVisible());
      
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(true, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(false, jFreeChart0.isBorderVisible());
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(true, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(false, jFreeChart0.isBorderVisible());
      
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      assertNotNull(defaultStyledDocument0);
      
      JTextPane jTextPane0 = new JTextPane((StyledDocument) defaultStyledDocument0);
      assertNotNull(jTextPane0);
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(false, jTextPane0.isValid());
      
      MouseEvent mouseEvent0 = new MouseEvent((Component) jTextPane0, int0, (long) int0, int0, int0, int0, int0, boolean0, int0);
      assertNotNull(mouseEvent0);
      assertEquals(2, mouseEvent0.getButton());
      assertEquals(2L, mouseEvent0.getWhen());
      assertEquals(false, mouseEvent0.isAltGraphDown());
      assertEquals(false, mouseEvent0.isShiftDown());
      assertEquals(2, mouseEvent0.getY());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals(true, mouseEvent0.isControlDown());
      assertEquals(2, mouseEvent0.getX());
      assertEquals(false, mouseEvent0.isConsumed());
      assertEquals(false, mouseEvent0.isPopupTrigger());
      assertEquals(2, mouseEvent0.getModifiers());
      assertEquals(2, mouseEvent0.getClickCount());
      assertEquals(2, mouseEvent0.getID());
      assertEquals(false, mouseEvent0.isAltDown());
      assertEquals(false, mouseEvent0.isMetaDown());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      
      Point point0 = jTextPane0.getPopupLocation(mouseEvent0);
      assertNull(point0);
      assertEquals(2, mouseEvent0.getButton());
      assertEquals(2L, mouseEvent0.getWhen());
      assertEquals(false, mouseEvent0.isAltGraphDown());
      assertEquals(false, mouseEvent0.isShiftDown());
      assertEquals(2, mouseEvent0.getY());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals(true, mouseEvent0.isControlDown());
      assertEquals(2, mouseEvent0.getX());
      assertEquals(false, mouseEvent0.isConsumed());
      assertEquals(false, mouseEvent0.isPopupTrigger());
      assertEquals(2, mouseEvent0.getModifiers());
      assertEquals(2, mouseEvent0.getClickCount());
      assertEquals(2, mouseEvent0.getID());
      assertEquals(false, mouseEvent0.isAltDown());
      assertEquals(false, mouseEvent0.isMetaDown());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      
      combinedRangeCategoryPlot0.zoomRangeAxes((double) int0, plotRenderingInfo0, (Point2D) point0);
      assertEquals(2, mouseEvent0.getButton());
      assertEquals(2L, mouseEvent0.getWhen());
      assertEquals(false, mouseEvent0.isAltGraphDown());
      assertEquals(false, mouseEvent0.isShiftDown());
      assertEquals(2, mouseEvent0.getY());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals(true, mouseEvent0.isControlDown());
      assertEquals(2, mouseEvent0.getX());
      assertEquals(false, mouseEvent0.isConsumed());
      assertEquals(false, mouseEvent0.isPopupTrigger());
      assertEquals(2, mouseEvent0.getModifiers());
      assertEquals(2, mouseEvent0.getClickCount());
      assertEquals(2, mouseEvent0.getID());
      assertEquals(false, mouseEvent0.isAltDown());
      assertEquals(false, mouseEvent0.isMetaDown());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(true, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(true, chartPanel0.getRefreshBuffer());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(false, jFreeChart0.isBorderVisible());
  }

  @Test
  public void test088()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      
      String string0 = combinedRangeCategoryPlot0.getPlotType();
      assertNotNull(string0);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Category Plot", string0);
  }

  @Test
  public void test089()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertNotNull(categoryPlot0);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      
      int int0 = 1;
      CategoryDataset categoryDataset0 = categoryPlot0.getDataset(int0);
      assertNull(categoryDataset0);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      
      CategoryItemRenderer categoryItemRenderer0 = categoryPlot0.getRendererForDataset(categoryDataset0);
      assertNull(categoryItemRenderer0);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      
      categoryPlot0.setRenderer(categoryItemRenderer0);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test
  public void test090()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      
      int int0 = combinedDomainCategoryPlot0.getWeight();
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, int0);
  }

  @Test
  public void test091()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      
      Graphics2D graphics2D0 = null;
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource0 = new DefaultTableCellRenderer.UIResource();
      assertNotNull(defaultTableCellRenderer_UIResource0);
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      
      Rectangle rectangle0 = defaultTableCellRenderer_UIResource0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      
      MeterPlot meterPlot0 = new MeterPlot();
      assertNotNull(meterPlot0);
      assertEquals(false, meterPlot0.getDrawBorder());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(true, meterPlot0.isOutlineVisible());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, meterPlot0.isSubplot());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01D);
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(true, meterPlot0.getTickLabelsVisible());
      
      List list0 = meterPlot0.getIntervals();
      assertNotNull(list0);
      assertEquals(false, meterPlot0.getDrawBorder());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(true, meterPlot0.isOutlineVisible());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, meterPlot0.isSubplot());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01D);
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(true, meterPlot0.getTickLabelsVisible());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      
      combinedRangeCategoryPlot0.drawRangeGridlines(graphics2D0, rectangle0, list0);
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, meterPlot0.getDrawBorder());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(true, meterPlot0.isOutlineVisible());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, meterPlot0.isSubplot());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01D);
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(true, meterPlot0.getTickLabelsVisible());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
  }

  @Test
  public void test092()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      Collection collection0 = combinedDomainCategoryPlot0.getRangeMarkers(layer0);
      assertNotNull(collection0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
  }

  @Test
  public void test093()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      
      RectangleInsets rectangleInsets0 = combinedDomainCategoryPlot0.getAxisOffset();
      assertNotNull(rectangleInsets0);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
  }

  @Test
  public void test094()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      
      AxisSpace axisSpace0 = combinedDomainCategoryPlot0.getFixedDomainAxisSpace();
      assertNull(axisSpace0);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
  }

  @Test
  public void test095()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      
      Color color0 = (Color)combinedRangeCategoryPlot0.getRangeCrosshairPaint();
      assertNotNull(color0);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getRed());
  }

  @Test
  public void test096()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      
      DatasetRenderingOrder datasetRenderingOrder0 = combinedDomainCategoryPlot0.getDatasetRenderingOrder();
      assertNotNull(datasetRenderingOrder0);
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
  }

  @Test
  public void test097()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      
      Layer layer0 = Layer.FOREGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      Collection collection0 = combinedDomainCategoryPlot0.getDomainMarkers(layer0);
      assertNull(collection0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
  }

  @Test
  public void test098()  throws Throwable  {
      double double0 = (-1213.408473);
      Point2D.Double point2D_Double0 = new Point2D.Double(double0, double0);
      assertNotNull(point2D_Double0);
      assertEquals((-1213.408473), point2D_Double0.x, 0.01D);
      assertEquals((-1213.408473), point2D_Double0.y, 0.01D);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      
      combinedDomainCategoryPlot0.setRangeCrosshairValue(point2D_Double0.x);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals((-1213.408473), combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals((-1213.408473), point2D_Double0.x, 0.01D);
      assertEquals((-1213.408473), point2D_Double0.y, 0.01D);
  }

  @Test
  public void test099()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertNotNull(categoryPlot0);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      
      JTextPane jTextPane0 = new JTextPane();
      assertNotNull(jTextPane0);
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(false, jTextPane0.isValid());
      
      String string0 = "";
      JCheckBox jCheckBox0 = new JCheckBox(string0);
      assertNotNull(jCheckBox0);
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      
      Icon icon0 = jCheckBox0.getIcon();
      assertNull(icon0);
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      
      JLabel jLabel0 = new JLabel(icon0);
      assertNotNull(jLabel0);
      assertEquals(false, jLabel0.isFocusTraversalPolicySet());
      assertEquals(false, jLabel0.isCursorSet());
      assertEquals(false, jLabel0.isFocusCycleRoot());
      assertEquals(false, jLabel0.isValid());
      assertEquals(false, jLabel0.isFocusTraversalPolicyProvider());
      assertEquals(false, jLabel0.isLightweight());
      assertEquals(false, jLabel0.isMinimumSizeSet());
      assertEquals(true, jLabel0.isVisible());
      assertEquals(0, jLabel0.getComponentCount());
      assertEquals(true, jLabel0.isForegroundSet());
      assertEquals(false, jLabel0.isPreferredSizeSet());
      assertEquals(true, jLabel0.isBackgroundSet());
      assertEquals(true, jLabel0.isFontSet());
      assertEquals(true, jLabel0.getFocusTraversalKeysEnabled());
      assertEquals(0, jLabel0.countComponents());
      assertEquals(false, jLabel0.isDisplayable());
      assertEquals(false, jLabel0.isMaximumSizeSet());
      assertEquals(true, jLabel0.isEnabled());
      assertEquals(false, jLabel0.getIgnoreRepaint());
      assertEquals(false, jLabel0.isShowing());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      
      Rectangle rectangle0 = jLabel0.getVisibleRect();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(false, jLabel0.isFocusTraversalPolicySet());
      assertEquals(false, jLabel0.isCursorSet());
      assertEquals(false, jLabel0.isFocusCycleRoot());
      assertEquals(false, jLabel0.isValid());
      assertEquals(false, jLabel0.isFocusTraversalPolicyProvider());
      assertEquals(false, jLabel0.isLightweight());
      assertEquals(false, jLabel0.isMinimumSizeSet());
      assertEquals(true, jLabel0.isVisible());
      assertEquals(0, jLabel0.getComponentCount());
      assertEquals(true, jLabel0.isForegroundSet());
      assertEquals(false, jLabel0.isPreferredSizeSet());
      assertEquals(true, jLabel0.isBackgroundSet());
      assertEquals(true, jLabel0.isFontSet());
      assertEquals(true, jLabel0.getFocusTraversalKeysEnabled());
      assertEquals(0, jLabel0.countComponents());
      assertEquals(false, jLabel0.isDisplayable());
      assertEquals(false, jLabel0.isMaximumSizeSet());
      assertEquals(true, jLabel0.isEnabled());
      assertEquals(false, jLabel0.getIgnoreRepaint());
      assertEquals(false, jLabel0.isShowing());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      
      PlotRenderingInfo plotRenderingInfo0 = null;
      MouseEvent mouseEvent0 = null;
      Point point0 = jTextPane0.getPopupLocation(mouseEvent0);
      assertNull(point0);
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(false, jTextPane0.isValid());
      
      categoryPlot0.zoomDomainAxes((double) rectangle0.y, plotRenderingInfo0, (Point2D) point0);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(false, jLabel0.isFocusTraversalPolicySet());
      assertEquals(false, jLabel0.isCursorSet());
      assertEquals(false, jLabel0.isFocusCycleRoot());
      assertEquals(false, jLabel0.isValid());
      assertEquals(false, jLabel0.isFocusTraversalPolicyProvider());
      assertEquals(false, jLabel0.isLightweight());
      assertEquals(false, jLabel0.isMinimumSizeSet());
      assertEquals(true, jLabel0.isVisible());
      assertEquals(0, jLabel0.getComponentCount());
      assertEquals(true, jLabel0.isForegroundSet());
      assertEquals(false, jLabel0.isPreferredSizeSet());
      assertEquals(true, jLabel0.isBackgroundSet());
      assertEquals(true, jLabel0.isFontSet());
      assertEquals(true, jLabel0.getFocusTraversalKeysEnabled());
      assertEquals(0, jLabel0.countComponents());
      assertEquals(false, jLabel0.isDisplayable());
      assertEquals(false, jLabel0.isMaximumSizeSet());
      assertEquals(true, jLabel0.isEnabled());
      assertEquals(false, jLabel0.getIgnoreRepaint());
      assertEquals(false, jLabel0.isShowing());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
  }

  @Test
  public void test100()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainCategoryPlot0.getRangeGridlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      
      Color color0 = (Color)CategoryPlot.DEFAULT_GRIDLINE_PAINT;
      assertNotNull(color0);
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) rectangle2D_Double0.y, (Paint) color0, (Stroke) basicStroke0);
      assertNotNull(categoryMarker0);
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      
      combinedRangeCategoryPlot0.addDomainMarker(categoryMarker0);
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
  }

  @Test
  public void test101()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      
      int int0 = 1491;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) int0);
      assertNotNull(defaultValueDataset0);
      
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) defaultValueDataset0);
      assertNotNull(meterPlot0);
      assertEquals(false, meterPlot0.isSubplot());
      assertEquals(true, meterPlot0.getTickLabelsVisible());
      assertEquals(true, meterPlot0.isOutlineVisible());
      assertEquals(false, meterPlot0.getDrawBorder());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01D);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals("Units", meterPlot0.getUnits());
      
      LegendItemCollection legendItemCollection0 = meterPlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(false, meterPlot0.isSubplot());
      assertEquals(true, meterPlot0.getTickLabelsVisible());
      assertEquals(true, meterPlot0.isOutlineVisible());
      assertEquals(false, meterPlot0.getDrawBorder());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01D);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals("Units", meterPlot0.getUnits());
      
      combinedRangeCategoryPlot0.setFixedLegendItems(legendItemCollection0);
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, meterPlot0.isSubplot());
      assertEquals(true, meterPlot0.getTickLabelsVisible());
      assertEquals(true, meterPlot0.isOutlineVisible());
      assertEquals(false, meterPlot0.getDrawBorder());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01D);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals("Units", meterPlot0.getUnits());
  }

  @Test
  public void test102()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      
      double double0 = combinedDomainCategoryPlot0.getRangeCrosshairValue();
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test103()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      
      int int0 = 0;
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getRangeAxisLocation(int0);
      assertNotNull(axisLocation0);
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      
      combinedDomainCategoryPlot0.setRangeAxisLocation(axisLocation0);
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
  }

  @Test
  public void test104()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      
      double double0 = combinedDomainCategoryPlot0.getAnchorValue();
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, double0, 0.01D);
  }
}
