/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:30:03 GMT 2014
 */

package org.jfree.chart.plot;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.color.ColorSpace;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAnchor;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.SortOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.junit.runner.RunWith;

 
public class CategoryPlotEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNotNull(combinedRangeCategoryPlot0);
      
      int int0 = 3;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      combinedRangeCategoryPlot0.setDataset(int0, (CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot1 = (CombinedRangeCategoryPlot)combinedRangeCategoryPlot0.clone();
      assertNotSame(combinedRangeCategoryPlot0, combinedRangeCategoryPlot1);
      assertNotSame(combinedRangeCategoryPlot1, combinedRangeCategoryPlot0);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot1.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot1.getWeight());
      assertNull(combinedRangeCategoryPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot1.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot1.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot1.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot1.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot1.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot1.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot1.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot1.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot1.getAnchorValue(), 0.01D);
      assertNotNull(combinedRangeCategoryPlot1);
      assertTrue(combinedRangeCategoryPlot0.equals((Object)combinedRangeCategoryPlot1));
      assertTrue(combinedRangeCategoryPlot1.equals((Object)combinedRangeCategoryPlot0));
  }

  @Test
  public void test01()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertNotNull(defaultCategoryDataset0);
      
      int int0 = 0;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)combinedDomainXYPlot0.getDomainAxisForDataset(int0);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNotNull(numberAxis0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) numberAxis0);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedRangeCategoryPlot0);
      
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertNotNull(minMaxCategoryRenderer0);
      
      CategoryAxis categoryAxis0 = null;
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultCategoryDataset0, categoryAxis0, (ValueAxis) numberAxis0, (CategoryItemRenderer) minMaxCategoryRenderer0);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertNotNull(categoryPlot0);
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[4];
      combinedRangeCategoryPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
  }

  @Test
  public void test02()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertNotNull(defaultCategoryDataset0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = 0;
      CategoryAxis categoryAxis0 = combinedDomainCategoryPlot0.getDomainAxisForDataset(int0);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertNull(categoryAxis0.getLabelURL());
      assertNull(categoryAxis0.getLabel());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertNotNull(categoryAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNotNull(combinedDomainXYPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)combinedDomainXYPlot0.getDomainAxisForDataset(int0);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNotNull(numberAxis0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) numberAxis0);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(combinedRangeCategoryPlot0);
      
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertNotNull(minMaxCategoryRenderer0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultCategoryDataset0, categoryAxis0, (ValueAxis) numberAxis0, (CategoryItemRenderer) minMaxCategoryRenderer0);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertNull(categoryAxis0.getLabelURL());
      assertNull(categoryAxis0.getLabel());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertNotNull(categoryPlot0);
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[4];
      combinedRangeCategoryPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedDomainCategoryPlot0);
      
      double double0 = (-2213.7069987182);
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertNotNull(line2D_Double0);
      
      Point2D.Double point2D_Double0 = new Point2D.Double(line2D_Double0.x2, double0);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals((-2213.7069987182), point2D_Double0.y, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertNotNull(point2D_Double0);
      
      boolean boolean0 = combinedDomainCategoryPlot0.isDomainZoomable();
      assertFalse(boolean0);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      
      combinedDomainCategoryPlot0.setAnchorValue(point2D_Double0.x, boolean0);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals((-2213.7069987182), point2D_Double0.y, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test04()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNotNull(combinedRangeCategoryPlot0);
      
      CategoryAxis categoryAxis0 = combinedRangeCategoryPlot0.getDomainAxis();
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(categoryAxis0);
      
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, waterfallBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertNotNull(waterfallBarRenderer0);
      
      int int0 = 75;
      String string0 = "";
      LogAxis logAxis0 = new LogAxis(string0);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(10, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals("", logAxis0.getLabel());
      assertNull(logAxis0.getLabelURL());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertNotNull(logAxis0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) taskSeriesCollection0, categoryAxis0, (ValueAxis) logAxis0, (CategoryItemRenderer) waterfallBarRenderer0);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(10, logAxis0.getMinorTickCount());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals("", logAxis0.getLabel());
      assertNull(logAxis0.getLabelURL());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, waterfallBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0, categoryPlot0.getWeight());
      assertNotNull(categoryPlot0);
      
      categoryPlot0.setDataset(int0, (CategoryDataset) taskSeriesCollection0);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(10, logAxis0.getMinorTickCount());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals("", logAxis0.getLabel());
      assertNull(logAxis0.getLabelURL());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, waterfallBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0, categoryPlot0.getWeight());
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "v([jaQ=o6t[V";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals("v([jaQ=o6t[V", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertNotNull(logarithmicAxis0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) logarithmicAxis0);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals("v([jaQ=o6t[V", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertNotNull(combinedRangeCategoryPlot0);
      
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNotNull(categoryAxis3D0);
      
      List list0 = combinedRangeCategoryPlot0.getCategoriesForAxis((CategoryAxis) categoryAxis3D0);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals("v([jaQ=o6t[V", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test
  public void test06()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(categoryPlot0);
      
      int int0 = 3;
      Graphics2D graphics2D0 = null;
      DefaultCaret defaultCaret0 = new DefaultCaret();
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01D);
      assertEquals(true, defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01D);
      assertNotNull(defaultCaret0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      categoryPlot0.drawDomainMarkers(graphics2D0, defaultCaret0, int0, layer0);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.width);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01D);
      assertEquals(true, defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      Graphics2D graphics2D0 = null;
      Box box0 = Box.createHorizontalBox();
      assertEquals(false, box0.isForegroundSet());
      assertEquals(true, box0.getFocusTraversalKeysEnabled());
      assertEquals(false, box0.isBackgroundSet());
      assertEquals(false, box0.isCursorSet());
      assertEquals(false, box0.isDisplayable());
      assertEquals(false, box0.isPreferredSizeSet());
      assertEquals(false, box0.isFocusCycleRoot());
      assertEquals(false, box0.getIgnoreRepaint());
      assertEquals(true, box0.isEnabled());
      assertEquals(0, box0.countComponents());
      assertEquals(false, box0.isMinimumSizeSet());
      assertEquals(true, box0.isVisible());
      assertEquals(false, box0.isShowing());
      assertEquals(0, box0.getComponentCount());
      assertEquals(false, box0.isFocusTraversalPolicyProvider());
      assertEquals(false, box0.isMaximumSizeSet());
      assertEquals(false, box0.isValid());
      assertEquals(false, box0.isFontSet());
      assertEquals(false, box0.isFocusTraversalPolicySet());
      assertEquals(false, box0.isLightweight());
      assertNotNull(box0);
      
      Rectangle rectangle0 = box0.getBounds();
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(false, box0.isForegroundSet());
      assertEquals(true, box0.getFocusTraversalKeysEnabled());
      assertEquals(false, box0.isBackgroundSet());
      assertEquals(false, box0.isCursorSet());
      assertEquals(false, box0.isDisplayable());
      assertEquals(false, box0.isPreferredSizeSet());
      assertEquals(false, box0.isFocusCycleRoot());
      assertEquals(false, box0.getIgnoreRepaint());
      assertEquals(true, box0.isEnabled());
      assertEquals(0, box0.countComponents());
      assertEquals(false, box0.isMinimumSizeSet());
      assertEquals(true, box0.isVisible());
      assertEquals(false, box0.isShowing());
      assertEquals(0, box0.getComponentCount());
      assertEquals(false, box0.isFocusTraversalPolicyProvider());
      assertEquals(false, box0.isMaximumSizeSet());
      assertEquals(false, box0.isValid());
      assertEquals(false, box0.isFontSet());
      assertEquals(false, box0.isFocusTraversalPolicySet());
      assertEquals(false, box0.isLightweight());
      assertNotNull(rectangle0);
      
      PlotRenderingInfo plotRenderingInfo0 = null;
      // Undeclared exception!
      try {
        Map map0 = combinedRangeCategoryPlot0.drawAxes(graphics2D0, rectangle0, rectangle0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertNotNull(combinedDomainCategoryPlot0);
      
      double double0 = (-2213.7069987182);
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertNotNull(line2D_Double0);
      
      Color color0 = (Color)combinedDomainCategoryPlot0.getRangeGridlinePaint();
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(-1, color0.getRGB());
      assertNotNull(color0);
      
      BasicStroke basicStroke0 = (BasicStroke)AbstractRenderer.DEFAULT_OUTLINE_STROKE;
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertNotNull(basicStroke0);
      
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation((Comparable) line2D_Double0.x1, line2D_Double0.y1, (Comparable) double0, line2D_Double0.x1, (Paint) color0, (Stroke) basicStroke0);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0, categoryLineAnnotation0.getValue1(), 0.01D);
      assertEquals(0.0, categoryLineAnnotation0.getValue2(), 0.01D);
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(-1, color0.getRGB());
      assertNotNull(categoryLineAnnotation0);
      
      boolean boolean0 = combinedDomainCategoryPlot0.removeAnnotation((CategoryAnnotation) categoryLineAnnotation0);
      assertFalse(boolean0);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0, categoryLineAnnotation0.getValue1(), 0.01D);
      assertEquals(0.0, categoryLineAnnotation0.getValue2(), 0.01D);
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(-1, color0.getRGB());
  }

  @Test
  public void test09()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertNull(categoryAxis3D0.getLabel());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertNotNull(categoryAxis3D0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertNull(categoryAxis3D0.getLabel());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNotNull(combinedDomainCategoryPlot0);
      
      Color color0 = (Color)combinedDomainCategoryPlot0.getDomainGridlinePaint();
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertNull(categoryAxis3D0.getLabel());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(-1, color0.getRGB());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertNotNull(color0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      int int0 = 3710;
      BasicStroke basicStroke0 = (BasicStroke)FastScatterPlot.DEFAULT_GRIDLINE_STROKE;
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
      
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation((Comparable) int0, (double) int0, (Comparable) int0, (double) int0, (Paint) color0, (Stroke) basicStroke0);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertNull(categoryAxis3D0.getLabel());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(3710.0, categoryLineAnnotation0.getValue2(), 0.01D);
      assertEquals(3710.0, categoryLineAnnotation0.getValue1(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(-1, color0.getRGB());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertNotNull(categoryLineAnnotation0);
      
      combinedRangeCategoryPlot0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertNull(categoryAxis3D0.getLabel());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(3710.0, categoryLineAnnotation0.getValue2(), 0.01D);
      assertEquals(3710.0, categoryLineAnnotation0.getValue1(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(-1, color0.getRGB());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
  }

  @Test
  public void test10()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedRangeCategoryPlot0);
      
      int int0 = 3;
      boolean boolean0 = true;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(boolean0);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(0.0, stackedBarRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertNotNull(stackedBarRenderer3D0);
      
      Color color0 = (Color)stackedBarRenderer3D0.getItemPaint(int0, int0);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(0.0, stackedBarRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(255, color0.getBlue());
      assertNotNull(color0);
      
      combinedRangeCategoryPlot0.setRangeCrosshairPaint((Paint) color0);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(0.0, stackedBarRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(255, color0.getBlue());
  }

  @Test
  public void test11()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNotNull(combinedDomainCategoryPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)Axis.DEFAULT_AXIS_LINE_STROKE;
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
      
      combinedDomainCategoryPlot0.setRangeCrosshairStroke((Stroke) basicStroke0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 0;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)combinedDomainXYPlot0.getDomainAxisForDataset(int0);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabel());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertNotNull(numberAxis0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) numberAxis0);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabel());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertNotNull(combinedRangeCategoryPlot0);
      
      boolean boolean0 = false;
      combinedRangeCategoryPlot0.setRangeCrosshairLockedOnData(boolean0);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabel());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
  }

  @Test
  public void test13()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      String string0 = ":/?on^@h5XnO<!k05";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(string0);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(":/?on^@h5XnO<!k05", subCategoryAxis0.getLabel());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertNotNull(subCategoryAxis0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(doubleArray1[1], doubleArray1[1], string0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(":/?on^@h5XnO<!k05", cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNotNull(cyclicNumberAxis0);
      
      CategoryItemRenderer categoryItemRenderer0 = null;
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultIntervalCategoryDataset0, (CategoryAxis) subCategoryAxis0, (ValueAxis) cyclicNumberAxis0, categoryItemRenderer0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(":/?on^@h5XnO<!k05", subCategoryAxis0.getLabel());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(":/?on^@h5XnO<!k05", cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNotNull(categoryPlot0);
      
      boolean boolean0 = true;
      categoryPlot0.setRangeCrosshairLockedOnData(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(":/?on^@h5XnO<!k05", subCategoryAxis0.getLabel());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(":/?on^@h5XnO<!k05", cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test
  public void test14()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedDomainCategoryPlot0);
      
      boolean boolean0 = true;
      combinedDomainCategoryPlot0.setRangeCrosshairVisible(boolean0);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test15()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedRangeCategoryPlot0);
      
      Layer layer0 = null;
      Collection collection0 = combinedRangeCategoryPlot0.getRangeMarkers(layer0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNull(collection0);
  }

  @Test
  public void test16()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertNotNull(categoryPlot0);
      
      categoryPlot0.clearRangeMarkers();
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
  }

  @Test
  public void test17()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNotNull(combinedDomainCategoryPlot0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      double double0 = (-2213.7069987182);
      Color color0 = (Color)combinedDomainCategoryPlot0.getRangeGridlinePaint();
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getGreen());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertNotNull(color0);
      
      BasicStroke basicStroke0 = (BasicStroke)AbstractRenderer.DEFAULT_OUTLINE_STROKE;
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertNotNull(basicStroke0);
      
      ValueMarker valueMarker0 = new ValueMarker(double0, (Paint) color0, (Stroke) basicStroke0);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals((-2213.7069987182), valueMarker0.getValue(), 0.01D);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getGreen());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertNotNull(valueMarker0);
      
      combinedDomainCategoryPlot0.addRangeMarker((Marker) valueMarker0, layer0);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals((-2213.7069987182), valueMarker0.getValue(), 0.01D);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getGreen());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 33;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedRangeCategoryPlot0);
      
      combinedRangeCategoryPlot0.clearDomainMarkers(int0);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
  }

  @Test
  public void test19()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainCategoryPlot0.getDomainMarkers(layer0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNull(collection0);
  }

  @Test
  public void test20()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertNotNull(categoryPlot0);
      
      categoryPlot0.clearDomainMarkers();
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = 3;
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(combinedDomainCategoryPlot0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) int0);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNotNull(categoryMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      combinedDomainCategoryPlot0.addDomainMarker(categoryMarker0, layer0);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Layer.BACKGROUND", layer0.toString());
  }

  @Test
  public void test22()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNotNull(combinedRangeCategoryPlot0);
      
      CategoryMarker categoryMarker0 = null;
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      // Undeclared exception!
      try {
        combinedRangeCategoryPlot0.addDomainMarker(categoryMarker0, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNotNull(combinedDomainCategoryPlot0);
      
      boolean boolean0 = combinedDomainCategoryPlot0.isDomainZoomable();
      assertFalse(boolean0);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(boolean0);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(0.0, stackedBarRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertNotNull(stackedBarRenderer3D0);
      
      combinedDomainCategoryPlot0.setRenderer((CategoryItemRenderer) stackedBarRenderer3D0, boolean0);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(0.0, stackedBarRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      
      int int0 = 0;
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, layeredBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, layeredBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertNotNull(layeredBarRenderer0);
      
      ItemLabelPosition itemLabelPosition0 = layeredBarRenderer0.getNegativeItemLabelPosition(int0, int0);
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, layeredBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, layeredBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(0.0, itemLabelPosition0.getAngle(), 0.01D);
      assertNotNull(itemLabelPosition0);
      
      stackedBarRenderer3D0.setSeriesPositiveItemLabelPosition(int0, itemLabelPosition0);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, layeredBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, layeredBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(0.0, itemLabelPosition0.getAngle(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(0.0, stackedBarRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
  }

  @Test
  public void test24()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = 1970;
      // Undeclared exception!
      try {
        combinedDomainCategoryPlot0.zoom((double) int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      double double0 = (-2213.7069987182);
      // Undeclared exception!
      try {
        combinedDomainCategoryPlot0.zoom(double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(categoryPlot0);
      
      LegendItemCollection legendItemCollection0 = categoryPlot0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(legendItemCollection0);
  }

  @Test
  public void test27()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertNotNull(categoryPlot0);
      
      Color color0 = (Color)AbstractRenderer.DEFAULT_PAINT;
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(255, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertNotNull(color0);
      
      categoryPlot0.setRangeGridlinePaint((Paint) color0);
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(255, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
  }

  @Test
  public void test28()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertNotNull(categoryPlot0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNotNull(combinedRangeCategoryPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)categoryPlot0.getRangeGridlineStroke();
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertNotNull(basicStroke0);
      
      combinedRangeCategoryPlot0.setRangeGridlineStroke((Stroke) basicStroke0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
  }

  @Test
  public void test29()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedDomainCategoryPlot0);
      
      boolean boolean0 = false;
      combinedDomainCategoryPlot0.setRangeGridlinesVisible(boolean0);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test30()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      boolean boolean0 = true;
      combinedDomainCategoryPlot0.setRangeGridlinesVisible(boolean0);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
  }

  @Test
  public void test31()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertNotNull(categoryAxis3D0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertNotNull(combinedDomainCategoryPlot0);
      
      Color color0 = (Color)combinedDomainCategoryPlot0.getDomainGridlinePaint();
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertNotNull(color0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedRangeCategoryPlot0);
      
      combinedRangeCategoryPlot0.setDomainGridlinePaint((Paint) color0);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
  }

  @Test
  public void test32()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNotNull(categoryAxis3D0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedDomainCategoryPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)Plot.DEFAULT_OUTLINE_STROKE;
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertNotNull(basicStroke0);
      
      combinedDomainCategoryPlot0.setDomainGridlineStroke((Stroke) basicStroke0);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test33()  throws Throwable  {
      double double0 = 0.0;
      CategoryAxis categoryAxis0 = null;
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      String string0 = "org.jfree.chart.plot.CategoryPlot";
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation(string0, (Comparable) string0, double0, double0);
      assertEquals("org.jfree.chart.plot.CategoryPlot", categoryPointerAnnotation0.getText());
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01D);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01D);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals(0.0, categoryPointerAnnotation0.getAngle(), 0.01D);
      assertNotNull(categoryPointerAnnotation0);
      
      CategoryAnchor categoryAnchor0 = categoryPointerAnnotation0.getCategoryAnchor();
      assertEquals("CategoryAnchor.MIDDLE", categoryAnchor0.toString());
      assertEquals("org.jfree.chart.plot.CategoryPlot", categoryPointerAnnotation0.getText());
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01D);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01D);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals(0.0, categoryPointerAnnotation0.getAngle(), 0.01D);
      assertNotNull(categoryAnchor0);
      
      combinedDomainCategoryPlot0.setDomainGridlinePosition(categoryAnchor0);
      assertEquals("CategoryAnchor.MIDDLE", categoryAnchor0.toString());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals("org.jfree.chart.plot.CategoryPlot", categoryPointerAnnotation0.getText());
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01D);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01D);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals(0.0, categoryPointerAnnotation0.getAngle(), 0.01D);
  }

  @Test
  public void test34()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNotNull(combinedRangeCategoryPlot0);
      
      boolean boolean0 = false;
      combinedRangeCategoryPlot0.setDomainGridlinesVisible(boolean0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
  }

  @Test
  public void test35()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertNotNull(categoryAxis3D0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      assertNotNull(sortOrder0);
      
      combinedDomainCategoryPlot0.setRowRenderingOrder(sortOrder0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
  }

  @Test
  public void test36()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNotNull(combinedDomainCategoryPlot0);
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      assertEquals("SortOrder.DESCENDING", sortOrder0.toString());
      assertNotNull(sortOrder0);
      
      combinedDomainCategoryPlot0.setColumnRenderingOrder(sortOrder0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals("SortOrder.DESCENDING", sortOrder0.toString());
  }

  @Test
  public void test37()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isSubplot());
      assertNotNull(categoryPlot0);
      
      DatasetRenderingOrder datasetRenderingOrder0 = categoryPlot0.getDatasetRenderingOrder();
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertNotNull(datasetRenderingOrder0);
      
      categoryPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
  }

  @Test
  public void test38()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNotNull(combinedRangeCategoryPlot0);
      
      double[][] doubleArray0 = new double[1][10];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(10, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryItemRenderer categoryItemRenderer0 = combinedRangeCategoryPlot0.getRendererForDataset((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(10, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(categoryItemRenderer0);
  }

  @Test
  public void test39()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNotNull(combinedDomainCategoryPlot0);
      
      CategoryItemRenderer[] categoryItemRendererArray0 = new CategoryItemRenderer[18];
      combinedDomainCategoryPlot0.setRenderers(categoryItemRendererArray0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
  }

  @Test
  public void test40()  throws Throwable  {
      boolean boolean0 = true;
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(boolean0, boolean0);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(lineAndShapeRenderer0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(combinedRangeCategoryPlot0);
      
      combinedRangeCategoryPlot0.setRenderer((CategoryItemRenderer) lineAndShapeRenderer0, boolean0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      
      combinedRangeCategoryPlot0.setRenderer((CategoryItemRenderer) lineAndShapeRenderer0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
  }

  @Test
  public void test41()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(combinedRangeCategoryPlot0);
      
      int int0 = 3;
      CategoryAxis categoryAxis0 = combinedRangeCategoryPlot0.getDomainAxisForDataset(int0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(categoryAxis0);
  }

  @Test
  public void test42()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(combinedRangeCategoryPlot0);
      
      int int0 = 3710;
      CategoryDataset categoryDataset0 = combinedRangeCategoryPlot0.getDataset();
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(categoryDataset0);
      
      combinedRangeCategoryPlot0.setDataset(int0, categoryDataset0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
  }

  @Test
  public void test43()  throws Throwable  {
      String string0 = "v([jaQ=o6t[V";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals("v([jaQ=o6t[V", logarithmicAxis0.getLabel());
      assertNotNull(logarithmicAxis0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) logarithmicAxis0);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals("v([jaQ=o6t[V", logarithmicAxis0.getLabel());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNotNull(combinedRangeCategoryPlot0);
      
      int int0 = 628;
      CategoryDataset categoryDataset0 = combinedRangeCategoryPlot0.getDataset(int0);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals("v([jaQ=o6t[V", logarithmicAxis0.getLabel());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(categoryDataset0);
  }

  @Test
  public void test44()  throws Throwable  {
      int int0 = 0;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)combinedDomainXYPlot0.getDomainAxisForDataset(int0);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(numberAxis0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) numberAxis0);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(combinedRangeCategoryPlot0);
      
      combinedRangeCategoryPlot0.clearRangeAxes();
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
  }

  @Test
  public void test45()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNotNull(combinedDomainCategoryPlot0);
      
      combinedDomainCategoryPlot0.clearRangeAxes();
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
  }

  @Test
  public void test46()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertNotNull(categoryPlot0);
      
      int int0 = 3;
      AxisLocation axisLocation0 = categoryPlot0.getRangeAxisLocation(int0);
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertNotNull(axisLocation0);
  }

  @Test
  public void test47()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertNotNull(categoryPlot0);
      
      int int0 = 3;
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      ValueAxis valueAxis0 = combinedDomainCategoryPlot0.getRangeAxisForDataset(int0);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(valueAxis0);
      
      // Undeclared exception!
      try {
        int int1 = categoryPlot0.getRangeAxisIndex(valueAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'axis' argument.
         //
      }
  }

  @Test
  public void test48()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(fastScatterPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)fastScatterPlot0.getRangeAxis();
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals("Y", numberAxis0.getLabel());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertNotNull(numberAxis0);
      
      int int0 = combinedDomainCategoryPlot0.getRangeAxisIndex((ValueAxis) numberAxis0);
      assertEquals((-1), int0);
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals("Y", numberAxis0.getLabel());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
  }

  @Test
  public void test49()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isSubplot());
      assertNotNull(categoryPlot0);
      
      int int0 = 33;
      ValueAxis valueAxis0 = categoryPlot0.getRangeAxis(int0);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isSubplot());
      assertNull(valueAxis0);
  }

  @Test
  public void test50()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertNotNull(categoryPlot0);
      
      categoryPlot0.clearDomainAxes();
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot0.isDomainZoomable());
  }

  @Test
  public void test51()  throws Throwable  {
      int int0 = 3;
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedDomainCategoryPlot0);
      
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation(int0);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
  }

  @Test
  public void test52()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNotNull(combinedRangeCategoryPlot0);
      
      String string0 = "";
      CategoryAxis[] categoryAxisArray0 = new CategoryAxis[2];
      CategoryAxis categoryAxis0 = new CategoryAxis(string0);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("", categoryAxis0.getLabel());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertNotNull(categoryAxis0);
      
      categoryAxisArray0[1] = categoryAxis0;
      assertEquals(0.05, categoryAxisArray0[1].getLowerMargin(), 0.01D);
      assertEquals(0.0F, categoryAxisArray0[1].getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxisArray0[1].getLabelAngle(), 0.01D);
      assertEquals("", categoryAxisArray0[1].getLabel());
      assertEquals(0.05, categoryAxisArray0[1].getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxisArray0[1].isTickLabelsVisible());
      assertEquals(0.0, categoryAxisArray0[1].getFixedDimension(), 0.01D);
      assertEquals(1, categoryAxisArray0[1].getMaximumCategoryLabelLines());
      assertNull(categoryAxisArray0[1].getLabelToolTip());
      assertEquals(2.0F, categoryAxisArray0[1].getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, categoryAxisArray0[1].getCategoryMargin(), 0.01D);
      assertNull(categoryAxisArray0[1].getLabelURL());
      assertEquals(true, categoryAxisArray0[1].isVisible());
      assertEquals(4, categoryAxisArray0[1].getCategoryLabelPositionOffset());
      assertEquals(false, categoryAxisArray0[1].isTickMarksVisible());
      assertEquals(0.0F, categoryAxisArray0[1].getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxisArray0[1].isAxisLineVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("", categoryAxis0.getLabel());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertNotNull(categoryAxisArray0[1]);
      
      combinedRangeCategoryPlot0.setDomainAxes(categoryAxisArray0);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
  }

  @Test
  public void test53()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNotNull(categoryAxis3D0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNotNull(combinedDomainCategoryPlot0);
      
      RectangleInsets rectangleInsets0 = combinedDomainCategoryPlot0.getInsets();
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNotNull(rectangleInsets0);
      
      combinedDomainCategoryPlot0.setAxisOffset(rectangleInsets0);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
  }

  @Test
  public void test54()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertNotNull(categoryPlot0);
      
      int int0 = 26;
      categoryPlot0.setAnchorValue((double) int0);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(26.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.isDomainZoomable());
  }

  @Test
  public void test55()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedRangeCategoryPlot0);
      
      AxisSpace axisSpace0 = combinedRangeCategoryPlot0.getFixedDomainAxisSpace();
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(axisSpace0);
      
      combinedRangeCategoryPlot0.setFixedDomainAxisSpace(axisSpace0);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
  }

  @Test
  public void test56()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 33;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeCategoryPlot0.getDomainGridlineStroke();
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(basicStroke0);
      
      Color color0 = (Color)combinedDomainXYPlot0.getRangeGridlinePaint();
      assertEquals(255, color0.getAlpha());
      assertEquals(-1, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNotNull(color0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) int0, (Paint) color0, (Stroke) basicStroke0);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(255, color0.getAlpha());
      assertEquals(-1, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNotNull(categoryMarker0);
      
      combinedRangeCategoryPlot0.addRangeMarker((Marker) categoryMarker0);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(255, color0.getAlpha());
      assertEquals(-1, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
  }

  @Test
  public void test57()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(categoryPlot0);
      
      int int0 = categoryPlot0.getDatasetCount();
      assertEquals(1, int0);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test
  public void test58()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertNotNull(categoryPlot0);
      
      int int0 = 502;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(combinedRangeCategoryPlot0);
      
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getRangeAxisLocation();
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      categoryPlot0.setRangeAxisLocation(int0, axisLocation0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertNull(categoryPlot0.getNoDataMessage());
  }

  @Test
  public void test59()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      Number[][] numberArray0 = new Number[3][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      combinedDomainCategoryPlot0.setDataset((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
  }

  @Test
  public void test60()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = ColorSpace.TYPE_CCLR;
      assertEquals(22, int0);
      
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getRangeAxisLocation();
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(axisLocation0);
      
      combinedDomainCategoryPlot0.setDomainAxisLocation(int0, axisLocation0);
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
  }

  @Test
  public void test61()  throws Throwable  {
      CategoryAxis categoryAxis0 = null;
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      CategoryItemRenderer categoryItemRenderer0 = null;
      int int0 = combinedDomainCategoryPlot0.getIndexOf(categoryItemRenderer0);
      assertEquals(0, int0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
  }

  @Test
  public void test62()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertNotNull(categoryPlot0);
      
      CategoryItemRenderer categoryItemRenderer0 = categoryPlot0.getRenderer();
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertNull(categoryItemRenderer0);
  }

  @Test
  public void test63()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 33;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNotNull(combinedRangeCategoryPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeCategoryPlot0.getDomainGridlineStroke();
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertNotNull(basicStroke0);
      
      Color color0 = (Color)combinedDomainXYPlot0.getRangeGridlinePaint();
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(-1, color0.getRGB());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNotNull(color0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) int0, (Paint) color0, (Stroke) basicStroke0);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(-1, color0.getRGB());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNotNull(categoryMarker0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      combinedRangeCategoryPlot0.addDomainMarker(categoryMarker0, layer0);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(-1, color0.getRGB());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Layer.FOREGROUND", layer0.toString());
  }

  @Test
  public void test64()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      SortOrder sortOrder0 = combinedDomainCategoryPlot0.getRowRenderingOrder();
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      assertNotNull(sortOrder0);
  }

  @Test
  public void test65()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertNotNull(categoryAxis3D0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      Graphics2D graphics2D0 = null;
      float float0 = 953.3848F;
      Line2D.Float line2D_Float0 = new Line2D.Float(float0, float0, float0, float0);
      assertEquals(953.3848F, line2D_Float0.y1, 0.01F);
      assertEquals(953.3848F, line2D_Float0.y2, 0.01F);
      assertEquals(953.3848F, line2D_Float0.x1, 0.01F);
      assertEquals(953.3848F, line2D_Float0.x2, 0.01F);
      assertNotNull(line2D_Float0);
      
      Rectangle rectangle0 = line2D_Float0.getBounds();
      assertEquals(953.3848F, line2D_Float0.y1, 0.01F);
      assertEquals(953.3848F, line2D_Float0.y2, 0.01F);
      assertEquals(953.3848F, line2D_Float0.x1, 0.01F);
      assertEquals(953.3848F, line2D_Float0.x2, 0.01F);
      assertEquals(953, rectangle0.x);
      assertEquals(1, rectangle0.width);
      assertEquals(953, rectangle0.y);
      assertEquals(1, rectangle0.height);
      assertEquals(953.0, rectangle0.getMinY(), 0.01D);
      assertEquals(1.0, rectangle0.getHeight(), 0.01D);
      assertEquals(954.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(953.0, rectangle0.getMinX(), 0.01D);
      assertEquals(1.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=953,y=953,width=1,height=1]", rectangle0.toString());
      assertEquals(953.5, rectangle0.getCenterX(), 0.01D);
      assertEquals(953.0, rectangle0.getY(), 0.01D);
      assertEquals(953.0, rectangle0.getX(), 0.01D);
      assertEquals(false, rectangle0.isEmpty());
      assertEquals(953.5, rectangle0.getCenterY(), 0.01D);
      assertEquals(954.0, rectangle0.getMaxY(), 0.01D);
      assertNotNull(rectangle0);
      
      combinedDomainCategoryPlot0.drawDomainGridlines(graphics2D0, rectangle0);
      assertEquals(953.3848F, line2D_Float0.y1, 0.01F);
      assertEquals(953.3848F, line2D_Float0.y2, 0.01F);
      assertEquals(953.3848F, line2D_Float0.x1, 0.01F);
      assertEquals(953.3848F, line2D_Float0.x2, 0.01F);
      assertEquals(953, rectangle0.x);
      assertEquals(1, rectangle0.width);
      assertEquals(953, rectangle0.y);
      assertEquals(1, rectangle0.height);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(953.0, rectangle0.getMinY(), 0.01D);
      assertEquals(1.0, rectangle0.getHeight(), 0.01D);
      assertEquals(954.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(953.0, rectangle0.getMinX(), 0.01D);
      assertEquals(1.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=953,y=953,width=1,height=1]", rectangle0.toString());
      assertEquals(953.5, rectangle0.getCenterX(), 0.01D);
      assertEquals(953.0, rectangle0.getY(), 0.01D);
      assertEquals(953.0, rectangle0.getX(), 0.01D);
      assertEquals(false, rectangle0.isEmpty());
      assertEquals(953.5, rectangle0.getCenterY(), 0.01D);
      assertEquals(954.0, rectangle0.getMaxY(), 0.01D);
  }

  @Test
  public void test66()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(categoryPlot0);
      
      RectangleEdge rectangleEdge0 = categoryPlot0.getDomainAxisEdge();
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
  }

  @Test
  public void test67()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(categoryPlot0);
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[10];
      String string0 = "W1";
      PeriodAxis periodAxis0 = new PeriodAxis(string0);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("W1", periodAxis0.getLabel());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(true, periodAxis0.isVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertNotNull(periodAxis0);
      
      valueAxisArray0[1] = (ValueAxis) periodAxis0;
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("W1", periodAxis0.getLabel());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(true, periodAxis0.isVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, valueAxisArray0[1].isAutoRange());
      assertEquals(false, valueAxisArray0[1].isVerticalTickLabels());
      assertEquals(true, valueAxisArray0[1].isAxisLineVisible());
      assertEquals(0.0, valueAxisArray0[1].getFixedDimension(), 0.01D);
      assertEquals(true, valueAxisArray0[1].isVisible());
      assertEquals(0.0, valueAxisArray0[1].getLabelAngle(), 0.01D);
      assertEquals(false, valueAxisArray0[1].isInverted());
      assertEquals(true, valueAxisArray0[1].isTickMarksVisible());
      assertEquals(0.05, valueAxisArray0[1].getUpperMargin(), 0.01D);
      assertNull(valueAxisArray0[1].getLabelToolTip());
      assertEquals(true, valueAxisArray0[1].isAutoTickUnitSelection());
      assertEquals(false, valueAxisArray0[1].isPositiveArrowVisible());
      assertEquals(1.0E-8, valueAxisArray0[1].getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, valueAxisArray0[1].getTickMarkOutsideLength(), 0.01F);
      assertNull(valueAxisArray0[1].getLabelURL());
      assertEquals(0.0, valueAxisArray0[1].getLowerBound(), 0.01D);
      assertEquals(1.0, valueAxisArray0[1].getUpperBound(), 0.01D);
      assertEquals(0.05, valueAxisArray0[1].getLowerMargin(), 0.01D);
      assertEquals("W1", valueAxisArray0[1].getLabel());
      assertEquals(false, valueAxisArray0[1].isNegativeArrowVisible());
      assertEquals(0.0F, valueAxisArray0[1].getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, valueAxisArray0[1].getFixedAutoRange(), 0.01D);
      assertEquals(true, valueAxisArray0[1].isTickLabelsVisible());
      assertNotNull(valueAxisArray0[1]);
      
      int int0 = (-449);
      categoryPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      JButton jButton0 = new JButton();
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(true, jButton0.isVisible());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(0, jButton0.countComponents());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isShowing());
      assertNotNull(jButton0);
      
      Point point0 = jButton0.location();
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(true, jButton0.isVisible());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(0, jButton0.countComponents());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isShowing());
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertNotNull(point0);
      
      boolean boolean0 = true;
      categoryPlot0.zoomRangeAxes((double) int0, plotRenderingInfo0, (Point2D) point0, boolean0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(true, jButton0.isVisible());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(0, jButton0.countComponents());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isShowing());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
  }

  @Test
  public void test68()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      AxisSpace axisSpace0 = combinedRangeCategoryPlot0.getFixedRangeAxisSpace();
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(axisSpace0);
  }

  @Test
  public void test69()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedRangeCategoryPlot0);
      
      combinedRangeCategoryPlot0.clearAnnotations();
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
  }

  @Test
  public void test70()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertNotNull(categoryPlot0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedRangeCategoryPlot0);
      
      AxisSpace axisSpace0 = combinedRangeCategoryPlot0.getFixedDomainAxisSpace();
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNull(axisSpace0);
      
      categoryPlot0.setFixedRangeAxisSpace(axisSpace0);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
  }

  @Test
  public void test71()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(combinedDomainCategoryPlot0);
      
      boolean boolean0 = combinedDomainCategoryPlot0.isRangeCrosshairVisible();
      assertFalse(boolean0);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      
      combinedDomainCategoryPlot0.setDrawSharedDomainAxis(boolean0);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test72()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = 1970;
      CategoryItemRenderer categoryItemRenderer0 = null;
      combinedDomainCategoryPlot0.setRenderer(int0, categoryItemRenderer0);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
  }

  @Test
  public void test73()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertNotNull(categoryAxis3D0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertNotNull(combinedDomainCategoryPlot0);
      
      AxisLocation axisLocation0 = null;
      // Undeclared exception!
      try {
        combinedDomainCategoryPlot0.setDomainAxisLocation(axisLocation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
      }
  }

  @Test
  public void test74()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedRangeCategoryPlot0);
      
      ValueAxis valueAxis0 = null;
      combinedRangeCategoryPlot0.setRangeAxis(valueAxis0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
  }

  @Test
  public void test75()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(categoryPlot0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      combinedDomainCategoryPlot0.add(categoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isSubplot());
  }

  @Test
  public void test76()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNotNull(combinedRangeCategoryPlot0);
      
      String string0 = combinedRangeCategoryPlot0.getPlotType();
      assertEquals("Category Plot", string0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNotNull(string0);
  }

  @Test
  public void test77()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = combinedDomainCategoryPlot0.getWeight();
      assertEquals(0, int0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
  }

  @Test
  public void test78()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNotNull(combinedDomainCategoryPlot0);
      
      boolean boolean0 = combinedDomainCategoryPlot0.isRangeGridlinesVisible();
      assertTrue(boolean0);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
  }

  @Test
  public void test79()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNotNull(combinedRangeCategoryPlot0);
      
      boolean boolean0 = combinedRangeCategoryPlot0.isRangeZoomable();
      assertTrue(boolean0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
  }

  @Test
  public void test80()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(0, categoryPlot0.getWeight());
      assertNotNull(categoryPlot0);
      
      List list0 = categoryPlot0.getAnnotations();
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(0, categoryPlot0.getWeight());
      assertNotNull(list0);
  }

  @Test
  public void test81()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedRangeCategoryPlot0.getRangeMarkers(layer0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNull(collection0);
  }

  @Test
  public void test82()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertNotNull(categoryAxis3D0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertNotNull(combinedDomainCategoryPlot0);
      
      RectangleInsets rectangleInsets0 = combinedDomainCategoryPlot0.getAxisOffset();
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertNotNull(rectangleInsets0);
  }

  @Test
  public void test83()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedRangeCategoryPlot0);
      
      boolean boolean0 = combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData();
      assertTrue(boolean0);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
  }

  @Test
  public void test84()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNotNull(combinedRangeCategoryPlot0);
      
      Color color0 = (Color)combinedRangeCategoryPlot0.getRangeCrosshairPaint();
      assertEquals(255, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNotNull(color0);
  }

  @Test
  public void test85()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(combinedDomainCategoryPlot0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainCategoryPlot0.getDomainMarkers(layer0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNull(collection0);
  }

  @Test
  public void test86()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertNotNull(categoryAxis3D0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      float float0 = 953.3848F;
      Line2D.Float line2D_Float0 = new Line2D.Float(float0, float0, float0, float0);
      assertEquals(953.3848F, line2D_Float0.x1, 0.01F);
      assertEquals(953.3848F, line2D_Float0.x2, 0.01F);
      assertEquals(953.3848F, line2D_Float0.y2, 0.01F);
      assertEquals(953.3848F, line2D_Float0.y1, 0.01F);
      assertNotNull(line2D_Float0);
      
      combinedDomainCategoryPlot0.setRangeCrosshairValue((double) line2D_Float0.x2);
      assertEquals(953.3848F, line2D_Float0.x1, 0.01F);
      assertEquals(953.3848F, line2D_Float0.x2, 0.01F);
      assertEquals(953.3848F, line2D_Float0.y2, 0.01F);
      assertEquals(953.3848F, line2D_Float0.y1, 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(953.3848266601562, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
  }

  @Test
  public void test87()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedRangeCategoryPlot0);
      
      int int0 = 3710;
      CategoryAxis categoryAxis0 = combinedRangeCategoryPlot0.getDomainAxis(int0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(categoryAxis0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      SortOrder sortOrder0 = combinedDomainCategoryPlot0.getColumnRenderingOrder();
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      assertNotNull(sortOrder0);
  }

  @Test
  public void test88()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(combinedRangeCategoryPlot0);
      
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getLowerClip(), 0.01D);
      assertNotNull(waterfallBarRenderer0);
      
      LegendItemCollection legendItemCollection0 = waterfallBarRenderer0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getLowerClip(), 0.01D);
      assertNotNull(legendItemCollection0);
      
      combinedRangeCategoryPlot0.setFixedLegendItems(legendItemCollection0);
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test
  public void test89()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNotNull(combinedDomainCategoryPlot0);
      
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation();
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
  }

  @Test
  public void test90()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      double double0 = combinedRangeCategoryPlot0.getRangeCrosshairValue();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test91()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNotNull(combinedRangeCategoryPlot0);
      
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      combinedRangeCategoryPlot0.setRangeAxisLocation(axisLocation0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
  }

  @Test
  public void test92()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = combinedDomainCategoryPlot0.getRangeAxisCount();
      assertEquals(1, int0);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
  }

  @Test
  public void test93()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNotNull(combinedRangeCategoryPlot0);
      
      CategoryAnchor categoryAnchor0 = combinedRangeCategoryPlot0.getDomainGridlinePosition();
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals("CategoryAnchor.MIDDLE", categoryAnchor0.toString());
      assertNotNull(categoryAnchor0);
  }
}
