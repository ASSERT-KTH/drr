/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:44:11 GMT 2014
 */

package org.jfree.chart.plot;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Stroke;
import java.awt.event.MouseWheelEvent;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.Collection;
import java.util.List;
import java.util.TimeZone;
import javax.swing.Action;
import javax.swing.JToggleButton;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;

import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAnchor;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.needle.PinNeedle;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.SortOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.RegularTimePeriod;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class CategoryPlotEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot1 = (CombinedRangeCategoryPlot)combinedRangeCategoryPlot0.clone();
      assertNotNull(combinedRangeCategoryPlot1);
      assertNotSame(combinedRangeCategoryPlot1, combinedRangeCategoryPlot0);
      assertNotSame(combinedRangeCategoryPlot0, combinedRangeCategoryPlot1);
      assertTrue(combinedRangeCategoryPlot1.equals((Object)combinedRangeCategoryPlot0));
      assertTrue(combinedRangeCategoryPlot0.equals((Object)combinedRangeCategoryPlot1));
      assertEquals(true, combinedRangeCategoryPlot1.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot1.getWeight());
      assertEquals(15, combinedRangeCategoryPlot1.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot1.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot1.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot1.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot1.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot1.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot1.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot1.isOutlineVisible());
      assertNull(combinedRangeCategoryPlot1.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot1.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot1.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "";
      CategoryAxis categoryAxis0 = new CategoryAxis(string0);
      assertNotNull(categoryAxis0);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals("", categoryAxis0.getLabel());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertNull(categoryAxis0.getLabelURL());
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals("", categoryAxis0.getLabel());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = (CombinedDomainCategoryPlot)combinedDomainCategoryPlot0.clone();
      assertNotNull(combinedDomainCategoryPlot1);
      assertNotSame(combinedDomainCategoryPlot1, combinedDomainCategoryPlot0);
      assertNotSame(combinedDomainCategoryPlot0, combinedDomainCategoryPlot1);
      assertTrue(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      assertTrue(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot1));
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals("", categoryAxis0.getLabel());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, combinedDomainCategoryPlot1.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot1.getWeight());
      assertEquals(false, combinedDomainCategoryPlot1.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot1.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot1.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot1.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot1.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot1.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot1.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot1.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot1.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
  }

  @Test
  public void test002()  throws Throwable  {
      int int0 = (-3221);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      
      CategoryAxis categoryAxis0 = combinedDomainCategoryPlot0.getDomainAxisForDataset(int0);
      assertNotNull(categoryAxis0);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabel());
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertNotNull(combinedDomainCategoryPlot1);
      assertNotSame(combinedDomainCategoryPlot0, combinedDomainCategoryPlot1);
      assertNotSame(combinedDomainCategoryPlot1, combinedDomainCategoryPlot0);
      assertTrue(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot1));
      assertTrue(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabel());
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot1.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot1.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot1.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot1.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot1.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot1.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot1.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot1.getWeight());
      assertEquals(true, combinedDomainCategoryPlot1.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot1.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot1.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot1.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot1.isRangeCrosshairLockedOnData());
      
      combinedDomainCategoryPlot0.clearDomainAxes();
      assertNotSame(combinedDomainCategoryPlot0, combinedDomainCategoryPlot1);
      assertTrue(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot1));
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
  }

  @Test
  public void test003()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      
      double double0 = 0.0;
      IntervalMarker intervalMarker0 = new IntervalMarker(double0, double0);
      assertNotNull(intervalMarker0);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01D);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01D);
      
      boolean boolean0 = combinedRangeCategoryPlot0.removeRangeMarker((Marker) intervalMarker0);
      assertFalse(boolean0);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01D);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      assertNotNull(fastScatterPlot0);
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertNull(fastScatterPlot0.getNoDataMessage());
      
      NumberAxis numberAxis0 = (NumberAxis)fastScatterPlot0.getDomainAxis();
      assertNotNull(numberAxis0);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals("X", numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertNull(fastScatterPlot0.getNoDataMessage());
      
      int int0 = combinedRangeCategoryPlot0.getRangeAxisIndex((ValueAxis) numberAxis0);
      assertEquals((-1), int0);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals("X", numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertNull(fastScatterPlot0.getNoDataMessage());
      
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getRangeAxisLocation(int0);
      assertNotNull(axisLocation0);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals("X", numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertNull(fastScatterPlot0.getNoDataMessage());
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      
      CategoryAxis categoryAxis0 = combinedDomainCategoryPlot0.getDomainAxisForDataset(int0);
      assertNotNull(categoryAxis0);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals("X", numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertNotNull(combinedDomainCategoryPlot1);
      assertNotSame(combinedDomainCategoryPlot1, combinedDomainCategoryPlot0);
      assertNotSame(combinedDomainCategoryPlot0, combinedDomainCategoryPlot1);
      assertTrue(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      assertTrue(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot1));
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals("X", numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot1.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot1.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot1.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot1.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot1.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot1.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot1.getWeight());
      assertEquals(true, combinedDomainCategoryPlot1.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot1.getAnchorValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot1.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot1.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot1.getBackgroundImageAlignment());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      
      combinedDomainCategoryPlot1.setDomainAxisLocation(axisLocation0, boolean0);
      assertNotSame(combinedDomainCategoryPlot1, combinedDomainCategoryPlot0);
      assertNotSame(combinedDomainCategoryPlot0, combinedDomainCategoryPlot1);
      assertFalse(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      assertFalse(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot1));
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals("X", numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01D);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot1.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot1.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot1.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot1.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot1.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot1.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot1.getWeight());
      assertEquals(true, combinedDomainCategoryPlot1.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot1.getAnchorValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot1.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot1.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot1.getBackgroundImageAlignment());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      
      combinedDomainCategoryPlot0.clearDomainAxes();
      assertNotSame(combinedDomainCategoryPlot0, combinedDomainCategoryPlot1);
      assertFalse(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot1));
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test004()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      
      double double0 = (-0.8942754054379557);
      IntervalMarker intervalMarker0 = new IntervalMarker(double0, double0);
      assertNotNull(intervalMarker0);
      assertEquals((-0.8942754054379557), intervalMarker0.getStartValue(), 0.01D);
      assertNull(intervalMarker0.getLabel());
      assertEquals((-0.8942754054379557), intervalMarker0.getEndValue(), 0.01D);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      
      boolean boolean0 = combinedRangeCategoryPlot0.removeRangeMarker((Marker) intervalMarker0);
      assertFalse(boolean0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals((-0.8942754054379557), intervalMarker0.getStartValue(), 0.01D);
      assertNull(intervalMarker0.getLabel());
      assertEquals((-0.8942754054379557), intervalMarker0.getEndValue(), 0.01D);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      
      combinedRangeCategoryPlot0.setAnchorValue(double0, boolean0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals((-0.8942754054379557), combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals((-0.8942754054379557), intervalMarker0.getStartValue(), 0.01D);
      assertNull(intervalMarker0.getLabel());
      assertEquals((-0.8942754054379557), intervalMarker0.getEndValue(), 0.01D);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
  }

  @Test
  public void test005()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      
      PlotRenderingInfo plotRenderingInfo0 = null;
      Action action0 = null;
      JToggleButton jToggleButton0 = new JToggleButton(action0);
      assertNotNull(jToggleButton0);
      assertEquals(0, jToggleButton0.getComponentCount());
      assertEquals(0, jToggleButton0.countComponents());
      assertEquals(true, jToggleButton0.isEnabled());
      assertEquals(false, jToggleButton0.getIgnoreRepaint());
      assertEquals(false, jToggleButton0.isPreferredSizeSet());
      assertEquals(true, jToggleButton0.isForegroundSet());
      assertEquals(false, jToggleButton0.isMaximumSizeSet());
      assertEquals(false, jToggleButton0.isFocusCycleRoot());
      assertEquals(true, jToggleButton0.isFontSet());
      assertEquals(true, jToggleButton0.isBackgroundSet());
      assertEquals(false, jToggleButton0.isShowing());
      assertEquals(false, jToggleButton0.isLightweight());
      assertEquals(false, jToggleButton0.isCursorSet());
      assertEquals(false, jToggleButton0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToggleButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToggleButton0.isMinimumSizeSet());
      assertEquals(true, jToggleButton0.isVisible());
      assertEquals(false, jToggleButton0.isValid());
      assertEquals(false, jToggleButton0.isDisplayable());
      assertEquals(false, jToggleButton0.isFocusTraversalPolicySet());
      
      Point point0 = jToggleButton0.getLocation();
      assertNotNull(point0);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0, jToggleButton0.getComponentCount());
      assertEquals(0, jToggleButton0.countComponents());
      assertEquals(true, jToggleButton0.isEnabled());
      assertEquals(false, jToggleButton0.getIgnoreRepaint());
      assertEquals(false, jToggleButton0.isPreferredSizeSet());
      assertEquals(true, jToggleButton0.isForegroundSet());
      assertEquals(false, jToggleButton0.isMaximumSizeSet());
      assertEquals(false, jToggleButton0.isFocusCycleRoot());
      assertEquals(true, jToggleButton0.isFontSet());
      assertEquals(true, jToggleButton0.isBackgroundSet());
      assertEquals(false, jToggleButton0.isShowing());
      assertEquals(false, jToggleButton0.isLightweight());
      assertEquals(false, jToggleButton0.isCursorSet());
      assertEquals(false, jToggleButton0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToggleButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToggleButton0.isMinimumSizeSet());
      assertEquals(true, jToggleButton0.isVisible());
      assertEquals(false, jToggleButton0.isValid());
      assertEquals(false, jToggleButton0.isDisplayable());
      assertEquals(false, jToggleButton0.isFocusTraversalPolicySet());
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try {
        combinedRangeCategoryPlot0.zoomRangeAxes(line2D_Double0.y2, plotRenderingInfo0, (Point2D) point0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test006()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      
      List list0 = combinedRangeCategoryPlot0.getCategories();
      assertNull(list0);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
  }

  @Test
  public void test007()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      
      AxisSpace axisSpace0 = combinedRangeCategoryPlot0.getFixedRangeAxisSpace();
      assertNull(axisSpace0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      
      boolean boolean0 = false;
      combinedRangeCategoryPlot0.setFixedRangeAxisSpace(axisSpace0, boolean0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "YN7";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertNotNull(dateAxis0);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals("YN7", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) dateAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals("YN7", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      
      CategoryAxis categoryAxis0 = null;
      List list0 = combinedRangeCategoryPlot0.getCategoriesForAxis(categoryAxis0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals("YN7", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test
  public void test009()  throws Throwable  {
      int int0 = 1365;
      String string0 = "YN7";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertNotNull(dateAxis0);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals("YN7", dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) dateAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals("YN7", dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      
      Graphics2D graphics2D0 = null;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) dateAxis0);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals("YN7", dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      
      PlotOrientation plotOrientation0 = combinedRangeXYPlot0.getOrientation();
      assertNotNull(plotOrientation0);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals("YN7", dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainCrosshairStroke();
      assertNotNull(basicStroke0);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      
      PinNeedle pinNeedle0 = new PinNeedle();
      assertNotNull(pinNeedle0);
      assertEquals(5, pinNeedle0.getSize());
      assertEquals(0.5, pinNeedle0.getRotateX(), 0.01D);
      assertEquals(0.5, pinNeedle0.getRotateY(), 0.01D);
      
      Paint paint0 = pinNeedle0.getFillPaint();
      assertNull(paint0);
      assertEquals(5, pinNeedle0.getSize());
      assertEquals(0.5, pinNeedle0.getRotateX(), 0.01D);
      assertEquals(0.5, pinNeedle0.getRotateY(), 0.01D);
      
      combinedRangeCategoryPlot0.drawRangeCrosshair(graphics2D0, rectangle2D_Double0, plotOrientation0, int0, dateAxis0, basicStroke0, paint0);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(5, pinNeedle0.getSize());
      assertEquals(0.5, pinNeedle0.getRotateX(), 0.01D);
      assertEquals(0.5, pinNeedle0.getRotateY(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals("YN7", dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
  }

  @Test
  public void test010()  throws Throwable  {
      int int0 = 1365;
      String string0 = "YN7";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertNotNull(dateAxis0);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals("YN7", dateAxis0.getLabel());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) dateAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals("YN7", dateAxis0.getLabel());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      
      Graphics2D graphics2D0 = null;
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      combinedRangeCategoryPlot0.drawDomainMarkers(graphics2D0, rectangle2D_Double0, int0, layer0);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals("YN7", dateAxis0.getLabel());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
  }

  @Test
  public void test011()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(valueAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      
      String string0 = "";
      double double0 = 1.1861885616532344;
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation(string0, (Comparable) string0, double0, double0);
      assertNotNull(categoryPointerAnnotation0);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals(1.1861885616532344, categoryPointerAnnotation0.getAngle(), 0.01D);
      assertEquals(1.1861885616532344, categoryPointerAnnotation0.getValue(), 0.01D);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01D);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01D);
      
      boolean boolean0 = false;
      boolean boolean1 = combinedRangeCategoryPlot0.removeAnnotation((CategoryAnnotation) categoryPointerAnnotation0, boolean0);
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals(1.1861885616532344, categoryPointerAnnotation0.getAngle(), 0.01D);
      assertEquals(1.1861885616532344, categoryPointerAnnotation0.getValue(), 0.01D);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01D);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      
      CategoryAxis categoryAxis0 = new CategoryAxis(string0);
      assertNotNull(categoryAxis0);
      assertNull(categoryAxis0.getLabelToolTip());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals("", categoryAxis0.getLabel());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertNotNull(combinedDomainCategoryPlot0);
      assertNull(categoryAxis0.getLabelToolTip());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals("", categoryAxis0.getLabel());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      
      combinedDomainCategoryPlot0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0, boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals(1.1861885616532344, categoryPointerAnnotation0.getAngle(), 0.01D);
      assertEquals(1.1861885616532344, categoryPointerAnnotation0.getValue(), 0.01D);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01D);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(categoryAxis0.getLabelToolTip());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals("", categoryAxis0.getLabel());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
  }

  @Test
  public void test012()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      
      Paint paint0 = null;
      // Undeclared exception!
      try {
        combinedRangeCategoryPlot0.setRangeCrosshairPaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "YN7";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertNotNull(dateAxis0);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals("YN7", dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) dateAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals("YN7", dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainCrosshairStroke();
      assertNotNull(basicStroke0);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      
      combinedRangeCategoryPlot0.setRangeCrosshairStroke((Stroke) basicStroke0);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals("YN7", dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
  }

  @Test
  public void test014()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      
      boolean boolean0 = true;
      combinedRangeCategoryPlot0.setRangeCrosshairVisible(boolean0);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      
      int int0 = (-3221);
      combinedRangeCategoryPlot0.setRangeCrosshairValue((double) int0);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals((-3221.0), combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(string0);
      assertNotNull(subCategoryAxis0);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) subCategoryAxis0);
      assertNotNull(combinedDomainCategoryPlot0);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      
      boolean boolean0 = false;
      combinedDomainCategoryPlot0.setRangeCrosshairLockedOnData(boolean0);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test
  public void test016()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(valueAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      
      boolean boolean0 = true;
      combinedRangeCategoryPlot0.setRangeCrosshairLockedOnData(boolean0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
  }

  @Test
  public void test017()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      
      boolean boolean0 = false;
      combinedRangeCategoryPlot0.setRangeCrosshairVisible(boolean0);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
  }

  @Test
  public void test018()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      
      double double0 = (-0.8942754054379557);
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) double0);
      assertNotNull(categoryMarker0);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      
      combinedRangeCategoryPlot0.addRangeMarker((Marker) categoryMarker0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(double0, double0);
      assertNotNull(intervalMarker0);
      assertEquals((-0.8942754054379557), intervalMarker0.getEndValue(), 0.01D);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals((-0.8942754054379557), intervalMarker0.getStartValue(), 0.01D);
      
      boolean boolean0 = combinedRangeCategoryPlot0.removeRangeMarker((Marker) intervalMarker0);
      assertFalse(boolean0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals((-0.8942754054379557), intervalMarker0.getEndValue(), 0.01D);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals((-0.8942754054379557), intervalMarker0.getStartValue(), 0.01D);
  }

  @Test
  public void test019()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      
      boolean boolean0 = true;
      int int0 = 1;
      int int1 = combinedRangeCategoryPlot0.getDatasetCount();
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      IntervalMarker intervalMarker0 = new IntervalMarker((double) int0, (double) int0);
      assertNotNull(intervalMarker0);
      assertTrue(int0 == int1);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01D);
      assertNull(intervalMarker0.getLabel());
      
      boolean boolean1 = combinedRangeCategoryPlot0.removeRangeMarker(int1, (Marker) intervalMarker0, layer0, boolean0);
      assertFalse(boolean1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01D);
      assertNull(intervalMarker0.getLabel());
  }

  @Test
  public void test020()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      
      double double0 = (-0.8942754054379557);
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) double0);
      assertNotNull(categoryMarker0);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      
      combinedRangeCategoryPlot0.addRangeMarker((Marker) categoryMarker0);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      
      combinedRangeCategoryPlot0.clearRangeMarkers();
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
  }

  @Test
  public void test021()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      
      combinedRangeCategoryPlot0.clearRangeMarkers();
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
  }

  @Test
  public void test022()  throws Throwable  {
      boolean boolean0 = false;
      int int0 = 0;
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      
      ValueMarker valueMarker0 = new ValueMarker((double) int0);
      assertNotNull(valueMarker0);
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      combinedDomainCategoryPlot0.addRangeMarker(int0, (Marker) valueMarker0, layer0, boolean0);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.BACKGROUND", layer0.toString());
  }

  @Test
  public void test023()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(valueAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = combinedDomainCategoryPlot0.getDomainAxisCount();
      assertEquals(1, int0);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      
      Point2D.Double point2D_Double0 = new Point2D.Double((double) int0, (double) int0);
      assertNotNull(point2D_Double0);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0, point2D_Double0.y, 0.01D);
      assertEquals(1.0, point2D_Double0.x, 0.01D);
      
      IntervalMarker intervalMarker0 = new IntervalMarker((double) int0, point2D_Double0.x);
      assertNotNull(intervalMarker0);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01D);
      assertEquals(1.0, point2D_Double0.y, 0.01D);
      assertEquals(1.0, point2D_Double0.x, 0.01D);
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      boolean boolean1 = combinedRangeCategoryPlot0.removeDomainMarker(int0, (Marker) intervalMarker0, layer0, boolean0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01D);
      assertEquals(1.0, point2D_Double0.y, 0.01D);
      assertEquals(1.0, point2D_Double0.x, 0.01D);
  }

  @Test
  public void test024()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      
      double double0 = (-2928.6817975586655);
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) double0);
      assertNotNull(categoryMarker0);
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      
      combinedRangeCategoryPlot0.addDomainMarker(categoryMarker0);
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      
      int int0 = 0;
      combinedRangeCategoryPlot0.clearDomainMarkers(int0);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
  }

  @Test
  public void test025()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      
      int int0 = 81;
      combinedRangeCategoryPlot0.clearDomainMarkers(int0);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
  }

  @Test
  public void test026()  throws Throwable  {
      String string0 = "";
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertNotNull(layeredBarRenderer0);
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, layeredBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, layeredBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      
      ValueAxis valueAxis0 = null;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(valueAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      
      CategoryDataset categoryDataset0 = combinedRangeCategoryPlot0.getDataset();
      assertNull(categoryDataset0);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      
      boolean boolean0 = combinedRangeCategoryPlot0.isRangeGridlinesVisible();
      assertTrue(boolean0);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      
      CategoryAxis categoryAxis0 = null;
      CategoryPlot categoryPlot0 = new CategoryPlot(categoryDataset0, categoryAxis0, valueAxis0, (CategoryItemRenderer) layeredBarRenderer0);
      assertNotNull(categoryPlot0);
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, layeredBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, layeredBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isSubplot());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      
      CategoryPlot categoryPlot1 = layeredBarRenderer0.getPlot();
      assertNotNull(categoryPlot1);
      assertSame(categoryPlot1, categoryPlot0);
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, layeredBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, layeredBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(true, categoryPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot1.getDrawSharedDomainAxis());
      assertEquals(0.5F, categoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot1.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, categoryPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot1.isDomainGridlinesVisible());
      assertEquals(15, categoryPlot1.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot1.isSubplot());
      assertNull(categoryPlot1.getNoDataMessage());
      assertEquals(true, categoryPlot1.isRangeZoomable());
      assertEquals(0, categoryPlot1.getWeight());
      assertEquals(true, categoryPlot1.isOutlineVisible());
      assertEquals(false, categoryPlot1.isRangeCrosshairVisible());
      assertEquals(false, categoryPlot1.isDomainZoomable());
      
      JFreeChart jFreeChart0 = new JFreeChart(string0, (Plot) categoryPlot1);
      assertNotNull(jFreeChart0);
      assertSame(categoryPlot1, categoryPlot0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, layeredBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, layeredBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(true, categoryPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot1.getDrawSharedDomainAxis());
      assertEquals(0.5F, categoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot1.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, categoryPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot1.isDomainGridlinesVisible());
      assertEquals(15, categoryPlot1.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot1.isSubplot());
      assertNull(categoryPlot1.getNoDataMessage());
      assertEquals(true, categoryPlot1.isRangeZoomable());
      assertEquals(0, categoryPlot1.getWeight());
      assertEquals(true, categoryPlot1.isOutlineVisible());
      assertEquals(false, categoryPlot1.isRangeCrosshairVisible());
      assertEquals(false, categoryPlot1.isDomainZoomable());
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) boolean0);
      assertNotNull(categoryMarker0);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      categoryPlot1.addDomainMarker(categoryMarker0, layer0);
      assertSame(categoryPlot1, categoryPlot0);
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, layeredBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, layeredBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(true, categoryPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot1.getDrawSharedDomainAxis());
      assertEquals(0.5F, categoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot1.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, categoryPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot1.isDomainGridlinesVisible());
      assertEquals(15, categoryPlot1.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot1.isSubplot());
      assertNull(categoryPlot1.getNoDataMessage());
      assertEquals(true, categoryPlot1.isRangeZoomable());
      assertEquals(0, categoryPlot1.getWeight());
      assertEquals(true, categoryPlot1.isOutlineVisible());
      assertEquals(false, categoryPlot1.isRangeCrosshairVisible());
      assertEquals(false, categoryPlot1.isDomainZoomable());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      
      int int0 = 2967;
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0);
      assertNotNull(bufferedImage0);
      assertSame(categoryPlot1, categoryPlot0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, layeredBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, layeredBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(true, categoryPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot1.getDrawSharedDomainAxis());
      assertEquals(0.5F, categoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot1.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, categoryPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot1.isDomainGridlinesVisible());
      assertEquals(15, categoryPlot1.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot1.isSubplot());
      assertNull(categoryPlot1.getNoDataMessage());
      assertEquals(true, categoryPlot1.isRangeZoomable());
      assertEquals(0, categoryPlot1.getWeight());
      assertEquals(true, categoryPlot1.isOutlineVisible());
      assertEquals(false, categoryPlot1.isRangeCrosshairVisible());
      assertEquals(false, categoryPlot1.isDomainZoomable());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2967, bufferedImage0.getWidth());
      assertEquals(2967, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(2967, bufferedImage0.getTileWidth());
      assertEquals(2967, bufferedImage0.getHeight());
  }

  @Test
  public void test027()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      
      int int0 = combinedRangeCategoryPlot0.getDomainAxisCount();
      assertEquals(1, int0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      
      Layer layer0 = null;
      Collection collection0 = combinedRangeCategoryPlot0.getDomainMarkers(int0, layer0);
      assertNull(collection0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test028()  throws Throwable  {
      String string0 = "YN7";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertNotNull(dateAxis0);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals("YN7", dateAxis0.getLabel());
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) dateAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals("YN7", dateAxis0.getLabel());
      
      combinedRangeCategoryPlot0.clearDomainMarkers();
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals("YN7", dateAxis0.getLabel());
  }

  @Test
  public void test029()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(valueAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      
      String string0 = "";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertNotNull(dateAxis0);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent((Object) dateAxis0);
      assertNotNull(rendererChangeEvent0);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      
      combinedRangeCategoryPlot0.rendererChanged(rendererChangeEvent0);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
  }

  @Test
  public void test030()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      
      double double0 = (-0.8942754054379557);
      combinedRangeCategoryPlot0.zoom(double0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
  }

  @Test
  public void test031()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(valueAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      
      Color color0 = (Color)Axis.DEFAULT_TICK_LABEL_PAINT;
      assertNotNull(color0);
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      
      combinedRangeCategoryPlot0.setRangeGridlinePaint((Paint) color0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
  }

  @Test
  public void test032()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      
      BasicStroke basicStroke0 = (BasicStroke)AbstractRenderer.DEFAULT_STROKE;
      assertNotNull(basicStroke0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      
      combinedRangeCategoryPlot0.setRangeGridlineStroke((Stroke) basicStroke0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
  }

  @Test
  public void test033()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      
      boolean boolean0 = false;
      combinedRangeCategoryPlot0.setRangeGridlinesVisible(boolean0);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
  }

  @Test
  public void test034()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      combinedDomainCategoryPlot0.setRangeGridlinesVisible(boolean0);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
  }

  @Test
  public void test035()  throws Throwable  {
      String string0 = "";
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      
      DateAxis dateAxis0 = new DateAxis(string0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(dateAxis0);
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals("", dateAxis0.getLabel());
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      //  // Unstable assertion: assertNotNull(rectangle2D_Double0);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) dateAxis0);
      //  // Unstable assertion: assertNotNull(combinedRangeCategoryPlot0);
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals("", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      //  // Unstable assertion: assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      //  // Unstable assertion: assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      
      boolean boolean0 = combinedRangeCategoryPlot0.isDomainGridlinesVisible();
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals("", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      //  // Unstable assertion: assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      //  // Unstable assertion: assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(rectangle2D_Double0.width, boolean0);
      //  // Unstable assertion: assertNotNull(clusteredXYBarRenderer0);
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(false, clusteredXYBarRenderer0.isDrawBarOutline());
      //  // Unstable assertion: assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      //  // Unstable assertion: assertEquals(1, clusteredXYBarRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01D);
      //  // Unstable assertion: assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(true, clusteredXYBarRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(false, clusteredXYBarRenderer0.getUseYInterval());
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals("", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      //  // Unstable assertion: assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      //  // Unstable assertion: assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      
      Color color0 = (Color)clusteredXYBarRenderer0.getBaseOutlinePaint();
      //  // Unstable assertion: assertNotNull(color0);
      //  // Unstable assertion: assertEquals(128, color0.getGreen());
      //  // Unstable assertion: assertEquals(128, color0.getBlue());
      //  // Unstable assertion: assertEquals(-8355712, color0.getRGB());
      //  // Unstable assertion: assertEquals(255, color0.getAlpha());
      //  // Unstable assertion: assertEquals(1, color0.getTransparency());
      //  // Unstable assertion: assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      //  // Unstable assertion: assertEquals(128, color0.getRed());
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(false, clusteredXYBarRenderer0.isDrawBarOutline());
      //  // Unstable assertion: assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      //  // Unstable assertion: assertEquals(1, clusteredXYBarRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01D);
      //  // Unstable assertion: assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(true, clusteredXYBarRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(false, clusteredXYBarRenderer0.getUseYInterval());
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals("", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      //  // Unstable assertion: assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      //  // Unstable assertion: assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      
      combinedRangeCategoryPlot0.setDomainGridlinePaint((Paint) color0);
      //  // Unstable assertion: assertEquals(128, color0.getGreen());
      //  // Unstable assertion: assertEquals(128, color0.getBlue());
      //  // Unstable assertion: assertEquals(-8355712, color0.getRGB());
      //  // Unstable assertion: assertEquals(255, color0.getAlpha());
      //  // Unstable assertion: assertEquals(1, color0.getTransparency());
      //  // Unstable assertion: assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      //  // Unstable assertion: assertEquals(128, color0.getRed());
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(false, clusteredXYBarRenderer0.isDrawBarOutline());
      //  // Unstable assertion: assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      //  // Unstable assertion: assertEquals(1, clusteredXYBarRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01D);
      //  // Unstable assertion: assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(true, clusteredXYBarRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(false, clusteredXYBarRenderer0.getUseYInterval());
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals("", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      //  // Unstable assertion: assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      //  // Unstable assertion: assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
  }

  @Test
  public void test036()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      
      int int0 = (-3221);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertNotNull(statisticalBarRenderer0);
      assertEquals(0.0, statisticalBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0, statisticalBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      
      BasicStroke basicStroke0 = (BasicStroke)statisticalBarRenderer0.getItemStroke(int0, int0);
      assertNotNull(basicStroke0);
      assertEquals(0.0, statisticalBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0, statisticalBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      
      combinedRangeCategoryPlot0.setDomainGridlineStroke((Stroke) basicStroke0);
      assertEquals(0.0, statisticalBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0, statisticalBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
  }

  @Test
  public void test037()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      
      CategoryAnchor categoryAnchor0 = combinedRangeCategoryPlot0.getDomainGridlinePosition();
      assertNotNull(categoryAnchor0);
      assertEquals("CategoryAnchor.MIDDLE", categoryAnchor0.toString());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      
      combinedRangeCategoryPlot0.setDomainGridlinePosition(categoryAnchor0);
      assertEquals("CategoryAnchor.MIDDLE", categoryAnchor0.toString());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
  }

  @Test
  public void test038()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(valueAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      combinedRangeCategoryPlot0.setDomainGridlinesVisible(boolean0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
  }

  @Test
  public void test039()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      
      SortOrder sortOrder0 = combinedRangeCategoryPlot0.getColumnRenderingOrder();
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      
      combinedRangeCategoryPlot0.setRowRenderingOrder(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
  }

  @Test
  public void test040()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      
      SortOrder sortOrder0 = null;
      // Undeclared exception!
      try {
        combinedDomainCategoryPlot0.setColumnRenderingOrder(sortOrder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
      }
  }

  @Test
  public void test041()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      
      combinedRangeCategoryPlot0.setColumnRenderingOrder(sortOrder0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
  }

  @Test
  public void test042()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.FORWARD;
      assertNotNull(datasetRenderingOrder0);
      assertEquals("DatasetRenderingOrder.FORWARD", datasetRenderingOrder0.toString());
      
      combinedDomainCategoryPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertEquals("DatasetRenderingOrder.FORWARD", datasetRenderingOrder0.toString());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
  }

  @Test
  public void test043()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      
      CategoryItemRenderer categoryItemRenderer0 = combinedRangeCategoryPlot0.getRendererForDataset((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNull(categoryItemRenderer0);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
  }

  @Test
  public void test044()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      
      CategoryItemRenderer[] categoryItemRendererArray0 = new CategoryItemRenderer[4];
      combinedRangeCategoryPlot0.setRenderers(categoryItemRendererArray0);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
  }

  @Test
  public void test045()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      //  // Unstable assertion: assertNotNull(spiderWebPlot0);
      //  // Unstable assertion: assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      //  // Unstable assertion: assertNull(spiderWebPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(true, spiderWebPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      //  // Unstable assertion: assertEquals(false, spiderWebPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      //  // Unstable assertion: assertEquals(true, spiderWebPlot0.isWebFilled());
      //  // Unstable assertion: assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      
      CategoryDataset categoryDataset0 = spiderWebPlot0.getDataset();
      //  // Unstable assertion: assertNull(categoryDataset0);
      //  // Unstable assertion: assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      //  // Unstable assertion: assertNull(spiderWebPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(true, spiderWebPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      //  // Unstable assertion: assertEquals(false, spiderWebPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      //  // Unstable assertion: assertEquals(true, spiderWebPlot0.isWebFilled());
      //  // Unstable assertion: assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      
      String string0 = "";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(string0);
      //  // Unstable assertion: assertNotNull(subCategoryAxis0);
      //  // Unstable assertion: assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      //  // Unstable assertion: assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertNull(subCategoryAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      //  // Unstable assertion: assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertNull(subCategoryAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      //  // Unstable assertion: assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(true, subCategoryAxis0.isVisible());
      //  // Unstable assertion: assertEquals("", subCategoryAxis0.getLabel());
      //  // Unstable assertion: assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      
      DateAxis dateAxis0 = new DateAxis(string0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(dateAxis0);
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals("", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      //  // Unstable assertion: assertNotNull(rectangle2D_Double0);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) dateAxis0);
      //  // Unstable assertion: assertNotNull(combinedRangeCategoryPlot0);
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals("", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      //  // Unstable assertion: assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      
      BarRenderer barRenderer0 = new BarRenderer();
      //  // Unstable assertion: assertNotNull(barRenderer0);
      //  // Unstable assertion: assertEquals(0.0, barRenderer0.getMinimumBarLength(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, barRenderer0.getLowerClip(), 0.01D);
      //  // Unstable assertion: assertEquals(false, barRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(true, barRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(0.2, barRenderer0.getItemMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, barRenderer0.getUpperClip(), 0.01D);
      //  // Unstable assertion: assertEquals(false, barRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(false, barRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(false, barRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(true, barRenderer0.getIncludeBaseInRange());
      //  // Unstable assertion: assertEquals(1, barRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(false, barRenderer0.isDrawBarOutline());
      //  // Unstable assertion: assertEquals(false, barRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(1.0, barRenderer0.getMaximumBarWidth(), 0.01D);
      //  // Unstable assertion: assertEquals(0, barRenderer0.getColumnCount());
      //  // Unstable assertion: assertEquals(true, barRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(0, barRenderer0.getRowCount());
      //  // Unstable assertion: assertEquals(true, barRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(true, barRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(true, barRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(0.0, barRenderer0.getBase(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0, barRenderer0.getItemLabelAnchorOffset(), 0.01D);
      
      boolean boolean0 = combinedRangeCategoryPlot0.isDomainGridlinesVisible();
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals("", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      //  // Unstable assertion: assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(boolean0, boolean0);
      //  // Unstable assertion: assertNotNull(statisticalLineAndShapeRenderer0);
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      //  // Unstable assertion: assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals("", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      //  // Unstable assertion: assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      
      CategoryPlot categoryPlot0 = new CategoryPlot(categoryDataset0, (CategoryAxis) subCategoryAxis0, (ValueAxis) dateAxis0, (CategoryItemRenderer) barRenderer0);
      //  // Unstable assertion: assertNotNull(categoryPlot0);
      //  // Unstable assertion: assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      //  // Unstable assertion: assertNull(spiderWebPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(true, spiderWebPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      //  // Unstable assertion: assertEquals(false, spiderWebPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      //  // Unstable assertion: assertEquals(true, spiderWebPlot0.isWebFilled());
      //  // Unstable assertion: assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      //  // Unstable assertion: assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertNull(subCategoryAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      //  // Unstable assertion: assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertNull(subCategoryAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      //  // Unstable assertion: assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(true, subCategoryAxis0.isVisible());
      //  // Unstable assertion: assertEquals("", subCategoryAxis0.getLabel());
      //  // Unstable assertion: assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals("", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertNull(categoryPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      //  // Unstable assertion: assertEquals(true, categoryPlot0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(true, categoryPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(false, categoryPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(0, categoryPlot0.getWeight());
      //  // Unstable assertion: assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      //  // Unstable assertion: assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(false, categoryPlot0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(0.0, barRenderer0.getMinimumBarLength(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, barRenderer0.getLowerClip(), 0.01D);
      //  // Unstable assertion: assertEquals(false, barRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(true, barRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(0.2, barRenderer0.getItemMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, barRenderer0.getUpperClip(), 0.01D);
      //  // Unstable assertion: assertEquals(false, barRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(false, barRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(false, barRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(true, barRenderer0.getIncludeBaseInRange());
      //  // Unstable assertion: assertEquals(1, barRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(false, barRenderer0.isDrawBarOutline());
      //  // Unstable assertion: assertEquals(false, barRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(1.0, barRenderer0.getMaximumBarWidth(), 0.01D);
      //  // Unstable assertion: assertEquals(0, barRenderer0.getColumnCount());
      //  // Unstable assertion: assertEquals(true, barRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(0, barRenderer0.getRowCount());
      //  // Unstable assertion: assertEquals(true, barRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(true, barRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(true, barRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(0.0, barRenderer0.getBase(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0, barRenderer0.getItemLabelAnchorOffset(), 0.01D);
      
      Line2D.Double line2D_Double0 = new Line2D.Double();
      //  // Unstable assertion: assertNotNull(line2D_Double0);
      //  // Unstable assertion: assertEquals(0.0, line2D_Double0.x1, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, line2D_Double0.y2, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, line2D_Double0.y1, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, line2D_Double0.x2, 0.01D);
      
      int int0 = line2D_Double0.relativeCCW(rectangle2D_Double0.x, rectangle2D_Double0.x);
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, line2D_Double0.x1, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, line2D_Double0.y2, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, line2D_Double0.y1, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, line2D_Double0.x2, 0.01D);
      
      categoryPlot0.setRenderer(int0, (CategoryItemRenderer) statisticalLineAndShapeRenderer0, boolean0);
      //  // Unstable assertion: assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      //  // Unstable assertion: assertNull(spiderWebPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(true, spiderWebPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      //  // Unstable assertion: assertEquals(false, spiderWebPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      //  // Unstable assertion: assertEquals(true, spiderWebPlot0.isWebFilled());
      //  // Unstable assertion: assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      //  // Unstable assertion: assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertNull(subCategoryAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      //  // Unstable assertion: assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertNull(subCategoryAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      //  // Unstable assertion: assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(true, subCategoryAxis0.isVisible());
      //  // Unstable assertion: assertEquals("", subCategoryAxis0.getLabel());
      //  // Unstable assertion: assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      //  // Unstable assertion: assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals("", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertNull(categoryPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      //  // Unstable assertion: assertEquals(true, categoryPlot0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(true, categoryPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(false, categoryPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(0, categoryPlot0.getWeight());
      //  // Unstable assertion: assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      //  // Unstable assertion: assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(false, categoryPlot0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(0.0, barRenderer0.getMinimumBarLength(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, barRenderer0.getLowerClip(), 0.01D);
      //  // Unstable assertion: assertEquals(false, barRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(true, barRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(0.2, barRenderer0.getItemMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, barRenderer0.getUpperClip(), 0.01D);
      //  // Unstable assertion: assertEquals(false, barRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(false, barRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(false, barRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(true, barRenderer0.getIncludeBaseInRange());
      //  // Unstable assertion: assertEquals(1, barRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(false, barRenderer0.isDrawBarOutline());
      //  // Unstable assertion: assertEquals(false, barRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(1.0, barRenderer0.getMaximumBarWidth(), 0.01D);
      //  // Unstable assertion: assertEquals(0, barRenderer0.getColumnCount());
      //  // Unstable assertion: assertEquals(true, barRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(0, barRenderer0.getRowCount());
      //  // Unstable assertion: assertEquals(true, barRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(true, barRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(true, barRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(0.0, barRenderer0.getBase(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0, barRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      //  // Unstable assertion: assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, line2D_Double0.x1, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, line2D_Double0.y2, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, line2D_Double0.y1, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, line2D_Double0.x2, 0.01D);
  }

  @Test
  public void test046()  throws Throwable  {
      int int0 = 1365;
      String string0 = "YN7";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertNotNull(dateAxis0);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals("YN7", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) dateAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals("YN7", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      
      DateAxis dateAxis1 = (DateAxis)combinedRangeCategoryPlot0.getRangeAxisForDataset(int0);
      assertNotNull(dateAxis1);
      assertSame(dateAxis1, dateAxis0);
      assertSame(dateAxis0, dateAxis1);
      assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis1.isPositiveArrowVisible());
      assertEquals(2.0, dateAxis1.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis1.isAutoTickUnitSelection());
      assertEquals(false, dateAxis1.isVerticalTickLabels());
      assertEquals(true, dateAxis1.isTickLabelsVisible());
      assertEquals(true, dateAxis1.isAxisLineVisible());
      assertEquals(0.0, dateAxis1.getFixedDimension(), 0.01D);
      assertEquals(0.0, dateAxis1.getLowerBound(), 0.01D);
      assertEquals(0.05, dateAxis1.getLowerMargin(), 0.01D);
      assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01D);
      assertEquals(1.0, dateAxis1.getUpperBound(), 0.01D);
      assertNull(dateAxis1.getLabelToolTip());
      assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals("YN7", dateAxis1.getLabel());
      assertEquals(0.0, dateAxis1.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis1.isAutoRange());
      assertEquals(false, dateAxis1.isNegativeArrowVisible());
      assertEquals(true, dateAxis1.isTickMarksVisible());
      assertNull(dateAxis1.getLabelURL());
      assertEquals(0.05, dateAxis1.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis1.isInverted());
      assertEquals(true, dateAxis1.isVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals("YN7", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test
  public void test047()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      
      double[][] doubleArray0 = new double[7][10];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getColumnCount());
      
      combinedRangeCategoryPlot0.setDataset((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
  }

  @Test
  public void test048()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      
      combinedDomainCategoryPlot0.clearRangeAxes();
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
  }

  @Test
  public void test049()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      
      combinedRangeCategoryPlot0.clearRangeAxes();
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
  }

  @Test
  public void test050()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      
      int int0 = 22;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      assertNotNull(axisLocation0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      
      boolean boolean0 = true;
      combinedDomainCategoryPlot0.setRangeAxisLocation(int0, axisLocation0, boolean0);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
  }

  @Test
  public void test051()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      
      int int0 = 1365;
      String string0 = "YN7";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertNotNull(dateAxis0);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals("YN7", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) dateAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals("YN7", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      
      combinedDomainCategoryPlot0.setRangeAxis(int0, (ValueAxis) dateAxis0);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals("YN7", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      
      Graphics2D graphics2D0 = null;
      AxisSpace axisSpace0 = combinedRangeCategoryPlot0.getFixedRangeAxisSpace();
      assertNull(axisSpace0);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals("YN7", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      
      // Undeclared exception!
      try {
        AxisSpace axisSpace1 = combinedDomainCategoryPlot0.calculateRangeAxisSpace(graphics2D0, rectangle2D_Double0, axisSpace0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test052()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      
      int int0 = combinedRangeCategoryPlot0.getDomainAxisCount();
      assertEquals(1, int0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertNotNull(categoryPlot0);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, categoryPlot0.getWeight());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      
      combinedRangeCategoryPlot0.add(categoryPlot0, int0);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, categoryPlot0.isSubplot());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, categoryPlot0.getWeight());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      
      NumberAxis numberAxis0 = (NumberAxis)categoryPlot0.getRangeAxis();
      assertNotNull(numberAxis0);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, categoryPlot0.isSubplot());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, categoryPlot0.getWeight());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      
      int int1 = combinedRangeCategoryPlot0.getRangeAxisIndex((ValueAxis) numberAxis0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, categoryPlot0.isSubplot());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, categoryPlot0.getWeight());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test053()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      
      // Undeclared exception!
      try {
        int int0 = combinedDomainCategoryPlot0.getRangeAxisIndex(valueAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'axis' argument.
         //
      }
  }

  @Test
  public void test054()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      combinedRangeCategoryPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test055()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      assertNotNull(polarPlot0);
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertEquals(true, polarPlot0.isRangeZoomable());
      assertEquals(false, polarPlot0.isSubplot());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isAngleGridlinesVisible());
      assertEquals(true, polarPlot0.isRadiusGridlinesVisible());
      assertEquals(true, polarPlot0.isOutlineVisible());
      assertEquals(false, polarPlot0.isDomainZoomable());
      assertEquals(true, polarPlot0.isAngleLabelsVisible());
      assertNull(polarPlot0.getNoDataMessage());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      
      ValueAxis valueAxis0 = polarPlot0.getAxis();
      assertNull(valueAxis0);
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertEquals(true, polarPlot0.isRangeZoomable());
      assertEquals(false, polarPlot0.isSubplot());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isAngleGridlinesVisible());
      assertEquals(true, polarPlot0.isRadiusGridlinesVisible());
      assertEquals(true, polarPlot0.isOutlineVisible());
      assertEquals(false, polarPlot0.isDomainZoomable());
      assertEquals(true, polarPlot0.isAngleLabelsVisible());
      assertNull(polarPlot0.getNoDataMessage());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(valueAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertEquals(true, polarPlot0.isRangeZoomable());
      assertEquals(false, polarPlot0.isSubplot());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isAngleGridlinesVisible());
      assertEquals(true, polarPlot0.isRadiusGridlinesVisible());
      assertEquals(true, polarPlot0.isOutlineVisible());
      assertEquals(false, polarPlot0.isDomainZoomable());
      assertEquals(true, polarPlot0.isAngleLabelsVisible());
      assertNull(polarPlot0.getNoDataMessage());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot1 = (CombinedRangeCategoryPlot)combinedRangeCategoryPlot0.clone();
      assertNotNull(combinedRangeCategoryPlot1);
      assertNotSame(combinedRangeCategoryPlot0, combinedRangeCategoryPlot1);
      assertNotSame(combinedRangeCategoryPlot1, combinedRangeCategoryPlot0);
      assertTrue(combinedRangeCategoryPlot0.equals((Object)combinedRangeCategoryPlot1));
      assertTrue(combinedRangeCategoryPlot1.equals((Object)combinedRangeCategoryPlot0));
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot1.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot1.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot1.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot1.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot1.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot1.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot1.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot1.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot1.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot1.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeCategoryPlot1.getNoDataMessage());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertEquals(true, polarPlot0.isRangeZoomable());
      assertEquals(false, polarPlot0.isSubplot());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isAngleGridlinesVisible());
      assertEquals(true, polarPlot0.isRadiusGridlinesVisible());
      assertEquals(true, polarPlot0.isOutlineVisible());
      assertEquals(false, polarPlot0.isDomainZoomable());
      assertEquals(true, polarPlot0.isAngleLabelsVisible());
      assertNull(polarPlot0.getNoDataMessage());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test056()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      
      combinedRangeCategoryPlot0.clearDomainAxes();
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
  }

  @Test
  public void test057()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      
      boolean boolean0 = true;
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      assertNotNull(fastScatterPlot0);
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      
      NumberAxis numberAxis0 = (NumberAxis)fastScatterPlot0.getDomainAxis();
      assertNotNull(numberAxis0);
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals("X", numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isVisible());
      
      int int0 = combinedRangeCategoryPlot0.getRangeAxisIndex((ValueAxis) numberAxis0);
      assertEquals((-1), int0);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals("X", numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isVisible());
      
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getRangeAxisLocation(int0);
      assertNotNull(axisLocation0);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals("X", numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      
      combinedDomainCategoryPlot0.setDomainAxisLocation(axisLocation0, boolean0);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals("X", numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
  }

  @Test
  public void test058()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      
      int int0 = 73;
      RectangleEdge rectangleEdge0 = combinedDomainCategoryPlot0.getDomainAxisEdge(int0);
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
  }

  @Test
  public void test059()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      
      String string0 = "The renderer has changed and I don't know what to do!";
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(string0);
      assertNotNull(categoryAxis3D0);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals("The renderer has changed and I don't know what to do!", categoryAxis3D0.getLabel());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelToolTip());
      
      int int0 = combinedRangeCategoryPlot0.getDomainAxisIndex((CategoryAxis) categoryAxis3D0);
      assertEquals((-1), int0);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals("The renderer has changed and I don't know what to do!", categoryAxis3D0.getLabel());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
  }

  @Test
  public void test060()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      
      CategoryAxis[] categoryAxisArray0 = new CategoryAxis[18];
      combinedRangeCategoryPlot0.setDomainAxes(categoryAxisArray0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
  }

  @Test
  public void test061()  throws Throwable  {
      String string0 = "";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(string0);
      assertNotNull(subCategoryAxis0);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, subCategoryAxis0.isVisible());
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) subCategoryAxis0);
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, subCategoryAxis0.isVisible());
      
      combinedDomainCategoryPlot0.setDomainAxis((CategoryAxis) subCategoryAxis0);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, subCategoryAxis0.isVisible());
  }

  @Test
  public void test062()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      
      RectangleInsets rectangleInsets0 = null;
      // Undeclared exception!
      try {
        combinedRangeCategoryPlot0.setAxisOffset(rectangleInsets0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'offset' argument.
         //
      }
  }

  @Test
  public void test063()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      
      RectangleInsets rectangleInsets0 = Plot.DEFAULT_INSETS;
      assertNotNull(rectangleInsets0);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getLeft(), 0.01D);
      
      combinedDomainCategoryPlot0.setAxisOffset(rectangleInsets0);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
  }

  @Test
  public void test064()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      String string0 = "org.jfree.chart.util.GradientPaintTransformType";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(string0);
      assertNotNull(subCategoryAxis0);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals("org.jfree.chart.util.GradientPaintTransformType", subCategoryAxis0.getLabel());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertNull(subCategoryAxis0.getLabelToolTip());
      
      double double0 = 1000.0;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0, double0, string0);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(1000.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals("org.jfree.chart.util.GradientPaintTransformType", cyclicNumberAxis0.getLabel());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1000.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(1000.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      
      CategoryItemRenderer categoryItemRenderer0 = null;
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (CategoryAxis) subCategoryAxis0, (ValueAxis) cyclicNumberAxis0, categoryItemRenderer0);
      assertNotNull(categoryPlot0);
      assertEquals(1000.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals("org.jfree.chart.util.GradientPaintTransformType", cyclicNumberAxis0.getLabel());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1000.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(1000.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-999.0), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals("org.jfree.chart.util.GradientPaintTransformType", subCategoryAxis0.getLabel());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
  }

  @Test
  public void test065()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(valueAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      
      double double0 = 0.0;
      combinedRangeCategoryPlot0.setAnchorValue(double0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
  }

  @Test
  public void test066()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      
      String string0 = "YN7";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertNotNull(dateAxis0);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals("YN7", dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) dateAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals("YN7", dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      
      AxisSpace axisSpace0 = combinedRangeCategoryPlot0.getFixedRangeAxisSpace();
      assertNull(axisSpace0);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals("YN7", dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      
      combinedDomainCategoryPlot0.setFixedDomainAxisSpace(axisSpace0);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals("YN7", dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test067()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeCategoryPlot0.getRangeCrosshairStroke();
      assertNotNull(basicStroke0);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
  }

  @Test
  public void test068()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      
      BasicStroke basicStroke0 = (BasicStroke)AbstractRenderer.DEFAULT_STROKE;
      assertNotNull(basicStroke0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      
      boolean boolean0 = true;
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      assertNotNull(clusteredXYBarRenderer0);
      assertEquals(1, clusteredXYBarRenderer0.getPassCount());
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(true, clusteredXYBarRenderer0.getBaseCreateEntities());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01D);
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, clusteredXYBarRenderer0.isDrawBarOutline());
      assertEquals(false, clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      Color color0 = (Color)clusteredXYBarRenderer0.getBaseFillPaint();
      assertNotNull(color0);
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(1, clusteredXYBarRenderer0.getPassCount());
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(true, clusteredXYBarRenderer0.getBaseCreateEntities());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01D);
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, clusteredXYBarRenderer0.isDrawBarOutline());
      assertEquals(false, clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      int int0 = (-3209);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation((Comparable) rectangle2D_Double0.height, (double) int0, (Comparable) boolean0, rectangle2D_Double0.y, (Paint) color0, (Stroke) basicStroke0);
      assertNotNull(categoryLineAnnotation0);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-3209.0), categoryLineAnnotation0.getValue1(), 0.01D);
      assertEquals(0.0, categoryLineAnnotation0.getValue2(), 0.01D);
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(1, clusteredXYBarRenderer0.getPassCount());
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(true, clusteredXYBarRenderer0.getBaseCreateEntities());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01D);
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, clusteredXYBarRenderer0.isDrawBarOutline());
      assertEquals(false, clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      
      boolean boolean1 = combinedRangeCategoryPlot0.removeAnnotation((CategoryAnnotation) categoryLineAnnotation0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-3209.0), categoryLineAnnotation0.getValue1(), 0.01D);
      assertEquals(0.0, categoryLineAnnotation0.getValue2(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(1, clusteredXYBarRenderer0.getPassCount());
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(true, clusteredXYBarRenderer0.getBaseCreateEntities());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01D);
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, clusteredXYBarRenderer0.isDrawBarOutline());
      assertEquals(false, clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
  }

  @Test
  public void test069()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      
      int int0 = 81;
      CategoryDataset categoryDataset0 = combinedRangeCategoryPlot0.getDataset(int0);
      assertNull(categoryDataset0);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      
      combinedRangeCategoryPlot0.setDataset(categoryDataset0);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
  }

  @Test
  public void test070()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      assertNotNull(fastScatterPlot0);
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(false, fastScatterPlot0.isSubplot());
      
      NumberAxis numberAxis0 = (NumberAxis)fastScatterPlot0.getDomainAxis();
      assertNotNull(numberAxis0);
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals("X", numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelURL());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      
      int int0 = combinedRangeCategoryPlot0.getRangeAxisIndex((ValueAxis) numberAxis0);
      assertEquals((-1), int0);
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals("X", numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelURL());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getRangeAxisLocation(int0);
      assertNotNull(axisLocation0);
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals("X", numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelURL());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      
      // Undeclared exception!
      try {
        combinedDomainCategoryPlot0.setDomainAxisLocation(int0, axisLocation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
      }
  }

  @Test
  public void test071()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(valueAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      assertNotNull(statisticalLineAndShapeRenderer0);
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      
      int int0 = combinedRangeCategoryPlot0.getIndexOf((CategoryItemRenderer) statisticalLineAndShapeRenderer0);
      assertEquals((-1), int0);
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
  }

  @Test
  public void test072()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      
      int int0 = combinedRangeCategoryPlot0.getDatasetCount();
      assertEquals(1, int0);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      
      CategoryAxis categoryAxis0 = combinedDomainCategoryPlot0.getDomainAxis(int0);
      assertNull(categoryAxis0);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      
      combinedRangeCategoryPlot0.setDomainAxis(categoryAxis0);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
  }

  @Test
  public void test073()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(valueAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      
      SortOrder sortOrder0 = combinedRangeCategoryPlot0.getRowRenderingOrder();
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
  }

  @Test
  public void test074()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      
      RectangleEdge rectangleEdge0 = combinedDomainCategoryPlot0.getRangeAxisEdge();
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test075()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      
      LegendItemCollection legendItemCollection0 = combinedRangeCategoryPlot0.getFixedLegendItems();
      assertNull(legendItemCollection0);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
  }

  @Test
  public void test076()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      
      boolean boolean0 = combinedDomainCategoryPlot0.getDrawSharedDomainAxis();
      assertFalse(boolean0);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "";
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertNotNull(layeredBarRenderer0);
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, layeredBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(1, layeredBarRenderer0.getPassCount());
      
      ValueAxis valueAxis0 = null;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(valueAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      
      CategoryDataset categoryDataset0 = combinedRangeCategoryPlot0.getDataset();
      assertNull(categoryDataset0);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      
      boolean boolean0 = combinedRangeCategoryPlot0.isRangeGridlinesVisible();
      assertTrue(boolean0);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      
      CategoryAxis categoryAxis0 = null;
      CategoryPlot categoryPlot0 = new CategoryPlot(categoryDataset0, categoryAxis0, valueAxis0, (CategoryItemRenderer) layeredBarRenderer0);
      assertNotNull(categoryPlot0);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, layeredBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(1, layeredBarRenderer0.getPassCount());
      
      JFreeChart jFreeChart0 = new JFreeChart(string0, (Plot) categoryPlot0);
      assertNotNull(jFreeChart0);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, layeredBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      
      categoryPlot0.setDomainGridlinesVisible(boolean0);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isDomainGridlinesVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, layeredBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(1, layeredBarRenderer0.getPassCount());
      
      int int0 = 2967;
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0);
      assertNotNull(bufferedImage0);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isDomainGridlinesVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, layeredBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(2967, bufferedImage0.getHeight());
      assertEquals(2967, bufferedImage0.getWidth());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2967, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2967, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
  }

  @Test
  public void test078()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(valueAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      
      combinedRangeCategoryPlot0.clearAnnotations();
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
  }

  @Test
  public void test079()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      
      Color color0 = (Color)combinedDomainCategoryPlot0.getRangeGridlinePaint();
      assertNotNull(color0);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(-1, color0.getRGB());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
  }

  @Test
  public void test080()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(valueAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      
      AxisSpace axisSpace0 = null;
      combinedRangeCategoryPlot0.setFixedRangeAxisSpace(axisSpace0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test
  public void test081()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(valueAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      
      String string0 = "";
      double double0 = 0.0;
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation(string0, (Comparable) string0, double0, double0);
      assertNotNull(categoryPointerAnnotation0);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01D);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01D);
      assertEquals(0.0, categoryPointerAnnotation0.getAngle(), 0.01D);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01D);
      
      boolean boolean0 = true;
      boolean boolean1 = combinedRangeCategoryPlot0.removeAnnotation((CategoryAnnotation) categoryPointerAnnotation0, boolean0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01D);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01D);
      assertEquals(0.0, categoryPointerAnnotation0.getAngle(), 0.01D);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      
      combinedRangeCategoryPlot0.setDrawSharedDomainAxis(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01D);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01D);
      assertEquals(0.0, categoryPointerAnnotation0.getAngle(), 0.01D);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test082()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      
      int int0 = combinedRangeCategoryPlot0.getDatasetCount();
      assertEquals(1, int0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      
      CategoryItemRenderer categoryItemRenderer0 = combinedRangeCategoryPlot0.getRenderer(int0);
      assertNull(categoryItemRenderer0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      
      combinedRangeCategoryPlot0.setRenderer(int0, categoryItemRenderer0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
  }

  @Test
  public void test083()  throws Throwable  {
      CategoryAxis[] categoryAxisArray0 = new CategoryAxis[7];
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxisArray0[0]);
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      
      AxisLocation axisLocation0 = null;
      // Undeclared exception!
      try {
        combinedDomainCategoryPlot0.setDomainAxisLocation(axisLocation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
      }
  }

  @Test
  public void test084()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      
      int int0 = combinedRangeCategoryPlot0.getDomainAxisCount();
      assertEquals(1, int0);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent((Object) combinedRangeCategoryPlot0);
      assertNotNull(rendererChangeEvent0);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      
      JFreeChart jFreeChart0 = rendererChangeEvent0.getChart();
      assertNull(jFreeChart0);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      
      boolean boolean0 = false;
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, boolean0);
      assertNotNull(chartPanel0);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent((Component) chartPanel0, int0, (long) int0, int0, int0, int0, int0, boolean0, int0, int0, int0);
      assertNotNull(mouseWheelEvent0);
      assertEquals(1, mouseWheelEvent0.getScrollType());
      assertEquals("java.awt.event.MouseWheelEvent[unknown type,(1,1),absolute(0,0),button=0,modifiers=Shift,extModifiers=Shift,clickCount=1,scrollType=WHEEL_BLOCK_SCROLL,scrollAmount=1,wheelRotation=1,preciseWheelRotation=1.0] on org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", mouseWheelEvent0.toString());
      assertEquals(1, mouseWheelEvent0.getScrollAmount());
      assertEquals(1L, mouseWheelEvent0.getWhen());
      assertEquals(false, mouseWheelEvent0.isConsumed());
      assertEquals(1, mouseWheelEvent0.getUnitsToScroll());
      assertEquals(false, mouseWheelEvent0.isAltGraphDown());
      assertEquals(false, mouseWheelEvent0.isAltDown());
      assertEquals(1, mouseWheelEvent0.getModifiers());
      assertEquals(false, mouseWheelEvent0.isMetaDown());
      assertEquals(0, mouseWheelEvent0.getYOnScreen());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertEquals(0, mouseWheelEvent0.getXOnScreen());
      assertEquals(true, mouseWheelEvent0.isShiftDown());
      assertEquals(1, mouseWheelEvent0.getY());
      assertEquals(false, mouseWheelEvent0.isPopupTrigger());
      assertEquals(1, mouseWheelEvent0.getX());
      assertEquals(1, mouseWheelEvent0.getClickCount());
      assertEquals(false, mouseWheelEvent0.isControlDown());
      assertEquals(1, mouseWheelEvent0.getWheelRotation());
      assertEquals(1, mouseWheelEvent0.getID());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      
      Point point0 = mouseWheelEvent0.getPoint();
      assertNotNull(point0);
      assertEquals(1, mouseWheelEvent0.getScrollType());
      assertEquals("java.awt.event.MouseWheelEvent[unknown type,(1,1),absolute(0,0),button=0,modifiers=Shift,extModifiers=Shift,clickCount=1,scrollType=WHEEL_BLOCK_SCROLL,scrollAmount=1,wheelRotation=1,preciseWheelRotation=1.0] on org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", mouseWheelEvent0.toString());
      assertEquals(1, mouseWheelEvent0.getScrollAmount());
      assertEquals(1L, mouseWheelEvent0.getWhen());
      assertEquals(false, mouseWheelEvent0.isConsumed());
      assertEquals(1, mouseWheelEvent0.getUnitsToScroll());
      assertEquals(false, mouseWheelEvent0.isAltGraphDown());
      assertEquals(false, mouseWheelEvent0.isAltDown());
      assertEquals(1, mouseWheelEvent0.getModifiers());
      assertEquals(false, mouseWheelEvent0.isMetaDown());
      assertEquals(0, mouseWheelEvent0.getYOnScreen());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertEquals(0, mouseWheelEvent0.getXOnScreen());
      assertEquals(true, mouseWheelEvent0.isShiftDown());
      assertEquals(1, mouseWheelEvent0.getY());
      assertEquals(false, mouseWheelEvent0.isPopupTrigger());
      assertEquals(1, mouseWheelEvent0.getX());
      assertEquals(1, mouseWheelEvent0.getClickCount());
      assertEquals(false, mouseWheelEvent0.isControlDown());
      assertEquals(1, mouseWheelEvent0.getWheelRotation());
      assertEquals(1, mouseWheelEvent0.getID());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals("java.awt.Point[x=1,y=1]", point0.toString());
      assertEquals(1.0, point0.getX(), 0.01D);
      assertEquals(1.0, point0.getY(), 0.01D);
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(1, point0.x);
      assertEquals(1, point0.y);
      
      combinedRangeCategoryPlot0.zoomRangeAxes(line2D_Double0.y2, plotRenderingInfo0, (Point2D) point0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1, mouseWheelEvent0.getScrollType());
      assertEquals("java.awt.event.MouseWheelEvent[unknown type,(1,1),absolute(0,0),button=0,modifiers=Shift,extModifiers=Shift,clickCount=1,scrollType=WHEEL_BLOCK_SCROLL,scrollAmount=1,wheelRotation=1,preciseWheelRotation=1.0] on org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", mouseWheelEvent0.toString());
      assertEquals(1, mouseWheelEvent0.getScrollAmount());
      assertEquals(1L, mouseWheelEvent0.getWhen());
      assertEquals(false, mouseWheelEvent0.isConsumed());
      assertEquals(1, mouseWheelEvent0.getUnitsToScroll());
      assertEquals(false, mouseWheelEvent0.isAltGraphDown());
      assertEquals(false, mouseWheelEvent0.isAltDown());
      assertEquals(1, mouseWheelEvent0.getModifiers());
      assertEquals(false, mouseWheelEvent0.isMetaDown());
      assertEquals(0, mouseWheelEvent0.getYOnScreen());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertEquals(0, mouseWheelEvent0.getXOnScreen());
      assertEquals(true, mouseWheelEvent0.isShiftDown());
      assertEquals(1, mouseWheelEvent0.getY());
      assertEquals(false, mouseWheelEvent0.isPopupTrigger());
      assertEquals(1, mouseWheelEvent0.getX());
      assertEquals(1, mouseWheelEvent0.getClickCount());
      assertEquals(false, mouseWheelEvent0.isControlDown());
      assertEquals(1, mouseWheelEvent0.getWheelRotation());
      assertEquals(1, mouseWheelEvent0.getID());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals("java.awt.Point[x=1,y=1]", point0.toString());
      assertEquals(1.0, point0.getX(), 0.01D);
      assertEquals(1.0, point0.getY(), 0.01D);
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(1, point0.x);
      assertEquals(1, point0.y);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
  }

  @Test
  public void test085()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      
      String string0 = combinedRangeCategoryPlot0.getPlotType();
      assertEquals("Category Plot", string0);
      assertNotNull(string0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
  }

  @Test
  public void test086()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertNotNull(statisticalBarRenderer0);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, statisticalBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(0.0, statisticalBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      
      combinedRangeCategoryPlot0.setRenderer((CategoryItemRenderer) statisticalBarRenderer0);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, statisticalBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(0.0, statisticalBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test087()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      
      int int0 = combinedRangeCategoryPlot0.getWeight();
      assertEquals(0, int0);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
  }

  @Test
  public void test088()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeCategoryPlot0.getRangeGridlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
  }

  @Test
  public void test089()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      
      boolean boolean0 = false;
      CategoryItemRenderer categoryItemRenderer0 = null;
      combinedRangeCategoryPlot0.setRenderer(categoryItemRenderer0, boolean0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = "";
      double double0 = 1.1861885616532344;
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation(string0, (Comparable) string0, double0, double0);
      assertNotNull(categoryPointerAnnotation0);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals(1.1861885616532344, categoryPointerAnnotation0.getValue(), 0.01D);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals(1.1861885616532344, categoryPointerAnnotation0.getAngle(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01D);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01D);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01D);
      
      CategoryAxis categoryAxis0 = new CategoryAxis(string0);
      assertNotNull(categoryAxis0);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals("", categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals("", categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      
      combinedDomainCategoryPlot0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals(1.1861885616532344, categoryPointerAnnotation0.getValue(), 0.01D);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals(1.1861885616532344, categoryPointerAnnotation0.getAngle(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01D);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01D);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals("", categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = "";
      ValueAxis valueAxis0 = null;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(valueAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      
      JFreeChart jFreeChart0 = new JFreeChart(string0, (Plot) combinedRangeCategoryPlot0);
      assertNotNull(jFreeChart0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.isNotify());
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      assertNotNull(chartPanel0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(true, chartPanel0.isRangeZoomable());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.isNotify());
  }

  @Test
  public void test092()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      Collection collection0 = combinedRangeCategoryPlot0.getRangeMarkers(layer0);
      assertNotNull(collection0);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals("Layer.BACKGROUND", layer0.toString());
  }

  @Test
  public void test093()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      
      Marker marker0 = null;
      boolean boolean0 = combinedRangeCategoryPlot0.removeDomainMarker(marker0);
      assertFalse(boolean0);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
  }

  @Test
  public void test094()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getRangeAxisLocation();
      assertNotNull(axisLocation0);
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
  }

  @Test
  public void test095()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      
      RectangleInsets rectangleInsets0 = combinedRangeCategoryPlot0.getAxisOffset();
      assertNotNull(rectangleInsets0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01D);
  }

  @Test
  public void test096()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      
      boolean boolean0 = combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData();
      assertTrue(boolean0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
  }

  @Test
  public void test097()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      
      AxisSpace axisSpace0 = combinedRangeCategoryPlot0.getFixedDomainAxisSpace();
      assertNull(axisSpace0);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
  }

  @Test
  public void test098()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      
      Color color0 = (Color)combinedRangeCategoryPlot0.getRangeCrosshairPaint();
      assertNotNull(color0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(-16776961, color0.getRGB());
  }

  @Test
  public void test099()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      
      Layer layer0 = Layer.FOREGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      Collection collection0 = combinedDomainCategoryPlot0.getDomainMarkers(layer0);
      assertNull(collection0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
  }

  @Test
  public void test100()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      
      double double0 = 0.0;
      combinedRangeCategoryPlot0.setRangeCrosshairValue(double0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
  }

  @Test
  public void test101()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      //  // Unstable assertion: assertNotNull(combinedRangeCategoryPlot0);
      //  // Unstable assertion: assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      //  // Unstable assertion: assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      
      String string0 = ";}j/nZkHd";
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      
      DateAxis dateAxis0 = new DateAxis(string0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(dateAxis0);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(";}j/nZkHd", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      
      Point2D.Double point2D_Double0 = new Point2D.Double();
      //  // Unstable assertion: assertNotNull(point2D_Double0);
      //  // Unstable assertion: assertEquals(0.0, point2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, point2D_Double0.y, 0.01D);
      
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent((Axis) dateAxis0);
      //  // Unstable assertion: assertNotNull(axisChangeEvent0);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(";}j/nZkHd", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      
      JFreeChart jFreeChart0 = axisChangeEvent0.getChart();
      //  // Unstable assertion: assertNull(jFreeChart0);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(";}j/nZkHd", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      
      boolean boolean0 = false;
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, boolean0);
      //  // Unstable assertion: assertNotNull(chartPanel0);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(";}j/nZkHd", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0, chartPanel0.countComponents());
      //  // Unstable assertion: assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      //  // Unstable assertion: assertEquals(10, chartPanel0.getZoomTriggerDistance());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(600, chartPanel0.getMaximumDrawHeight());
      //  // Unstable assertion: assertEquals(true, chartPanel0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(750, chartPanel0.getInitialDelay());
      //  // Unstable assertion: assertEquals(false, chartPanel0.getZoomAroundAnchor());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(true, chartPanel0.isEnforceFileExtensions());
      //  // Unstable assertion: assertEquals(500, chartPanel0.getReshowDelay());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(false, chartPanel0.getVerticalAxisTrace());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isCursorSet());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isValid());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(true, chartPanel0.isForegroundSet());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isLightweight());
      //  // Unstable assertion: assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      //  // Unstable assertion: assertEquals(800, chartPanel0.getMaximumDrawWidth());
      //  // Unstable assertion: assertEquals(0, chartPanel0.getComponentCount());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(300, chartPanel0.getMinimumDrawWidth());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals(true, chartPanel0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(false, chartPanel0.getRefreshBuffer());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isShowing());
      //  // Unstable assertion: assertEquals(true, chartPanel0.isEnabled());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isFocusCycleRoot());
      //  // Unstable assertion: assertEquals(true, chartPanel0.isFontSet());
      //  // Unstable assertion: assertEquals(true, chartPanel0.isVisible());
      //  // Unstable assertion: assertEquals(4000, chartPanel0.getDismissDelay());
      //  // Unstable assertion: assertEquals(200, chartPanel0.getMinimumDrawHeight());
      //  // Unstable assertion: assertEquals(false, chartPanel0.getFillZoomRectangle());
      //  // Unstable assertion: assertEquals(false, chartPanel0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      //  // Unstable assertion: assertNotNull(chartRenderingInfo0);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(";}j/nZkHd", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0, chartPanel0.countComponents());
      //  // Unstable assertion: assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      //  // Unstable assertion: assertEquals(10, chartPanel0.getZoomTriggerDistance());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(600, chartPanel0.getMaximumDrawHeight());
      //  // Unstable assertion: assertEquals(true, chartPanel0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(750, chartPanel0.getInitialDelay());
      //  // Unstable assertion: assertEquals(false, chartPanel0.getZoomAroundAnchor());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(true, chartPanel0.isEnforceFileExtensions());
      //  // Unstable assertion: assertEquals(500, chartPanel0.getReshowDelay());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(false, chartPanel0.getVerticalAxisTrace());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isCursorSet());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isValid());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(true, chartPanel0.isForegroundSet());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isLightweight());
      //  // Unstable assertion: assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      //  // Unstable assertion: assertEquals(800, chartPanel0.getMaximumDrawWidth());
      //  // Unstable assertion: assertEquals(0, chartPanel0.getComponentCount());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(300, chartPanel0.getMinimumDrawWidth());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals(true, chartPanel0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(false, chartPanel0.getRefreshBuffer());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isShowing());
      //  // Unstable assertion: assertEquals(true, chartPanel0.isEnabled());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isFocusCycleRoot());
      //  // Unstable assertion: assertEquals(true, chartPanel0.isFontSet());
      //  // Unstable assertion: assertEquals(true, chartPanel0.isVisible());
      //  // Unstable assertion: assertEquals(4000, chartPanel0.getDismissDelay());
      //  // Unstable assertion: assertEquals(200, chartPanel0.getMinimumDrawHeight());
      //  // Unstable assertion: assertEquals(false, chartPanel0.getFillZoomRectangle());
      //  // Unstable assertion: assertEquals(false, chartPanel0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      //  // Unstable assertion: assertNotNull(plotRenderingInfo0);
      //  // Unstable assertion: assertEquals(0, plotRenderingInfo0.getSubplotCount());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(";}j/nZkHd", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0, chartPanel0.countComponents());
      //  // Unstable assertion: assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      //  // Unstable assertion: assertEquals(10, chartPanel0.getZoomTriggerDistance());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(600, chartPanel0.getMaximumDrawHeight());
      //  // Unstable assertion: assertEquals(true, chartPanel0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(750, chartPanel0.getInitialDelay());
      //  // Unstable assertion: assertEquals(false, chartPanel0.getZoomAroundAnchor());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(true, chartPanel0.isEnforceFileExtensions());
      //  // Unstable assertion: assertEquals(500, chartPanel0.getReshowDelay());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(false, chartPanel0.getVerticalAxisTrace());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isCursorSet());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isValid());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(true, chartPanel0.isForegroundSet());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isLightweight());
      //  // Unstable assertion: assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      //  // Unstable assertion: assertEquals(800, chartPanel0.getMaximumDrawWidth());
      //  // Unstable assertion: assertEquals(0, chartPanel0.getComponentCount());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(300, chartPanel0.getMinimumDrawWidth());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals(true, chartPanel0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(false, chartPanel0.getRefreshBuffer());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isShowing());
      //  // Unstable assertion: assertEquals(true, chartPanel0.isEnabled());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isFocusCycleRoot());
      //  // Unstable assertion: assertEquals(true, chartPanel0.isFontSet());
      //  // Unstable assertion: assertEquals(true, chartPanel0.isVisible());
      //  // Unstable assertion: assertEquals(4000, chartPanel0.getDismissDelay());
      //  // Unstable assertion: assertEquals(200, chartPanel0.getMinimumDrawHeight());
      //  // Unstable assertion: assertEquals(false, chartPanel0.getFillZoomRectangle());
      //  // Unstable assertion: assertEquals(false, chartPanel0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      
      combinedRangeCategoryPlot0.zoomDomainAxes(point2D_Double0.x, plotRenderingInfo0, (Point2D) point2D_Double0);
      //  // Unstable assertion: assertEquals(0, plotRenderingInfo0.getSubplotCount());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(";}j/nZkHd", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0, chartPanel0.countComponents());
      //  // Unstable assertion: assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      //  // Unstable assertion: assertEquals(10, chartPanel0.getZoomTriggerDistance());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(600, chartPanel0.getMaximumDrawHeight());
      //  // Unstable assertion: assertEquals(true, chartPanel0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(750, chartPanel0.getInitialDelay());
      //  // Unstable assertion: assertEquals(false, chartPanel0.getZoomAroundAnchor());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(true, chartPanel0.isEnforceFileExtensions());
      //  // Unstable assertion: assertEquals(500, chartPanel0.getReshowDelay());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(false, chartPanel0.getVerticalAxisTrace());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isCursorSet());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isValid());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(true, chartPanel0.isForegroundSet());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isLightweight());
      //  // Unstable assertion: assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      //  // Unstable assertion: assertEquals(800, chartPanel0.getMaximumDrawWidth());
      //  // Unstable assertion: assertEquals(0, chartPanel0.getComponentCount());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(300, chartPanel0.getMinimumDrawWidth());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals(true, chartPanel0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(false, chartPanel0.getRefreshBuffer());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isShowing());
      //  // Unstable assertion: assertEquals(true, chartPanel0.isEnabled());
      //  // Unstable assertion: assertEquals(false, chartPanel0.isFocusCycleRoot());
      //  // Unstable assertion: assertEquals(true, chartPanel0.isFontSet());
      //  // Unstable assertion: assertEquals(true, chartPanel0.isVisible());
      //  // Unstable assertion: assertEquals(4000, chartPanel0.getDismissDelay());
      //  // Unstable assertion: assertEquals(200, chartPanel0.getMinimumDrawHeight());
      //  // Unstable assertion: assertEquals(false, chartPanel0.getFillZoomRectangle());
      //  // Unstable assertion: assertEquals(false, chartPanel0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      //  // Unstable assertion: assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(0.0, point2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, point2D_Double0.y, 0.01D);
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = "";
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      
      DateAxis dateAxis0 = new DateAxis(string0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(dateAxis0);
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals("", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) dateAxis0);
      //  // Unstable assertion: assertNotNull(combinedRangeCategoryPlot0);
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals("", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      
      boolean boolean0 = combinedRangeCategoryPlot0.isDomainGridlinesVisible();
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals("", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(boolean0, boolean0);
      //  // Unstable assertion: assertNotNull(statisticalLineAndShapeRenderer0);
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      //  // Unstable assertion: assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      //  // Unstable assertion: assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      //  // Unstable assertion: assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals("", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      
      LegendItemCollection legendItemCollection0 = statisticalLineAndShapeRenderer0.getLegendItems();
      //  // Unstable assertion: assertNotNull(legendItemCollection0);
      //  // Unstable assertion: assertEquals(0, legendItemCollection0.getItemCount());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      //  // Unstable assertion: assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      //  // Unstable assertion: assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      //  // Unstable assertion: assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals("", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      
      combinedRangeCategoryPlot0.setFixedLegendItems(legendItemCollection0);
      //  // Unstable assertion: assertEquals(0, legendItemCollection0.getItemCount());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      //  // Unstable assertion: assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      //  // Unstable assertion: assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      //  // Unstable assertion: assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      //  // Unstable assertion: assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals("", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
  }

  @Test
  public void test103()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      
      double double0 = combinedRangeCategoryPlot0.getRangeCrosshairValue();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
  }

  @Test
  public void test104()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(valueAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      assertNotNull(axisLocation0);
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      
      combinedRangeCategoryPlot0.setRangeAxisLocation(axisLocation0);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
  }

  @Test
  public void test105()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertNotNull(categoryAxis3D0);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      
      int int0 = combinedDomainCategoryPlot0.getRangeAxisCount();
      assertEquals(1, int0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
  }

  @Test
  public void test106()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      
      double double0 = combinedRangeCategoryPlot0.getAnchorValue();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
  }
}
