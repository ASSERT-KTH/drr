/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:42:21 GMT 2014
 */

package org.jfree.chart.plot;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.geom.Arc2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import javax.swing.Action;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JToolBar;
import javax.swing.TransferHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYLineAnnotation;
import org.jfree.chart.annotations.XYPolygonAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SeriesRenderingOrder;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.renderer.LookupPaintScale;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.renderer.xy.HighLowRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYLine3DRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.YIntervalRenderer;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;
import sun.swing.PrintColorUIResource;

 
public class XYPlotEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNotNull(combinedDomainXYPlot0);
      
      String string0 = "y5q\"qNx;rB6cV2;\\d?";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals("y5q\"qNx;rB6cV2;\\d?", logarithmicAxis0.getLabel());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertNotNull(logarithmicAxis0);
      
      combinedDomainXYPlot0.setRangeAxis((ValueAxis) logarithmicAxis0);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals("y5q\"qNx;rB6cV2;\\d?", logarithmicAxis0.getLabel());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01D);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot1.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertNotNull(combinedDomainXYPlot1);
  }

  @Test
  public void test001()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)combinedDomainXYPlot0.getDomainAxis();
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) numberAxis0);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(false, combinedDomainXYPlot1.isSubplot());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(true, combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertNotNull(combinedDomainXYPlot1);
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[5];
      combinedDomainXYPlot0.setDomainAxes(valueAxisArray0);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
  }

  @Test
  public void test002()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertNotNull(line2D_Double0);
      
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertNotNull(xYPlot0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(line2D_Double0.x2, line2D_Double0.y2, line2D_Double0.x2, line2D_Double0.y1);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      JFreeChart jFreeChart0 = new JFreeChart((Plot) xYPlot0);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertNotNull(jFreeChart0);
      
      int int0 = 1524;
      Class<CategoryAxis3D> class0 = CategoryAxis3D.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) rectangle2D_Double0.x, (Class) class0);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertNotNull(timeSeriesCollection0);
      
      xYPlot0.setDataset(int0, (XYDataset) timeSeriesCollection0);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      
      // Undeclared exception!
      try {
        BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test003()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNotNull(combinedRangeXYPlot0);
      
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertNotNull(line2D_Double0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      Point2D point2D0 = null;
      combinedRangeXYPlot0.zoomRangeAxes(line2D_Double0.x2, line2D_Double0.y2, plotRenderingInfo0, point2D0);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test
  public void test004()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNotNull(xYPlot0);
      
      String string0 = null;
      boolean boolean0 = false;
      double double0 = 218.773916808;
      JFreeChart jFreeChart0 = null;
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, boolean0, boolean0, boolean0, boolean0, boolean0);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertNotNull(chartPanel0);
      
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertNotNull(plotRenderingInfo0);
      
      JCheckBox jCheckBox0 = new JCheckBox(string0);
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertNotNull(jCheckBox0);
      
      Icon icon0 = jCheckBox0.getSelectedIcon();
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertNull(icon0);
      
      JLabel jLabel0 = new JLabel(icon0);
      assertEquals(false, jLabel0.isValid());
      assertEquals(false, jLabel0.isFocusTraversalPolicyProvider());
      assertEquals(true, jLabel0.isVisible());
      assertEquals(true, jLabel0.isBackgroundSet());
      assertEquals(false, jLabel0.isFocusTraversalPolicySet());
      assertEquals(true, jLabel0.isForegroundSet());
      assertEquals(false, jLabel0.isMaximumSizeSet());
      assertEquals(true, jLabel0.isEnabled());
      assertEquals(false, jLabel0.getIgnoreRepaint());
      assertEquals(0, jLabel0.getComponentCount());
      assertEquals(false, jLabel0.isMinimumSizeSet());
      assertEquals(true, jLabel0.isFontSet());
      assertEquals(false, jLabel0.isDisplayable());
      assertEquals(true, jLabel0.getFocusTraversalKeysEnabled());
      assertEquals(false, jLabel0.isShowing());
      assertEquals(false, jLabel0.isCursorSet());
      assertEquals(0, jLabel0.countComponents());
      assertEquals(false, jLabel0.isPreferredSizeSet());
      assertEquals(false, jLabel0.isFocusCycleRoot());
      assertEquals(false, jLabel0.isLightweight());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertNotNull(jLabel0);
      
      Point point0 = null;
      Point point1 = jLabel0.getLocation(point0);
      assertEquals(0, point1.y);
      assertEquals(0, point1.x);
      assertEquals(false, jLabel0.isValid());
      assertEquals(false, jLabel0.isFocusTraversalPolicyProvider());
      assertEquals(true, jLabel0.isVisible());
      assertEquals(true, jLabel0.isBackgroundSet());
      assertEquals(false, jLabel0.isFocusTraversalPolicySet());
      assertEquals(true, jLabel0.isForegroundSet());
      assertEquals(false, jLabel0.isMaximumSizeSet());
      assertEquals(true, jLabel0.isEnabled());
      assertEquals(false, jLabel0.getIgnoreRepaint());
      assertEquals(0, jLabel0.getComponentCount());
      assertEquals(false, jLabel0.isMinimumSizeSet());
      assertEquals(true, jLabel0.isFontSet());
      assertEquals(false, jLabel0.isDisplayable());
      assertEquals(true, jLabel0.getFocusTraversalKeysEnabled());
      assertEquals(false, jLabel0.isShowing());
      assertEquals(false, jLabel0.isCursorSet());
      assertEquals(0, jLabel0.countComponents());
      assertEquals(false, jLabel0.isPreferredSizeSet());
      assertEquals(false, jLabel0.isFocusCycleRoot());
      assertEquals(false, jLabel0.isLightweight());
      assertEquals("java.awt.Point[x=0,y=0]", point1.toString());
      assertEquals(0.0, point1.getX(), 0.01D);
      assertEquals(0.0, point1.getY(), 0.01D);
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertNotNull(point1);
      
      xYPlot0.zoomRangeAxes(double0, plotRenderingInfo0, (Point2D) point1, boolean0);
      assertEquals(0, point1.y);
      assertEquals(0, point1.x);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(false, jLabel0.isValid());
      assertEquals(false, jLabel0.isFocusTraversalPolicyProvider());
      assertEquals(true, jLabel0.isVisible());
      assertEquals(true, jLabel0.isBackgroundSet());
      assertEquals(false, jLabel0.isFocusTraversalPolicySet());
      assertEquals(true, jLabel0.isForegroundSet());
      assertEquals(false, jLabel0.isMaximumSizeSet());
      assertEquals(true, jLabel0.isEnabled());
      assertEquals(false, jLabel0.getIgnoreRepaint());
      assertEquals(0, jLabel0.getComponentCount());
      assertEquals(false, jLabel0.isMinimumSizeSet());
      assertEquals(true, jLabel0.isFontSet());
      assertEquals(false, jLabel0.isDisplayable());
      assertEquals(true, jLabel0.getFocusTraversalKeysEnabled());
      assertEquals(false, jLabel0.isShowing());
      assertEquals(false, jLabel0.isCursorSet());
      assertEquals(0, jLabel0.countComponents());
      assertEquals(false, jLabel0.isPreferredSizeSet());
      assertEquals(false, jLabel0.isFocusCycleRoot());
      assertEquals(false, jLabel0.isLightweight());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals("java.awt.Point[x=0,y=0]", point1.toString());
      assertEquals(0.0, point1.getX(), 0.01D);
      assertEquals(0.0, point1.getY(), 0.01D);
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
  }

  @Test
  public void test005()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(boolean0);
      
      double double0 = 978.477249671557;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      JFreeChart jFreeChart0 = null;
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertNotNull(chartPanel0);
      
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertNotNull(defaultListCellRenderer_UIResource0);
      
      int int0 = 3678;
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent((Component) chartPanel0, int0, (long) int0, int0, int0, int0, int0, boolean0, int0, int0, int0);
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, mouseWheelEvent0.isAltDown());
      assertEquals(3678L, mouseWheelEvent0.getWhen());
      assertEquals("java.awt.event.MouseWheelEvent[unknown type,(3678,3678),absolute(0,0),button=0,modifiers=Alt+Meta+Ctrl+Button1+Button2+Button3,extModifiers=Alt+Shift+Button1+Button2,clickCount=3678,scrollType=unknown scroll type,scrollAmount=3678,wheelRotation=3678,preciseWheelRotation=3678.0] on org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", mouseWheelEvent0.toString());
      assertEquals(3678, mouseWheelEvent0.getY());
      assertEquals(true, mouseWheelEvent0.isMetaDown());
      assertEquals(3678, mouseWheelEvent0.getX());
      assertEquals(3678, mouseWheelEvent0.getScrollType());
      assertEquals(false, mouseWheelEvent0.isShiftDown());
      assertEquals(3678, mouseWheelEvent0.getWheelRotation());
      assertEquals(30, mouseWheelEvent0.getModifiers());
      assertEquals(13527684, mouseWheelEvent0.getUnitsToScroll());
      assertEquals(false, mouseWheelEvent0.isAltGraphDown());
      assertEquals(true, mouseWheelEvent0.isPopupTrigger());
      assertEquals(3678, mouseWheelEvent0.getScrollAmount());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertEquals(3678, mouseWheelEvent0.getClickCount());
      assertEquals(0, mouseWheelEvent0.getXOnScreen());
      assertEquals(0, mouseWheelEvent0.getYOnScreen());
      assertEquals(false, mouseWheelEvent0.isConsumed());
      assertEquals(true, mouseWheelEvent0.isControlDown());
      assertEquals(3678, mouseWheelEvent0.getID());
      assertNotNull(mouseWheelEvent0);
      
      Point point0 = defaultListCellRenderer_UIResource0.getPopupLocation((MouseEvent) mouseWheelEvent0);
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, mouseWheelEvent0.isAltDown());
      assertEquals(3678L, mouseWheelEvent0.getWhen());
      assertEquals("java.awt.event.MouseWheelEvent[unknown type,(3678,3678),absolute(0,0),button=0,modifiers=Alt+Meta+Ctrl+Button1+Button2+Button3,extModifiers=Alt+Shift+Button1+Button2,clickCount=3678,scrollType=unknown scroll type,scrollAmount=3678,wheelRotation=3678,preciseWheelRotation=3678.0] on org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", mouseWheelEvent0.toString());
      assertEquals(3678, mouseWheelEvent0.getY());
      assertEquals(true, mouseWheelEvent0.isMetaDown());
      assertEquals(3678, mouseWheelEvent0.getX());
      assertEquals(3678, mouseWheelEvent0.getScrollType());
      assertEquals(false, mouseWheelEvent0.isShiftDown());
      assertEquals(3678, mouseWheelEvent0.getWheelRotation());
      assertEquals(30, mouseWheelEvent0.getModifiers());
      assertEquals(13527684, mouseWheelEvent0.getUnitsToScroll());
      assertEquals(false, mouseWheelEvent0.isAltGraphDown());
      assertEquals(true, mouseWheelEvent0.isPopupTrigger());
      assertEquals(3678, mouseWheelEvent0.getScrollAmount());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertEquals(3678, mouseWheelEvent0.getClickCount());
      assertEquals(0, mouseWheelEvent0.getXOnScreen());
      assertEquals(0, mouseWheelEvent0.getYOnScreen());
      assertEquals(false, mouseWheelEvent0.isConsumed());
      assertEquals(true, mouseWheelEvent0.isControlDown());
      assertEquals(3678, mouseWheelEvent0.getID());
      assertNull(point0);
      
      combinedDomainXYPlot0.zoomDomainAxes(rectangle2D_Double0.width, double0, plotRenderingInfo0, (Point2D) point0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(true, mouseWheelEvent0.isAltDown());
      assertEquals(3678L, mouseWheelEvent0.getWhen());
      assertEquals("java.awt.event.MouseWheelEvent[unknown type,(3678,3678),absolute(0,0),button=0,modifiers=Alt+Meta+Ctrl+Button1+Button2+Button3,extModifiers=Alt+Shift+Button1+Button2,clickCount=3678,scrollType=unknown scroll type,scrollAmount=3678,wheelRotation=3678,preciseWheelRotation=3678.0] on org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", mouseWheelEvent0.toString());
      assertEquals(3678, mouseWheelEvent0.getY());
      assertEquals(true, mouseWheelEvent0.isMetaDown());
      assertEquals(3678, mouseWheelEvent0.getX());
      assertEquals(3678, mouseWheelEvent0.getScrollType());
      assertEquals(false, mouseWheelEvent0.isShiftDown());
      assertEquals(3678, mouseWheelEvent0.getWheelRotation());
      assertEquals(30, mouseWheelEvent0.getModifiers());
      assertEquals(13527684, mouseWheelEvent0.getUnitsToScroll());
      assertEquals(false, mouseWheelEvent0.isAltGraphDown());
      assertEquals(true, mouseWheelEvent0.isPopupTrigger());
      assertEquals(3678, mouseWheelEvent0.getScrollAmount());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertEquals(3678, mouseWheelEvent0.getClickCount());
      assertEquals(0, mouseWheelEvent0.getXOnScreen());
      assertEquals(0, mouseWheelEvent0.getYOnScreen());
      assertEquals(false, mouseWheelEvent0.isConsumed());
      assertEquals(true, mouseWheelEvent0.isControlDown());
      assertEquals(3678, mouseWheelEvent0.getID());
  }

  @Test
  public void test006()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      AxisSpace axisSpace0 = combinedDomainXYPlot0.getFixedRangeAxisSpace();
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(axisSpace0);
      
      boolean boolean0 = false;
      combinedRangeXYPlot0.setFixedRangeAxisSpace(axisSpace0, boolean0);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
  }

  @Test
  public void test007()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      Color color0 = (Color)Plot.DEFAULT_OUTLINE_PAINT;
      assertEquals(-8355712, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertNotNull(color0);
      
      combinedDomainXYPlot0.setRangeCrosshairPaint((Paint) color0);
      assertEquals(-8355712, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test008()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNotNull(combinedRangeXYPlot0);
      
      String string0 = ") should be in the range 0 to 3.";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(") should be in the range 0 to 3.", extendedCategoryAxis0.getLabel());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNotNull(extendedCategoryAxis0);
      
      BasicStroke basicStroke0 = (BasicStroke)extendedCategoryAxis0.getAxisLineStroke();
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(") should be in the range 0 to 3.", extendedCategoryAxis0.getLabel());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNotNull(basicStroke0);
      
      combinedRangeXYPlot0.setRangeCrosshairStroke((Stroke) basicStroke0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(") should be in the range 0 to 3.", extendedCategoryAxis0.getLabel());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "$V)^^N2r*52@wwQ]ib";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals("$V)^^N2r*52@wwQ]ib", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertNotNull(dateAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) dateAxis0);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals("$V)^^N2r*52@wwQ]ib", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = false;
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(boolean0);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals("$V)^^N2r*52@wwQ]ib", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
  }

  @Test
  public void test010()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = true;
      combinedDomainXYPlot0.setRangeCrosshairLockedOnData(boolean0);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
  }

  @Test
  public void test011()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(xYPlot0);
      
      boolean boolean0 = true;
      xYPlot0.setRangeCrosshairVisible(boolean0);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test012()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(xYPlot0);
      
      boolean boolean0 = false;
      xYPlot0.setRangeCrosshairVisible(boolean0);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
  }

  @Test
  public void test013()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertNotNull(combinedRangeXYPlot0);
      
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      assertEquals(false, waferMapPlot0.isSubplot());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, waferMapPlot0.isOutlineVisible());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertNotNull(waferMapPlot0);
      
      Color color0 = (Color)waferMapPlot0.getBackgroundPaint();
      assertEquals(false, waferMapPlot0.isSubplot());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, waferMapPlot0.isOutlineVisible());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getGreen());
      assertEquals(192, color0.getBlue());
      assertEquals(-4144960, color0.getRGB());
      assertEquals(192, color0.getRed());
      assertEquals("java.awt.Color[r=192,g=192,b=192]", color0.toString());
      assertNotNull(color0);
      
      combinedRangeXYPlot0.setDomainCrosshairPaint((Paint) color0);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, waferMapPlot0.isSubplot());
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, waferMapPlot0.isOutlineVisible());
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getGreen());
      assertEquals(192, color0.getBlue());
      assertEquals(-4144960, color0.getRGB());
      assertEquals(192, color0.getRed());
      assertEquals("java.awt.Color[r=192,g=192,b=192]", color0.toString());
  }

  @Test
  public void test014()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNotNull(combinedDomainXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)AbstractRenderer.DEFAULT_OUTLINE_STROKE;
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
      
      combinedDomainXYPlot0.setDomainCrosshairStroke((Stroke) basicStroke0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
  }

  @Test
  public void test015()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = false;
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(boolean0);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test016()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertNotNull(xYPlot0);
      
      boolean boolean0 = true;
      xYPlot0.setDomainCrosshairLockedOnData(boolean0);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
  }

  @Test
  public void test017()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = true;
      combinedRangeXYPlot0.setDomainCrosshairVisible(boolean0);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test018()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = false;
      combinedRangeXYPlot0.setDomainCrosshairVisible(boolean0);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test
  public void test019()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertNotNull(xYPlot0);
      
      String string0 = "";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertNotNull(dateAxis0);
      
      int int0 = 2786;
      xYPlot0.setRangeAxis(int0, (ValueAxis) dateAxis0);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
  }

  @Test
  public void test020()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      Layer layer0 = null;
      Collection collection0 = combinedDomainXYPlot0.getRangeMarkers(layer0);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(collection0);
  }

  @Test
  public void test021()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(combinedDomainXYPlot0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getRangeMarkers(layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(collection0);
  }

  @Test
  public void test022()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNotNull(combinedRangeXYPlot0);
      
      int int0 = 0;
      Layer layer0 = null;
      Collection collection0 = combinedRangeXYPlot0.getDomainMarkers(int0, layer0);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(collection0);
  }

  @Test
  public void test023()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedRangeXYPlot0);
      
      int int0 = 0;
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedRangeXYPlot0.getDomainMarkers(int0, layer0);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNull(collection0);
  }

  @Test
  public void test024()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertNotNull(line2D_Double0);
      
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNotNull(xYPlot0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(line2D_Double0.x2, line2D_Double0.y2, line2D_Double0.y2, line2D_Double0.y1);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      Graphics2D graphics2D0 = null;
      xYPlot0.drawZeroRangeBaseline(graphics2D0, rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
  }

  @Test
  public void test025()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      assertNotNull(defaultValueDataset0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) defaultValueDataset0);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5, thermometerPlot0.getGap());
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertNull(numberAxis0.getLabel());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(false, numberAxis0.isAxisLineVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5, thermometerPlot0.getGap());
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) numberAxis0);
      assertNull(numberAxis0.getLabel());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(false, numberAxis0.isAxisLineVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 2958465;
      // Undeclared exception!
      try {
        ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxisForDataset(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 2958465 out of bounds.
         //
      }
  }

  @Test
  public void test026()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = (-3);
      // Undeclared exception!
      try {
        ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxisForDataset(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -3 out of bounds.
         //
      }
  }

  @Test
  public void test027()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 67;
      // Undeclared exception!
      try {
        ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxisForDataset(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 67 out of bounds.
         //
      }
  }

  @Test
  public void test028()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertNotNull(combinedRangeXYPlot0);
      
      int int0 = 0;
      ValueAxis valueAxis0 = combinedRangeXYPlot0.getDomainAxisForDataset(int0);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertNull(valueAxis0);
  }

  @Test
  public void test029()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertNotNull(xYPlot0);
      
      int int0 = 1524;
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((double) int0, (double) int0, (double) int0, (double) int0);
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertNotNull(xYLineAnnotation0);
      
      boolean boolean0 = true;
      boolean boolean1 = xYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0, boolean0);
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test030()  throws Throwable  {
      String string0 = "54U";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals("54U", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertNotNull(dateAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) dateAxis0);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals("54U", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      double[] doubleArray0 = new double[2];
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, levelRenderer0.getRowCount());
      assertNotNull(levelRenderer0);
      
      int int0 = 481;
      BasicStroke basicStroke0 = (BasicStroke)levelRenderer0.lookupSeriesOutlineStroke(int0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, levelRenderer0.getRowCount());
      assertNotNull(basicStroke0);
      
      boolean boolean0 = false;
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(boolean0);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, stackedBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(0.0, stackedBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(2, stackedBarRenderer0.getPassCount());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertNotNull(stackedBarRenderer0);
      
      Color color0 = (Color)stackedBarRenderer0.getItemPaint(int0, int0);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, stackedBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(0.0, stackedBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(2, stackedBarRenderer0.getPassCount());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(255, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(-16776961, color0.getRGB());
      assertNotNull(color0);
      
      XYPolygonAnnotation xYPolygonAnnotation0 = new XYPolygonAnnotation(doubleArray0, (Stroke) basicStroke0, (Paint) color0);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, stackedBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(0.0, stackedBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(2, stackedBarRenderer0.getPassCount());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(255, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertNull(xYPolygonAnnotation0.getURL());
      assertNull(xYPolygonAnnotation0.getToolTipText());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, levelRenderer0.getRowCount());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(xYPolygonAnnotation0);
      
      combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYPolygonAnnotation0, boolean0);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, stackedBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(0.0, stackedBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(2, stackedBarRenderer0.getPassCount());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(255, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(xYPolygonAnnotation0.getURL());
      assertNull(xYPolygonAnnotation0.getToolTipText());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals("54U", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test031()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = (-1);
      ValueAxis valueAxis0 = combinedDomainCategoryPlot0.getRangeAxisForDataset(int0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(valueAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainCrosshairLockedOnData();
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertTrue(boolean0);
      
      XYAnnotation xYAnnotation0 = null;
      // Undeclared exception!
      try {
        combinedRangeXYPlot0.addAnnotation(xYAnnotation0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
      }
  }

  @Test
  public void test032()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      int int0 = 0;
      String string0 = ") should be in the range 0 to 3.";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(") should be in the range 0 to 3.", extendedCategoryAxis0.getLabel());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertNotNull(extendedCategoryAxis0);
      
      BasicStroke basicStroke0 = (BasicStroke)extendedCategoryAxis0.getAxisLineStroke();
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(") should be in the range 0 to 3.", extendedCategoryAxis0.getLabel());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
      
      Color color0 = (Color)XYPlot.DEFAULT_GRIDLINE_PAINT;
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(-1, color0.getRGB());
      assertNotNull(color0);
      
      boolean boolean0 = false;
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) int0, (Paint) color0, (Stroke) basicStroke0);
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(-1, color0.getRGB());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(") should be in the range 0 to 3.", extendedCategoryAxis0.getLabel());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertNotNull(categoryMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean1 = combinedRangeXYPlot0.removeRangeMarker(int0, (Marker) categoryMarker0, layer0, boolean0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(-1, color0.getRGB());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(") should be in the range 0 to 3.", extendedCategoryAxis0.getLabel());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test033()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(xYPlot0);
      
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertNotNull(defaultCategoryItemRenderer0);
      
      int int0 = 0;
      Color color0 = (Color)defaultCategoryItemRenderer0.getItemPaint(int0, int0);
      assertEquals(-16776961, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertNotNull(color0);
      
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      assertEquals(false, stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedXYAreaRenderer0.isOutline());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedXYAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedXYAreaRenderer0.getPlotArea());
      assertEquals(false, stackedXYAreaRenderer0.getPlotLines());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertNotNull(stackedXYAreaRenderer0);
      
      BasicStroke basicStroke0 = (BasicStroke)stackedXYAreaRenderer0.getItemOutlineStroke(int0, int0);
      assertEquals(false, stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedXYAreaRenderer0.isOutline());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedXYAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedXYAreaRenderer0.getPlotArea());
      assertEquals(false, stackedXYAreaRenderer0.getPlotLines());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
      
      ValueMarker valueMarker0 = new ValueMarker((double) int0, (Paint) color0, (Stroke) basicStroke0);
      assertEquals(false, stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedXYAreaRenderer0.isOutline());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedXYAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedXYAreaRenderer0.getPlotArea());
      assertEquals(false, stackedXYAreaRenderer0.getPlotLines());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(-16776961, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertNotNull(valueMarker0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean0 = true;
      xYPlot0.addRangeMarker(int0, (Marker) valueMarker0, layer0, boolean0);
      assertEquals(false, stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedXYAreaRenderer0.isOutline());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedXYAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedXYAreaRenderer0.getPlotArea());
      assertEquals(false, stackedXYAreaRenderer0.getPlotLines());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(-16776961, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      
      xYPlot0.clearRangeMarkers();
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test034()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertNotNull(xYPlot0);
      
      int int0 = (-1609);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(int0);
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedXYAreaRenderer0.isOutline());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedXYAreaRenderer0.getPlotLines());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedXYAreaRenderer0.getPlotArea());
      assertEquals(true, stackedXYAreaRenderer0.getBaseCreateEntities());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(stackedXYAreaRenderer0);
      
      Color color0 = (Color)stackedXYAreaRenderer0.getItemLabelPaint(int0, int0);
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedXYAreaRenderer0.isOutline());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedXYAreaRenderer0.getPlotLines());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedXYAreaRenderer0.getPlotArea());
      assertEquals(true, stackedXYAreaRenderer0.getBaseCreateEntities());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(color0);
      
      XYLine3DRenderer xYLine3DRenderer0 = new XYLine3DRenderer();
      assertEquals(true, xYLine3DRenderer0.getBaseShapesVisible());
      assertEquals(true, xYLine3DRenderer0.getDrawOutlines());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYLine3DRenderer0.getUseOutlinePaint());
      assertEquals(2.0, xYLine3DRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYLine3DRenderer0.getBaseItemLabelsVisible());
      assertEquals(12.0, xYLine3DRenderer0.getXOffset(), 0.01D);
      assertEquals(true, xYLine3DRenderer0.getBaseCreateEntities());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(8.0, xYLine3DRenderer0.getYOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYLine3DRenderer0.getPassCount());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesFilled());
      assertEquals(3, xYLine3DRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYLine3DRenderer0.getBaseLinesVisible());
      assertEquals(false, xYLine3DRenderer0.getUseFillPaint());
      assertNotNull(xYLine3DRenderer0);
      
      BasicStroke basicStroke0 = (BasicStroke)xYLine3DRenderer0.getBaseStroke();
      assertEquals(true, xYLine3DRenderer0.getBaseShapesVisible());
      assertEquals(true, xYLine3DRenderer0.getDrawOutlines());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYLine3DRenderer0.getUseOutlinePaint());
      assertEquals(2.0, xYLine3DRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYLine3DRenderer0.getBaseItemLabelsVisible());
      assertEquals(12.0, xYLine3DRenderer0.getXOffset(), 0.01D);
      assertEquals(true, xYLine3DRenderer0.getBaseCreateEntities());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(8.0, xYLine3DRenderer0.getYOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYLine3DRenderer0.getPassCount());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesFilled());
      assertEquals(3, xYLine3DRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYLine3DRenderer0.getBaseLinesVisible());
      assertEquals(false, xYLine3DRenderer0.getUseFillPaint());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
      
      ValueMarker valueMarker0 = new ValueMarker((double) int0, (Paint) color0, (Stroke) basicStroke0);
      assertEquals((-1609.0), valueMarker0.getValue(), 0.01D);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(true, xYLine3DRenderer0.getBaseShapesVisible());
      assertEquals(true, xYLine3DRenderer0.getDrawOutlines());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYLine3DRenderer0.getUseOutlinePaint());
      assertEquals(2.0, xYLine3DRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYLine3DRenderer0.getBaseItemLabelsVisible());
      assertEquals(12.0, xYLine3DRenderer0.getXOffset(), 0.01D);
      assertEquals(true, xYLine3DRenderer0.getBaseCreateEntities());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(8.0, xYLine3DRenderer0.getYOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYLine3DRenderer0.getPassCount());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesFilled());
      assertEquals(3, xYLine3DRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYLine3DRenderer0.getBaseLinesVisible());
      assertEquals(false, xYLine3DRenderer0.getUseFillPaint());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedXYAreaRenderer0.isOutline());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedXYAreaRenderer0.getPlotLines());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedXYAreaRenderer0.getPlotArea());
      assertEquals(true, stackedXYAreaRenderer0.getBaseCreateEntities());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(valueMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean0 = true;
      xYPlot0.addRangeMarker(int0, (Marker) valueMarker0, layer0, boolean0);
      assertEquals((-1609.0), valueMarker0.getValue(), 0.01D);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(true, xYLine3DRenderer0.getBaseShapesVisible());
      assertEquals(true, xYLine3DRenderer0.getDrawOutlines());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYLine3DRenderer0.getUseOutlinePaint());
      assertEquals(2.0, xYLine3DRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYLine3DRenderer0.getBaseItemLabelsVisible());
      assertEquals(12.0, xYLine3DRenderer0.getXOffset(), 0.01D);
      assertEquals(true, xYLine3DRenderer0.getBaseCreateEntities());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(8.0, xYLine3DRenderer0.getYOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYLine3DRenderer0.getPassCount());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesFilled());
      assertEquals(3, xYLine3DRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYLine3DRenderer0.getBaseLinesVisible());
      assertEquals(false, xYLine3DRenderer0.getUseFillPaint());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedXYAreaRenderer0.isOutline());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedXYAreaRenderer0.getPlotLines());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedXYAreaRenderer0.getPlotArea());
      assertEquals(true, stackedXYAreaRenderer0.getBaseCreateEntities());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      
      xYPlot0.clearRangeMarkers();
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
  }

  @Test
  public void test035()  throws Throwable  {
      int int0 = 642;
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNotNull(combinedDomainXYPlot0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker((double) int0, (double) int0);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(642.0, intervalMarker0.getEndValue(), 0.01D);
      assertNull(intervalMarker0.getLabel());
      assertEquals(642.0, intervalMarker0.getStartValue(), 0.01D);
      assertNotNull(intervalMarker0);
      
      boolean boolean0 = combinedDomainXYPlot0.removeDomainMarker(int0, (Marker) intervalMarker0, layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(642.0, intervalMarker0.getEndValue(), 0.01D);
      assertNull(intervalMarker0.getLabel());
      assertEquals(642.0, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertFalse(boolean0);
  }

  @Test
  public void test036()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(combinedDomainXYPlot0);
      
      double double0 = 2190.0;
      IntervalMarker intervalMarker0 = new IntervalMarker(double0, double0);
      assertEquals(2190.0, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(2190.0, intervalMarker0.getEndValue(), 0.01D);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertNotNull(intervalMarker0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      combinedDomainXYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      assertEquals(2190.0, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(2190.0, intervalMarker0.getEndValue(), 0.01D);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      combinedDomainXYPlot0.clearDomainMarkers();
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test
  public void test037()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNotNull(combinedDomainXYPlot0);
      
      double double0 = 2190.0;
      IntervalMarker intervalMarker0 = new IntervalMarker(double0, double0);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(2190.0, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(2190.0, intervalMarker0.getEndValue(), 0.01D);
      assertNotNull(intervalMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      combinedDomainXYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(2190.0, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(2190.0, intervalMarker0.getEndValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      
      combinedDomainXYPlot0.clearDomainMarkers();
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
  }

  @Test
  public void test038()  throws Throwable  {
      int int0 = 473;
      String string0 = "$V)^^N2r*52@wwQ]ib";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals("$V)^^N2r*52@wwQ]ib", dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertNotNull(dateAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) dateAxis0);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals("$V)^^N2r*52@wwQ]ib", dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      // Undeclared exception!
      try {
        Paint paint0 = combinedRangeXYPlot0.getQuadrantPaint(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (473) should be in the range 0 to 3.
         //
      }
  }

  @Test
  public void test039()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      Color color0 = Color.lightGray;
      assertEquals("java.awt.Color[r=192,g=192,b=192]", color0.toString());
      assertEquals(192, color0.getGreen());
      assertEquals(-4144960, color0.getRGB());
      assertEquals(192, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      combinedDomainXYPlot0.setRangeZeroBaselinePaint((Paint) color0);
      assertEquals("java.awt.Color[r=192,g=192,b=192]", color0.toString());
      assertEquals(192, color0.getGreen());
      assertEquals(-4144960, color0.getRGB());
      assertEquals(192, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test040()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertNotNull(xYPlot0);
      
      int int0 = 0;
      XYLine3DRenderer xYLine3DRenderer0 = new XYLine3DRenderer();
      assertEquals(false, xYLine3DRenderer0.getUseFillPaint());
      assertEquals(false, xYLine3DRenderer0.getUseOutlinePaint());
      assertEquals(true, xYLine3DRenderer0.getBaseCreateEntities());
      assertEquals(true, xYLine3DRenderer0.getBaseLinesVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYLine3DRenderer0.getPassCount());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYLine3DRenderer0.getDrawOutlines());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesFilled());
      assertEquals(2.0, xYLine3DRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesVisible());
      assertEquals(false, xYLine3DRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(12.0, xYLine3DRenderer0.getXOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYLine3DRenderer0.getBaseItemLabelsVisible());
      assertEquals(8.0, xYLine3DRenderer0.getYOffset(), 0.01D);
      assertEquals(3, xYLine3DRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(xYLine3DRenderer0);
      
      BasicStroke basicStroke0 = (BasicStroke)xYLine3DRenderer0.lookupSeriesStroke(int0);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(false, xYLine3DRenderer0.getUseFillPaint());
      assertEquals(false, xYLine3DRenderer0.getUseOutlinePaint());
      assertEquals(true, xYLine3DRenderer0.getBaseCreateEntities());
      assertEquals(true, xYLine3DRenderer0.getBaseLinesVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYLine3DRenderer0.getPassCount());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYLine3DRenderer0.getDrawOutlines());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesFilled());
      assertEquals(2.0, xYLine3DRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesVisible());
      assertEquals(false, xYLine3DRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(12.0, xYLine3DRenderer0.getXOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYLine3DRenderer0.getBaseItemLabelsVisible());
      assertEquals(8.0, xYLine3DRenderer0.getYOffset(), 0.01D);
      assertEquals(3, xYLine3DRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(basicStroke0);
      
      xYPlot0.setRangeZeroBaselineStroke((Stroke) basicStroke0);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(false, xYLine3DRenderer0.getUseFillPaint());
      assertEquals(false, xYLine3DRenderer0.getUseOutlinePaint());
      assertEquals(true, xYLine3DRenderer0.getBaseCreateEntities());
      assertEquals(true, xYLine3DRenderer0.getBaseLinesVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYLine3DRenderer0.getPassCount());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYLine3DRenderer0.getDrawOutlines());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesFilled());
      assertEquals(2.0, xYLine3DRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesVisible());
      assertEquals(false, xYLine3DRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(12.0, xYLine3DRenderer0.getXOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYLine3DRenderer0.getBaseItemLabelsVisible());
      assertEquals(8.0, xYLine3DRenderer0.getYOffset(), 0.01D);
      assertEquals(3, xYLine3DRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
  }

  @Test
  public void test041()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(combinedDomainXYPlot0);
      
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, stackedBarRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(0.0, stackedBarRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertNotNull(stackedBarRenderer3D0);
      
      Color color0 = (Color)stackedBarRenderer3D0.getBasePaint();
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16776961, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, stackedBarRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(0.0, stackedBarRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertNotNull(color0);
      
      combinedDomainXYPlot0.setDomainZeroBaselinePaint((Paint) color0);
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16776961, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, stackedBarRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(0.0, stackedBarRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test
  public void test042()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNotNull(combinedDomainXYPlot0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getRangeGridlineStroke();
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNotNull(basicStroke0);
      
      combinedDomainXYPlot0.setDomainZeroBaselineStroke((Stroke) basicStroke0);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test
  public void test043()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNotNull(xYPlot0);
      
      Action action0 = TransferHandler.getPasteAction();
      assertNotNull(action0);
      
      JMenu jMenu0 = new JMenu(action0);
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(false, jMenu0.isDisplayable());
      assertNotNull(jMenu0);
      
      Rectangle rectangle0 = jMenu0.bounds();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(false, jMenu0.isDisplayable());
      assertNotNull(rectangle0);
      
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, groupedStackedBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(2, groupedStackedBarRenderer0.getPassCount());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, groupedStackedBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertNotNull(groupedStackedBarRenderer0);
      
      Color color0 = (Color)groupedStackedBarRenderer0.getItemPaint(rectangle0.width, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, groupedStackedBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(2, groupedStackedBarRenderer0.getPassCount());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, groupedStackedBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertNotNull(color0);
      
      xYPlot0.setRangeGridlinePaint((Paint) color0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, groupedStackedBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(2, groupedStackedBarRenderer0.getPassCount());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, groupedStackedBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
  }

  @Test
  public void test044()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertNotNull(xYPlot0);
      
      XYLine3DRenderer xYLine3DRenderer0 = new XYLine3DRenderer();
      assertEquals(2.0, xYLine3DRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYLine3DRenderer0.getUseFillPaint());
      assertEquals(false, xYLine3DRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseCreateEntities());
      assertEquals(3, xYLine3DRenderer0.getPassCount());
      assertEquals(true, xYLine3DRenderer0.getBaseLinesVisible());
      assertEquals(12.0, xYLine3DRenderer0.getXOffset(), 0.01D);
      assertEquals(3, xYLine3DRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(8.0, xYLine3DRenderer0.getYOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getUseOutlinePaint());
      assertEquals(true, xYLine3DRenderer0.getDrawOutlines());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesFilled());
      assertEquals(false, xYLine3DRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(xYLine3DRenderer0);
      
      BasicStroke basicStroke0 = (BasicStroke)xYLine3DRenderer0.getBaseStroke();
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2.0, xYLine3DRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYLine3DRenderer0.getUseFillPaint());
      assertEquals(false, xYLine3DRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseCreateEntities());
      assertEquals(3, xYLine3DRenderer0.getPassCount());
      assertEquals(true, xYLine3DRenderer0.getBaseLinesVisible());
      assertEquals(12.0, xYLine3DRenderer0.getXOffset(), 0.01D);
      assertEquals(3, xYLine3DRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(8.0, xYLine3DRenderer0.getYOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getUseOutlinePaint());
      assertEquals(true, xYLine3DRenderer0.getDrawOutlines());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesFilled());
      assertEquals(false, xYLine3DRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(basicStroke0);
      
      xYPlot0.setRangeGridlineStroke((Stroke) basicStroke0);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2.0, xYLine3DRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYLine3DRenderer0.getUseFillPaint());
      assertEquals(false, xYLine3DRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseCreateEntities());
      assertEquals(3, xYLine3DRenderer0.getPassCount());
      assertEquals(true, xYLine3DRenderer0.getBaseLinesVisible());
      assertEquals(12.0, xYLine3DRenderer0.getXOffset(), 0.01D);
      assertEquals(3, xYLine3DRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(8.0, xYLine3DRenderer0.getYOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getUseOutlinePaint());
      assertEquals(true, xYLine3DRenderer0.getDrawOutlines());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesFilled());
      assertEquals(false, xYLine3DRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
  }

  @Test
  public void test045()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = false;
      combinedDomainXYPlot0.setRangeGridlinesVisible(boolean0);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
  }

  @Test
  public void test046()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      Color color0 = (Color)combinedDomainXYPlot0.getDomainZeroBaselinePaint();
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(color0);
      
      combinedDomainXYPlot0.setDomainGridlinePaint((Paint) color0);
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
  }

  @Test
  public void test047()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNotNull(combinedDomainXYPlot0);
      
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, yIntervalRenderer0.getPassCount());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, yIntervalRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, yIntervalRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, yIntervalRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, yIntervalRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, yIntervalRenderer0.getBaseSeriesVisible());
      assertEquals(true, yIntervalRenderer0.getBaseCreateEntities());
      assertEquals(3, yIntervalRenderer0.getDefaultEntityRadius());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, yIntervalRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(yIntervalRenderer0);
      
      int int0 = (-2060);
      BasicStroke basicStroke0 = (BasicStroke)yIntervalRenderer0.getItemStroke(int0, int0);
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, yIntervalRenderer0.getPassCount());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, yIntervalRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, yIntervalRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, yIntervalRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, yIntervalRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, yIntervalRenderer0.getBaseSeriesVisible());
      assertEquals(true, yIntervalRenderer0.getBaseCreateEntities());
      assertEquals(3, yIntervalRenderer0.getDefaultEntityRadius());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, yIntervalRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
      
      combinedDomainXYPlot0.setDomainGridlineStroke((Stroke) basicStroke0);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, yIntervalRenderer0.getPassCount());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, yIntervalRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, yIntervalRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, yIntervalRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, yIntervalRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, yIntervalRenderer0.getBaseSeriesVisible());
      assertEquals(true, yIntervalRenderer0.getBaseCreateEntities());
      assertEquals(3, yIntervalRenderer0.getDefaultEntityRadius());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, yIntervalRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
  }

  @Test
  public void test048()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertNotNull(xYPlot0);
      
      boolean boolean0 = false;
      xYPlot0.setDomainGridlinesVisible(boolean0);
      assertEquals(false, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test
  public void test049()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedRangeXYPlot0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      XYItemRenderer xYItemRenderer0 = combinedRangeXYPlot0.getRendererForDataset((XYDataset) timeSeriesCollection0);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(xYItemRenderer0);
  }

  @Test
  public void test050()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertNotNull(xYPlot0);
      
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.FORWARD;
      assertEquals("SeriesRenderingOrder.FORWARD", seriesRenderingOrder0.toString());
      assertNotNull(seriesRenderingOrder0);
      
      xYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      assertEquals("SeriesRenderingOrder.FORWARD", seriesRenderingOrder0.toString());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
  }

  @Test
  public void test051()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(xYPlot0);
      
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.REVERSE;
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertNotNull(datasetRenderingOrder0);
      
      xYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
  }

  @Test
  public void test052()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = false;
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[3];
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(boolean0, boolean0);
      assertEquals(true, xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, xYLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertEquals(false, xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(xYLineAndShapeRenderer0);
      
      xYItemRendererArray0[0] = (XYItemRenderer) xYLineAndShapeRenderer0;
      assertEquals(true, xYLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, xYLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYLineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, xYLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, xYLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, xYLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, xYLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, xYLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, xYLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(2, xYLineAndShapeRenderer0.getPassCount());
      assertEquals(false, xYLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYItemRendererArray0[0].getBaseCreateEntities());
      assertEquals(true, xYItemRendererArray0[0].getBaseSeriesVisible());
      assertEquals(false, xYItemRendererArray0[0].getBaseItemLabelsVisible());
      assertEquals(2, xYItemRendererArray0[0].getPassCount());
      assertEquals(true, xYItemRendererArray0[0].getBaseSeriesVisibleInLegend());
      assertNotNull(xYItemRendererArray0[0]);
      
      combinedRangeXYPlot0.setRenderers(xYItemRendererArray0);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
  }

  @Test
  public void test053()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      int int0 = combinedDomainXYPlot0.indexOf((XYDataset) defaultTableXYDataset0);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals((-1), int0);
  }

  @Test
  public void test054()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNotNull(combinedRangeXYPlot0);
      
      Graphics2D graphics2D0 = null;
      Rectangle2D rectangle2D0 = null;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      // Undeclared exception!
      try {
        Map map0 = combinedRangeXYPlot0.drawAxes(graphics2D0, rectangle2D0, rectangle2D0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test055()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNotNull(xYPlot0);
      
      boolean boolean0 = false;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 38;
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(int0);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      xYPlot0.setRangeAxisLocation(int0, axisLocation0, boolean0);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
  }

  @Test
  public void test056()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.clearRangeAxes();
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test
  public void test057()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertNotNull(xYPlot0);
      
      xYPlot0.clearRangeAxes();
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
  }

  @Test
  public void test058()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[5];
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
  }

  @Test
  public void test059()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertNotNull(xYPlot0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      ValueAxis valueAxis0 = combinedDomainCategoryPlot0.getRangeAxis();
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(valueAxis0);
      
      xYPlot0.setRangeAxis(valueAxis0);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
  }

  @Test
  public void test060()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = combinedDomainXYPlot0.getDomainAxisCount();
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, int0);
      
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge(int0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(rectangleEdge0);
  }

  @Test
  public void test061()  throws Throwable  {
      String string0 = "54U";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals("54U", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertNotNull(dateAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) dateAxis0);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals("54U", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 481;
      boolean boolean0 = false;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getRangeAxisLocation(int0);
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(axisLocation0);
      
      combinedDomainXYPlot0.setDomainAxisLocation(int0, axisLocation0, boolean0);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals("54U", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test062()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.clearDomainAxes();
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
  }

  @Test
  public void test063()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(multiplePiePlot0);
      
      RectangleInsets rectangleInsets0 = multiplePiePlot0.getInsets();
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(8.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getLeft(), 0.01D);
      assertNotNull(rectangleInsets0);
      
      combinedDomainXYPlot0.setAxisOffset(rectangleInsets0);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(8.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
  }

  @Test
  public void test064()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNotNull(combinedDomainXYPlot0);
      
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNotNull(plotOrientation0);
      
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
  }

  @Test
  public void test065()  throws Throwable  {
      byte byte0 = (byte) (-76);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      String string0 = "";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) byte0, string0);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals((-76.0), cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertNotNull(cyclicNumberAxis0);
      
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer((int) byte0);
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertEquals(true, standardXYItemRenderer0.getPlotImages());
      assertEquals(false, standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, standardXYItemRenderer0.getBaseCreateEntities());
      assertEquals(true, standardXYItemRenderer0.getBaseShapesFilled());
      assertEquals(true, standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, standardXYItemRenderer0.getPlotLines());
      assertEquals(false, standardXYItemRenderer0.getBaseShapesVisible());
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, standardXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(true, standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, standardXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(false, standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertNotNull(standardXYItemRenderer0);
      
      XYPlot xYPlot0 = new XYPlot((XYDataset) defaultXYDataset0, (ValueAxis) cyclicNumberAxis0, (ValueAxis) cyclicNumberAxis0, (XYItemRenderer) standardXYItemRenderer0);
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertEquals(true, standardXYItemRenderer0.getPlotImages());
      assertEquals(false, standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, standardXYItemRenderer0.getBaseCreateEntities());
      assertEquals(true, standardXYItemRenderer0.getBaseShapesFilled());
      assertEquals(true, standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, standardXYItemRenderer0.getPlotLines());
      assertEquals(false, standardXYItemRenderer0.getBaseShapesVisible());
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, standardXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(true, standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, standardXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(false, standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals((-76.0), cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertNotNull(xYPlot0);
  }

  @Test
  public void test066()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = combinedDomainXYPlot0.isDomainGridlinesVisible();
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(boolean0);
  }

  @Test
  public void test067()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNotNull(combinedDomainXYPlot0);
      
      Color color0 = (Color)combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      assertEquals(1, color0.getTransparency());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNotNull(color0);
  }

  @Test
  public void test068()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(boolean0);
  }

  @Test
  public void test069()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertNotNull(combinedRangeXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getRangeZeroBaselineStroke();
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertNotNull(basicStroke0);
  }

  @Test
  public void test070()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = false;
      combinedRangeXYPlot0.setDomainZeroBaselineVisible(boolean0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test
  public void test071()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(xYPlot0);
      
      Action action0 = TransferHandler.getPasteAction();
      assertNotNull(action0);
      
      JMenu jMenu0 = new JMenu(action0);
      assertEquals(true, jMenu0.isVisible());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(false, jMenu0.isShowing());
      assertNotNull(jMenu0);
      
      Rectangle rectangle0 = jMenu0.bounds();
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, jMenu0.isVisible());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(false, jMenu0.isShowing());
      assertNotNull(rectangle0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedDomainCategoryPlot0);
      
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getRangeAxisLocation(rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, jMenu0.isVisible());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(axisLocation0);
      
      xYPlot0.setDomainAxisLocation(axisLocation0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, jMenu0.isVisible());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(false, jMenu0.isShowing());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test072()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertNotNull(xYPlot0);
      
      int int0 = 0;
      String string0 = "";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertNotNull(dateAxis0);
      
      xYPlot0.setRangeAxis(int0, (ValueAxis) dateAxis0);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
  }

  @Test
  public void test073()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(combinedRangeXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getDomainZeroBaselineStroke();
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(basicStroke0);
  }

  @Test
  public void test074()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.clearAnnotations();
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
  }

  @Test
  public void test075()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      int int0 = 0;
      combinedRangeXYPlot0.setWeight(int0);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test076()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1, xYPlot0.getWeight());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(xYPlot0);
      
      XYItemRenderer xYItemRenderer0 = xYPlot0.getRenderer();
      assertEquals(1, xYPlot0.getWeight());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYItemRenderer0);
  }

  @Test
  public void test077()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      Color color0 = (Color)combinedRangeXYPlot0.getDomainGridlinePaint();
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(-1, color0.getRGB());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(color0);
  }

  @Test
  public void test078()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedRangeXYPlot0);
      
      int int0 = 108;
      ValueAxis valueAxis0 = combinedRangeXYPlot0.getDomainAxis(int0);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(valueAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedDomainXYPlot0);
      
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge();
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNotNull(rectangleEdge0);
  }

  @Test
  public void test079()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      double double0 = combinedDomainXYPlot0.getRangeCrosshairValue();
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test080()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNotNull(combinedDomainXYPlot0);
      
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, highLowRenderer0.getDrawOpenTicks());
      assertEquals(true, highLowRenderer0.getBaseCreateEntities());
      assertEquals(true, highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, highLowRenderer0.getDrawCloseTicks());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, highLowRenderer0.getBaseSeriesVisible());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(false, highLowRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(highLowRenderer0);
      
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent((Object) highLowRenderer0);
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, highLowRenderer0.getDrawOpenTicks());
      assertEquals(true, highLowRenderer0.getBaseCreateEntities());
      assertEquals(true, highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, highLowRenderer0.getDrawCloseTicks());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, highLowRenderer0.getBaseSeriesVisible());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(false, highLowRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(rendererChangeEvent0);
      
      combinedDomainXYPlot0.rendererChanged(rendererChangeEvent0);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, highLowRenderer0.getDrawOpenTicks());
      assertEquals(true, highLowRenderer0.getBaseCreateEntities());
      assertEquals(true, highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, highLowRenderer0.getDrawCloseTicks());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, highLowRenderer0.getBaseSeriesVisible());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(false, highLowRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesStroke());
  }

  @Test
  public void test081()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getRangeMarkers(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(collection0);
  }

  @Test
  public void test082()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01D);
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01D);
      assertNotNull(grayPaintScale0);
      
      String string0 = "IJc";
      NumberAxis3D numberAxis3D0 = new NumberAxis3D(string0);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals("IJc", numberAxis3D0.getLabel());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertNotNull(numberAxis3D0);
      
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend((PaintScale) grayPaintScale0, (ValueAxis) numberAxis3D0);
      assertEquals(false, paintScaleLegend0.isStripOutlineVisible());
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01D);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01D);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01D);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01D);
      assertNull(paintScaleLegend0.getID());
      assertEquals(true, paintScaleLegend0.getNotify());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01D);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals("IJc", numberAxis3D0.getLabel());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01D);
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01D);
      assertNotNull(paintScaleLegend0);
      
      AxisLocation axisLocation0 = paintScaleLegend0.getAxisLocation();
      assertEquals(false, paintScaleLegend0.isStripOutlineVisible());
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01D);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01D);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01D);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01D);
      assertNull(paintScaleLegend0.getID());
      assertEquals(true, paintScaleLegend0.getNotify());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01D);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals("IJc", numberAxis3D0.getLabel());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01D);
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01D);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      boolean boolean0 = true;
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0, boolean0);
      assertEquals(false, paintScaleLegend0.isStripOutlineVisible());
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01D);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01D);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01D);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01D);
      assertNull(paintScaleLegend0.getID());
      assertEquals(true, paintScaleLegend0.getNotify());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01D);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals("IJc", numberAxis3D0.getLabel());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01D);
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01D);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test083()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertNotNull(xYPlot0);
      
      Paint paint0 = xYPlot0.getDomainTickBandPaint();
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertNull(paint0);
  }

  @Test
  public void test084()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = combinedDomainXYPlot0.getSeriesCount();
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0, int0);
  }

  @Test
  public void test085()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = combinedRangeXYPlot0.isRangeGridlinesVisible();
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(boolean0);
  }

  @Test
  public void test086()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = combinedDomainXYPlot0.getWeight();
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, int0);
  }

  @Test
  public void test087()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(polarPlot0.getNoDataMessage());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isAngleLabelsVisible());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertEquals(false, polarPlot0.isDomainZoomable());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isAngleGridlinesVisible());
      assertEquals(true, polarPlot0.isOutlineVisible());
      assertEquals(false, polarPlot0.isSubplot());
      assertEquals(true, polarPlot0.isRadiusGridlinesVisible());
      assertEquals(true, polarPlot0.isRangeZoomable());
      assertNotNull(polarPlot0);
      
      ValueAxis valueAxis0 = polarPlot0.getAxis();
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(polarPlot0.getNoDataMessage());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isAngleLabelsVisible());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertEquals(false, polarPlot0.isDomainZoomable());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isAngleGridlinesVisible());
      assertEquals(true, polarPlot0.isOutlineVisible());
      assertEquals(false, polarPlot0.isSubplot());
      assertEquals(true, polarPlot0.isRadiusGridlinesVisible());
      assertEquals(true, polarPlot0.isRangeZoomable());
      assertNull(valueAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 0;
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation(int0);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNotNull(axisLocation0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(polarPlot0.getNoDataMessage());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isAngleLabelsVisible());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertEquals(false, polarPlot0.isDomainZoomable());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isAngleGridlinesVisible());
      assertEquals(true, polarPlot0.isOutlineVisible());
      assertEquals(false, polarPlot0.isSubplot());
      assertEquals(true, polarPlot0.isRadiusGridlinesVisible());
      assertEquals(true, polarPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setDomainAxisLocation(int0, axisLocation0);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(polarPlot0.getNoDataMessage());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isAngleLabelsVisible());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertEquals(false, polarPlot0.isDomainZoomable());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isAngleGridlinesVisible());
      assertEquals(true, polarPlot0.isOutlineVisible());
      assertEquals(false, polarPlot0.isSubplot());
      assertEquals(true, polarPlot0.isRadiusGridlinesVisible());
      assertEquals(true, polarPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
  }

  @Test
  public void test088()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNotNull(combinedDomainXYPlot0);
      
      List list0 = combinedDomainXYPlot0.getAnnotations();
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNotNull(list0);
  }

  @Test
  public void test089()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = false;
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedRangeXYPlot0);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertNotNull(jFreeChart0);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, boolean0, boolean0, boolean0, boolean0, boolean0);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(true, chartPanel0.isDomainZoomable());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(true, chartPanel0.isRangeZoomable());
      assertNotNull(chartPanel0);
  }

  @Test
  public void test090()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = (-1);
      ValueAxis valueAxis0 = combinedDomainCategoryPlot0.getRangeAxisForDataset(int0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNull(valueAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNotNull(combinedRangeXYPlot0);
      
      RectangleEdge rectangleEdge0 = combinedRangeXYPlot0.getDomainAxisEdge();
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNotNull(rectangleEdge0);
  }

  @Test
  public void test091()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertNotNull(xYPlot0);
      
      LegendItemCollection legendItemCollection0 = xYPlot0.getFixedLegendItems();
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertNull(legendItemCollection0);
  }

  @Test
  public void test092()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      Color color0 = (Color)combinedDomainXYPlot0.getRangeGridlinePaint();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(-1, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertNotNull(color0);
  }

  @Test
  public void test093()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      double double0 = 3.141592653589793;
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNotNull(ringPlot0);
      
      Color color0 = (Color)ringPlot0.getNoDataMessagePaint();
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getBlue());
      assertNotNull(color0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertNotNull(combinedRangeXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getRangeGridlineStroke();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertNotNull(basicStroke0);
      
      ValueMarker valueMarker0 = new ValueMarker(double0, (Paint) color0, (Stroke) basicStroke0);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getBlue());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(3.141592653589793, valueMarker0.getValue(), 0.01D);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertNotNull(valueMarker0);
      
      boolean boolean0 = combinedDomainXYPlot0.removeRangeMarker((Marker) valueMarker0);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getBlue());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(3.141592653589793, valueMarker0.getValue(), 0.01D);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertFalse(boolean0);
  }

  @Test
  public void test094()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      String string0 = "y5q\"qNx;rB6cV2;\\d?";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals("y5q\"qNx;rB6cV2;\\d?", logarithmicAxis0.getLabel());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertNotNull(logarithmicAxis0);
      
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) logarithmicAxis0);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals("y5q\"qNx;rB6cV2;\\d?", logarithmicAxis0.getLabel());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
  }

  @Test
  public void test095()  throws Throwable  {
      double double0 = 894.0604937086;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = false;
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(double0, boolean0);
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(894.0604937086, clusteredXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(1, clusteredXYBarRenderer0.getPassCount());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01D);
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, clusteredXYBarRenderer0.isDrawBarOutline());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, clusteredXYBarRenderer0.getBaseCreateEntities());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(clusteredXYBarRenderer0);
      
      LegendItemCollection legendItemCollection0 = clusteredXYBarRenderer0.getLegendItems();
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(894.0604937086, clusteredXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(1, clusteredXYBarRenderer0.getPassCount());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01D);
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, clusteredXYBarRenderer0.isDrawBarOutline());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, clusteredXYBarRenderer0.getBaseCreateEntities());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertNotNull(legendItemCollection0);
      
      combinedDomainXYPlot0.setFixedLegendItems(legendItemCollection0);
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(894.0604937086, clusteredXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(1, clusteredXYBarRenderer0.getPassCount());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01D);
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, clusteredXYBarRenderer0.isDrawBarOutline());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, clusteredXYBarRenderer0.getBaseCreateEntities());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
  }

  @Test
  public void test096()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNotNull(combinedRangeXYPlot0);
      
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertNotNull(line2D_Double0);
      
      ValueMarker valueMarker0 = new ValueMarker(line2D_Double0.x2);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNotNull(valueMarker0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean0 = combinedRangeXYPlot0.removeDomainMarker((Marker) valueMarker0, layer0);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertFalse(boolean0);
  }

  @Test
  public void test097()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertNotNull(xYPlot0);
      
      String string0 = null;
      JCheckBox jCheckBox0 = new JCheckBox(string0);
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertNotNull(jCheckBox0);
      
      Icon icon0 = jCheckBox0.getSelectedIcon();
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertNull(icon0);
      
      JLabel jLabel0 = new JLabel(icon0);
      assertEquals(0, jLabel0.countComponents());
      assertEquals(true, jLabel0.isForegroundSet());
      assertEquals(false, jLabel0.isFocusTraversalPolicySet());
      assertEquals(false, jLabel0.isValid());
      assertEquals(false, jLabel0.isLightweight());
      assertEquals(true, jLabel0.isVisible());
      assertEquals(false, jLabel0.isFocusCycleRoot());
      assertEquals(false, jLabel0.isCursorSet());
      assertEquals(false, jLabel0.isPreferredSizeSet());
      assertEquals(false, jLabel0.isMaximumSizeSet());
      assertEquals(true, jLabel0.getFocusTraversalKeysEnabled());
      assertEquals(true, jLabel0.isBackgroundSet());
      assertEquals(false, jLabel0.isShowing());
      assertEquals(false, jLabel0.getIgnoreRepaint());
      assertEquals(0, jLabel0.getComponentCount());
      assertEquals(false, jLabel0.isMinimumSizeSet());
      assertEquals(false, jLabel0.isDisplayable());
      assertEquals(true, jLabel0.isFontSet());
      assertEquals(false, jLabel0.isFocusTraversalPolicyProvider());
      assertEquals(true, jLabel0.isEnabled());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertNotNull(jLabel0);
      
      Point point0 = null;
      Point point1 = jLabel0.getLocation(point0);
      assertEquals(0, point1.y);
      assertEquals(0, point1.x);
      assertEquals(0.0, point1.getX(), 0.01D);
      assertEquals(0.0, point1.getY(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point1.toString());
      assertEquals(0, jLabel0.countComponents());
      assertEquals(true, jLabel0.isForegroundSet());
      assertEquals(false, jLabel0.isFocusTraversalPolicySet());
      assertEquals(false, jLabel0.isValid());
      assertEquals(false, jLabel0.isLightweight());
      assertEquals(true, jLabel0.isVisible());
      assertEquals(false, jLabel0.isFocusCycleRoot());
      assertEquals(false, jLabel0.isCursorSet());
      assertEquals(false, jLabel0.isPreferredSizeSet());
      assertEquals(false, jLabel0.isMaximumSizeSet());
      assertEquals(true, jLabel0.getFocusTraversalKeysEnabled());
      assertEquals(true, jLabel0.isBackgroundSet());
      assertEquals(false, jLabel0.isShowing());
      assertEquals(false, jLabel0.getIgnoreRepaint());
      assertEquals(0, jLabel0.getComponentCount());
      assertEquals(false, jLabel0.isMinimumSizeSet());
      assertEquals(false, jLabel0.isDisplayable());
      assertEquals(true, jLabel0.isFontSet());
      assertEquals(false, jLabel0.isFocusTraversalPolicyProvider());
      assertEquals(true, jLabel0.isEnabled());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertNotNull(point1);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(point1.x);
      assertEquals(0, point1.y);
      assertEquals(0, point1.x);
      assertEquals(0.0, point1.getX(), 0.01D);
      assertEquals(0.0, point1.getY(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point1.toString());
      assertEquals(0, jLabel0.countComponents());
      assertEquals(true, jLabel0.isForegroundSet());
      assertEquals(false, jLabel0.isFocusTraversalPolicySet());
      assertEquals(false, jLabel0.isValid());
      assertEquals(false, jLabel0.isLightweight());
      assertEquals(true, jLabel0.isVisible());
      assertEquals(false, jLabel0.isFocusCycleRoot());
      assertEquals(false, jLabel0.isCursorSet());
      assertEquals(false, jLabel0.isPreferredSizeSet());
      assertEquals(false, jLabel0.isMaximumSizeSet());
      assertEquals(true, jLabel0.getFocusTraversalKeysEnabled());
      assertEquals(true, jLabel0.isBackgroundSet());
      assertEquals(false, jLabel0.isShowing());
      assertEquals(false, jLabel0.getIgnoreRepaint());
      assertEquals(0, jLabel0.getComponentCount());
      assertEquals(false, jLabel0.isMinimumSizeSet());
      assertEquals(false, jLabel0.isDisplayable());
      assertEquals(true, jLabel0.isFontSet());
      assertEquals(false, jLabel0.isFocusTraversalPolicyProvider());
      assertEquals(true, jLabel0.isEnabled());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNotNull(axisLocation0);
      
      xYPlot0.setRangeAxisLocation(axisLocation0);
      assertEquals(0, point1.y);
      assertEquals(0, point1.x);
      assertEquals(0.0, point1.getX(), 0.01D);
      assertEquals(0.0, point1.getY(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point1.toString());
      assertEquals(0, jLabel0.countComponents());
      assertEquals(true, jLabel0.isForegroundSet());
      assertEquals(false, jLabel0.isFocusTraversalPolicySet());
      assertEquals(false, jLabel0.isValid());
      assertEquals(false, jLabel0.isLightweight());
      assertEquals(true, jLabel0.isVisible());
      assertEquals(false, jLabel0.isFocusCycleRoot());
      assertEquals(false, jLabel0.isCursorSet());
      assertEquals(false, jLabel0.isPreferredSizeSet());
      assertEquals(false, jLabel0.isMaximumSizeSet());
      assertEquals(true, jLabel0.getFocusTraversalKeysEnabled());
      assertEquals(true, jLabel0.isBackgroundSet());
      assertEquals(false, jLabel0.isShowing());
      assertEquals(false, jLabel0.getIgnoreRepaint());
      assertEquals(0, jLabel0.getComponentCount());
      assertEquals(false, jLabel0.isMinimumSizeSet());
      assertEquals(false, jLabel0.isDisplayable());
      assertEquals(true, jLabel0.isFontSet());
      assertEquals(false, jLabel0.isFocusTraversalPolicyProvider());
      assertEquals(true, jLabel0.isEnabled());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
  }

  @Test
  public void test098()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeCrosshairStroke();
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNotNull(basicStroke0);
  }

  @Test
  public void test099()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      Color color0 = (Color)combinedDomainXYPlot0.getRangeCrosshairPaint();
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(-16776961, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertNotNull(color0);
  }

  @Test
  public void test100()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(xYPlot0);
      
      JToolBar jToolBar0 = new JToolBar();
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertNotNull(jToolBar0);
      
      PrintColorUIResource printColorUIResource0 = (PrintColorUIResource)jToolBar0.getForeground();
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(-13421773, printColorUIResource0.getRGB());
      assertEquals(51, printColorUIResource0.getBlue());
      assertEquals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", printColorUIResource0.toString());
      assertEquals(1, printColorUIResource0.getTransparency());
      assertEquals(255, printColorUIResource0.getAlpha());
      assertEquals(51, printColorUIResource0.getGreen());
      assertEquals(51, printColorUIResource0.getRed());
      assertNotNull(printColorUIResource0);
      
      xYPlot0.setDomainTickBandPaint((Paint) printColorUIResource0);
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(-13421773, printColorUIResource0.getRGB());
      assertEquals(51, printColorUIResource0.getBlue());
      assertEquals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", printColorUIResource0.toString());
      assertEquals(1, printColorUIResource0.getTransparency());
      assertEquals(255, printColorUIResource0.getAlpha());
      assertEquals(51, printColorUIResource0.getGreen());
      assertEquals(51, printColorUIResource0.getRed());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
  }

  @Test
  public void test101()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertNotNull(combinedRangeXYPlot0);
      
      SeriesRenderingOrder seriesRenderingOrder0 = combinedRangeXYPlot0.getSeriesRenderingOrder();
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      assertNotNull(seriesRenderingOrder0);
  }

  @Test
  public void test102()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(combinedRangeXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getDomainCrosshairStroke();
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = "54U";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals("54U", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNotNull(dateAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) dateAxis0);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals("54U", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)combinedDomainXYPlot0.getQuadrantOrigin();
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals("54U", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNotNull(point2D_Double0);
  }

  @Test
  public void test104()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      Paint paint0 = combinedDomainXYPlot0.getRangeTickBandPaint();
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNull(paint0);
  }

  @Test
  public void test105()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      ValueMarker valueMarker0 = new ValueMarker(rectangle2D_Double0.height);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertNotNull(valueMarker0);
      
      combinedDomainXYPlot0.addRangeMarker((Marker) valueMarker0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
  }

  @Test
  public void test106()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(xYPlot0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      AxisSpace axisSpace0 = combinedDomainXYPlot0.getFixedDomainAxisSpace();
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNull(axisSpace0);
      
      xYPlot0.setFixedRangeAxisSpace(axisSpace0);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
  }

  @Test
  public void test107()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertNotNull(combinedDomainXYPlot0);
      
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertNotNull(point2D_Double0);
      
      int int0 = 1;
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(point2D_Double0.y, point2D_Double0.y, point2D_Double0.y, point2D_Double0.y, point2D_Double0.y, point2D_Double0.y, int0);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(1, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertNotNull(arc2D_Double0);
      
      combinedDomainXYPlot0.setRangeCrosshairValue(arc2D_Double0.x);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(1, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
  }

  @Test
  public void test108()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(combinedRangeXYPlot0);
      
      int int0 = 0;
      NumberAxis numberAxis0 = (NumberAxis)combinedRangeXYPlot0.getRangeAxisForDataset(int0);
      assertNull(numberAxis0.getLabel());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(numberAxis0);
  }

  @Test
  public void test109()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertEquals(false, combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(true, combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(true, combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot1.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertTrue(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertNotNull(combinedDomainXYPlot1);
  }

  @Test
  public void test110()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedDomainXYPlot0);
      
      double double0 = 978.477249671557;
      combinedDomainXYPlot0.setDomainCrosshairValue(double0);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(978.477249671557, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
  }

  @Test
  public void test111()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      double[] doubleArray0 = new double[4];
      BasicStroke basicStroke0 = (BasicStroke)Plot.DEFAULT_OUTLINE_STROKE;
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
      
      Paint paint0 = null;
      XYPolygonAnnotation xYPolygonAnnotation0 = new XYPolygonAnnotation(doubleArray0, (Stroke) basicStroke0, paint0, paint0);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertNull(xYPolygonAnnotation0.getToolTipText());
      assertNull(xYPolygonAnnotation0.getURL());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(xYPolygonAnnotation0);
      
      combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYPolygonAnnotation0);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertNull(xYPolygonAnnotation0.getToolTipText());
      assertNull(xYPolygonAnnotation0.getURL());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test112()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNotNull(xYPlot0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = xYPlot0.getDomainMarkers(layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(collection0);
  }

  @Test
  public void test113()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(xYPlot0);
      
      boolean boolean0 = true;
      xYPlot0.setRangeZeroBaselineVisible(boolean0);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
  }

  @Test
  public void test114()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getDomainGridlineStroke();
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertNotNull(basicStroke0);
  }

  @Test
  public void test115()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      Color color0 = (Color)combinedRangeXYPlot0.getDomainCrosshairPaint();
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(-16776961, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(color0);
      
      combinedRangeXYPlot0.setRangeTickBandPaint((Paint) color0);
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(-16776961, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
  }

  @Test
  public void test116()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(xYPlot0);
      
      int int0 = 1524;
      Action action0 = TransferHandler.getPasteAction();
      assertNotNull(action0);
      
      JMenu jMenu0 = new JMenu(action0);
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(true, jMenu0.isFontSet());
      assertNotNull(jMenu0);
      
      Rectangle rectangle0 = jMenu0.bounds();
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertNotNull(rectangle0);
      
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, groupedStackedBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, groupedStackedBarRenderer0.getPassCount());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, groupedStackedBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(groupedStackedBarRenderer0);
      
      Color color0 = (Color)groupedStackedBarRenderer0.getItemPaint(int0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, groupedStackedBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, groupedStackedBarRenderer0.getPassCount());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, groupedStackedBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(-16776961, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertNotNull(color0);
      
      CategoryDataset categoryDataset0 = null;
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) categoryToPieDataset0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertNotNull(ringPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.getLabelLinkStroke();
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertNotNull(basicStroke0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) rectangle0.x, (Paint) color0, (Stroke) basicStroke0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, groupedStackedBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, groupedStackedBarRenderer0.getPassCount());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, groupedStackedBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(-16776961, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertNotNull(categoryMarker0);
      
      xYPlot0.addDomainMarker((Marker) categoryMarker0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, groupedStackedBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, groupedStackedBarRenderer0.getPassCount());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, groupedStackedBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(-16776961, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
  }

  @Test
  public void test117()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertTrue(boolean0);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNotNull(axisLocation0);
      
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0, boolean0);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
  }

  @Test
  public void test118()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNotNull(combinedRangeXYPlot0);
      
      int int0 = 108;
      ValueAxis valueAxis0 = combinedRangeXYPlot0.getDomainAxis(int0);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(valueAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNotNull(combinedDomainXYPlot0);
      
      XYDataset xYDataset0 = combinedRangeXYPlot0.getDataset(int0);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYDataset0);
      
      combinedDomainXYPlot0.setDataset(xYDataset0);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
  }

  @Test
  public void test119()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNotNull(combinedDomainXYPlot0);
      
      XYLine3DRenderer xYLine3DRenderer0 = new XYLine3DRenderer();
      assertEquals(12.0, xYLine3DRenderer0.getXOffset(), 0.01D);
      assertEquals(true, xYLine3DRenderer0.getBaseCreateEntities());
      assertEquals(false, xYLine3DRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYLine3DRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYLine3DRenderer0.getUseOutlinePaint());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYLine3DRenderer0.getBaseLinesVisible());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYLine3DRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYLine3DRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(8.0, xYLine3DRenderer0.getYOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYLine3DRenderer0.getUseFillPaint());
      assertEquals(3, xYLine3DRenderer0.getPassCount());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesVisible());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYLine3DRenderer0.getDrawOutlines());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesFilled());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(xYLine3DRenderer0);
      
      int int0 = combinedDomainXYPlot0.getIndexOf((XYItemRenderer) xYLine3DRenderer0);
      assertEquals(12.0, xYLine3DRenderer0.getXOffset(), 0.01D);
      assertEquals(true, xYLine3DRenderer0.getBaseCreateEntities());
      assertEquals(false, xYLine3DRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYLine3DRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYLine3DRenderer0.getUseOutlinePaint());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYLine3DRenderer0.getBaseLinesVisible());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYLine3DRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYLine3DRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(8.0, xYLine3DRenderer0.getYOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYLine3DRenderer0.getUseFillPaint());
      assertEquals(3, xYLine3DRenderer0.getPassCount());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesVisible());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYLine3DRenderer0.getDrawOutlines());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesFilled());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals((-1), int0);
  }

  @Test
  public void test120()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = combinedDomainXYPlot0.getRangeAxisCount();
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, int0);
  }

  @Test
  public void test121()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedRangeXYPlot0);
      
      AxisSpace axisSpace0 = null;
      combinedRangeXYPlot0.setFixedDomainAxisSpace(axisSpace0);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
  }

  @Test
  public void test122()  throws Throwable  {
      String string0 = "54U";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals("54U", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertNotNull(dateAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) dateAxis0);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals("54U", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      XYItemRenderer xYItemRenderer0 = null;
      combinedDomainXYPlot0.setRenderer(xYItemRenderer0);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals("54U", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
  }

  @Test
  public void test123()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      String string0 = "y5q\"qNx;rB6cV2;\\d?";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals("y5q\"qNx;rB6cV2;\\d?", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertNotNull(logarithmicAxis0);
      
      int int0 = 0;
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01D);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01D);
      assertNotNull(lookupPaintScale0);
      
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend((PaintScale) lookupPaintScale0, (ValueAxis) logarithmicAxis0);
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01D);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals("y5q\"qNx;rB6cV2;\\d?", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01D);
      assertEquals(true, paintScaleLegend0.getNotify());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01D);
      assertEquals(false, paintScaleLegend0.isStripOutlineVisible());
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01D);
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01D);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01D);
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01D);
      assertNull(paintScaleLegend0.getID());
      assertNotNull(paintScaleLegend0);
      
      AxisLocation axisLocation0 = paintScaleLegend0.getAxisLocation();
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01D);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals("y5q\"qNx;rB6cV2;\\d?", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01D);
      assertEquals(true, paintScaleLegend0.getNotify());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01D);
      assertEquals(false, paintScaleLegend0.isStripOutlineVisible());
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01D);
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01D);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01D);
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01D);
      assertNull(paintScaleLegend0.getID());
      assertNotNull(axisLocation0);
      
      combinedDomainXYPlot0.setRangeAxisLocation(int0, axisLocation0);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(1.0, lookupPaintScale0.getUpperBound(), 0.01D);
      assertEquals(0.0, lookupPaintScale0.getLowerBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals("y5q\"qNx;rB6cV2;\\d?", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01D);
      assertEquals(true, paintScaleLegend0.getNotify());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01D);
      assertEquals(false, paintScaleLegend0.isStripOutlineVisible());
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01D);
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01D);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01D);
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01D);
      assertNull(paintScaleLegend0.getID());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
  }

  @Test
  public void test124()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(xYPlot0);
      
      String string0 = xYPlot0.getPlotType();
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("XY Plot", string0);
      assertNotNull(string0);
  }
}
