/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:49:03 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.color.ColorSpace;
import java.awt.event.InputEvent;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import javax.swing.AbstractButton;
import javax.swing.JComponent;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.general.SeriesException;
import org.jfree.data.time.Day;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.MonthConstants;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class TimeSeriesEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      //  // Unstable assertion: assertTrue(boolean0);
      
      int int0 = 2088;
      String string0 = "I >KF97`7-";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      MockDate mockDate0 = new MockDate((long) int0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(mockDate0);
      
      Hour hour0 = new Hour((Date) mockDate0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(hour0);
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals(86400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(25569L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, day0.getMonth());
      //  // Unstable assertion: assertEquals(1970, day0.getYear());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(day0);
      
      timeSeries0.add((RegularTimePeriod) day0, (Number) int0, boolean0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals(86400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(25569L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, day0.getMonth());
      //  // Unstable assertion: assertEquals(1970, day0.getYear());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      
      Day day1 = new Day();
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertEquals(14, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(1392336000118L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(1392422400117L, day1.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(day1);
      
      Day day2 = (Day)day1.previous();
      //  // Unstable assertion: assertFalse(day1.equals((Object)day2));
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertFalse(day2.equals((Object)day1));
      //  // Unstable assertion: assertFalse(day2.equals((Object)day0));
      //  // Unstable assertion: assertNotSame(day1, day2);
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertNotSame(day2, day1);
      //  // Unstable assertion: assertNotSame(day2, day0);
      //  // Unstable assertion: assertEquals(14, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(1392336000118L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(1392422400117L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392335999999L, day2.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day2.getMonth());
      //  // Unstable assertion: assertEquals(13, day2.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day2.getYear());
      //  // Unstable assertion: assertEquals(41683L, day2.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392249600000L, day2.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(day2);
      
      timeSeries0.add((RegularTimePeriod) day1, (Number) int0);
      //  // Unstable assertion: assertFalse(day1.equals((Object)day2));
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertNotSame(day1, day2);
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertEquals(14, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(1392336000118L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(1392422400117L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
      
      int int1 = MonthConstants.MARCH;
      //  // Unstable assertion: assertEquals(3, int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      timeSeries0.add((RegularTimePeriod) day2, (Number) int1, boolean0);
      //  // Unstable assertion: assertFalse(day1.equals((Object)day2));
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertFalse(day2.equals((Object)day1));
      //  // Unstable assertion: assertFalse(day2.equals((Object)day0));
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertNotSame(day1, day2);
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertNotSame(day2, day1);
      //  // Unstable assertion: assertNotSame(day2, day0);
      //  // Unstable assertion: assertEquals(14, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(1392336000118L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(1392422400117L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392335999999L, day2.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day2.getMonth());
      //  // Unstable assertion: assertEquals(13, day2.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day2.getYear());
      //  // Unstable assertion: assertEquals(41683L, day2.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392249600000L, day2.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(3, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      int int2 = timeSeries0.hashCode();
      //  // Unstable assertion: assertEquals(639170369, int2);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(3, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test
  public void test01()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      //  // Unstable assertion: assertTrue(boolean0);
      
      int int0 = 2088;
      String string0 = "I >KF97`7-";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      MockDate mockDate0 = new MockDate((long) int0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(mockDate0);
      
      Hour hour0 = new Hour((Date) mockDate0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(hour0);
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertEquals(25569L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(86400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1, day0.getMonth());
      //  // Unstable assertion: assertEquals(1970, day0.getYear());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(day0);
      
      timeSeries0.add((RegularTimePeriod) day0, (Number) int0, boolean0);
      //  // Unstable assertion: assertEquals(25569L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(86400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1, day0.getMonth());
      //  // Unstable assertion: assertEquals(1970, day0.getYear());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      
      Day day1 = new Day();
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertEquals(41684L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(1392422400117L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392336000118L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(14, day1.getDayOfMonth());
      //  // Unstable assertion: assertNotNull(day1);
      
      timeSeries0.add((RegularTimePeriod) day1, (Number) int0);
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertEquals(41684L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(1392422400117L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392336000118L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(14, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
      
      int int1 = timeSeries0.hashCode();
      //  // Unstable assertion: assertEquals(1673028009, int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
  }

  @Test
  public void test02()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      //  // Unstable assertion: assertTrue(boolean0);
      
      int int0 = 2088;
      String string0 = "I >KF97`7-";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      MockDate mockDate0 = new MockDate((long) int0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(mockDate0);
      
      Hour hour0 = new Hour((Date) mockDate0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertNotNull(hour0);
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(1, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(25569L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(86400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, day0.getMonth());
      //  // Unstable assertion: assertEquals(1970, day0.getYear());
      //  // Unstable assertion: assertNotNull(day0);
      
      timeSeries0.add((RegularTimePeriod) day0, (Number) int0, boolean0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(1, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(25569L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(86400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, day0.getMonth());
      //  // Unstable assertion: assertEquals(1970, day0.getYear());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      
      int int1 = timeSeries0.hashCode();
      //  // Unstable assertion: assertEquals(1110475793, int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
  }

  @Test
  public void test03()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "I >KF97`7-";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, string0, string0, (Class) class0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      int int0 = timeSeries0.hashCode();
      assertEquals(618624339, int0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 1392;
      String string0 = null;
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      
      int int1 = timeSeries0.hashCode();
      assertEquals((-957834513), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test
  public void test05()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(millisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      int int0 = ColorSpace.TYPE_4CLR;
      //  // Unstable assertion: assertEquals(14, int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) int0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(timeSeries1);
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = Minute.LAST_MINUTE_IN_HOUR;
      assertEquals(59, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      String string0 = "JO`,x*3IdsN,J(&\\1s";
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals("JO`,x*3IdsN,J(&\\1s", timeSeries1.getDomainDescription());
      assertEquals("JO`,x*3IdsN,J(&\\1s", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.getNotify());
      assertNull(timeSeries1.getDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(0, timeSeries1.getItemCount());
      assertNotNull(timeSeries1);
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      assertFalse(boolean0);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("JO`,x*3IdsN,J(&\\1s", timeSeries1.getDomainDescription());
      assertEquals("JO`,x*3IdsN,J(&\\1s", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.getNotify());
      assertNull(timeSeries1.getDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(0, timeSeries1.getItemCount());
  }

  @Test
  public void test07()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      //  // Unstable assertion: assertTrue(boolean0);
      
      int int0 = 2088;
      String string0 = "I >KF97`7-";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      MockDate mockDate0 = new MockDate((long) int0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(mockDate0);
      
      Hour hour0 = new Hour((Date) mockDate0);
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(hour0);
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertEquals(118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(25569L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1970, day0.getYear());
      //  // Unstable assertion: assertEquals(1, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(86400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, day0.getMonth());
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(day0);
      
      Day day1 = new Day();
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(1392336000118L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422400117L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(14, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41684L, day1.getSerialIndex());
      //  // Unstable assertion: assertNotNull(day1);
      
      timeSeries0.add((RegularTimePeriod) day1, (Number) int0);
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(1392336000118L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422400117L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(14, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41684L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day1);
      //  // Unstable assertion: assertFalse(day0.equals((Object)day1));
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotSame(day0, day1);
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertEquals(118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(25569L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1970, day0.getYear());
      //  // Unstable assertion: assertEquals(1, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(86400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(1392336000118L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422400117L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(14, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41684L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries1);
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = InputEvent.CTRL_DOWN_MASK;
      //  // Unstable assertion: assertEquals(128, int0);
      
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Day day0 = new Day();
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(day0);
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, regularTimePeriod0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = Minute.LAST_MINUTE_IN_HOUR;
      assertEquals(59, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "0bV{eD=O++p\\!ZDx";
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNotNull(timeSeries0);
      
      int int0 = 2147483553;
      int int1 = (-2147483638);
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = ")";
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(")", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(")", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertNotNull(timeSeries0);
      
      int int0 = (-1548);
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Year year0 = new Year();
      //  // Unstable assertion: assertEquals(1388534400118L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070400117L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertNotNull(year0);
      
      String string0 = "\\,l?J5_;{b]g#q6}r";
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals("\\,l?J5_;{b]g#q6}r", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("\\,l?J5_;{b]g#q6}r", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1388534400118L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070400117L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      int int0 = 30;
      int int1 = 0;
      // Undeclared exception!
      try {
        timeSeries0.delete(int0, int1);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Minute minute0 = new Minute();
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertNotNull(minute0);
      
      String string0 = "0^jVweh=O++p\\FZzx";
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      int int0 = Integer.MAX_VALUE;
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) int0);
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      timeSeries0.delete((RegularTimePeriod) minute0);
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
  }

  @Test
  public void test14()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      //  // Unstable assertion: assertTrue(boolean0);
      
      int int0 = 2088;
      String string0 = "I >KF97`7-";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      MockDate mockDate0 = new MockDate((long) int0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(mockDate0);
      
      Hour hour0 = new Hour((Date) mockDate0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertNotNull(hour0);
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1, day0.getMonth());
      //  // Unstable assertion: assertEquals(86400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(25569L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1970, day0.getYear());
      //  // Unstable assertion: assertNotNull(day0);
      
      timeSeries0.delete((RegularTimePeriod) day0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1, day0.getMonth());
      //  // Unstable assertion: assertEquals(86400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(25569L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1970, day0.getYear());
  }

  @Test
  public void test15()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(millisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      double double0 = (-1.0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, double0);
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      timeSeries0.clear();
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = JComponent.WHEN_FOCUSED;
      assertEquals(0, int0);
      
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNotNull(timeSeries0);
      
      timeSeries0.clear();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test
  public void test17() {}
//   @Test
//   public void test17()  throws Throwable  {
//       int int0 = InputEvent.CTRL_DOWN_MASK;
//       //  // Unstable assertion: assertEquals(128, int0);
//       
//       Millisecond millisecond0 = new Millisecond();
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertNotNull(millisecond0);
//       
//       MockDate mockDate0 = (MockDate)millisecond0.getEnd();
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       
//       Minute minute0 = new Minute((Date) mockDate0);
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertNotNull(minute0);
//       
//       Day day0 = minute0.getDay();
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertNotNull(day0);
//       
//       Class<Year> class0 = Year.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, (Class) class0);
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
//       //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
//       //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
//       //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
//       //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
//       //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
//       //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
//       //  // Unstable assertion: assertNull(timeSeries1.getDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertNotNull(timeSeries1);
//       
//       Class<Day> class1 = Day.class;
//       timeSeries1.timePeriodClass = class1;
//       //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
//       //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
//       //  // Unstable assertion: assertNull(timeSeries1.getDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(false, timeSeries1.timePeriodClass.isArray());
//       //  // Unstable assertion: assertEquals(false, timeSeries1.timePeriodClass.isAnnotation());
//       //  // Unstable assertion: assertEquals(false, timeSeries1.timePeriodClass.isSynthetic());
//       //  // Unstable assertion: assertEquals("class org.jfree.data.time.Day", timeSeries1.timePeriodClass.toString());
//       //  // Unstable assertion: assertEquals(false, timeSeries1.timePeriodClass.isInterface());
//       //  // Unstable assertion: assertEquals(1, timeSeries1.timePeriodClass.getModifiers());
//       //  // Unstable assertion: assertEquals(false, timeSeries1.timePeriodClass.isPrimitive());
//       //  // Unstable assertion: assertEquals(false, timeSeries1.timePeriodClass.isEnum());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertNotNull(timeSeries1.timePeriodClass);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) int0);
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertNotNull(timeSeriesDataItem0);
//       
//       timeSeries1.add(timeSeriesDataItem0);
//       //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
//       //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
//       //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
//       //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
//       //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
//       //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
//       //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
//       //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
//       //  // Unstable assertion: assertNull(timeSeries1.getDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       
//       boolean boolean0 = true;
//       timeSeries1.removeAgedItems((long) int0, boolean0);
//       //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
//       //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
//       //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
//       //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
//       //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
//       //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
//       //  // Unstable assertion: assertNull(timeSeries1.getDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//   }

  @Test
  public void test18() {}
//   @Test
//   public void test18()  throws Throwable  {
//       int int0 = InputEvent.CTRL_DOWN_MASK;
//       //  // Unstable assertion: assertEquals(128, int0);
//       
//       Millisecond millisecond0 = new Millisecond();
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertNotNull(millisecond0);
//       
//       MockDate mockDate0 = (MockDate)millisecond0.getEnd();
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       
//       Minute minute0 = new Minute((Date) mockDate0);
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertNotNull(minute0);
//       
//       Day day0 = minute0.getDay();
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertNotNull(day0);
//       
//       Class<Year> class0 = Year.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, (Class) class0);
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
//       //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
//       //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
//       //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
//       //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
//       //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
//       //  // Unstable assertion: assertNull(timeSeries1.getDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertNotNull(timeSeries1);
//       
//       Class<Day> class1 = Day.class;
//       timeSeries1.timePeriodClass = class1;
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
//       //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
//       //  // Unstable assertion: assertNull(timeSeries1.getDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(false, timeSeries1.timePeriodClass.isArray());
//       //  // Unstable assertion: assertEquals(false, timeSeries1.timePeriodClass.isPrimitive());
//       //  // Unstable assertion: assertEquals("class org.jfree.data.time.Day", timeSeries1.timePeriodClass.toString());
//       //  // Unstable assertion: assertEquals(false, timeSeries1.timePeriodClass.isInterface());
//       //  // Unstable assertion: assertEquals(1, timeSeries1.timePeriodClass.getModifiers());
//       //  // Unstable assertion: assertEquals(false, timeSeries1.timePeriodClass.isSynthetic());
//       //  // Unstable assertion: assertEquals(false, timeSeries1.timePeriodClass.isAnnotation());
//       //  // Unstable assertion: assertEquals(false, timeSeries1.timePeriodClass.isEnum());
//       //  // Unstable assertion: assertNotNull(timeSeries1.timePeriodClass);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) int0);
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertNotNull(timeSeriesDataItem0);
//       
//       timeSeries1.add(timeSeriesDataItem0);
//       //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
//       //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
//       //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
//       //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
//       //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
//       //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
//       //  // Unstable assertion: assertNull(timeSeries1.getDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       
//       boolean boolean0 = false;
//       timeSeries1.removeAgedItems((long) int0, boolean0);
//       //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
//       //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
//       //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
//       //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
//       //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
//       //  // Unstable assertion: assertNull(timeSeries1.getDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//   }

  @Test
  public void test19()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      //  // Unstable assertion: assertTrue(boolean0);
      
      int int0 = 2088;
      String string0 = "I >KF97`7-";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      MockDate mockDate0 = new MockDate((long) int0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(mockDate0);
      
      Hour hour0 = new Hour((Date) mockDate0);
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(hour0);
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertEquals(1970, day0.getYear());
      //  // Unstable assertion: assertEquals(1, day0.getMonth());
      //  // Unstable assertion: assertEquals(118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(25569L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(86400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(day0);
      
      timeSeries0.add((RegularTimePeriod) day0, (Number) int0, boolean0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1970, day0.getYear());
      //  // Unstable assertion: assertEquals(1, day0.getMonth());
      //  // Unstable assertion: assertEquals(118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(25569L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(86400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      
      timeSeries0.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
  }

  @Test
  public void test20() {}
//   @Test
//   public void test20()  throws Throwable  {
//       int int0 = InputEvent.CTRL_DOWN_MASK;
//       //  // Unstable assertion: assertEquals(128, int0);
//       
//       Millisecond millisecond0 = new Millisecond();
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertNotNull(millisecond0);
//       
//       MockDate mockDate0 = (MockDate)millisecond0.getEnd();
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       
//       Minute minute0 = new Minute((Date) mockDate0);
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertNotNull(minute0);
//       
//       Day day0 = minute0.getDay();
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertNotNull(day0);
//       
//       Class<Year> class0 = Year.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, (Class) class0);
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       
//       boolean boolean0 = false;
//       timeSeries0.removeAgedItems((long) int0, boolean0);
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       
//       timeSeries0.removeAgedItems((long) int0, boolean0);
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//   }

  @Test
  public void test21()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      //  // Unstable assertion: assertTrue(boolean0);
      
      int int0 = 2088;
      String string0 = "I >KF97`7-";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Day day0 = new Day();
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertNotNull(day0);
      
      Day day1 = (Day)day0.previous();
      //  // Unstable assertion: assertFalse(day0.equals((Object)day1));
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertNotSame(day0, day1);
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392335999999L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(1392249600000L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(13, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(41683L, day1.getSerialIndex());
      //  // Unstable assertion: assertNotNull(day1);
      
      timeSeries0.add((RegularTimePeriod) day0, (Number) int0);
      //  // Unstable assertion: assertFalse(day0.equals((Object)day1));
      //  // Unstable assertion: assertNotSame(day0, day1);
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      int int1 = timeSeries0.getItemCount();
      //  // Unstable assertion: assertEquals(1, int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      long long0 = 0L;
      timeSeries0.setMaximumItemAge(long0);
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      timeSeries0.add((RegularTimePeriod) day1, (Number) int1, boolean0);
      //  // Unstable assertion: assertFalse(day0.equals((Object)day1));
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertNotSame(day0, day1);
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1392335999999L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(1392249600000L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(13, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(41683L, day1.getSerialIndex());
  }

  @Test
  public void test22()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      //  // Unstable assertion: assertTrue(boolean0);
      
      int int0 = 2088;
      String string0 = "I >KF97`7-";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Day day0 = new Day();
      //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertNotNull(day0);
      
      Day day1 = (Day)day0.previous();
      //  // Unstable assertion: assertFalse(day0.equals((Object)day1));
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertNotSame(day0, day1);
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392335999999L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392249600000L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(13, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41683L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertNotNull(day1);
      
      timeSeries0.add((RegularTimePeriod) day0, (Number) int0);
      //  // Unstable assertion: assertFalse(day0.equals((Object)day1));
      //  // Unstable assertion: assertNotSame(day0, day1);
      //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      
      int int1 = timeSeries0.getItemCount();
      //  // Unstable assertion: assertEquals(1, int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      
      timeSeries0.add((RegularTimePeriod) day1, (double) int1, boolean0);
      //  // Unstable assertion: assertFalse(day0.equals((Object)day1));
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertNotSame(day0, day1);
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392335999999L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392249600000L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(13, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41683L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      
      long long0 = 0L;
      timeSeries0.setMaximumItemAge(long0);
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(0L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
  }

  @Test
  public void test23()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      //  // Unstable assertion: assertTrue(boolean0);
      
      int int0 = 2354;
      String string0 = "I >KF97`7-";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Day day0 = new Day();
      //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertNotNull(day0);
      
      int int1 = 0;
      timeSeries0.setMaximumItemCount(int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
  }

  @Test
  public void test24()  throws Throwable  {
      boolean boolean0 = true;
      int int0 = (-3675);
      RegularTimePeriod regularTimePeriod0 = null;
      String string0 = "*?M5\";4";
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, string0, string0, (Class) class0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("*?M5\";4", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("*?M5\";4", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      // Undeclared exception!
      try {
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate(regularTimePeriod0, (Number) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(millisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      int int0 = ColorSpace.TYPE_4CLR;
      //  // Unstable assertion: assertEquals(14, int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) int0);
      //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries1);
      
      TimeSeries timeSeries2 = timeSeries1.addAndOrUpdate(timeSeries0);
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries2.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries2.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries2.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries2.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries2.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries2.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries2);
  }

  @Test
  public void test26()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(millisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      int int0 = ColorSpace.TYPE_4CLR;
      //  // Unstable assertion: assertEquals(14, int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) int0);
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Millisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      //  // Unstable assertion: assertTrue(boolean0);
      
      int int0 = 2088;
      String string0 = "I >KF97`7-";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Day day0 = new Day();
      //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(day0);
      
      timeSeries0.add((RegularTimePeriod) day0, (Number) int0);
      //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      
      int int1 = timeSeries0.getItemCount();
      //  // Unstable assertion: assertEquals(1, int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      
      timeSeries0.update((RegularTimePeriod) day0, (Number) int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
  }

  @Test
  public void test28()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      //  // Unstable assertion: assertTrue(boolean0);
      
      String string0 = "I >KF97`7-";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Day day0 = new Day();
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(day0);
      
      int int0 = timeSeries0.getItemCount();
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      
      // Undeclared exception!
      try {
        timeSeries0.update((RegularTimePeriod) day0, (Number) int0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // TimeSeries.update(TimePeriod, Number):  period does not exist.
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      //  // Unstable assertion: assertTrue(boolean0);
      
      int int0 = 2354;
      String string0 = "I >KF97`7-";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Day day0 = new Day();
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(day0);
      
      int int1 = 0;
      timeSeries0.setMaximumItemCount(int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      
      timeSeries0.add((RegularTimePeriod) day0, (Number) int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
  }

  @Test
  public void test30()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      //  // Unstable assertion: assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isValid());
      //  // Unstable assertion: assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(true, defaultTreeCellRenderer0.isVisible());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      //  // Unstable assertion: assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isShowing());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      //  // Unstable assertion: assertEquals(0, defaultTreeCellRenderer0.countComponents());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertNotNull(defaultTreeCellRenderer0);
      
      String string0 = defaultTreeCellRenderer0.getUIClassID();
      //  // Unstable assertion: assertEquals("LabelUI", string0);
      //  // Unstable assertion: assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isValid());
      //  // Unstable assertion: assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(true, defaultTreeCellRenderer0.isVisible());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      //  // Unstable assertion: assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isShowing());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      //  // Unstable assertion: assertEquals(0, defaultTreeCellRenderer0.countComponents());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertNotNull(string0);
      
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("LabelUI", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("LabelUI", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isValid());
      //  // Unstable assertion: assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(true, defaultTreeCellRenderer0.isVisible());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      //  // Unstable assertion: assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isShowing());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      //  // Unstable assertion: assertEquals(0, defaultTreeCellRenderer0.countComponents());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Second second0 = new Second();
      //  // Unstable assertion: assertEquals(3601570881L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(21, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281118L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409282117L, second0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(second0);
      
      double double0 = (-2.147483646847011E9);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, double0);
      //  // Unstable assertion: assertEquals(3601570881L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(21, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281118L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409282117L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("LabelUI", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("LabelUI", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isValid());
      //  // Unstable assertion: assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(true, defaultTreeCellRenderer0.isVisible());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      //  // Unstable assertion: assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isShowing());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      //  // Unstable assertion: assertEquals(0, defaultTreeCellRenderer0.countComponents());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      boolean boolean0 = timeSeries0.equals((Object) class0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("LabelUI", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("LabelUI", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isValid());
      //  // Unstable assertion: assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(true, defaultTreeCellRenderer0.isVisible());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      //  // Unstable assertion: assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isShowing());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      //  // Unstable assertion: assertEquals(0, defaultTreeCellRenderer0.countComponents());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      
      // Undeclared exception!
      try {
        timeSeries0.add(timeSeriesDataItem0, boolean0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertNotNull(millisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Number number0 = timeSeries0.getValue((RegularTimePeriod) millisecond0);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(number0);
  }

  @Test
  public void test32()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean0);
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean1, (Class) class0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNotNull(timeSeries0);
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        Number number0 = timeSeries0.getValue(regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      //  // Unstable assertion: assertTrue(boolean0);
      
      int int0 = 2088;
      String string0 = "I >KF97`7-";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      MockDate mockDate0 = new MockDate((long) int0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(mockDate0);
      
      Hour hour0 = new Hour((Date) mockDate0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertNotNull(hour0);
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertEquals(118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(86400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, day0.getMonth());
      //  // Unstable assertion: assertEquals(1, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1970, day0.getYear());
      //  // Unstable assertion: assertEquals(25569L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertNotNull(day0);
      
      timeSeries0.add((RegularTimePeriod) day0, (Number) int0, boolean0);
      //  // Unstable assertion: assertEquals(118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(86400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, day0.getMonth());
      //  // Unstable assertion: assertEquals(1, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1970, day0.getYear());
      //  // Unstable assertion: assertEquals(25569L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      
      Day day1 = new Day();
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(1392336000118L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41684L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422400117L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertNotNull(day1);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day1, (RegularTimePeriod) day1);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(1392336000118L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41684L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422400117L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertNotNull(timeSeries1);
      
      Collection collection0 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(1392336000118L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41684L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422400117L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertNotNull(collection0);
  }

  @Test
  public void test34()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      //  // Unstable assertion: assertTrue(boolean0);
      
      int int0 = 2088;
      String string0 = "I >KF97`7-";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      MockDate mockDate0 = new MockDate((long) int0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(mockDate0);
      
      Hour hour0 = new Hour((Date) mockDate0);
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(hour0);
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertEquals(86400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(25569L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1970, day0.getYear());
      //  // Unstable assertion: assertEquals(118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1, day0.getMonth());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(day0);
      
      timeSeries0.add((RegularTimePeriod) day0, (Number) int0, boolean0);
      //  // Unstable assertion: assertEquals(86400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(25569L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1970, day0.getYear());
      //  // Unstable assertion: assertEquals(118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1, day0.getMonth());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      
      Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNotNull(collection0);
  }

  @Test
  public void test35()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      //  // Unstable assertion: assertTrue(boolean0);
      
      int int0 = 2088;
      String string0 = "I >KF97`7-";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      MockDate mockDate0 = new MockDate((long) int0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(mockDate0);
      
      Hour hour0 = new Hour((Date) mockDate0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertNotNull(hour0);
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals(25569L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1, day0.getMonth());
      //  // Unstable assertion: assertEquals(1970, day0.getYear());
      //  // Unstable assertion: assertEquals(118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(86400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertNotNull(day0);
      
      timeSeries0.add((RegularTimePeriod) day0, (Number) int0, boolean0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals(25569L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1, day0.getMonth());
      //  // Unstable assertion: assertEquals(1970, day0.getYear());
      //  // Unstable assertion: assertEquals(118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(86400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      
      Collection collection0 = timeSeries0.getTimePeriods();
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNotNull(collection0);
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = JComponent.WHEN_FOCUSED;
      //  // Unstable assertion: assertEquals(0, int0);
      
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      MockDate mockDate0 = new MockDate();
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(mockDate0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      Minute minute0 = new Minute((Date) mockDate0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(minute0);
      
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) minute0, (double) int0, boolean0);
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      
      Day day0 = new Day();
      //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertNotNull(day0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) day0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertNotNull(timeSeriesDataItem0);
  }

  @Test
  public void test37()  throws Throwable  {
      int int0 = InputEvent.CTRL_DOWN_MASK;
      //  // Unstable assertion: assertEquals(128, int0);
      
      String string0 = "<(xuaRi^Odm9";
      Class<Second> class0 = Second.class;
      Millisecond millisecond0 = new Millisecond();
      //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertNotNull(millisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("<(xuaRi^Odm9", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("<(xuaRi^Odm9", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) millisecond0);
      //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("<(xuaRi^Odm9", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("<(xuaRi^Odm9", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = AbstractButton.TEXT_CHANGED_PROPERTY;
      assertEquals("text", string0);
      assertNotNull(string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      long long0 = (-960L);
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemAge(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      //  // Unstable assertion: assertTrue(boolean0);
      
      int int0 = 2354;
      String string0 = "I >KF97`7-";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Day day0 = new Day();
      //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertNotNull(day0);
      
      timeSeries0.add((RegularTimePeriod) day0, (double) int0);
      //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      
      int int1 = 0;
      timeSeries0.setMaximumItemCount(int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
  }

  @Test
  public void test40()  throws Throwable  {
      String string0 = "0bVweD=O+p\\FZzx";
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNotNull(timeSeries0);
      
      int int0 = (-2073);
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemCount(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
      }
  }

  @Test
  public void test41() {}
//   @Test
//   public void test41()  throws Throwable  {
//       int int0 = InputEvent.CTRL_DOWN_MASK;
//       //  // Unstable assertion: assertEquals(128, int0);
//       
//       Millisecond millisecond0 = new Millisecond();
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertNotNull(millisecond0);
//       
//       MockDate mockDate0 = (MockDate)millisecond0.getEnd();
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       
//       Minute minute0 = new Minute((Date) mockDate0);
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertNotNull(minute0);
//       
//       Day day0 = minute0.getDay();
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertNotNull(day0);
//       
//       Class<Year> class0 = Year.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, (Class) class0);
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
//       //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
//       //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
//       //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
//       //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
//       //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
//       //  // Unstable assertion: assertNull(timeSeries1.getDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertNotNull(timeSeries1);
//       
//       Class<Day> class1 = Day.class;
//       timeSeries1.timePeriodClass = class1;
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
//       //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
//       //  // Unstable assertion: assertNull(timeSeries1.getDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(false, timeSeries1.timePeriodClass.isArray());
//       //  // Unstable assertion: assertEquals("class org.jfree.data.time.Day", timeSeries1.timePeriodClass.toString());
//       //  // Unstable assertion: assertEquals(false, timeSeries1.timePeriodClass.isPrimitive());
//       //  // Unstable assertion: assertEquals(false, timeSeries1.timePeriodClass.isEnum());
//       //  // Unstable assertion: assertEquals(false, timeSeries1.timePeriodClass.isSynthetic());
//       //  // Unstable assertion: assertEquals(false, timeSeries1.timePeriodClass.isInterface());
//       //  // Unstable assertion: assertEquals(1, timeSeries1.timePeriodClass.getModifiers());
//       //  // Unstable assertion: assertEquals(false, timeSeries1.timePeriodClass.isAnnotation());
//       //  // Unstable assertion: assertNotNull(timeSeries1.timePeriodClass);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) int0);
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertNotNull(timeSeriesDataItem0);
//       
//       timeSeries1.add(timeSeriesDataItem0);
//       //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
//       //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
//       //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
//       //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
//       //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
//       //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
//       //  // Unstable assertion: assertNull(timeSeries1.getDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       
//       Integer integer0 = (Integer)timeSeries1.getValue((RegularTimePeriod) millisecond0);
//       //  // Unstable assertion: assertEquals(128, (int)integer0);
//       //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
//       //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
//       //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
//       //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
//       //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
//       //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
//       //  // Unstable assertion: assertNull(timeSeries1.getDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//   }

  @Test
  public void test42() {}
//   @Test
//   public void test42()  throws Throwable  {
//       Millisecond millisecond0 = new Millisecond();
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertNotNull(millisecond0);
//       
//       MockDate mockDate0 = (MockDate)millisecond0.getEnd();
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       
//       Minute minute0 = new Minute((Date) mockDate0);
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertNotNull(minute0);
//       
//       Day day0 = minute0.getDay();
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertNotNull(day0);
//       
//       Class<Year> class0 = Year.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, (Class) class0);
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       
//       // Undeclared exception!
//       try {
//         RegularTimePeriod regularTimePeriod0 = timeSeries0.getNextTimePeriod();
//        //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
//        // Unstable assertion
//       } catch(ArrayIndexOutOfBoundsException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test43() {}
//   @Test
//   public void test43()  throws Throwable  {
//       Millisecond millisecond0 = new Millisecond();
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertNotNull(millisecond0);
//       
//       MockDate mockDate0 = (MockDate)millisecond0.getEnd();
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       
//       Minute minute0 = new Minute((Date) mockDate0);
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertNotNull(minute0);
//       
//       Day day0 = minute0.getDay();
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertNotNull(day0);
//       
//       Class<Year> class0 = Year.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, (Class) class0);
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       
//       TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
//       //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
//       //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
//       //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
//       //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(1392409260118L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(1392409320117L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
//       //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       //  // Unstable assertion: assertNull(timeSeries1.getDescription());
//       //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392336000118L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(1392422400117L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertNotNull(timeSeries1);
//   }

  @Test
  public void test44()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertNotNull(defaultTreeCellRenderer0);
      
      String string0 = defaultTreeCellRenderer0.getUIClassID();
      assertEquals("LabelUI", string0);
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertNotNull(string0);
      
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("LabelUI", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("LabelUI", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNotNull(timeSeries0);
      
      List list0 = timeSeries0.getItems();
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("LabelUI", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("LabelUI", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNotNull(list0);
  }

  @Test
  public void test45()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      //  // Unstable assertion: assertTrue(boolean0);
      
      int int0 = 2088;
      String string0 = "I >KF97`7-";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      MockDate mockDate0 = new MockDate((long) int0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(mockDate0);
      
      Hour hour0 = new Hour((Date) mockDate0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertNotNull(hour0);
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals(25569L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1970, day0.getYear());
      //  // Unstable assertion: assertEquals(86400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, day0.getMonth());
      //  // Unstable assertion: assertEquals(118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertNotNull(day0);
      
      timeSeries0.add((RegularTimePeriod) day0, (Number) int0, boolean0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals(25569L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1970, day0.getYear());
      //  // Unstable assertion: assertEquals(86400117L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, day0.getMonth());
      //  // Unstable assertion: assertEquals(118L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(118L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(3600117L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      // Undeclared exception!
      try {
        timeSeries0.add((RegularTimePeriod) day0, (Number) int0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 1-January-1970 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "I >KF97`7-";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, string0, string0, (Class) class0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      timeSeries0.setDomainDescription(string0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
  }

  @Test
  public void test47()  throws Throwable  {
      String string0 = "0^jVweh=O++p\\FZzx";
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try {
        timeSeries0.update(int0, (Number) int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Size: 0
         //
      }
  }

  @Test
  public void test48()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(millisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNotNull(timeSeries1);
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(202L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570881202L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test
  public void test49()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "I >KF97`7-";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, string0, string0, (Class) class0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      timeSeries0.setRangeDescription(string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("I >KF97`7-", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("I >KF97`7-", timeSeries0.getRangeDescription());
  }
}
