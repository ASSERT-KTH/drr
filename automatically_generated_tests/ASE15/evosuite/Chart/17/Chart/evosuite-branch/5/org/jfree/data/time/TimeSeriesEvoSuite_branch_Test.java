/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:32:07 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.AWTEvent;
import java.awt.Cursor;
import java.awt.Event;
import java.awt.event.KeyEvent;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.general.SeriesException;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class TimeSeriesEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      int int0 = SwingConstants.EAST;
      //  // Unstable assertion: assertEquals(3, int0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(month0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) int0);
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      Month month1 = (Month)month0.previous();
      //  // Unstable assertion: assertEquals(1388534400000L, month1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month1.getYearValue());
      //  // Unstable assertion: assertEquals(1, month1.getMonth());
      //  // Unstable assertion: assertEquals(1391212799999L, month1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24169L, month1.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertNotSame(month1, month0);
      //  // Unstable assertion: assertNotSame(month0, month1);
      //  // Unstable assertion: assertFalse(month1.equals((Object)month0));
      //  // Unstable assertion: assertFalse(month0.equals((Object)month1));
      //  // Unstable assertion: assertNotNull(month1);
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) month1, (double) int0);
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1388534400000L, month1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month1.getYearValue());
      //  // Unstable assertion: assertEquals(1, month1.getMonth());
      //  // Unstable assertion: assertEquals(1391212799999L, month1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24169L, month1.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertNotSame(month1, month0);
      //  // Unstable assertion: assertNotSame(month0, month1);
      //  // Unstable assertion: assertFalse(month1.equals((Object)month0));
      //  // Unstable assertion: assertFalse(month0.equals((Object)month1));
      //  // Unstable assertion: assertNull(timeSeriesDataItem1);
      
      int int1 = timeSeries0.hashCode();
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(930355471, int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = SwingConstants.EAST;
      //  // Unstable assertion: assertEquals(3, int0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(month0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) int0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      int int1 = timeSeries0.hashCode();
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(2121487693, int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
  }

  @Test
  public void test02() {}
//   @Test
//   public void test02()  throws Throwable  {
//       Millisecond millisecond0 = new Millisecond();
//       //  // Unstable assertion: assertEquals(339L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(3601570883339L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertNotNull(millisecond0);
//       
//       MockDate mockDate0 = (MockDate)millisecond0.getEnd();
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(339L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(3601570883339L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       
//       SpreadsheetDate spreadsheetDate0 = (SpreadsheetDate)SerialDate.createInstance((Date) mockDate0);
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(339L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(3601570883339L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertNotNull(spreadsheetDate0);
//       
//       Class<Object> class0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) spreadsheetDate0, (Class) class0);
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(339L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(3601570883339L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       
//       String string0 = null;
//       timeSeries0.setRangeDescription(string0);
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(339L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(3601570883339L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       
//       int int0 = timeSeries0.hashCode();
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(339L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(3601570883339L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(1451461571, int0);
//   }

  @Test
  public void test03() {}
//   @Test
//   public void test03()  throws Throwable  {
//       Millisecond millisecond0 = new Millisecond();
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570883339L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(339L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertNotNull(millisecond0);
//       
//       MockDate mockDate0 = (MockDate)millisecond0.getEnd();
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570883339L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(339L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       
//       SpreadsheetDate spreadsheetDate0 = (SpreadsheetDate)SerialDate.createInstance((Date) mockDate0);
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570883339L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(339L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertNotNull(spreadsheetDate0);
//       
//       Class<Object> class0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) spreadsheetDate0, (Class) class0);
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570883339L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(339L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       
//       String string0 = null;
//       timeSeries0.setDomainDescription(string0);
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570883339L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(339L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       
//       int int0 = timeSeries0.hashCode();
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570883339L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(339L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(329690139, int0);
//   }

  @Test
  public void test04()  throws Throwable  {
      int int0 = SwingConstants.EAST;
      //  // Unstable assertion: assertEquals(3, int0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Second second0 = new Second();
      //  // Unstable assertion: assertEquals(1392409280981L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281980L, second0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(second0);
      
      timeSeries0.add((RegularTimePeriod) second0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1392409280981L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281980L, second0.getLastMillisecond());
      
      int int1 = 0;
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy(int1, int1);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertNotNull(timeSeries1);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (double) int0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1392409280981L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281980L, second0.getLastMillisecond());
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertNotNull(timeSeriesDataItem0);
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(int0 == int1);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = SwingConstants.EAST;
      //  // Unstable assertion: assertEquals(3, int0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(month0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) int0);
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      int int1 = 0;
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy(int1, int1);
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertNotNull(timeSeries1);
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = SwingConstants.EAST;
      assertEquals(3, int0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertNotNull(timeSeries1);
      
      String string0 = "";
      timeSeries0.setDomainDescription(string0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNotSame(timeSeries0, timeSeries1);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertFalse(boolean0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
  }

  @Test
  public void test07()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      //  // Unstable assertion: assertEquals(1396310397980L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534397981L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(quarter0);
      
      String string0 = "9[atDd@U\"M8W=Z";
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("9[atDd@U\"M8W=Z", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("9[atDd@U\"M8W=Z", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(1396310397980L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534397981L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      int int0 = 0;
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("9[atDd@U\"M8W=Z", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("9[atDd@U\"M8W=Z", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("9[atDd@U\"M8W=Z", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals("9[atDd@U\"M8W=Z", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(1396310397980L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534397981L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotNull(timeSeries1);
      
      timeSeries1.setKey((Comparable) int0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("9[atDd@U\"M8W=Z", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("9[atDd@U\"M8W=Z", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("9[atDd@U\"M8W=Z", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals("9[atDd@U\"M8W=Z", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(1396310397980L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534397981L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("9[atDd@U\"M8W=Z", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("9[atDd@U\"M8W=Z", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("9[atDd@U\"M8W=Z", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals("9[atDd@U\"M8W=Z", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(1396310397980L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534397981L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = SwingConstants.EAST;
      //  // Unstable assertion: assertEquals(3, int0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertNotNull(month0);
      
      boolean boolean0 = timeSeries0.equals((Object) month0);
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = SwingConstants.EAST;
      assertEquals(3, int0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertNotNull(timeSeries1);
      
      String string0 = "Tv";
      timeSeries0.setRangeDescription(string0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Tv", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotSame(timeSeries0, timeSeries1);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Tv", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertFalse(boolean0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = SwingConstants.EAST;
      //  // Unstable assertion: assertEquals(3, int0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertNotNull(month0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) int0);
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      Month month1 = (Month)month0.previous();
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1, month1.getMonth());
      //  // Unstable assertion: assertEquals(1388534400000L, month1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month1.getYearValue());
      //  // Unstable assertion: assertEquals(1391212799999L, month1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24169L, month1.getSerialIndex());
      //  // Unstable assertion: assertNotSame(month0, month1);
      //  // Unstable assertion: assertNotSame(month1, month0);
      //  // Unstable assertion: assertFalse(month0.equals((Object)month1));
      //  // Unstable assertion: assertFalse(month1.equals((Object)month0));
      //  // Unstable assertion: assertNotNull(month1);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) month1, (RegularTimePeriod) month0);
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1, month1.getMonth());
      //  // Unstable assertion: assertEquals(1388534400000L, month1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month1.getYearValue());
      //  // Unstable assertion: assertEquals(1391212799999L, month1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24169L, month1.getSerialIndex());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNotSame(month0, month1);
      //  // Unstable assertion: assertNotSame(month1, month0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertFalse(month0.equals((Object)month1));
      //  // Unstable assertion: assertFalse(month1.equals((Object)month0));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotNull(timeSeries1);
  }

  @Test
  public void test11() {}
//   @Test
//   public void test11()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       //  // Unstable assertion: assertEquals(1396310397980L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1388534397981L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertNotNull(quarter0);
//       
//       String string0 = "9[atDd@U\"M8W=Z";
//       Class<Integer> class0 = Integer.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, string0, string0, (Class) class0);
//       //  // Unstable assertion: assertEquals(1396310397980L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1388534397981L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals("9[atDd@U\"M8W=Z", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals("9[atDd@U\"M8W=Z", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       
//       MockDate mockDate0 = (MockDate)quarter0.getEnd();
//       //  // Unstable assertion: assertEquals("Mon Mar 31 23:59:57 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1396310397980L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1388534397981L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
//       //  // Unstable assertion: assertNotNull(zoneInfo0);
//       
//       Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
//       //  // Unstable assertion: assertEquals("Mon Mar 31 23:59:57 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
//       //  // Unstable assertion: assertEquals(1396310397980L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1388534397981L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, year0.getYear());
//       //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
//       //  // Unstable assertion: assertEquals("2014", year0.toString());
//       //  // Unstable assertion: assertNotNull(year0);
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) year0);
//       //  // Unstable assertion: assertEquals("Mon Mar 31 23:59:57 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
//       //  // Unstable assertion: assertEquals(1396310397980L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1388534397981L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("9[atDd@U\"M8W=Z", timeSeries1.getRangeDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("9[atDd@U\"M8W=Z", timeSeries1.getDomainDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
//       //  // Unstable assertion: assertNull(timeSeries1.getDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals("9[atDd@U\"M8W=Z", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals("9[atDd@U\"M8W=Z", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, year0.getYear());
//       //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
//       //  // Unstable assertion: assertEquals("2014", year0.toString());
//       //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
//       //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
//       //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
//       //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
//       //  // Unstable assertion: assertNotNull(timeSeries1);
//   }

  @Test
  public void test12()  throws Throwable  {
      long long0 = (-24L);
      String string0 = "Null 'object' arument.";
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Null 'object' arument.", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Null 'object' arument.", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      int int0 = 2597;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
      //  // Unstable assertion: assertEquals("Thu Oct 28 01:00:17 GMT 4720", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(mockDate0);
      
      Second second0 = new Second((Date) mockDate0);
      //  // Unstable assertion: assertEquals(86807552417980L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(86807552416981L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(19, second0.getSecond());
      //  // Unstable assertion: assertEquals(89016714019L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Thu Oct 28 01:00:17 GMT 4720", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(second0);
      
      Second second1 = (Second)second0.next();
      //  // Unstable assertion: assertEquals(86807552417980L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(86807552416981L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(19, second0.getSecond());
      //  // Unstable assertion: assertEquals(89016714019L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, second1.getSecond());
      //  // Unstable assertion: assertEquals(86807552420000L, second1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(86807552420999L, second1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(89016714020L, second1.getSerialIndex());
      //  // Unstable assertion: assertEquals("Thu Oct 28 01:00:17 GMT 4720", mockDate0.toString());
      //  // Unstable assertion: assertNotSame(second0, second1);
      //  // Unstable assertion: assertNotSame(second1, second0);
      //  // Unstable assertion: assertFalse(second0.equals((Object)second1));
      //  // Unstable assertion: assertFalse(second1.equals((Object)second0));
      //  // Unstable assertion: assertNotNull(second1);
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) second1, (RegularTimePeriod) second0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = Event.F3;
      //  // Unstable assertion: assertEquals(1010, int0);
      
      String string0 = "";
      Class<DefaultTableModel> class0 = DefaultTableModel.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
      //  // Unstable assertion: assertEquals("Sun Jan 15 19:06:50 GMT 2997", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(mockDate0);
      
      Second second0 = new Second((Date) mockDate0);
      //  // Unstable assertion: assertEquals(34619512012L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(32410350409981L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(52, second0.getSecond());
      //  // Unstable assertion: assertEquals(32410350410980L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Sun Jan 15 19:06:50 GMT 2997", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(second0);
      
      Class<TimeSeriesDataItem> class1 = TimeSeriesDataItem.class;
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertEquals("0Q^u{}uPZ7{%", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      RegularTimePeriod regularTimePeriod0 = RegularTimePeriod.createInstance((Class) class1, (Date) mockDate0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertEquals("Sun Jan 15 19:06:50 GMT 2997", mockDate0.toString());
      //  // Unstable assertion: assertEquals("0Q^u{}uPZ7{%", zoneInfo0.getID());
      //  // Unstable assertion: assertNull(regularTimePeriod0);
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) second0, regularTimePeriod0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = KeyEvent.VK_F1;
      assertEquals(112, int0);
      
      String string0 = "yyyy-MM-dd";
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("yyyy-MM-dd", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("yyyy-MM-dd", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      byte byte0 = (byte) (-11);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) byte0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      byte byte1 = (byte)5;
      int int0 = timeSeries0.getItemCount();
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, int0);
      assertFalse(byte0 == byte1);
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((int) byte1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      String string0 = "Ao7TUACi%+L\\=/K$nc";
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, string0, string0, (Class) class0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Ao7TUACi%+L\\=/K$nc", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Ao7TUACi%+L\\=/K$nc", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNotNull(timeSeries0);
      
      int int0 = (-54);
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = DefaultEditorKit.endLineAction;
      assertEquals("caret-end-line", string0);
      assertNotNull(string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNotNull(timeSeries0);
      
      int int0 = 357;
      int int1 = (-1);
      // Undeclared exception!
      try {
        timeSeries0.delete(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = SwingConstants.EAST;
      //  // Unstable assertion: assertEquals(3, int0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(month0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) int0);
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      timeSeries0.delete((RegularTimePeriod) month0);
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = SwingConstants.EAST;
      //  // Unstable assertion: assertEquals(3, int0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertNotNull(month0);
      
      timeSeries0.delete((RegularTimePeriod) month0);
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
  }

  @Test
  public void test20()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      String string0 = "Ao7TUACi%+L\\=/K$nc";
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals("Ao7TUACi%+L\\=/K$nc", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Ao7TUACi%+L\\=/K$nc", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Second second0 = new Second();
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409280981L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281980L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(second0);
      
      double double0 = 1.644111233017025;
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, double0);
      //  // Unstable assertion: assertEquals("Ao7TUACi%+L\\=/K$nc", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Ao7TUACi%+L\\=/K$nc", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409280981L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281980L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      timeSeries0.clear();
      //  // Unstable assertion: assertEquals("Ao7TUACi%+L\\=/K$nc", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Ao7TUACi%+L\\=/K$nc", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = SwingConstants.EAST;
      assertEquals(3, int0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNotNull(timeSeries0);
      
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = SwingConstants.EAST;
      //  // Unstable assertion: assertEquals(3, int0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Second second0 = new Second();
      //  // Unstable assertion: assertEquals(1392409280981L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281980L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(second0);
      
      timeSeries0.add((RegularTimePeriod) second0, (Number) int0);
      //  // Unstable assertion: assertEquals(1392409280981L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281980L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      boolean boolean0 = false;
      timeSeries0.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = SwingConstants.EAST;
      //  // Unstable assertion: assertEquals(3, int0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(month0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) int0);
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      int int1 = 0;
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy(int1, int1);
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotNull(timeSeries1);
      
      TimeSeries timeSeries2 = timeSeries1.addAndOrUpdate(timeSeries0);
      //  // Unstable assertion: assertEquals(true, timeSeries2.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries2.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries2.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries2.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries2.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries2.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries1));
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
      //  // Unstable assertion: assertNotNull(timeSeries2);
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
      
      timeSeries1.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = DefaultEditorKit.endLineAction;
      assertEquals("caret-end-line", string0);
      assertNotNull(string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNotNull(timeSeries0);
      
      long long0 = AWTEvent.HIERARCHY_EVENT_MASK;
      assertEquals(32768L, long0);
      
      boolean boolean0 = true;
      timeSeries0.removeAgedItems(long0, boolean0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      timeSeries0.removeAgedItems(long0, boolean0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = SwingConstants.EAST;
      //  // Unstable assertion: assertEquals(3, int0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(month0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) int0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      Month month1 = (Month)month0.previous();
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1388534400000L, month1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24169L, month1.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, month1.getYearValue());
      //  // Unstable assertion: assertEquals(1391212799999L, month1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, month1.getMonth());
      //  // Unstable assertion: assertNotSame(month0, month1);
      //  // Unstable assertion: assertNotSame(month1, month0);
      //  // Unstable assertion: assertFalse(month0.equals((Object)month1));
      //  // Unstable assertion: assertFalse(month1.equals((Object)month0));
      //  // Unstable assertion: assertNotNull(month1);
      
      int int1 = 0;
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      timeSeries0.setMaximumItemAge((long) int1);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) month1, (double) int0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1388534400000L, month1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24169L, month1.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, month1.getYearValue());
      //  // Unstable assertion: assertEquals(1391212799999L, month1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, month1.getMonth());
      //  // Unstable assertion: assertNotSame(month0, month1);
      //  // Unstable assertion: assertNotSame(month1, month0);
      //  // Unstable assertion: assertFalse(month0.equals((Object)month1));
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(month1.equals((Object)month0));
      //  // Unstable assertion: assertNull(timeSeriesDataItem1);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = SwingConstants.EAST;
      //  // Unstable assertion: assertEquals(3, int0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(month0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) int0);
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      Month month1 = (Month)month0.previous();
      //  // Unstable assertion: assertEquals(24169L, month1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534400000L, month1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month1.getYearValue());
      //  // Unstable assertion: assertEquals(1391212799999L, month1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, month1.getMonth());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertNotSame(month1, month0);
      //  // Unstable assertion: assertNotSame(month0, month1);
      //  // Unstable assertion: assertFalse(month1.equals((Object)month0));
      //  // Unstable assertion: assertFalse(month0.equals((Object)month1));
      //  // Unstable assertion: assertNotNull(month1);
      
      int int1 = 0;
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) month1, (Number) int0);
      //  // Unstable assertion: assertEquals(24169L, month1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534400000L, month1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month1.getYearValue());
      //  // Unstable assertion: assertEquals(1391212799999L, month1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, month1.getMonth());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNotSame(month1, month0);
      //  // Unstable assertion: assertNotSame(month0, month1);
      //  // Unstable assertion: assertFalse(month1.equals((Object)month0));
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(month0.equals((Object)month1));
      //  // Unstable assertion: assertNull(timeSeriesDataItem1);
      
      timeSeries0.setMaximumItemAge((long) int1);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = DefaultEditorKit.selectionDownAction;
      //  // Unstable assertion: assertEquals("selection-down", string0);
      //  // Unstable assertion: assertNotNull(string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(1391990397981L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595197980L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertNotNull(week0);
      
      int int0 = 0;
      timeSeries0.setMaximumItemCount(int0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) int0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1391990397981L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595197980L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
  }

  @Test
  public void test28()  throws Throwable  {
      double double0 = 4103.885076054734;
      XYDataItem xYDataItem0 = new XYDataItem(double0, double0);
      assertNotNull(xYDataItem0);
      
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) xYDataItem0, (Class) class0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNotNull(timeSeries0);
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate(regularTimePeriod0, (Number) double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = SwingConstants.EAST;
      //  // Unstable assertion: assertEquals(3, int0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertNotNull(month0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) int0);
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Month, but the TimeSeries is expecting an instance of org.jfree.data.time.Second.
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = SwingConstants.EAST;
      //  // Unstable assertion: assertEquals(3, int0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Second second0 = new Second();
      //  // Unstable assertion: assertEquals(1392409280981L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281980L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(second0);
      
      timeSeries0.add((RegularTimePeriod) second0, (Number) int0);
      //  // Unstable assertion: assertEquals(1392409280981L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281980L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      
      timeSeries0.update((RegularTimePeriod) second0, (Number) int0);
      //  // Unstable assertion: assertEquals(1392409280981L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281980L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = SwingConstants.EAST;
      //  // Unstable assertion: assertEquals(3, int0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertNotNull(month0);
      
      // Undeclared exception!
      try {
        timeSeries0.update((RegularTimePeriod) month0, (Number) int0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // TimeSeries.update(TimePeriod, Number):  period does not exist.
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)0;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) byteArray0[1], (Class) class0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      timeSeries0.setMaximumItemCount((int) byte0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      String string0 = "VAi]%T~MIRv8";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Second second0 = (Second)RegularTimePeriod.createInstance((Class) class0, (Date) mockDate0, (TimeZone) zoneInfo0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertNotNull(second0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) second0, (Number) byte0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertNotNull(timeSeriesDataItem0);
      
      timeSeries0.add(timeSeriesDataItem0, boolean0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = SwingConstants.EAST;
      //  // Unstable assertion: assertEquals(3, int0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Second second0 = new Second();
      //  // Unstable assertion: assertEquals(1392409281980L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409280981L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(second0);
      
      timeSeries0.add((RegularTimePeriod) second0, (Number) int0);
      //  // Unstable assertion: assertEquals(1392409281980L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409280981L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries0);
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertTrue(boolean0);
      
      // Undeclared exception!
      try {
        timeSeries0.add((RegularTimePeriod) second0, (Number) int0, boolean0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Fri Feb 14 20:21:20 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
      }
  }

  @Test
  public void test34() {}
//   @Test
//   public void test34()  throws Throwable  {
//       Millisecond millisecond0 = new Millisecond();
//       //  // Unstable assertion: assertEquals(339L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(3601570883339L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertNotNull(millisecond0);
//       
//       MockDate mockDate0 = (MockDate)millisecond0.getEnd();
//       //  // Unstable assertion: assertEquals(339L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(3601570883339L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       
//       SpreadsheetDate spreadsheetDate0 = (SpreadsheetDate)SerialDate.createInstance((Date) mockDate0);
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertEquals(339L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(3601570883339L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertNotNull(spreadsheetDate0);
//       
//       Class<Object> class0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) spreadsheetDate0, (Class) class0);
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertEquals(339L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(3601570883339L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       
//       Number number0 = timeSeries0.getValue((RegularTimePeriod) millisecond0);
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertEquals(339L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(3601570883339L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertNull(number0);
//   }

  @Test
  public void test35()  throws Throwable  {
      int int0 = SwingConstants.EAST;
      assertEquals(3, int0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNotNull(timeSeries0);
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        timeSeries0.delete(regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = SwingConstants.EAST;
      //  // Unstable assertion: assertEquals(3, int0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(month0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) int0);
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) month0, (RegularTimePeriod) month0);
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotNull(timeSeries1);
      
      Collection collection0 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotNull(collection0);
  }

  @Test
  public void test37()  throws Throwable  {
      int int0 = SwingConstants.EAST;
      //  // Unstable assertion: assertEquals(3, int0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertNotNull(month0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) int0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1393631997980L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212797981L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNotNull(collection0);
  }

  @Test
  public void test38()  throws Throwable  {
      int int0 = SwingConstants.EAST;
      //  // Unstable assertion: assertEquals(3, int0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Second second0 = new Second();
      //  // Unstable assertion: assertEquals(1392409280981L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281980L, second0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(second0);
      
      timeSeries0.add((RegularTimePeriod) second0, (Number) int0);
      //  // Unstable assertion: assertEquals(1392409280981L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281980L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      Collection collection0 = timeSeries0.getTimePeriods();
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNotNull(collection0);
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = DefaultEditorKit.selectionDownAction;
      //  // Unstable assertion: assertEquals("selection-down", string0);
      //  // Unstable assertion: assertNotNull(string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391990397981L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595197980L, week0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(week0);
      
      double double0 = (-0.3361745075696143);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, double0);
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391990397981L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595197980L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.getDataItem((RegularTimePeriod) week0);
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391990397981L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595197980L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNotNull(timeSeriesDataItem1);
  }

  @Test
  public void test40()  throws Throwable  {
      String string0 = Action.SELECTED_KEY;
      assertEquals("SwingSelectedKey", string0);
      assertNotNull(string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertNotNull(timeSeries0);
      
      long long0 = (-43L);
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemAge(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      String string0 = DefaultEditorKit.selectionDownAction;
      //  // Unstable assertion: assertEquals("selection-down", string0);
      //  // Unstable assertion: assertNotNull(string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1391990397981L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595197980L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(week0);
      
      double double0 = (-0.3361745075696143);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, double0);
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1391990397981L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595197980L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      int int0 = 0;
      timeSeries0.setMaximumItemCount(int0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test
  public void test42()  throws Throwable  {
      String string0 = Action.SELECTED_KEY;
      assertEquals("SwingSelectedKey", string0);
      assertNotNull(string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNotNull(timeSeries0);
      
      int int0 = (-5);
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemCount(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      int int0 = SwingConstants.EAST;
      //  // Unstable assertion: assertEquals(3, int0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Second second0 = new Second();
      //  // Unstable assertion: assertEquals(1392409280981L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281980L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertNotNull(second0);
      
      timeSeries0.add((RegularTimePeriod) second0, (Number) int0);
      //  // Unstable assertion: assertEquals(1392409280981L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281980L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      
      Integer integer0 = (Integer)timeSeries0.getValue((RegularTimePeriod) second0);
      //  // Unstable assertion: assertEquals(1392409280981L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281980L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(3, (int)integer0);
  }

  @Test
  public void test44()  throws Throwable  {
      int int0 = SwingConstants.EAST;
      assertEquals(3, int0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      // Undeclared exception!
      try {
        RegularTimePeriod regularTimePeriod0 = timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) byteArray0[1], (Class) class0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(0, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertNotNull(timeSeries1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test46()  throws Throwable  {
      int int0 = SwingConstants.EAST;
      assertEquals(3, int0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNotNull(timeSeries0);
      
      List list0 = timeSeries0.getItems();
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNotNull(list0);
  }

  @Test
  public void test47()  throws Throwable  {
      String string0 = DefaultEditorKit.endLineAction;
      //  // Unstable assertion: assertEquals("caret-end-line", string0);
      //  // Unstable assertion: assertNotNull(string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Class<Week> class0 = Week.class;
      Locale locale0 = JComponent.getDefaultLocale();
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      //  // Unstable assertion: assertNotNull(date0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertEquals("0Q^u{}uPZ7{%", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      Week week0 = (Week)RegularTimePeriod.createInstance((Class) class0, date0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertEquals((-12219033602020L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-12219638402019L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(83886L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1582, week0.getYearValue());
      //  // Unstable assertion: assertEquals(40, week0.getWeek());
      //  // Unstable assertion: assertEquals("0Q^u{}uPZ7{%", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      //  // Unstable assertion: assertNotNull(week0);
      
      long long0 = AWTEvent.HIERARCHY_EVENT_MASK;
      //  // Unstable assertion: assertEquals(32768L, long0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) long0);
      //  // Unstable assertion: assertEquals((-12219033602020L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-12219638402019L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(83886L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1582, week0.getYearValue());
      //  // Unstable assertion: assertEquals(40, week0.getWeek());
      //  // Unstable assertion: assertEquals("0Q^u{}uPZ7{%", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      boolean boolean0 = true;
      timeSeries0.removeAgedItems(long0, boolean0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
  }

  @Test
  public void test48()  throws Throwable  {
      String string0 = "lyK1:(%5(1ytH:]xa)";
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Millisecond millisecond0 = new Millisecond();
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(339L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883339L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(millisecond0);
      
      long long0 = timeSeries0.getMaximumItemAge();
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, long0);
      
      // Undeclared exception!
      try {
        timeSeries0.add((RegularTimePeriod) millisecond0, (double) long0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Millisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Hour.
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      int int0 = Cursor.CROSSHAIR_CURSOR;
      assertEquals(1, int0);
      
      String string0 = "";
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      // Undeclared exception!
      try {
        timeSeries0.update(int0, (Number) int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
      }
  }

  @Test
  public void test50() {}
//   @Test
//   public void test50()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1388534397981L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(1396310397980L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertNotNull(quarter0);
//       
//       String string0 = "9[atDd@U\"M8W=Z";
//       Class<Integer> class0 = Integer.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, string0, string0, (Class) class0);
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals("9[atDd@U\"M8W=Z", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("9[atDd@U\"M8W=Z", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1388534397981L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(1396310397980L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       
//       MockDate mockDate0 = (MockDate)quarter0.getEnd();
//       //  // Unstable assertion: assertEquals("Mon Mar 31 23:59:57 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1388534397981L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(1396310397980L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
//       //  // Unstable assertion: assertNotNull(zoneInfo0);
//       
//       Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
//       //  // Unstable assertion: assertEquals("2014", year0.toString());
//       //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2014, year0.getYear());
//       //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
//       //  // Unstable assertion: assertEquals("Mon Mar 31 23:59:57 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1388534397981L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(1396310397980L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertNotNull(year0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) year0);
//       //  // Unstable assertion: assertEquals("2014", year0.toString());
//       //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2014, year0.getYear());
//       //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals("9[atDd@U\"M8W=Z", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("9[atDd@U\"M8W=Z", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals("Mon Mar 31 23:59:57 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1388534397981L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(1396310397980L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertNull(timeSeriesDataItem0);
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.add(timeSeriesDataItem0);
//        //  fail("Expecting exception: IllegalArgumentException");
//        // Unstable assertion
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'item' argument.
//          //
//       }
//   }
}
