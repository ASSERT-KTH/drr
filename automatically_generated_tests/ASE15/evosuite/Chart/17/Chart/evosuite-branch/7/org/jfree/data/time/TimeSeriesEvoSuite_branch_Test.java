/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:53:58 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.AWTEvent;
import java.awt.event.KeyEvent;
import java.awt.image.ImageObserver;
import java.math.BigInteger;
import java.text.DateFormat;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import javax.print.attribute.standard.MediaSize;
import javax.print.attribute.standard.MediaSizeName;
import javax.swing.AbstractButton;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.general.SeriesException;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class TimeSeriesEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      //  // Unstable assertion: assertEquals(1392595200000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393199999999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(106750L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(8, week1.getWeek());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week1);
      //  // Unstable assertion: assertEquals(1392595200000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393199999999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(106750L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(8, week1.getWeek());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      
      double double0 = 0.0;
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week1, double0);
      //  // Unstable assertion: assertEquals(1392595200000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393199999999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(106750L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(8, week1.getWeek());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      
      int int0 = KeyEvent.VK_UNDERSCORE;
      //  // Unstable assertion: assertEquals(523, int0);
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) int0);
      //  // Unstable assertion: assertEquals(1392595200000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393199999999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(106750L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(8, week1.getWeek());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertNull(timeSeriesDataItem1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      
      int int1 = timeSeries0.hashCode();
      //  // Unstable assertion: assertEquals(1392595200000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393199999999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(106750L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(8, week1.getWeek());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1865037773, int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
  }

  @Test
  public void test01()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertNotNull(week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      double double0 = 0.0;
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, double0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      int int0 = timeSeries0.hashCode();
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1771404131, int0);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 2054;
      Class<Day> class0 = null;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      int int1 = timeSeries0.hashCode();
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(359695462, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "";
      Class<Object> class0 = Object.class;
      String string1 = null;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string1, string0, (Class) class0);
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNotNull(timeSeries0);
      
      timeSeries0.setRangeDescription(string1);
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      int int0 = timeSeries0.hashCode();
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals((-957834513), int0);
  }

  @Test
  public void test04()  throws Throwable  {
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertNotNull(month0);
      
      int int0 = month0.getMonth();
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2, int0);
      
      String string0 = "y+PV+EP";
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) month0, (RegularTimePeriod) month0);
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      
      boolean boolean0 = true;
      timeSeries1.add((RegularTimePeriod) month0, (Number) int0, boolean0);
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) int0);
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      
      boolean boolean1 = timeSeries1.equals((Object) timeSeries0);
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
  }

  @Test
  public void test05()  throws Throwable  {
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(month0);
      
      int int0 = month0.getMonth();
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, int0);
      
      String string0 = "y+PV+EP";
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) month0, (RegularTimePeriod) month0);
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) int0);
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      
      boolean boolean0 = timeSeries1.equals((Object) timeSeries0);
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
  }

  @Test
  public void test06()  throws Throwable  {
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertNotNull(month0);
      
      String string0 = "";
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      int int0 = ImageObserver.PROPERTIES;
      //  // Unstable assertion: assertEquals(4, int0);
      
      Class<String> class1 = String.class;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) month0, string0, string0, (Class) class1);
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals("", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      
      timeSeries1.setMaximumItemAge((long) int0);
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(4L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals("", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(4L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals("", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
  }

  @Test
  public void test07()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      double double0 = 0.0;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) double0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
  }

  @Test
  public void test08()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertNotNull(week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      boolean boolean0 = timeSeries0.equals((Object) week0);
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1392595200000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(8, week1.getWeek());
      //  // Unstable assertion: assertEquals(1393199999999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106750L, week1.getSerialIndex());
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week1);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1392595200000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(8, week1.getWeek());
      //  // Unstable assertion: assertEquals(1393199999999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106750L, week1.getSerialIndex());
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      
      long long0 = week1.getMiddleMillisecond();
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1392595200000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(8, week1.getWeek());
      //  // Unstable assertion: assertEquals(1393199999999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106750L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392897599999L, long0);
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week1, (double) long0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1392595200000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(8, week1.getWeek());
      //  // Unstable assertion: assertEquals(1393199999999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106750L, week1.getSerialIndex());
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) week1);
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1392595200000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(8, week1.getWeek());
      //  // Unstable assertion: assertEquals(1393199999999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106750L, week1.getSerialIndex());
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = DateFormat.AM_PM_FIELD;
      assertEquals(14, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNotNull(timeSeries0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
      assertNotNull(fixedMillisecond0);
      
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertNotNull(fixedMillisecond1);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond1, (RegularTimePeriod) fixedMillisecond0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(month0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, (Class) class0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      String string0 = "y+PV+EP";
      Hour hour0 = Hour.parseHour(string0);
      //  // Unstable assertion: assertNull(hour0);
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) month0, (RegularTimePeriod) hour0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 181;
      Hour hour0 = null;
      String string0 = "Null 'period' argument.";
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Null 'period' argument.", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Null 'period' argument.", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertNotNull(timeSeries0);
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 1;
      MockDate mockDate0 = new MockDate(int0, int0, int0);
      //  // Unstable assertion: assertEquals("Fri Feb 01 00:00:00 GMT 1901", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(mockDate0);
      
      Week week0 = new Week((Date) mockDate0);
      //  // Unstable assertion: assertEquals(100758L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1901, week0.getYearValue());
      //  // Unstable assertion: assertEquals(5, week0.getWeek());
      //  // Unstable assertion: assertEquals((-2175119998624L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-2174515198625L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 01 00:00:00 GMT 1901", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(week0);
      
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0, (Class) class0);
      //  // Unstable assertion: assertEquals(100758L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1901, week0.getYearValue());
      //  // Unstable assertion: assertEquals(5, week0.getWeek());
      //  // Unstable assertion: assertEquals((-2175119998624L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-2174515198625L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 01 00:00:00 GMT 1901", mockDate0.toString());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(100758L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1901, week0.getYearValue());
      //  // Unstable assertion: assertEquals(5, week0.getWeek());
      //  // Unstable assertion: assertEquals((-2175119998624L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-2174515198625L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 01 00:00:00 GMT 1901", mockDate0.toString());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-1487);
      String string0 = "";
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      
      int int1 = 47;
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(month0);
      
      String string0 = "y+PV+EP";
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      int int0 = (-1910);
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) integer0);
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNotNull(timeSeries0);
      
      int int0 = 8;
      // Undeclared exception!
      try {
        timeSeries0.delete((int) integer0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test17() {}
//   @Test
//   public void test17()  throws Throwable  {
//       int int0 = (-1487);
//       String string0 = "";
//       Class<Object> class0 = Object.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals("", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       
//       Quarter quarter0 = new Quarter();
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1388534401376L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1396310401375L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertNotNull(quarter0);
//       
//       MockDate mockDate0 = (MockDate)quarter0.getStart();
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1388534401376L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1396310401375L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals("Wed Jan 01 00:00:01 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       
//       Second second0 = new Second((Date) mockDate0);
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1388534401376L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1396310401375L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals("Wed Jan 01 00:00:01 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1388534401376L, second0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(3597696000L, second0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1388534402375L, second0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(0, second0.getSecond());
//       //  // Unstable assertion: assertNotNull(second0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) int0);
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1388534401376L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1396310401375L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals("Wed Jan 01 00:00:01 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1388534401376L, second0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(3597696000L, second0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1388534402375L, second0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(0, second0.getSecond());
//       //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals("", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertNull(timeSeriesDataItem0);
//       
//       timeSeries0.delete((RegularTimePeriod) quarter0);
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1388534401376L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1396310401375L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals("", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//   }

  @Test
  public void test18()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertEquals(3601570879L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(19, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409280376L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281375L, second0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(second0);
      
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(3601570879L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(19, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409280376L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281375L, second0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      timeSeries0.delete((RegularTimePeriod) second0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(3601570879L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(19, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409280376L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281375L, second0.getLastMillisecond());
  }

  @Test
  public void test19()  throws Throwable  {
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392408001376L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411601375L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertNotNull(hour0);
      
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (Class) class0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392408001376L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411601375L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      double double0 = (-2450.0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) hour0, double0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392408001376L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411601375L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      timeSeries0.clear();
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392408001376L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411601375L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
  }

  @Test
  public void test20()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) integer0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertNotNull(timeSeries0);
      
      timeSeries0.clear();
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
  }

  @Test
  public void test21()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      int int0 = ImageObserver.FRAMEBITS;
      //  // Unstable assertion: assertEquals(16, int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) int0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      boolean boolean0 = true;
      timeSeries0.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
  }

  @Test
  public void test22()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertNotNull(week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      long long0 = week0.getMiddleMillisecond();
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392292801375L, long0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) long0);
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries0);
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertTrue(boolean0);
      
      timeSeries0.setMaximumItemAge(long0);
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1392292801375L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      
      timeSeries0.removeAgedItems(long0, boolean0);
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1392292801375L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test
  public void test23()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertNotNull(week0);
      
      String string0 = "Lp*[2";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)5;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      //  // Unstable assertion: assertEquals(0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals(0, bigInteger0.shortValue());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) bigInteger0);
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals(0, bigInteger0.shortValue());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      boolean boolean0 = false;
      timeSeries0.removeAgedItems((long) byte0, boolean0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 1023;
      String string0 = "2eZHr:``Z";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertNotNull(timeSeries0);
      
      boolean boolean0 = true;
      timeSeries0.removeAgedItems((long) int0, boolean0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      
      timeSeries0.removeAgedItems((long) int0, boolean0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
  }

  @Test
  public void test25()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(8, week1.getWeek());
      //  // Unstable assertion: assertEquals(106750L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1393199999999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392595200000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week1);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(8, week1.getWeek());
      //  // Unstable assertion: assertEquals(106750L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1393199999999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392595200000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      
      long long0 = AWTEvent.ADJUSTMENT_EVENT_MASK;
      //  // Unstable assertion: assertEquals(256L, long0);
      
      long long1 = 0L;
      //  // Unstable assertion: assertFalse(long1 == long0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week1, (double) long0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(8, week1.getWeek());
      //  // Unstable assertion: assertEquals(106750L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1393199999999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392595200000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertFalse(long0 == long1);
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      
      int int0 = KeyEvent.VK_UNDERSCORE;
      //  // Unstable assertion: assertEquals(523, int0);
      
      timeSeries0.setMaximumItemAge(long1);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(8, week1.getWeek());
      //  // Unstable assertion: assertEquals(106750L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1393199999999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392595200000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertFalse(long1 == long0);
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(8, week1.getWeek());
      //  // Unstable assertion: assertEquals(106750L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1393199999999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392595200000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertNull(timeSeriesDataItem1);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
  }

  @Test
  public void test26()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      //  // Unstable assertion: assertEquals(8, week1.getWeek());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1393199999999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392595200000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106750L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week1);
      //  // Unstable assertion: assertEquals(8, week1.getWeek());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1393199999999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392595200000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106750L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      
      long long0 = AWTEvent.ADJUSTMENT_EVENT_MASK;
      //  // Unstable assertion: assertEquals(256L, long0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) long0);
      //  // Unstable assertion: assertEquals(8, week1.getWeek());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1393199999999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392595200000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106750L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      
      long long1 = 0L;
      //  // Unstable assertion: assertFalse(long1 == long0);
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) week1, (double) long0);
      //  // Unstable assertion: assertEquals(8, week1.getWeek());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1393199999999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392595200000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106750L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertFalse(long0 == long1);
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertNull(timeSeriesDataItem1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      
      timeSeries0.setMaximumItemAge(long1);
      //  // Unstable assertion: assertEquals(8, week1.getWeek());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1393199999999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392595200000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106750L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertFalse(long1 == long0);
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 1023;
      String string0 = "2eZHr:``Z";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      int int1 = 0;
      timeSeries0.setMaximumItemCount(int1);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertFalse(int1 == int0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) int0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertFalse(int0 == int1);
      assertNull(timeSeriesDataItem0);
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 0;
      int int1 = 13;
      MediaSizeName mediaSizeName0 = MediaSizeName.NA_7X9_ENVELOPE;
      assertNotNull(mediaSizeName0);
      
      MediaSize mediaSize0 = new MediaSize(int0, int1, int1, mediaSizeName0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(mediaSize0);
      
      String string0 = mediaSize0.toString();
      assertEquals("0x169 um", string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(string0);
      
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(timeSeries0);
      
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(zoneInfo0);
      
      RegularTimePeriod regularTimePeriod0 = RegularTimePeriod.createInstance((Class) class0, (Date) mockDate0, (TimeZone) zoneInfo0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(regularTimePeriod0);
      
      // Undeclared exception!
      try {
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate(regularTimePeriod0, (double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      long long0 = AWTEvent.ADJUSTMENT_EVENT_MASK;
      //  // Unstable assertion: assertEquals(256L, long0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) long0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) week0);
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      
      TimeSeries timeSeries2 = timeSeries1.addAndOrUpdate(timeSeries0);
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries2.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries2.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries2.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries2.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries2.getNotify());
      //  // Unstable assertion: assertNull(timeSeries2.getDescription());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotNull(timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries0);
  }

  @Test
  public void test30()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertNotNull(week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      long long0 = AWTEvent.ADJUSTMENT_EVENT_MASK;
      //  // Unstable assertion: assertEquals(256L, long0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) long0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Week, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertNotNull(week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      double double0 = 0.0;
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, double0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      int int0 = KeyEvent.VK_UNDERSCORE;
      //  // Unstable assertion: assertEquals(523, int0);
      
      timeSeries0.update((RegularTimePeriod) week0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
  }

  @Test
  public void test32()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertNotNull(week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      int int0 = KeyEvent.VK_UNDERSCORE;
      //  // Unstable assertion: assertEquals(523, int0);
      
      // Undeclared exception!
      try {
        timeSeries0.update((RegularTimePeriod) week0, (Number) int0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // TimeSeries.update(TimePeriod, Number):  period does not exist.
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertNotNull(month0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, (Class) class0);
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      String string0 = "y+PV+EP";
      Class<Month> class1 = Month.class;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) month0, string0, string0, (Class) class1);
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      
      double double0 = 650.6;
      int int0 = 0;
      timeSeries1.setMaximumItemCount(int0);
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      
      timeSeries1.add((RegularTimePeriod) month0, (Number) double0, boolean0);
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
  }

  @Test
  public void test34()  throws Throwable  {
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertNotNull(month0);
      
      int int0 = month0.getMonth();
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, int0);
      
      String string0 = ")+PV+EP";
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals(")+PV+EP", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(")+PV+EP", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      timeSeries0.add((RegularTimePeriod) month0, (Number) int0);
      //  // Unstable assertion: assertEquals(")+PV+EP", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(")+PV+EP", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      
      Month month1 = (Month)timeSeries0.getNextTimePeriod();
      //  // Unstable assertion: assertEquals(")+PV+EP", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(")+PV+EP", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1396310399999L, month1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1393632000000L, month1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month1.getYearValue());
      //  // Unstable assertion: assertEquals(24171L, month1.getSerialIndex());
      //  // Unstable assertion: assertEquals(3, month1.getMonth());
      //  // Unstable assertion: assertFalse(month0.equals((Object)month1));
      //  // Unstable assertion: assertFalse(month1.equals((Object)month0));
      //  // Unstable assertion: assertNotNull(month1);
      //  // Unstable assertion: assertNotSame(month0, month1);
      //  // Unstable assertion: assertNotSame(month1, month0);
      
      timeSeries0.add((RegularTimePeriod) month1, (Number) int0);
      //  // Unstable assertion: assertEquals(")+PV+EP", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(")+PV+EP", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1396310399999L, month1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1393632000000L, month1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month1.getYearValue());
      //  // Unstable assertion: assertEquals(24171L, month1.getSerialIndex());
      //  // Unstable assertion: assertEquals(3, month1.getMonth());
      //  // Unstable assertion: assertFalse(month0.equals((Object)month1));
      //  // Unstable assertion: assertFalse(month1.equals((Object)month0));
      //  // Unstable assertion: assertNotSame(month0, month1);
      //  // Unstable assertion: assertNotSame(month1, month0);
  }

  @Test
  public void test35()  throws Throwable  {
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(month0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, (Class) class0);
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      String string0 = "";
      Class<Month> class1 = Month.class;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) month0, string0, string0, (Class) class1);
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals("", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      
      TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals("", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries2.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries2.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries2.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries2.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries2.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries2.getNotify());
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotNull(timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries0);
      
      int int0 = ImageObserver.PROPERTIES;
      //  // Unstable assertion: assertEquals(4, int0);
      
      timeSeries2.add((RegularTimePeriod) month0, (Number) int0);
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals("", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries2.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries2.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries2.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries2.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries2.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries2.getNotify());
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries0);
      
      boolean boolean0 = timeSeries1.equals((Object) timeSeries1);
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals("", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, (Number) int0);
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(timeSeriesDataItem0);
      
      // Undeclared exception!
      try {
        timeSeries2.add(timeSeriesDataItem0, boolean0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period February 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = (-19);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Millisecond millisecond0 = new Millisecond();
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(944L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570879944L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(millisecond0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) int0);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(944L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570879944L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      // Undeclared exception!
      try {
        timeSeries0.add(timeSeriesDataItem0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1392411601375L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392408001376L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertNotNull(hour0);
      
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (Class) class0);
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1392411601375L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392408001376L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1392411601375L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392408001376L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(number0);
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = AbstractButton.MODEL_CHANGED_PROPERTY;
      //  // Unstable assertion: assertEquals("model", string0);
      //  // Unstable assertion: assertNotNull(string0);
      
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals("model", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("model", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      int int0 = 0;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
      //  // Unstable assertion: assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(mockDate0);
      
      Year year0 = new Year((Date) mockDate0);
      //  // Unstable assertion: assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      //  // Unstable assertion: assertEquals((-2208988798625L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1899, year0.getYear());
      //  // Unstable assertion: assertEquals(1899L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("1899", year0.toString());
      //  // Unstable assertion: assertEquals((-2240524798624L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(year0);
      
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      //  // Unstable assertion: assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      //  // Unstable assertion: assertEquals((-2208988798625L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1899, year0.getYear());
      //  // Unstable assertion: assertEquals(1899L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("1899", year0.toString());
      //  // Unstable assertion: assertEquals((-2240524798624L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertNull(regularTimePeriod0);
      
      // Undeclared exception!
      try {
        timeSeries0.delete(regularTimePeriod0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(month0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, (Class) class0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      String string0 = "";
      Class<Month> class1 = Month.class;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) month0, string0, string0, (Class) class1);
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals("", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      
      TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries2.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries2.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries2.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries2.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries2.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries2.isEmpty());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals("", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotNull(timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      
      int int0 = ImageObserver.PROPERTIES;
      //  // Unstable assertion: assertEquals(4, int0);
      
      timeSeries2.add((RegularTimePeriod) month0, (Number) int0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries2.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries2.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries2.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries2.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries2.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries2.getItemCount());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals("", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) int0);
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      
      Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries2);
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries2.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries2.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries2.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries2.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries2.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries2.getItemCount());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals("", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotNull(collection0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
  }

  @Test
  public void test40()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      long long0 = AWTEvent.ADJUSTMENT_EVENT_MASK;
      //  // Unstable assertion: assertEquals(256L, long0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) long0);
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      Collection collection0 = timeSeries0.getTimePeriods();
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(collection0);
  }

  @Test
  public void test41()  throws Throwable  {
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertNotNull(month0);
      
      int int0 = month0.getMonth();
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2, int0);
      
      String string0 = "y+PV+EP";
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) int0);
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.getDataItem((RegularTimePeriod) month0);
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("y+PV+EP", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNotNull(timeSeriesDataItem1);
  }

  @Test
  public void test42()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) week0);
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
  }

  @Test
  public void test43()  throws Throwable  {
      String string0 = "Lp*[2";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNotNull(timeSeries0);
      
      long long0 = (-1015L);
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemAge(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      String string0 = "2eZHr:``Z";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNotNull(timeSeries0);
      
      int int0 = 0;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeriesDataItem0);
      
      timeSeries0.setMaximumItemCount(int0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = 87;
      String string0 = "Null 'serialDate' argument.";
      Class<Week> class0 = Week.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Null 'serialDate' argument.", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("Null 'serialDate' argument.", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNotNull(timeSeries0);
      
      int int1 = (-2004);
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemCount(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      int int0 = 1;
      MockDate mockDate0 = new MockDate(int0, int0, int0);
      //  // Unstable assertion: assertEquals("Fri Feb 01 00:00:00 GMT 1901", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(mockDate0);
      
      Week week0 = new Week((Date) mockDate0);
      //  // Unstable assertion: assertEquals((-2174515198625L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(5, week0.getWeek());
      //  // Unstable assertion: assertEquals(1901, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-2175119998624L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(100758L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Fri Feb 01 00:00:00 GMT 1901", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(week0);
      
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0, (Class) class0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals((-2174515198625L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(5, week0.getWeek());
      //  // Unstable assertion: assertEquals(1901, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-2175119998624L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(100758L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Fri Feb 01 00:00:00 GMT 1901", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) int0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals((-2174515198625L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(5, week0.getWeek());
      //  // Unstable assertion: assertEquals(1901, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-2175119998624L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(100758L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Fri Feb 01 00:00:00 GMT 1901", mockDate0.toString());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      Double double0 = (Double)timeSeries0.getValue((RegularTimePeriod) week0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals((-2174515198625L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(5, week0.getWeek());
      //  // Unstable assertion: assertEquals(1901, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-2175119998624L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(100758L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Fri Feb 01 00:00:00 GMT 1901", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1.0, (double)double0, 0.01D);
  }

  @Test
  public void test47()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertEquals(3601570879L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409280376L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281375L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(19, second0.getSecond());
      //  // Unstable assertion: assertNotNull(second0);
      
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(3601570879L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409280376L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281375L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(19, second0.getSecond());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(3601570879L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409280376L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281375L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(19, second0.getSecond());
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
  }

  @Test
  public void test48()  throws Throwable  {
      String string0 = "Lp*[2";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      
      List list0 = timeSeries0.getItems();
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(list0);
  }

  @Test
  public void test49()  throws Throwable  {
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(month0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, (Class) class0);
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      String string0 = "";
      Class<Month> class1 = Month.class;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) month0, string0, string0, (Class) class1);
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      
      TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries2.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries2.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries2.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries2.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries2.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries2.getDomainDescription());
      //  // Unstable assertion: assertEquals("", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotNull(timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      
      int int0 = ImageObserver.PROPERTIES;
      //  // Unstable assertion: assertEquals(4, int0);
      
      timeSeries2.add((RegularTimePeriod) month0, (Number) int0);
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries2.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries2.getNotify());
      //  // Unstable assertion: assertNull(timeSeries2.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries2.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries2.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries2.isEmpty());
      //  // Unstable assertion: assertEquals("", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      
      Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries2);
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries2.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries2.getNotify());
      //  // Unstable assertion: assertNull(timeSeries2.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries2.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries2.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries2.isEmpty());
      //  // Unstable assertion: assertEquals("", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotNull(collection0);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
  }

  @Test
  public void test50()  throws Throwable  {
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(month0);
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, (Class) class0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1391212801376L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393632001375L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      double double0 = 650.6;
      // Undeclared exception!
      try {
        timeSeries0.add((RegularTimePeriod) month0, double0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Month, but the TimeSeries is expecting an instance of org.jfree.data.time.Second.
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      String string0 = "Lp*[2";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      timeSeries0.setDomainDescription(string0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Lp*[2", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
  }

  @Test
  public void test52()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391990401376L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595201375L, week0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      int int0 = ImageObserver.FRAMEBITS;
      //  // Unstable assertion: assertEquals(16, int0);
      
      // Undeclared exception!
      try {
        timeSeries0.update(int0, (Number) int0);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16, Size: 0
         //
      }
  }
}
