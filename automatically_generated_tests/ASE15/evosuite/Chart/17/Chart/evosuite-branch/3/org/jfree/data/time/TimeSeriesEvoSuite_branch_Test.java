/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:10:37 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Component;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import javax.swing.AbstractButton;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingConstants;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.general.SeriesException;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class TimeSeriesEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00() {}
//   @Test(timeout = 4000)
//   public void test00()  throws Throwable  {
//       Day day0 = new Day();
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertNotNull(day0);
//       
//       String string0 = "";
//       Class<Quarter> class0 = Quarter.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0, (Class) class0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertNotNull(timeSeries0);
//       
//       long long0 = (-1410L);
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) long0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertNull(timeSeriesDataItem0);
//       
//       int int0 = timeSeries0.hashCode();
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals((-2077274713), int0);
//   }

  @Test(timeout = 4000)
  public void test01() {}
//   @Test(timeout = 4000)
//   public void test01()  throws Throwable  {
//       int int0 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(mockGregorianCalendar0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockGregorianCalendar0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(timeSeries0);
//       
//       boolean boolean0 = timeSeries0.equals((Object) mockGregorianCalendar0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertFalse(boolean0);
//   }

  @Test(timeout = 4000)
  public void test02() {}
//   @Test(timeout = 4000)
//   public void test02()  throws Throwable  {
//       String string0 = "";
//       Class<Month> class0 = Month.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNotNull(timeSeries0);
//       
//       Week week0 = new Week();
//       assertEquals(1391904000000L, week0.getFirstMillisecond());
//       assertEquals(7, week0.getWeek());
//       assertEquals(1392508799999L, week0.getLastMillisecond());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(2014, week0.getYearValue());
//       assertNotNull(week0);
//       
//       float float0 = Component.TOP_ALIGNMENT;
//       assertEquals(0.0F, float0, 0.01F);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) float0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1391904000000L, week0.getFirstMillisecond());
//       assertEquals(7, week0.getWeek());
//       assertEquals(1392508799999L, week0.getLastMillisecond());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(2014, week0.getYearValue());
//       assertNull(timeSeriesDataItem0);
//       
//       TimeSeries timeSeries1 = new TimeSeries((Comparable) string0, (Class) class0);
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertNotNull(timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       
//       boolean boolean0 = timeSeries1.equals((Object) timeSeries0);
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertFalse(boolean0);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//   }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = AbstractButton.VERTICAL_ALIGNMENT_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("verticalAlignment", string0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) string0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      int int0 = (-537);
      Comparable comparable0 = defaultBoxAndWhiskerXYDataset0.getSeriesKey(int0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(comparable0);
      assertEquals("verticalAlignment", comparable0);
      assertSame(string0, comparable0);
      
      TimeSeries timeSeries0 = new TimeSeries(comparable0);
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(timeSeries0);
      assertSame(string0, comparable0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      assertNotNull(fixedMillisecond1);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (Number) int0);
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNull(timeSeriesDataItem0);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertSame(string0, comparable0);
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(0, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(timeSeries1);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(timeSeries0, timeSeries1);
      assertSame(string0, comparable0);
      assertNotSame(timeSeries1, timeSeries0);
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
  }

  @Test(timeout = 4000)
  public void test04() {}
//   @Test(timeout = 4000)
//   public void test04()  throws Throwable  {
//       Day day0 = new Day();
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertNotNull(day0);
//       
//       int int0 = 91;
//       Hour hour0 = new Hour(int0, day0);
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(91, hour0.getHour());
//       assertEquals(1392663600000L, hour0.getFirstMillisecond());
//       assertEquals(1000507L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392667199999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertNotNull(hour0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(91, hour0.getHour());
//       assertEquals(1392663600000L, hour0.getFirstMillisecond());
//       assertEquals(1000507L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392667199999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertNotNull(timeSeries0);
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(91, hour0.getHour());
//       assertEquals(1392663600000L, hour0.getFirstMillisecond());
//       assertEquals(1000507L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392667199999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertNotNull(timeSeries1);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//   }

  @Test(timeout = 4000)
  public void test05() {}
//   @Test(timeout = 4000)
//   public void test05()  throws Throwable  {
//       Month month0 = new Month();
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertNotNull(month0);
//       
//       Month month1 = (Month)month0.next();
//       assertEquals(2014, month1.getYearValue());
//       assertEquals(1393632000000L, month1.getFirstMillisecond());
//       assertEquals(24171L, month1.getSerialIndex());
//       assertEquals(3, month1.getMonth());
//       assertEquals(1396310399999L, month1.getLastMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertNotNull(month1);
//       assertNotSame(month1, month0);
//       assertNotSame(month0, month1);
//       assertFalse(month1.equals((Object)month0));
//       assertFalse(month0.equals((Object)month1));
//       
//       String string0 = "<xe@^-8Q";
//       Class<Month> class0 = Month.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) month1, string0, string0, (Class) class0);
//       assertEquals(2014, month1.getYearValue());
//       assertEquals(1393632000000L, month1.getFirstMillisecond());
//       assertEquals(24171L, month1.getSerialIndex());
//       assertEquals(3, month1.getMonth());
//       assertEquals(1396310399999L, month1.getLastMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals("<xe@^-8Q", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("<xe@^-8Q", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNotNull(timeSeries0);
//       assertNotSame(month1, month0);
//       assertNotSame(month0, month1);
//       assertFalse(month1.equals((Object)month0));
//       assertFalse(month0.equals((Object)month1));
//       
//       // Undeclared exception!
//       try {
//         TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) month1, (RegularTimePeriod) month0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Requires start on or before end.
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test06() {}
//   @Test(timeout = 4000)
//   public void test06()  throws Throwable  {
//       Month month0 = new Month();
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertNotNull(month0);
//       
//       String string0 = "?|%yim";
//       Class<String> class0 = String.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNotNull(timeSeries0);
//       
//       RegularTimePeriod regularTimePeriod0 = null;
//       // Undeclared exception!
//       try {
//         TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) month0, regularTimePeriod0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'end' argument.
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long long0 = 12L;
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(long0, long0);
      //  // Unstable assertion: assertNotNull(simpleTimePeriod0);
      
      MockDate mockDate0 = (MockDate)simpleTimePeriod0.getEnd();
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(mockDate0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertEquals("Null 'period' argument.", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      Week week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertEquals((-345600000L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(104411L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(259199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals(1970, week0.getYearValue());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals("Null 'period' argument.", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(week0);
      
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0, (Class) class0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals((-345600000L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(104411L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(259199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals(1970, week0.getYearValue());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals("Null 'period' argument.", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test08() {}
//   @Test(timeout = 4000)
//   public void test08()  throws Throwable  {
//       Day day0 = new Day();
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertNotNull(day0);
//       
//       String string0 = "";
//       Class<Quarter> class0 = Quarter.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0, (Class) class0);
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNotNull(timeSeries0);
//       
//       int int0 = 13;
//       TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries1.getNotify());
//       assertNull(timeSeries1.getDescription());
//       assertEquals("", timeSeries1.getRangeDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals("", timeSeries1.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertNotNull(timeSeries1);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//   }

  @Test(timeout = 4000)
  public void test09() {}
//   @Test(timeout = 4000)
//   public void test09()  throws Throwable  {
//       Day day0 = new Day();
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertNotNull(day0);
//       
//       int int0 = 91;
//       Hour hour0 = new Hour(int0, day0);
//       assertEquals(1392667199999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(91, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392663600000L, hour0.getFirstMillisecond());
//       assertEquals(1000507L, hour0.getSerialIndex());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertNotNull(hour0);
//       
//       int int1 = hour0.getHour();
//       assertEquals(1392667199999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(91, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392663600000L, hour0.getFirstMillisecond());
//       assertEquals(1000507L, hour0.getSerialIndex());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(91, int1);
//       assertTrue(int0 == int1);
//       assertTrue(int1 == int0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(1392667199999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(91, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392663600000L, hour0.getFirstMillisecond());
//       assertEquals(1000507L, hour0.getSerialIndex());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertNotNull(timeSeries0);
//       assertTrue(int0 == int1);
//       
//       int int2 = day0.getYear();
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(2014, int2);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int0);
//       
//       // Undeclared exception!
//       try {
//         TimeSeries timeSeries1 = timeSeries0.createCopy(int2, int1);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Requires start <= end.
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test10() {}
//   @Test(timeout = 4000)
//   public void test10()  throws Throwable  {
//       Day day0 = new Day();
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertNotNull(day0);
//       
//       String string0 = "";
//       Class<Quarter> class0 = Quarter.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0, (Class) class0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertNotNull(timeSeries0);
//       
//       int int0 = timeSeries0.hashCode();
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals((-1552656993), int0);
//       
//       // Undeclared exception!
//       try {
//         TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Requires start >= 0.
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "1G";
      int int0 = 245;
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat(string0);
      //  // Unstable assertion: assertEquals("1G", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("1G", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertNotNull(simpleDateFormat0);
      
      Date date0 = simpleDateFormat0.get2DigitYearStart();
      //  // Unstable assertion: assertEquals("1G", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("1G", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("Tue Dec 11 16:10:18 GMT 1934", date0.toString());
      //  // Unstable assertion: assertNotNull(date0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)simpleDateFormat0.getTimeZone();
      //  // Unstable assertion: assertEquals("1G", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("1G", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      Week week0 = new Week(date0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertEquals(102552L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1106524800000L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(50, week0.getWeek());
      //  // Unstable assertion: assertEquals(1934, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-1105920000001L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("1G", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("1G", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("Tue Dec 11 16:10:18 GMT 1934", date0.toString());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(week0);
      
      Year year0 = week0.getYear();
      //  // Unstable assertion: assertEquals(102552L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1106524800000L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(50, week0.getWeek());
      //  // Unstable assertion: assertEquals(1934, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-1105920000001L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("1G", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("1G", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("Tue Dec 11 16:10:18 GMT 1934", date0.toString());
      //  // Unstable assertion: assertEquals((-1104537600001L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("1934", year0.toString());
      //  // Unstable assertion: assertEquals((-1136073600000L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1934L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1934, year0.getYear());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(year0);
      
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, (Class) class0);
      //  // Unstable assertion: assertEquals(102552L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1106524800000L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(50, week0.getWeek());
      //  // Unstable assertion: assertEquals(1934, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-1105920000001L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("1G", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("1G", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("Tue Dec 11 16:10:18 GMT 1934", date0.toString());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals((-1104537600001L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("1934", year0.toString());
      //  // Unstable assertion: assertEquals((-1136073600000L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1934L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1934, year0.getYear());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      int int1 = 0;
      // Undeclared exception!
      try {
        timeSeries0.delete(int0, int1);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test(timeout = 4000)
  public void test12() {}
//   @Test(timeout = 4000)
//   public void test12()  throws Throwable  {
//       Day day0 = new Day();
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertNotNull(day0);
//       
//       String string0 = "";
//       Class<Quarter> class0 = Quarter.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0, (Class) class0);
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertNotNull(timeSeries0);
//       
//       long long0 = (-1410L);
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) long0);
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertNull(timeSeriesDataItem0);
//       
//       timeSeries0.delete((RegularTimePeriod) day0);
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//   }

  @Test(timeout = 4000)
  public void test13() {}
//   @Test(timeout = 4000)
//   public void test13()  throws Throwable  {
//       Day day0 = new Day();
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertNotNull(day0);
//       
//       String string0 = "";
//       Class<Quarter> class0 = Quarter.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0, (Class) class0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertNotNull(timeSeries0);
//       
//       timeSeries0.delete((RegularTimePeriod) day0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//   }

  @Test(timeout = 4000)
  public void test14() {}
//   @Test(timeout = 4000)
//   public void test14()  throws Throwable  {
//       Day day0 = new Day();
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertNotNull(day0);
//       
//       int int0 = 91;
//       Hour hour0 = new Hour(int0, day0);
//       assertEquals(2, hour0.getMonth());
//       assertEquals(91, hour0.getHour());
//       assertEquals(1000507L, hour0.getSerialIndex());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392663600000L, hour0.getFirstMillisecond());
//       assertEquals(1392667199999L, hour0.getLastMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertNotNull(hour0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
//       assertEquals(2, hour0.getMonth());
//       assertEquals(91, hour0.getHour());
//       assertEquals(1000507L, hour0.getSerialIndex());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392663600000L, hour0.getFirstMillisecond());
//       assertEquals(1392667199999L, hour0.getLastMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNotNull(timeSeries0);
//       
//       timeSeries0.add((RegularTimePeriod) day0, (Number) int0);
//       assertEquals(2, hour0.getMonth());
//       assertEquals(91, hour0.getHour());
//       assertEquals(1000507L, hour0.getSerialIndex());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392663600000L, hour0.getFirstMillisecond());
//       assertEquals(1392667199999L, hour0.getLastMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       timeSeries0.clear();
//       assertEquals(2, hour0.getMonth());
//       assertEquals(91, hour0.getHour());
//       assertEquals(1000507L, hour0.getSerialIndex());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392663600000L, hour0.getFirstMillisecond());
//       assertEquals(1392667199999L, hour0.getLastMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//   }

  @Test(timeout = 4000)
  public void test15() {}
//   @Test(timeout = 4000)
//   public void test15()  throws Throwable  {
//       int int0 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNotNull(timeSeries0);
//       
//       timeSeries0.clear();
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//   }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Day day0 = new Day();
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertNotNull(day0);
      
      String string0 = "";
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals("", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      long long0 = 0L;
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) long0);
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      boolean boolean0 = true;
      timeSeries0.removeAgedItems(long0, boolean0);
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals("", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = AbstractButton.VERTICAL_ALIGNMENT_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("verticalAlignment", string0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) string0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      int int0 = (-537);
      Comparable comparable0 = defaultBoxAndWhiskerXYDataset0.getSeriesKey(int0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(comparable0);
      assertEquals("verticalAlignment", comparable0);
      assertSame(string0, comparable0);
      
      TimeSeries timeSeries0 = new TimeSeries(comparable0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(timeSeries0);
      assertSame(string0, comparable0);
      
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertNotNull(defaultTreeCellRenderer0);
      
      Locale locale0 = defaultTreeCellRenderer0.getLocale();
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getTime();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertNotNull(date0);
      
      Quarter quarter0 = new Quarter(date0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals(1396310399999L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      assertNotNull(quarter0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) int0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1396310399999L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      assertNull(timeSeriesDataItem0);
      assertSame(string0, comparable0);
      
      boolean boolean0 = false;
      timeSeries0.removeAgedItems((long) int0, boolean0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertSame(string0, comparable0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Day day0 = new Day();
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertNotNull(day0);
      
      String string0 = "";
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals("", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      long long0 = (-1420L);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) long0);
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals("", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      boolean boolean0 = false;
      timeSeries0.removeAgedItems(long0, boolean0);
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals("", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19() {}
//   @Test(timeout = 4000)
//   public void test19()  throws Throwable  {
//       Day day0 = new Day();
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertNotNull(day0);
//       
//       String string0 = "";
//       Class<Quarter> class0 = Quarter.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0, (Class) class0);
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNotNull(timeSeries0);
//       
//       long long0 = (-1420L);
//       boolean boolean0 = false;
//       timeSeries0.removeAgedItems(long0, boolean0);
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       
//       int int0 = timeSeries0.hashCode();
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals((-1552656152), int0);
//       
//       timeSeries0.removeAgedItems((long) int0, boolean0);
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//   }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = AbstractButton.VERTICAL_ALIGNMENT_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("verticalAlignment", string0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) string0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      int int0 = (-537);
      Comparable comparable0 = defaultBoxAndWhiskerXYDataset0.getSeriesKey(int0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertNotNull(comparable0);
      assertEquals("verticalAlignment", comparable0);
      assertSame(string0, comparable0);
      
      TimeSeries timeSeries0 = new TimeSeries(comparable0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      assertSame(string0, comparable0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeriesDataItem0);
      assertSame(string0, comparable0);
      
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)timeSeries0.getNextTimePeriod();
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNotNull(fixedMillisecond1);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertSame(string0, comparable0);
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (Number) int0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeriesDataItem1);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertSame(string0, comparable0);
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
  }

  @Test(timeout = 4000)
  public void test21() {}
//   @Test(timeout = 4000)
//   public void test21()  throws Throwable  {
//       int int0 = 0;
//       String string0 = null;
//       Class<Hour> class0 = Hour.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getRangeDescription());
//       assertNotNull(timeSeries0);
//       
//       timeSeries0.setMaximumItemCount(int0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getRangeDescription());
//       
//       Minute minute0 = new Minute();
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertNotNull(minute0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) int0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertNull(timeSeriesDataItem0);
//   }

  @Test(timeout = 4000)
  public void test22() {}
//   @Test(timeout = 4000)
//   public void test22()  throws Throwable  {
//       int int0 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertNotNull(mockGregorianCalendar0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNotNull(timeSeries0);
//       
//       int int1 = mockGregorianCalendar0.getActualMaximum(int0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, int1);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       
//       String string0 = "!\".q~<:Zm$&7> |(X%";
//       Day day0 = Day.parseDay(string0);
//       assertNull(day0);
//       
//       // Undeclared exception!
//       try {
//         TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) int1);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'period' argument.
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = AbstractButton.VERTICAL_ALIGNMENT_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("verticalAlignment", string0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) string0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      int int0 = (-537);
      Comparable comparable0 = defaultBoxAndWhiskerXYDataset0.getSeriesKey(int0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(comparable0);
      assertEquals("verticalAlignment", comparable0);
      assertSame(string0, comparable0);
      
      TimeSeries timeSeries0 = new TimeSeries(comparable0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(timeSeries0);
      assertSame(string0, comparable0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNull(timeSeriesDataItem0);
      assertSame(string0, comparable0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(timeSeries1);
      assertSame(string0, comparable0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      
      TimeSeries timeSeries2 = timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(false, timeSeries1.isEmpty());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries2.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      assertEquals(0, timeSeries2.getItemCount());
      assertEquals("Time", timeSeries2.getDomainDescription());
      assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      assertEquals(true, timeSeries2.getNotify());
      assertEquals(true, timeSeries2.isEmpty());
      assertNull(timeSeries2.getDescription());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(timeSeries2);
      assertSame(string0, comparable0);
      assertNotSame(timeSeries1, timeSeries2);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries2);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries2, timeSeries1);
      assertNotSame(timeSeries2, timeSeries0);
      assertFalse(timeSeries1.equals((Object)timeSeries2));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries0.equals((Object)timeSeries2));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries2.equals((Object)timeSeries1));
      assertFalse(timeSeries2.equals((Object)timeSeries0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = AbstractButton.VERTICAL_ALIGNMENT_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("verticalAlignment", string0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) string0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      int int0 = (-537);
      Comparable comparable0 = defaultBoxAndWhiskerXYDataset0.getSeriesKey(int0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertNotNull(comparable0);
      assertEquals("verticalAlignment", comparable0);
      assertSame(string0, comparable0);
      
      TimeSeries timeSeries0 = new TimeSeries(comparable0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      assertSame(string0, comparable0);
      
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertNotNull(defaultTreeCellRenderer0);
      
      Locale locale0 = defaultTreeCellRenderer0.getLocale();
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getTime();
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(date0);
      
      Day day0 = new Day(date0);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2, day0.getMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertNotNull(day0);
      
      timeSeries0.add((RegularTimePeriod) day0, (double) int0);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2, day0.getMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertSame(string0, comparable0);
      
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(false, timeSeries1.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries1);
      assertSame(string0, comparable0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
  }

  @Test(timeout = 4000)
  public void test25() {}
//   @Test(timeout = 4000)
//   public void test25()  throws Throwable  {
//       Day day0 = new Day();
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertNotNull(day0);
//       
//       String string0 = "";
//       Class<Quarter> class0 = Quarter.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0, (Class) class0);
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNotNull(timeSeries0);
//       
//       int int0 = SwingConstants.BOTTOM;
//       assertEquals(3, int0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) int0);
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeriesDataItem0);
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
//       assertNotNull(fixedMillisecond0);
//       
//       timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) int0);
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//   }

  @Test(timeout = 4000)
  public void test26() {}
//   @Test(timeout = 4000)
//   public void test26()  throws Throwable  {
//       Day day0 = new Day();
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertNotNull(day0);
//       
//       String string0 = "";
//       Class<Quarter> class0 = Quarter.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0, (Class) class0);
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNotNull(timeSeries0);
//       
//       int int0 = SwingConstants.BOTTOM;
//       assertEquals(3, int0);
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
//       assertNotNull(fixedMillisecond0);
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) int0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // TimeSeries.update(TimePeriod, Number):  period does not exist.
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test27() {}
//   @Test(timeout = 4000)
//   public void test27()  throws Throwable  {
//       int int0 = 0;
//       String string0 = null;
//       Class<Hour> class0 = Hour.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
//       assertNull(timeSeries0.getDescription());
//       assertNull(timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNotNull(timeSeries0);
//       
//       int int1 = timeSeries0.hashCode();
//       assertNull(timeSeries0.getDescription());
//       assertNull(timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals((-957834513), int1);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       
//       Class<Minute> class1 = Minute.class;
//       TimeSeries timeSeries1 = new TimeSeries((Comparable) int0, (Class) class1);
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertNotNull(timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertFalse(int0 == int1);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       
//       timeSeries1.setMaximumItemCount(int0);
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(0, timeSeries1.getMaximumItemCount());
//       assertNotSame(timeSeries1, timeSeries0);
//       assertFalse(int0 == int1);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       
//       Minute minute0 = new Minute();
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(20, minute0.getHourValue());
//       assertNotNull(minute0);
//       
//       boolean boolean0 = false;
//       timeSeries1.add((RegularTimePeriod) minute0, (Number) int1, boolean0);
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(0, timeSeries1.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertNull(timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(20, minute0.getHourValue());
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//   }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = AbstractButton.VERTICAL_ALIGNMENT_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("verticalAlignment", string0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) string0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      int int0 = (-537);
      Comparable comparable0 = defaultBoxAndWhiskerXYDataset0.getSeriesKey(int0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertNotNull(comparable0);
      assertEquals("verticalAlignment", comparable0);
      assertSame(string0, comparable0);
      
      TimeSeries timeSeries0 = new TimeSeries(comparable0);
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertNotNull(timeSeries0);
      assertSame(string0, comparable0);
      
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertNotNull(defaultTreeCellRenderer0);
      
      Locale locale0 = defaultTreeCellRenderer0.getLocale();
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getTime();
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      Quarter quarter0 = new Quarter(date0);
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1396310399999L, quarter0.getLastMillisecond());
      assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(quarter0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) int0);
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1396310399999L, quarter0.getLastMillisecond());
      assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNull(timeSeriesDataItem0);
      assertSame(string0, comparable0);
      
      Day day0 = new Day(date0);
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals(2, day0.getMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2014, day0.getYear());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(day0);
      
      // Undeclared exception!
      try {
        timeSeries0.add((RegularTimePeriod) day0, (double) int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
      }
  }

  @Test(timeout = 4000)
  public void test29() {}
//   @Test(timeout = 4000)
//   public void test29()  throws Throwable  {
//       String string0 = "";
//       Class<Month> class0 = Month.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNotNull(timeSeries0);
//       
//       Week week0 = new Week();
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(7, week0.getWeek());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(1391904000000L, week0.getFirstMillisecond());
//       assertEquals(1392508799999L, week0.getLastMillisecond());
//       assertNotNull(week0);
//       
//       boolean boolean0 = timeSeries0.equals((Object) timeSeries0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertTrue(boolean0);
//       
//       int int0 = ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER;
//       assertEquals(21, int0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) int0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(7, week0.getWeek());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(1391904000000L, week0.getFirstMillisecond());
//       assertEquals(1392508799999L, week0.getLastMillisecond());
//       assertNull(timeSeriesDataItem0);
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.add(timeSeriesDataItem0, boolean0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'item' argument.
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test30() {}
//   @Test(timeout = 4000)
//   public void test30()  throws Throwable  {
//       String string0 = "";
//       Class<Month> class0 = Month.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNotNull(timeSeries0);
//       
//       Week week0 = new Week();
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(7, week0.getWeek());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1391904000000L, week0.getFirstMillisecond());
//       assertEquals(1392508799999L, week0.getLastMillisecond());
//       assertNotNull(week0);
//       
//       Number number0 = timeSeries0.getValue((RegularTimePeriod) week0);
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(7, week0.getWeek());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1391904000000L, week0.getFirstMillisecond());
//       assertEquals(1392508799999L, week0.getLastMillisecond());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(number0);
//   }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "";
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertNotNull(timeSeries0);
      
      Second second0 = null;
      // Undeclared exception!
      try {
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) second0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test32() {}
//   @Test(timeout = 4000)
//   public void test32()  throws Throwable  {
//       Day day0 = new Day();
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertNotNull(day0);
//       
//       String string0 = "";
//       Class<Quarter> class0 = Quarter.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0, (Class) class0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertNotNull(timeSeries0);
//       
//       int int0 = SwingConstants.BOTTOM;
//       assertEquals(3, int0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) int0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertNull(timeSeriesDataItem0);
//       
//       Class<Day> class1 = Day.class;
//       TimeSeries timeSeries1 = new TimeSeries((Comparable) string0, string0, string0, (Class) class1);
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals("", timeSeries1.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals("", timeSeries1.getDomainDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertNotNull(timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       
//       Collection collection0 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals("", timeSeries1.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals("", timeSeries1.getDomainDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertNotNull(collection0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//   }

  @Test(timeout = 4000)
  public void test33() {}
//   @Test(timeout = 4000)
//   public void test33()  throws Throwable  {
//       String string0 = "";
//       Class<Month> class0 = Month.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNotNull(timeSeries0);
//       
//       Week week0 = new Week();
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1392508799999L, week0.getLastMillisecond());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(1391904000000L, week0.getFirstMillisecond());
//       assertEquals(7, week0.getWeek());
//       assertNotNull(week0);
//       
//       float float0 = Component.TOP_ALIGNMENT;
//       assertEquals(0.0F, float0, 0.01F);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) float0);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1392508799999L, week0.getLastMillisecond());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(1391904000000L, week0.getFirstMillisecond());
//       assertEquals(7, week0.getWeek());
//       assertNull(timeSeriesDataItem0);
//       
//       Collection collection0 = timeSeries0.getTimePeriods();
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNotNull(collection0);
//   }

  @Test(timeout = 4000)
  public void test34() {}
//   @Test(timeout = 4000)
//   public void test34()  throws Throwable  {
//       String string0 = "";
//       Class<Month> class0 = Month.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNotNull(timeSeries0);
//       
//       Week week0 = new Week();
//       assertEquals(1392508799999L, week0.getLastMillisecond());
//       assertEquals(1391904000000L, week0.getFirstMillisecond());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(7, week0.getWeek());
//       assertNotNull(week0);
//       
//       float float0 = Component.TOP_ALIGNMENT;
//       assertEquals(0.0F, float0, 0.01F);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) float0);
//       assertEquals(1392508799999L, week0.getLastMillisecond());
//       assertEquals(1391904000000L, week0.getFirstMillisecond());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(7, week0.getWeek());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeriesDataItem0);
//       
//       TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.getDataItem((RegularTimePeriod) week0);
//       assertEquals(1392508799999L, week0.getLastMillisecond());
//       assertEquals(1391904000000L, week0.getFirstMillisecond());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(7, week0.getWeek());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNotNull(timeSeriesDataItem1);
//   }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = (-53);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertNotNull(timeSeries0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertNull(timeSeriesDataItem0);
  }

  @Test(timeout = 4000)
  public void test36() {}
//   @Test(timeout = 4000)
//   public void test36()  throws Throwable  {
//       Day day0 = new Day();
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertNotNull(day0);
//       
//       String string0 = "";
//       Class<Quarter> class0 = Quarter.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0, (Class) class0);
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertNotNull(timeSeries0);
//       
//       long long0 = (-1420L);
//       // Undeclared exception!
//       try {
//         timeSeries0.setMaximumItemAge(long0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Negative 'periods' argument.
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test37() {}
//   @Test(timeout = 4000)
//   public void test37()  throws Throwable  {
//       int int0 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(mockGregorianCalendar0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockGregorianCalendar0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(timeSeries0);
//       
//       timeSeries0.setMaximumItemAge((long) int0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(0L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//   }

  @Test(timeout = 4000)
  public void test38() {}
//   @Test(timeout = 4000)
//   public void test38()  throws Throwable  {
//       Day day0 = new Day();
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertNotNull(day0);
//       
//       String string0 = "";
//       Class<Quarter> class0 = Quarter.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0, (Class) class0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertNotNull(timeSeries0);
//       
//       int int0 = SwingConstants.BOTTOM;
//       assertEquals(3, int0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) int0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertNull(timeSeriesDataItem0);
//       
//       int int1 = 0;
//       assertFalse(int1 == int0);
//       
//       timeSeries0.setMaximumItemCount(int1);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertFalse(int1 == int0);
//   }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = (-1945);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemCount(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test40() {}
//   @Test(timeout = 4000)
//   public void test40()  throws Throwable  {
//       String string0 = "";
//       Class<Month> class0 = Month.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNotNull(timeSeries0);
//       
//       Week week0 = new Week();
//       assertEquals(1392508799999L, week0.getLastMillisecond());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(7, week0.getWeek());
//       assertEquals(1391904000000L, week0.getFirstMillisecond());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertNotNull(week0);
//       
//       float float0 = Component.TOP_ALIGNMENT;
//       assertEquals(0.0F, float0, 0.01F);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) float0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1392508799999L, week0.getLastMillisecond());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(7, week0.getWeek());
//       assertEquals(1391904000000L, week0.getFirstMillisecond());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertNull(timeSeriesDataItem0);
//       
//       Float float1 = (Float)timeSeries0.getValue((RegularTimePeriod) week0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1392508799999L, week0.getLastMillisecond());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(7, week0.getWeek());
//       assertEquals(1391904000000L, week0.getFirstMillisecond());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(0.0F, (float)float1, 0.01F);
//   }

  @Test(timeout = 4000)
  public void test41() {}
//   @Test(timeout = 4000)
//   public void test41()  throws Throwable  {
//       int int0 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(mockGregorianCalendar0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNotNull(timeSeries0);
//       
//       TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertNull(timeSeries1.getDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNotNull(timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//   }

  @Test(timeout = 4000)
  public void test42() {}
//   @Test(timeout = 4000)
//   public void test42()  throws Throwable  {
//       Day day0 = new Day();
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertNotNull(day0);
//       
//       String string0 = "";
//       Class<Quarter> class0 = Quarter.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0, (Class) class0);
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNotNull(timeSeries0);
//       
//       List list0 = timeSeries0.getItems();
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, list0.isEmpty());
//       assertEquals(0, list0.size());
//       assertNotNull(list0);
//   }

  @Test(timeout = 4000)
  public void test43() {}
//   @Test(timeout = 4000)
//   public void test43()  throws Throwable  {
//       Day day0 = new Day();
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertNotNull(day0);
//       
//       String string0 = "";
//       Class<Quarter> class0 = Quarter.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0, (Class) class0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertNotNull(timeSeries0);
//       
//       int int0 = SwingConstants.BOTTOM;
//       assertEquals(3, int0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) int0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertNull(timeSeriesDataItem0);
//       
//       Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertNotNull(collection0);
//   }

  @Test(timeout = 4000)
  public void test44() {}
//   @Test(timeout = 4000)
//   public void test44()  throws Throwable  {
//       Day day0 = new Day();
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertNotNull(day0);
//       
//       String string0 = "";
//       Class<Quarter> class0 = Quarter.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0, (Class) class0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertNotNull(timeSeries0);
//       
//       timeSeries0.setDomainDescription(string0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//   }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = (-24);
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNotNull(timeSeries0);
      
      // Undeclared exception!
      try {
        timeSeries0.update(int0, (Number) int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "";
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertNotNull(timeSeries0);
      
      TimeSeries timeSeries1 = new TimeSeries((Comparable) string0, (Class) class0);
      assertEquals(true, timeSeries1.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertNotNull(timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      
      boolean boolean0 = timeSeries1.equals((Object) timeSeries0);
      assertEquals(true, timeSeries1.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertTrue(boolean0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      
      String string0 = "Null 'Nitem' argmen.";
      timeSeries0.setRangeDescription(string0);
      assertEquals("Null 'Nitem' argmen.", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
  }
}
