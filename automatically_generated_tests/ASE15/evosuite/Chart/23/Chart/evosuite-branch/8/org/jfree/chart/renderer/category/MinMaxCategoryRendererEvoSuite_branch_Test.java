/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:05:08 GMT 2014
 */

package org.jfree.chart.renderer.category;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Paint;
import java.awt.Stroke;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JMenu;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.xy.XYDotRenderer;
import org.jfree.chart.renderer.xy.XYErrorRenderer;
import org.junit.runner.RunWith;
import sun.swing.ImageIconUIResource;

 
public class MinMaxCategoryRendererEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      
      MinMaxCategoryRenderer minMaxCategoryRenderer1 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer1);
      assertTrue(minMaxCategoryRenderer1.equals((Object)minMaxCategoryRenderer0));
      assertEquals(false, minMaxCategoryRenderer1.isDrawLines());
      assertEquals(0, minMaxCategoryRenderer1.getRowCount());
      assertEquals(1, minMaxCategoryRenderer1.getPassCount());
      assertEquals(true, minMaxCategoryRenderer1.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, minMaxCategoryRenderer1.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer1.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer1.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, minMaxCategoryRenderer1.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer1.getAutoPopulateSeriesShape());
      assertNotSame(minMaxCategoryRenderer1, minMaxCategoryRenderer0);
      
      boolean boolean0 = minMaxCategoryRenderer0.equals((Object) minMaxCategoryRenderer1);
      assertTrue(boolean0);
      assertTrue(minMaxCategoryRenderer0.equals((Object)minMaxCategoryRenderer1));
      assertTrue(minMaxCategoryRenderer1.equals((Object)minMaxCategoryRenderer0));
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer1.isDrawLines());
      assertEquals(0, minMaxCategoryRenderer1.getRowCount());
      assertEquals(1, minMaxCategoryRenderer1.getPassCount());
      assertEquals(true, minMaxCategoryRenderer1.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, minMaxCategoryRenderer1.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer1.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer1.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, minMaxCategoryRenderer1.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer1.getAutoPopulateSeriesShape());
      assertNotSame(minMaxCategoryRenderer0, minMaxCategoryRenderer1);
      assertNotSame(minMaxCategoryRenderer1, minMaxCategoryRenderer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      Icon icon0 = null;
      // Undeclared exception!
      try {
        minMaxCategoryRenderer0.setMinIcon(icon0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'icon' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      
      Icon icon0 = minMaxCategoryRenderer0.getObjectIcon();
      assertNotNull(icon0);
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      
      minMaxCategoryRenderer0.setMinIcon(icon0);
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      
      String string0 = "=3he:T";
      boolean boolean0 = true;
      JMenu jMenu0 = new JMenu(string0, boolean0);
      assertNotNull(jMenu0);
      assertEquals(false, jMenu0.isShowing());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(false, jMenu0.isDisplayable());
      
      Icon icon0 = jMenu0.getIcon();
      assertNull(icon0);
      assertEquals(false, jMenu0.isShowing());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(false, jMenu0.isDisplayable());
      
      // Undeclared exception!
      try {
        minMaxCategoryRenderer0.setMaxIcon(icon0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'icon' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      assertNotNull(defaultTreeCellRenderer0);
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      
      ImageIconUIResource imageIconUIResource0 = (ImageIconUIResource)defaultTreeCellRenderer0.getDefaultLeafIcon();
      assertNotNull(imageIconUIResource0);
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      
      minMaxCategoryRenderer0.setMaxIcon((Icon) imageIconUIResource0);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      
      Icon icon0 = null;
      // Undeclared exception!
      try {
        minMaxCategoryRenderer0.setObjectIcon(icon0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'icon' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      
      byte[] byteArray0 = new byte[1];
      String string0 = null;
      ImageIcon imageIcon0 = new ImageIcon(byteArray0, string0);
      assertNotNull(imageIcon0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      minMaxCategoryRenderer0.setObjectIcon((Icon) imageIcon0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      Stroke stroke0 = null;
      // Undeclared exception!
      try {
        minMaxCategoryRenderer0.setGroupStroke(stroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      assertNotNull(xYDotRenderer0);
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYDotRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYDotRenderer0.getBaseCreateEntities());
      
      int int0 = (-1051);
      BasicStroke basicStroke0 = (BasicStroke)xYDotRenderer0.getItemStroke(int0, int0);
      assertNotNull(basicStroke0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYDotRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYDotRenderer0.getBaseCreateEntities());
      
      minMaxCategoryRenderer0.setGroupStroke((Stroke) basicStroke0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYDotRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYDotRenderer0.getBaseCreateEntities());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      assertNotNull(xYErrorRenderer0);
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      
      int int0 = 1117;
      Paint paint0 = xYErrorRenderer0.getSeriesItemLabelPaint(int0);
      assertNull(paint0);
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      
      // Undeclared exception!
      try {
        minMaxCategoryRenderer0.setGroupPaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      
      Color color0 = (Color)minMaxCategoryRenderer0.getGroupPaint();
      assertNotNull(color0);
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(0, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      
      minMaxCategoryRenderer0.setGroupPaint((Paint) color0);
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(0, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      
      boolean boolean0 = true;
      minMaxCategoryRenderer0.setDrawLines(boolean0);
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      
      String string0 = "123sq\"g";
      boolean boolean0 = minMaxCategoryRenderer0.equals((Object) string0);
      assertFalse(boolean0);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      
      minMaxCategoryRenderer0.setDrawLines(boolean0);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      
      Icon icon0 = minMaxCategoryRenderer0.getMinIcon();
      assertNotNull(icon0);
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      
      Icon icon0 = minMaxCategoryRenderer0.getMaxIcon();
      assertNotNull(icon0);
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      
      BasicStroke basicStroke0 = (BasicStroke)minMaxCategoryRenderer0.getGroupStroke();
      assertNotNull(basicStroke0);
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      
      boolean boolean0 = minMaxCategoryRenderer0.isDrawLines();
      assertFalse(boolean0);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
  }
}
