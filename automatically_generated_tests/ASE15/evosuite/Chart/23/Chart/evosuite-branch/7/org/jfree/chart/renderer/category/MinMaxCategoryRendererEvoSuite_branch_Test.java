/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:54:17 GMT 2014
 */

package org.jfree.chart.renderer.category;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Paint;
import java.awt.RenderingHints;
import java.awt.Stroke;
import javax.swing.Icon;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.jfree.chart.axis.Axis;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.xy.HighLowRenderer;
import org.junit.runner.RunWith;
import sun.awt.SunHints;

 
public class MinMaxCategoryRendererEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertNotNull(minMaxCategoryRenderer0);
      
      MinMaxCategoryRenderer minMaxCategoryRenderer1 = new MinMaxCategoryRenderer();
      assertTrue(minMaxCategoryRenderer1.equals((Object)minMaxCategoryRenderer0));
      assertNotSame(minMaxCategoryRenderer1, minMaxCategoryRenderer0);
      assertEquals(true, minMaxCategoryRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer1.getBaseSeriesVisible());
      assertEquals(0, minMaxCategoryRenderer1.getRowCount());
      assertEquals(2.0, minMaxCategoryRenderer1.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer1.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer1.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer1.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer1.getAutoPopulateSeriesShape());
      assertEquals(1, minMaxCategoryRenderer1.getPassCount());
      assertEquals(0, minMaxCategoryRenderer1.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesStroke());
      assertNotNull(minMaxCategoryRenderer1);
      
      boolean boolean0 = minMaxCategoryRenderer1.equals((Object) minMaxCategoryRenderer0);
      assertTrue(minMaxCategoryRenderer1.equals((Object)minMaxCategoryRenderer0));
      assertTrue(minMaxCategoryRenderer0.equals((Object)minMaxCategoryRenderer1));
      assertNotSame(minMaxCategoryRenderer1, minMaxCategoryRenderer0);
      assertNotSame(minMaxCategoryRenderer0, minMaxCategoryRenderer1);
      assertEquals(true, minMaxCategoryRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer1.getBaseSeriesVisible());
      assertEquals(0, minMaxCategoryRenderer1.getRowCount());
      assertEquals(2.0, minMaxCategoryRenderer1.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer1.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer1.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer1.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer1.getAutoPopulateSeriesShape());
      assertEquals(1, minMaxCategoryRenderer1.getPassCount());
      assertEquals(0, minMaxCategoryRenderer1.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertTrue(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(minMaxCategoryRenderer0);
      
      SunHints.Value sunHints_Value0 = (SunHints.Value)RenderingHints.VALUE_ALPHA_INTERPOLATION_SPEED;
      assertNotNull(sunHints_Value0);
      
      boolean boolean0 = minMaxCategoryRenderer0.equals((Object) sunHints_Value0);
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertFalse(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertNotNull(minMaxCategoryRenderer0);
      
      BasicStroke basicStroke0 = (BasicStroke)Plot.DEFAULT_OUTLINE_STROKE;
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertNotNull(basicStroke0);
      
      minMaxCategoryRenderer0.setGroupStroke((Stroke) basicStroke0);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      
      MinMaxCategoryRenderer minMaxCategoryRenderer1 = new MinMaxCategoryRenderer();
      assertFalse(minMaxCategoryRenderer1.equals((Object)minMaxCategoryRenderer0));
      assertNotSame(minMaxCategoryRenderer1, minMaxCategoryRenderer0);
      assertEquals(false, minMaxCategoryRenderer1.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, minMaxCategoryRenderer1.getPassCount());
      assertEquals(true, minMaxCategoryRenderer1.getBaseSeriesVisible());
      assertEquals(2.0, minMaxCategoryRenderer1.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer1.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer1.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer1.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(0, minMaxCategoryRenderer1.getColumnCount());
      assertEquals(0, minMaxCategoryRenderer1.getRowCount());
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(minMaxCategoryRenderer1);
      
      boolean boolean0 = minMaxCategoryRenderer1.equals((Object) minMaxCategoryRenderer0);
      assertFalse(minMaxCategoryRenderer1.equals((Object)minMaxCategoryRenderer0));
      assertFalse(minMaxCategoryRenderer0.equals((Object)minMaxCategoryRenderer1));
      assertNotSame(minMaxCategoryRenderer1, minMaxCategoryRenderer0);
      assertNotSame(minMaxCategoryRenderer0, minMaxCategoryRenderer1);
      assertEquals(false, minMaxCategoryRenderer1.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, minMaxCategoryRenderer1.getPassCount());
      assertEquals(true, minMaxCategoryRenderer1.getBaseSeriesVisible());
      assertEquals(2.0, minMaxCategoryRenderer1.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer1.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer1.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer1.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(0, minMaxCategoryRenderer1.getColumnCount());
      assertEquals(0, minMaxCategoryRenderer1.getRowCount());
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertFalse(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertNotNull(minMaxCategoryRenderer0);
      
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertNotNull(defaultTreeCellRenderer0);
      
      Icon icon0 = defaultTreeCellRenderer0.getIcon();
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertNull(icon0);
      
      // Undeclared exception!
      try {
        minMaxCategoryRenderer0.setMinIcon(icon0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'icon' argument.
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertNotNull(minMaxCategoryRenderer0);
      
      Icon icon0 = minMaxCategoryRenderer0.getMinIcon();
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertNotNull(icon0);
      
      minMaxCategoryRenderer0.setMinIcon(icon0);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
  }

  @Test
  public void test05()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertNotNull(minMaxCategoryRenderer0);
      
      String string0 = "'ull 'iDon'GZ&gume!tI";
      boolean boolean0 = false;
      JCheckBox jCheckBox0 = new JCheckBox(string0, boolean0);
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertNotNull(jCheckBox0);
      
      Icon icon0 = jCheckBox0.getPressedIcon();
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertNull(icon0);
      
      // Undeclared exception!
      try {
        minMaxCategoryRenderer0.setMaxIcon(icon0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'icon' argument.
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertNotNull(minMaxCategoryRenderer0);
      
      Icon icon0 = minMaxCategoryRenderer0.getObjectIcon();
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertNotNull(icon0);
      
      minMaxCategoryRenderer0.setMaxIcon(icon0);
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
  }

  @Test
  public void test07()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertNotNull(minMaxCategoryRenderer0);
      
      Icon icon0 = null;
      // Undeclared exception!
      try {
        minMaxCategoryRenderer0.setObjectIcon(icon0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'icon' argument.
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertNotNull(minMaxCategoryRenderer0);
      
      Icon icon0 = minMaxCategoryRenderer0.getMinIcon();
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertNotNull(icon0);
      
      minMaxCategoryRenderer0.setObjectIcon(icon0);
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 19;
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(minMaxCategoryRenderer0);
      
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, highLowRenderer0.getBaseCreateEntities());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertEquals(true, highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, highLowRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, highLowRenderer0.getDrawOpenTicks());
      assertEquals(true, highLowRenderer0.getBaseSeriesVisible());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, highLowRenderer0.getDrawCloseTicks());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(highLowRenderer0);
      
      Stroke stroke0 = highLowRenderer0.getSeriesOutlineStroke(int0);
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, highLowRenderer0.getBaseCreateEntities());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertEquals(true, highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, highLowRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, highLowRenderer0.getDrawOpenTicks());
      assertEquals(true, highLowRenderer0.getBaseSeriesVisible());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, highLowRenderer0.getDrawCloseTicks());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNull(stroke0);
      
      // Undeclared exception!
      try {
        minMaxCategoryRenderer0.setGroupStroke(stroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertNotNull(minMaxCategoryRenderer0);
      
      Paint paint0 = null;
      // Undeclared exception!
      try {
        minMaxCategoryRenderer0.setGroupPaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertNotNull(minMaxCategoryRenderer0);
      
      Color color0 = (Color)Axis.DEFAULT_TICK_LABEL_PAINT;
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getBlue());
      assertEquals(-16777216, color0.getRGB());
      assertNotNull(color0);
      
      minMaxCategoryRenderer0.setGroupPaint((Paint) color0);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getBlue());
      assertEquals(-16777216, color0.getRGB());
  }

  @Test
  public void test12()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(minMaxCategoryRenderer0);
      
      boolean boolean0 = true;
      minMaxCategoryRenderer0.setDrawLines(boolean0);
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
  }

  @Test
  public void test13()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(minMaxCategoryRenderer0);
      
      boolean boolean0 = false;
      minMaxCategoryRenderer0.setDrawLines(boolean0);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
  }

  @Test
  public void test14()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertNotNull(minMaxCategoryRenderer0);
      
      int int0 = 0;
      Icon icon0 = minMaxCategoryRenderer0.getObjectIcon();
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertNotNull(icon0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) minMaxCategoryRenderer0;
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertNotNull(objectArray0[0]);
      
      objectArray0[1] = (Object) minMaxCategoryRenderer0;
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertNotNull(objectArray0[1]);
      
      objectArray0[2] = (Object) int0;
      assertNotNull(objectArray0[2]);
      
      objectArray0[3] = (Object) icon0;
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertNotNull(objectArray0[3]);
      
      JOptionPane jOptionPane0 = null;
      try {
        jOptionPane0 = new JOptionPane((Object) minMaxCategoryRenderer0, int0, int0, icon0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertNotNull(minMaxCategoryRenderer0);
      
      Color color0 = (Color)minMaxCategoryRenderer0.getGroupPaint();
      assertEquals(0, color0.getRed());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertNotNull(color0);
  }

  @Test
  public void test16()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertNotNull(minMaxCategoryRenderer0);
      
      Icon icon0 = minMaxCategoryRenderer0.getMaxIcon();
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertNotNull(icon0);
  }

  @Test
  public void test17()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertNotNull(minMaxCategoryRenderer0);
      
      BasicStroke basicStroke0 = (BasicStroke)minMaxCategoryRenderer0.getGroupStroke();
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
  }

  @Test
  public void test18()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertNotNull(minMaxCategoryRenderer0);
      
      boolean boolean0 = minMaxCategoryRenderer0.isDrawLines();
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertFalse(boolean0);
  }
}
