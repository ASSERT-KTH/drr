/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:29:37 GMT 2014
 */

package org.jfree.data;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.jfree.data.DefaultKeyedValues2D;
import org.jfree.data.UnknownKeyException;
import org.junit.runner.RunWith;

 
public class DefaultKeyedValues2DEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      byte byte0 = Byte.MAX_VALUE;
      assertEquals((byte)127, byte0);
      
      boolean boolean0 = false;
      int int0 = defaultKeyedValues2D0.hashCode();
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(871, int0);
      
      defaultKeyedValues2D0.setValue((Number) int0, (Comparable) byte0, (Comparable) byte0);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      
      DefaultKeyedValues2D defaultKeyedValues2D1 = new DefaultKeyedValues2D(boolean0);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertFalse(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      assertNotNull(defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D1.getColumnCount());
      assertEquals(0, defaultKeyedValues2D1.getRowCount());
      
      defaultKeyedValues2D1.setValue((Number) byte0, (Comparable) byte0, (Comparable) byte0);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertFalse(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      assertEquals(1, defaultKeyedValues2D1.getRowCount());
      assertEquals(1, defaultKeyedValues2D1.getColumnCount());
      
      boolean boolean1 = defaultKeyedValues2D0.equals((Object) defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertTrue(boolean1 == boolean0);
      assertFalse(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      assertTrue(boolean0 == boolean1);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D1.getRowCount());
      assertEquals(1, defaultKeyedValues2D1.getColumnCount());
      assertFalse(boolean1);
  }

  @Test
  public void test01()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      byte byte0 = Byte.MAX_VALUE;
      assertEquals((byte)127, byte0);
      
      boolean boolean0 = false;
      defaultKeyedValues2D0.setValue((Number) byte0, (Comparable) byte0, (Comparable) byte0);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      
      DefaultKeyedValues2D defaultKeyedValues2D1 = new DefaultKeyedValues2D(boolean0);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertFalse(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      assertNotNull(defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D1.getColumnCount());
      assertEquals(0, defaultKeyedValues2D1.getRowCount());
      
      defaultKeyedValues2D1.setValue((Number) byte0, (Comparable) byte0, (Comparable) byte0);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertTrue(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      assertEquals(1, defaultKeyedValues2D1.getColumnCount());
      assertEquals(1, defaultKeyedValues2D1.getRowCount());
      
      boolean boolean1 = defaultKeyedValues2D0.equals((Object) defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertTrue(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(1, defaultKeyedValues2D1.getColumnCount());
      assertEquals(1, defaultKeyedValues2D1.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertTrue(boolean1);
  }

  @Test
  public void test02()  throws Throwable  {
      boolean boolean0 = true;
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      DefaultKeyedValues2D defaultKeyedValues2D1 = new DefaultKeyedValues2D(boolean0);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertTrue(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      assertNotNull(defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D1.getRowCount());
      assertEquals(0, defaultKeyedValues2D1.getColumnCount());
      
      int int0 = defaultKeyedValues2D1.getRowCount();
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertTrue(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      assertEquals(0, defaultKeyedValues2D1.getRowCount());
      assertEquals(0, defaultKeyedValues2D1.getColumnCount());
      assertEquals(0, int0);
      
      defaultKeyedValues2D1.setValue((Number) int0, (Comparable) int0, (Comparable) int0);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertFalse(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      assertEquals(1, defaultKeyedValues2D1.getRowCount());
      assertEquals(1, defaultKeyedValues2D1.getColumnCount());
      
      defaultKeyedValues2D1.removeRow(int0);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertFalse(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      assertEquals(0, defaultKeyedValues2D1.getRowCount());
      assertEquals(1, defaultKeyedValues2D1.getColumnCount());
      
      boolean boolean1 = defaultKeyedValues2D0.equals((Object) defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertFalse(boolean0 == boolean1);
      assertFalse(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, defaultKeyedValues2D1.getRowCount());
      assertEquals(1, defaultKeyedValues2D1.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertFalse(boolean1);
  }

  @Test
  public void test03()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      DefaultKeyedValues2D defaultKeyedValues2D1 = new DefaultKeyedValues2D();
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertTrue(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      assertNotNull(defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D1.getColumnCount());
      assertEquals(0, defaultKeyedValues2D1.getRowCount());
      
      float float0 = Float.POSITIVE_INFINITY;
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      
      defaultKeyedValues2D0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      
      boolean boolean0 = defaultKeyedValues2D0.equals((Object) defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertFalse(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      assertFalse(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertEquals(0, defaultKeyedValues2D1.getColumnCount());
      assertEquals(0, defaultKeyedValues2D1.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      boolean boolean0 = false;
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(boolean0);
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      Object object0 = null;
      boolean boolean1 = defaultKeyedValues2D0.equals(object0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertFalse(boolean1);
  }

  @Test
  public void test05()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      boolean boolean0 = defaultKeyedValues2D0.equals((Object) defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertTrue(boolean0);
      
      Number number0 = null;
      defaultKeyedValues2D0.addValue(number0, (Comparable) boolean0, (Comparable) boolean0);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      
      int int0 = 0;
      int int1 = defaultKeyedValues2D0.getRowCount();
      assertFalse(int1 == int0);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, int1);
      
      defaultKeyedValues2D0.setValue((Number) int1, (Comparable) int0, (Comparable) int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(2, defaultKeyedValues2D0.getRowCount());
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      
      defaultKeyedValues2D0.removeColumn(int1);
      assertFalse(int1 == int0);
      assertEquals(2, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
  }

  @Test
  public void test06()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      byte byte0 = Byte.MAX_VALUE;
      assertEquals((byte)127, byte0);
      
      // Undeclared exception!
      try {
        defaultKeyedValues2D0.removeColumn((Comparable) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown key: 127
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      Comparable<Object> comparable0 = null;
      // Undeclared exception!
      try {
        defaultKeyedValues2D0.removeColumn(comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKey' argument.
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      boolean boolean0 = defaultKeyedValues2D0.equals((Object) defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertTrue(boolean0);
      
      int int0 = (-1);
      int int1 = defaultKeyedValues2D0.getColumnIndex((Comparable) boolean0);
      assertTrue(int1 == int0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals((-1), int1);
      
      defaultKeyedValues2D0.setValue((Number) int0, (Comparable) int1, (Comparable) boolean0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      
      int int2 = defaultKeyedValues2D0.getRowCount();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, int2);
      
      defaultKeyedValues2D0.removeValue((Comparable) int2, (Comparable) boolean0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
  }

  @Test
  public void test09()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      float float0 = (-864.0F);
      Float float1 = new Float(float0);
      assertTrue(float1.equals((Object)float0));
      assertEquals((-864.0F), (float)float1, 0.01F);
      
      String string0 = float1.toString();
      assertTrue(float1.equals((Object)float0));
      assertNotNull(string0);
      assertEquals("-864.0", string0);
      
      int int0 = defaultKeyedValues2D0.getColumnIndex((Comparable) string0);
      assertTrue(float1.equals((Object)float0));
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals((-1), int0);
      
      defaultKeyedValues2D0.addValue((Number) float1, (Comparable) int0, (Comparable) float1);
      assertTrue(float1.equals((Object)float0));
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      
      defaultKeyedValues2D0.removeValue((Comparable) float0, (Comparable) int0);
      assertTrue(float1.equals((Object)float0));
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      float float0 = (-864.0F);
      Float float1 = new Float(float0);
      assertTrue(float1.equals((Object)float0));
      assertEquals((-864.0F), (float)float1, 0.01F);
      
      String string0 = float1.toString();
      assertTrue(float1.equals((Object)float0));
      assertNotNull(string0);
      assertEquals("-864.0", string0);
      
      defaultKeyedValues2D0.setValue((Number) float0, (Comparable) float0, (Comparable) string0);
      assertTrue(float1.equals((Object)float0));
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      
      int int0 = defaultKeyedValues2D0.getColumnIndex((Comparable) string0);
      assertTrue(float1.equals((Object)float0));
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, int0);
      
      defaultKeyedValues2D0.removeValue((Comparable) float0, (Comparable) int0);
      assertTrue(float1.equals((Object)float0));
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
  }

  @Test
  public void test11()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      boolean boolean0 = defaultKeyedValues2D0.equals((Object) defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertTrue(boolean0);
      
      Number number0 = null;
      defaultKeyedValues2D0.addValue(number0, (Comparable) boolean0, (Comparable) boolean0);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      
      int int0 = 0;
      int int1 = defaultKeyedValues2D0.getRowCount();
      assertFalse(int1 == int0);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, int1);
      
      defaultKeyedValues2D0.setValue((Number) int1, (Comparable) int0, (Comparable) int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(2, defaultKeyedValues2D0.getRowCount());
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      
      Number number1 = defaultKeyedValues2D0.getValue((Comparable) int0, (Comparable) boolean0);
      assertFalse(int0 == int1);
      assertNull(number1);
      assertEquals(2, defaultKeyedValues2D0.getRowCount());
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
  }

  @Test
  public void test12()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      int int0 = defaultKeyedValues2D0.hashCode();
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(871, int0);
      
      boolean boolean0 = false;
      defaultKeyedValues2D0.setValue((Number) int0, (Comparable) int0, (Comparable) boolean0);
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      
      // Undeclared exception!
      try {
        Number number0 = defaultKeyedValues2D0.getValue((Comparable) boolean0, (Comparable) boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognised rowKey: false
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      boolean boolean0 = defaultKeyedValues2D0.equals((Object) defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertTrue(boolean0);
      
      Number number0 = null;
      defaultKeyedValues2D0.addValue(number0, (Comparable) boolean0, (Comparable) boolean0);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      
      Number number1 = defaultKeyedValues2D0.getValue((Comparable) boolean0, (Comparable) boolean0);
      assertNull(number1);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
  }

  @Test
  public void test14()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      boolean boolean0 = defaultKeyedValues2D0.equals((Object) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try {
        Number number0 = defaultKeyedValues2D0.getValue((Comparable) boolean0, (Comparable) boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognised columnKey: false
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      Comparable<Integer> comparable0 = null;
      // Undeclared exception!
      try {
        Number number0 = defaultKeyedValues2D0.getValue(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      Comparable<Object> comparable0 = null;
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      boolean boolean0 = true;
      // Undeclared exception!
      try {
        Number number0 = defaultKeyedValues2D0.getValue((Comparable) boolean0, (Comparable) comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKey' argument.
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      boolean boolean0 = false;
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(boolean0);
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      Comparable<LinkedList<Integer>> comparable0 = null;
      // Undeclared exception!
      try {
        int int0 = defaultKeyedValues2D0.getColumnIndex(comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Comparable<String> comparable0 = null;
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      // Undeclared exception!
      try {
        defaultKeyedValues2D0.removeValue(comparable0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      boolean boolean0 = defaultKeyedValues2D0.equals((Object) defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertTrue(boolean0);
      
      Number number0 = null;
      defaultKeyedValues2D0.addValue(number0, (Comparable) boolean0, (Comparable) boolean0);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      
      int int0 = 0;
      int int1 = defaultKeyedValues2D0.getRowCount();
      assertFalse(int1 == int0);
      assertEquals(1, defaultKeyedValues2D0.getRowCount());
      assertEquals(1, defaultKeyedValues2D0.getColumnCount());
      assertEquals(1, int1);
      
      defaultKeyedValues2D0.setValue((Number) int1, (Comparable) int0, (Comparable) int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(2, defaultKeyedValues2D0.getRowCount());
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
      
      Number number1 = defaultKeyedValues2D0.getValue(int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(number1);
      assertEquals(2, defaultKeyedValues2D0.getRowCount());
      assertEquals(2, defaultKeyedValues2D0.getColumnCount());
  }

  @Test
  public void test20()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      defaultKeyedValues2D0.clear();
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
  }

  @Test
  public void test21()  throws Throwable  {
      boolean boolean0 = false;
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(boolean0);
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      // Undeclared exception!
      try {
        defaultKeyedValues2D0.removeRow((Comparable) boolean0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D();
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      
      DefaultKeyedValues2D defaultKeyedValues2D1 = (DefaultKeyedValues2D)defaultKeyedValues2D0.clone();
      assertNotSame(defaultKeyedValues2D0, defaultKeyedValues2D1);
      assertNotSame(defaultKeyedValues2D1, defaultKeyedValues2D0);
      assertTrue(defaultKeyedValues2D0.equals((Object)defaultKeyedValues2D1));
      assertTrue(defaultKeyedValues2D1.equals((Object)defaultKeyedValues2D0));
      assertNotNull(defaultKeyedValues2D1);
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D1.getColumnCount());
      assertEquals(0, defaultKeyedValues2D1.getRowCount());
  }

  @Test
  public void test23()  throws Throwable  {
      boolean boolean0 = true;
      DefaultKeyedValues2D defaultKeyedValues2D0 = new DefaultKeyedValues2D(boolean0);
      assertNotNull(defaultKeyedValues2D0);
      assertEquals(0, defaultKeyedValues2D0.getRowCount());
      assertEquals(0, defaultKeyedValues2D0.getColumnCount());
      
      int int0 = 2355;
      // Undeclared exception!
      try {
        Comparable comparable0 = defaultKeyedValues2D0.getRowKey(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2355, Size: 0
         //
      }
  }
}
