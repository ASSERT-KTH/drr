/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:34:17 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.image.ImageObserver;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import javax.swing.SwingConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.general.SeriesException;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

 
public class TimeSeriesEvoSuite_branch_Test   {

  @Test
  public void test00() {}
//   @Test
//   public void test00()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       assertNotNull(quarter0);
//       
//       Year year0 = quarter0.getYear();
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       assertNotNull(year0);
//       
//       Year year1 = (Year)year0.next();
//       assertEquals("2015", year1.toString());
//       assertEquals(2015L, year1.getSerialIndex());
//       assertEquals(1420070400000L, year1.getFirstMillisecond());
//       assertEquals(1451606399999L, year1.getLastMillisecond());
//       assertEquals(1435838399999L, year1.getMiddleMillisecond());
//       assertEquals(2015, year1.getYear());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       assertNotSame(year1, year0);
//       assertNotSame(year0, year1);
//       assertNotNull(year1);
//       assertFalse(year1.equals((Object)year0));
//       assertFalse(year0.equals((Object)year1));
//       
//       String string0 = "q)Q'*CS:gGE*";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, string0, string0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       assertNotNull(timeSeries0);
//       
//       double double0 = 1731.0918136016971;
//       timeSeries0.add((RegularTimePeriod) year0, double0);
//       assertEquals(1731.0918136016971, timeSeries0.getMinY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
//       assertEquals(1731.0918136016971, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       assertNotSame(year0, year1);
//       assertFalse(year0.equals((Object)year1));
//       
//       MockDate mockDate0 = (MockDate)quarter0.getEnd();
//       assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       assertNotNull(mockDate0);
//       
//       double double1 = 0.0574255839;
//       boolean boolean0 = false;
//       timeSeries0.add((RegularTimePeriod) year1, double1, boolean0);
//       assertEquals(0.0574255839, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals(1731.0918136016971, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("2015", year1.toString());
//       assertEquals(2015L, year1.getSerialIndex());
//       assertEquals(1420070400000L, year1.getFirstMillisecond());
//       assertEquals(1451606399999L, year1.getLastMillisecond());
//       assertEquals(1435838399999L, year1.getMiddleMillisecond());
//       assertEquals(2015, year1.getYear());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       assertNotSame(year1, year0);
//       assertNotSame(year0, year1);
//       assertFalse(year1.equals((Object)year0));
//       assertFalse(year0.equals((Object)year1));
//       assertFalse(double1 == double0);
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
//       assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       assertEquals(1396310399999L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1396310399999L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1396310399999L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1396310399999L, fixedMillisecond0.getSerialIndex());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       assertNotNull(fixedMillisecond0);
//       
//       timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
//       assertEquals(0.0574255839, timeSeries0.getMinY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0.0574255839, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       assertEquals(1396310399999L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1396310399999L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1396310399999L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1396310399999L, fixedMillisecond0.getSerialIndex());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//   }

  @Test
  public void test01() {}
//   @Test
//   public void test01()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertNotNull(quarter0);
//       
//       Year year0 = quarter0.getYear();
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals("2014", year0.toString());
//       assertNotNull(year0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals("2014", year0.toString());
//       assertNotNull(timeSeries0);
//       
//       Number number0 = null;
//       timeSeries0.add((RegularTimePeriod) year0, number0);
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals("2014", year0.toString());
//       
//       timeSeries0.delete((RegularTimePeriod) year0);
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals("2014", year0.toString());
//   }

  @Test
  public void test02() {}
//   @Test
//   public void test02()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertNotNull(quarter0);
//       
//       Year year0 = quarter0.getYear();
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals("2014", year0.toString());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertNotNull(year0);
//       
//       Year year1 = (Year)year0.next();
//       assertEquals(1420070400000L, year1.getFirstMillisecond());
//       assertEquals(1451606399999L, year1.getLastMillisecond());
//       assertEquals(2015, year1.getYear());
//       assertEquals("2015", year1.toString());
//       assertEquals(2015L, year1.getSerialIndex());
//       assertEquals(1435838399999L, year1.getMiddleMillisecond());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals("2014", year0.toString());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertNotSame(year1, year0);
//       assertNotSame(year0, year1);
//       assertNotNull(year1);
//       assertFalse(year1.equals((Object)year0));
//       assertFalse(year0.equals((Object)year1));
//       
//       String string0 = "q)Q'*CS:gGE*";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, string0, string0);
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNotNull(timeSeries0);
//       
//       double double0 = 1731.0918136016971;
//       timeSeries0.add((RegularTimePeriod) year0, double0);
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals("2014", year0.toString());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
//       assertEquals(1731.0918136016971, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1731.0918136016971, timeSeries0.getMinY(), 0.01D);
//       assertNotSame(year0, year1);
//       assertFalse(year0.equals((Object)year1));
//       
//       boolean boolean0 = false;
//       timeSeries0.add((RegularTimePeriod) year1, double0, boolean0);
//       assertEquals(1420070400000L, year1.getFirstMillisecond());
//       assertEquals(1451606399999L, year1.getLastMillisecond());
//       assertEquals(2015, year1.getYear());
//       assertEquals("2015", year1.toString());
//       assertEquals(2015L, year1.getSerialIndex());
//       assertEquals(1435838399999L, year1.getMiddleMillisecond());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals("2014", year0.toString());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
//       assertEquals(1731.0918136016971, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1731.0918136016971, timeSeries0.getMinY(), 0.01D);
//       assertNotSame(year1, year0);
//       assertNotSame(year0, year1);
//       assertFalse(year1.equals((Object)year0));
//       assertFalse(year0.equals((Object)year1));
//       
//       int int0 = timeSeries0.hashCode();
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
//       assertEquals(1731.0918136016971, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1731.0918136016971, timeSeries0.getMinY(), 0.01D);
//       assertEquals((-1779696477), int0);
//   }

  @Test
  public void test03() {}
//   @Test
//   public void test03()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1, quarter0.getQuarter());
//       assertNotNull(quarter0);
//       
//       String string0 = "q)Q'*CS:gGE*";
//       String string1 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, string0, string1);
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNotNull(timeSeries0);
//       
//       int int0 = timeSeries0.hashCode();
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(232450654, int0);
//   }

  @Test
  public void test04() {}
//   @Test
//   public void test04()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertNotNull(quarter0);
//       
//       String string0 = "?g";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, string0, string0);
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("?g", timeSeries0.getRangeDescription());
//       assertEquals("?g", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertNotNull(timeSeries0);
//       
//       String string1 = null;
//       timeSeries0.setDomainDescription(string1);
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("?g", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       
//       int int0 = timeSeries0.hashCode();
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("?g", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals((-1502516573), int0);
//   }

  @Test
  public void test05()  throws Throwable  {
      long long0 = 24L;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNotNull(timeSeries0);
      
      String string0 = "9";
      TimeSeries timeSeries1 = new TimeSeries((Comparable) long0, string0, string0);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("9", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(true, timeSeries1.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals("9", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      int int0 = 65;
      TimeSeries timeSeries2 = timeSeries1.createCopy(int0, int0);
      assertEquals(true, timeSeries2.isEmpty());
      assertNull(timeSeries2.getDescription());
      assertEquals(0, timeSeries2.getItemCount());
      assertEquals("9", timeSeries2.getRangeDescription());
      assertEquals(true, timeSeries2.getNotify());
      assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries2.getMinY(), 0.01D);
      assertEquals("9", timeSeries2.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries2.getMaxY(), 0.01D);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("9", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(true, timeSeries1.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals("9", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertNotSame(timeSeries2, timeSeries0);
      assertNotSame(timeSeries2, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries1, timeSeries2);
      assertNotNull(timeSeries2);
      assertTrue(timeSeries2.equals((Object)timeSeries1));
      assertFalse(timeSeries2.equals((Object)timeSeries0));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries1.equals((Object)timeSeries2));
      
      boolean boolean0 = timeSeries2.equals((Object) timeSeries0);
      assertEquals(true, timeSeries2.isEmpty());
      assertNull(timeSeries2.getDescription());
      assertEquals(0, timeSeries2.getItemCount());
      assertEquals("9", timeSeries2.getRangeDescription());
      assertEquals(true, timeSeries2.getNotify());
      assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries2.getMinY(), 0.01D);
      assertEquals("9", timeSeries2.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries2.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("9", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(true, timeSeries1.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals("9", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
      assertNotSame(timeSeries2, timeSeries0);
      assertNotSame(timeSeries2, timeSeries1);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries0, timeSeries2);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries1, timeSeries2);
      assertTrue(timeSeries2.equals((Object)timeSeries1));
      assertFalse(timeSeries2.equals((Object)timeSeries0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries0.equals((Object)timeSeries2));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries1.equals((Object)timeSeries2));
  }

  @Test
  public void test06()  throws Throwable  {
      long long0 = 0L;
      String string0 = "\",C/$+*iRI~6t:";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, string0, string0);
      assertEquals("\",C/$+*iRI~6t:", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("\",C/$+*iRI~6t:", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNotNull(timeSeries0);
      
      boolean boolean0 = timeSeries0.equals((Object) long0);
      assertEquals("\",C/$+*iRI~6t:", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("\",C/$+*iRI~6t:", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertFalse(boolean0);
  }

  ////@Test
  public void test07()  throws Throwable  {
      int int0 = (-2118);
      Year year0 = new Year(int0);
      assertEquals(-2118, year0.getYear());
      assertEquals((-2118L), year0.getSerialIndex());
      assertEquals((-62136417600001L), year0.getMiddleMillisecond());
      assertEquals(4733510399999L, year0.getLastMillisecond());
      assertEquals((-129006345600000L), year0.getFirstMillisecond());
      assertEquals("-2118", year0.toString());
      assertNotNull(year0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(-2118, year0.getYear());
      assertEquals((-2118L), year0.getSerialIndex());
      assertEquals((-62136417600001L), year0.getMiddleMillisecond());
      assertEquals(4733510399999L, year0.getLastMillisecond());
      assertEquals((-129006345600000L), year0.getFirstMillisecond());
      assertEquals("-2118", year0.toString());
      assertNotNull(timeSeries0);
      
      int int1 = 0;
      TimeSeries timeSeries1 = timeSeries0.createCopy(int1, int1);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(-2118, year0.getYear());
      assertEquals((-2118L), year0.getSerialIndex());
      assertEquals((-62136417600001L), year0.getMiddleMillisecond());
      assertEquals(4733510399999L, year0.getLastMillisecond());
      assertEquals((-129006345600000L), year0.getFirstMillisecond());
      assertEquals("-2118", year0.toString());
      assertEquals(true, timeSeries1.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertFalse(int0 == int1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertFalse(int1 == int0);
      
      boolean boolean0 = true;
      timeSeries1.add((RegularTimePeriod) year0, (double) int1, boolean0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(-2118, year0.getYear());
      assertEquals((-2118L), year0.getSerialIndex());
      assertEquals((-62136417600001L), year0.getMiddleMillisecond());
      assertEquals(4733510399999L, year0.getLastMillisecond());
      assertEquals((-129006345600000L), year0.getFirstMillisecond());
      assertEquals("-2118", year0.toString());
      assertEquals(false, timeSeries1.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(0.0, timeSeries1.getMinY(), 0.01D);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(0.0, timeSeries1.getMaxY(), 0.01D);
      assertEquals(true, timeSeries1.getNotify());
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(int0 == int1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(int1 == int0);
      
      boolean boolean1 = timeSeries0.equals((Object) timeSeries1);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(-2118, year0.getYear());
      assertEquals((-2118L), year0.getSerialIndex());
      assertEquals((-62136417600001L), year0.getMiddleMillisecond());
      assertEquals(4733510399999L, year0.getLastMillisecond());
      assertEquals((-129006345600000L), year0.getFirstMillisecond());
      assertEquals("-2118", year0.toString());
      assertEquals(false, timeSeries1.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(0.0, timeSeries1.getMinY(), 0.01D);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(0.0, timeSeries1.getMaxY(), 0.01D);
      assertEquals(true, timeSeries1.getNotify());
      assertFalse(boolean1);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(int0 == int1);
      assertFalse(boolean1 == boolean0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(int1 == int0);
  }

  @Test
  public void test08() {}
//   @Test
//   public void test08()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertNotNull(quarter0);
//       
//       Year year0 = quarter0.getYear();
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertNotNull(year0);
//       
//       Year year1 = (Year)year0.next();
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(2015L, year1.getSerialIndex());
//       assertEquals(1435838399999L, year1.getMiddleMillisecond());
//       assertEquals(1451606399999L, year1.getLastMillisecond());
//       assertEquals(1420070400000L, year1.getFirstMillisecond());
//       assertEquals(2015, year1.getYear());
//       assertEquals("2015", year1.toString());
//       assertNotSame(year0, year1);
//       assertNotSame(year1, year0);
//       assertNotNull(year1);
//       assertFalse(year0.equals((Object)year1));
//       assertFalse(year1.equals((Object)year0));
//       
//       String string0 = "q)Q'*CS:gGE*";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, string0, string0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertNotNull(timeSeries0);
//       
//       double double0 = 1731.0918136016971;
//       timeSeries0.add((RegularTimePeriod) year0, double0);
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1731.0918136016971, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
//       assertEquals(1731.0918136016971, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertNotSame(year0, year1);
//       assertFalse(year0.equals((Object)year1));
//       
//       MockDate mockDate0 = (MockDate)quarter0.getEnd();
//       assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertNotNull(mockDate0);
//       
//       Minute minute0 = new Minute((Date) mockDate0);
//       assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       assertEquals(59, minute0.getMinute());
//       assertEquals(1396310369999L, minute0.getMiddleMillisecond());
//       assertEquals(60091199L, minute0.getSerialIndex());
//       assertEquals(23, minute0.getHourValue());
//       assertEquals(1396310340000L, minute0.getFirstMillisecond());
//       assertEquals(1396310399999L, minute0.getLastMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertNotNull(minute0);
//       
//       Day day0 = minute0.getDay();
//       assertEquals(1396310399999L, day0.getLastMillisecond());
//       assertEquals(1396224000000L, day0.getFirstMillisecond());
//       assertEquals(1396267199999L, day0.getMiddleMillisecond());
//       assertEquals(31, day0.getDayOfMonth());
//       assertEquals(3, day0.getMonth());
//       assertEquals(41729L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       assertEquals(59, minute0.getMinute());
//       assertEquals(1396310369999L, minute0.getMiddleMillisecond());
//       assertEquals(60091199L, minute0.getSerialIndex());
//       assertEquals(23, minute0.getHourValue());
//       assertEquals(1396310340000L, minute0.getFirstMillisecond());
//       assertEquals(1396310399999L, minute0.getLastMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertNotNull(day0);
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year1, (RegularTimePeriod) day0);
//       assertEquals(1396310399999L, day0.getLastMillisecond());
//       assertEquals(1396224000000L, day0.getFirstMillisecond());
//       assertEquals(1396267199999L, day0.getMiddleMillisecond());
//       assertEquals(31, day0.getDayOfMonth());
//       assertEquals(3, day0.getMonth());
//       assertEquals(41729L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals("q)Q'*CS:gGE*", timeSeries1.getRangeDescription());
//       assertEquals(1731.0918136016971, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals("q)Q'*CS:gGE*", timeSeries1.getDomainDescription());
//       assertEquals(1731.0918136016971, timeSeries1.getMinY(), 0.01D);
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1731.0918136016971, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
//       assertEquals(1731.0918136016971, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(59, minute0.getMinute());
//       assertEquals(1396310369999L, minute0.getMiddleMillisecond());
//       assertEquals(60091199L, minute0.getSerialIndex());
//       assertEquals(23, minute0.getHourValue());
//       assertEquals(1396310340000L, minute0.getFirstMillisecond());
//       assertEquals(1396310399999L, minute0.getLastMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(2015L, year1.getSerialIndex());
//       assertEquals(1435838399999L, year1.getMiddleMillisecond());
//       assertEquals(1451606399999L, year1.getLastMillisecond());
//       assertEquals(1420070400000L, year1.getFirstMillisecond());
//       assertEquals(2015, year1.getYear());
//       assertEquals("2015", year1.toString());
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(year0, year1);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(year1, year0);
//       assertNotNull(timeSeries1);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(year0.equals((Object)year1));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(year1.equals((Object)year0));
//   }

  @Test
  public void test09() {}
//   @Test
//   public void test09()  throws Throwable  {
//       long long0 = 15L;
//       String string0 = "";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, string0, string0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertNotNull(timeSeries0);
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertNotNull(fixedMillisecond0);
//       
//       FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.previous();
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getFirstMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281319L, fixedMillisecond1.getLastMillisecond());
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertNotNull(fixedMillisecond1);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       
//       timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) long0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(15.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(15.0, timeSeries0.getMaxY(), 0.01D);
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond1, (RegularTimePeriod) fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getFirstMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281319L, fixedMillisecond1.getLastMillisecond());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(15.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("", timeSeries1.getDomainDescription());
//       assertEquals("", timeSeries1.getRangeDescription());
//       assertEquals(15.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(15.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(15.0, timeSeries0.getMaxY(), 0.01D);
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotNull(timeSeries1);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//   }

  @Test
  public void test10() {}
//   @Test
//   public void test10()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertNotNull(quarter0);
//       
//       Year year0 = quarter0.getYear();
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertNotNull(year0);
//       
//       String string0 = "q)Q'*CS:gGE*";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, string0, string0);
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertNotNull(timeSeries0);
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) year0);
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals("q)Q'*CS:gGE*", timeSeries1.getRangeDescription());
//       assertEquals("q)Q'*CS:gGE*", timeSeries1.getDomainDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotNull(timeSeries1);
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//   }

  ////@Test
  public void test11()  throws Throwable  {
      int int0 = SwingConstants.RIGHT;
      assertEquals(4, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNotNull(timeSeries0);
      
      Quarter quarter0 = new Quarter(int0, int0);
      assertEquals((-62009539200001L), quarter0.getLastMillisecond());
      assertEquals((-62013513600001L), quarter0.getMiddleMillisecond());
      assertEquals(4, quarter0.getYearValue());
      assertEquals((-62017488000000L), quarter0.getFirstMillisecond());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(20L, quarter0.getSerialIndex());
      assertNotNull(quarter0);
      
      Quarter quarter1 = (Quarter)quarter0.next();
      assertEquals((-62009539200001L), quarter0.getLastMillisecond());
      assertEquals((-62013513600001L), quarter0.getMiddleMillisecond());
      assertEquals(4, quarter0.getYearValue());
      assertEquals((-62017488000000L), quarter0.getFirstMillisecond());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(20L, quarter0.getSerialIndex());
      assertEquals((-62001763200001L), quarter1.getLastMillisecond());
      assertEquals(1, quarter1.getQuarter());
      assertEquals((-62009539200000L), quarter1.getFirstMillisecond());
      assertEquals((-62005651200001L), quarter1.getMiddleMillisecond());
      assertEquals(5, quarter1.getYearValue());
      assertEquals(21L, quarter1.getSerialIndex());
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      assertNotNull(quarter1);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) quarter1, (RegularTimePeriod) quarter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
      }
  }

  @Test
  public void test12() {}
//   @Test
//   public void test12()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertNotNull(quarter0);
//       
//       String string0 = "q)QI*CS3gGE*";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, string0, string0);
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("q)QI*CS3gGE*", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("q)QI*CS3gGE*", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertNotNull(timeSeries0);
//       
//       Year year0 = null;
//       // Undeclared exception!
//       try {
//         TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) year0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'end' argument.
//          //
//       }
//   }

  @Test
  public void test13()  throws Throwable  {
      int int0 = ImageObserver.ABORT;
      assertEquals(128, int0);
      
      String string0 = "4e\"&Q'm[";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertEquals("4e\"&Q'm[", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("4e\"&Q'm[", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
      }
  }

  @Test
  public void test14() {}
//   @Test
//   public void test14()  throws Throwable  {
//       long long0 = 15L;
//       String string0 = "";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, string0, string0);
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertNotNull(timeSeries0);
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertNotNull(fixedMillisecond0);
//       
//       timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) long0);
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(15.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(15.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(15.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(15.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(15.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals("", timeSeries1.getRangeDescription());
//       assertEquals("", timeSeries1.getDomainDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(15.0, timeSeries1.getMinY(), 0.01D);
//       assertNull(timeSeries1.getDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotNull(timeSeries1);
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//   }

  @Test
  public void test15()  throws Throwable  {
      long long0 = 14L;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNotNull(timeSeries0);
      
      int int0 = 1020;
      int int1 = (-1258);
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = (-4735);
      boolean boolean0 = false;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNotNull(timeSeries0);
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = (-13);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertNotNull(timeSeries0);
      
      int int1 = (-1054);
      boolean boolean0 = true;
      // Undeclared exception!
      try {
        timeSeries0.delete(int0, int1, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test18() {}
//   @Test
//   public void test18()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertNotNull(quarter0);
//       
//       Year year0 = quarter0.getYear();
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(2014, year0.getYear());
//       assertNotNull(year0);
//       
//       Year year1 = (Year)year0.next();
//       assertEquals(2015L, year1.getSerialIndex());
//       assertEquals(2015, year1.getYear());
//       assertEquals(1451606399999L, year1.getLastMillisecond());
//       assertEquals(1420070400000L, year1.getFirstMillisecond());
//       assertEquals("2015", year1.toString());
//       assertEquals(1435838399999L, year1.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(2014, year0.getYear());
//       assertNotSame(year1, year0);
//       assertNotSame(year0, year1);
//       assertNotNull(year1);
//       assertFalse(year1.equals((Object)year0));
//       assertFalse(year0.equals((Object)year1));
//       
//       String string0 = "q)Q'*CS:gGE*";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, string0, string0);
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNotNull(timeSeries0);
//       
//       double double0 = 1731.0918136016971;
//       timeSeries0.add((RegularTimePeriod) year0, double0);
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1731.0918136016971, timeSeries0.getMinY(), 0.01D);
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
//       assertEquals(1731.0918136016971, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(2014, year0.getYear());
//       assertNotSame(year0, year1);
//       assertFalse(year0.equals((Object)year1));
//       
//       MockDate mockDate0 = (MockDate)quarter0.getEnd();
//       assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertNotNull(mockDate0);
//       
//       boolean boolean0 = false;
//       timeSeries0.add((RegularTimePeriod) year1, double0, boolean0);
//       assertEquals(2015L, year1.getSerialIndex());
//       assertEquals(2015, year1.getYear());
//       assertEquals(1451606399999L, year1.getLastMillisecond());
//       assertEquals(1420070400000L, year1.getFirstMillisecond());
//       assertEquals("2015", year1.toString());
//       assertEquals(1435838399999L, year1.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals(1731.0918136016971, timeSeries0.getMinY(), 0.01D);
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
//       assertEquals(1731.0918136016971, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(2014, year0.getYear());
//       assertNotSame(year1, year0);
//       assertNotSame(year0, year1);
//       assertFalse(year1.equals((Object)year0));
//       assertFalse(year0.equals((Object)year1));
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
//       assertEquals(1396310399999L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1396310399999L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1396310399999L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1396310399999L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertNotNull(fixedMillisecond0);
//       
//       timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
//       assertEquals(1396310399999L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1396310399999L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1396310399999L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1396310399999L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1731.0918136016971, timeSeries0.getMinY(), 0.01D);
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
//       assertEquals(1731.0918136016971, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//   }

  @Test
  public void test19() {}
//   @Test
//   public void test19()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       assertNotNull(quarter0);
//       
//       String string0 = "?g";
//       MockDate mockDate0 = (MockDate)quarter0.getEnd();
//       assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       assertNotNull(mockDate0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, string0, string0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("?g", timeSeries0.getRangeDescription());
//       assertEquals("?g", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       assertNotNull(timeSeries0);
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
//       assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       assertEquals(1396310399999L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1396310399999L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1396310399999L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1396310399999L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       assertNotNull(fixedMillisecond0);
//       
//       timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("?g", timeSeries0.getRangeDescription());
//       assertEquals("?g", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       assertEquals(1396310399999L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1396310399999L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1396310399999L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1396310399999L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//   }

  @Test
  public void test20() {}
//   @Test
//   public void test20()  throws Throwable  {
//       long long0 = 55L;
//       String string0 = "9";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, string0, string0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("9", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("9", timeSeries0.getDomainDescription());
//       assertNotNull(timeSeries0);
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertNotNull(fixedMillisecond0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) long0);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(55.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(55.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("9", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("9", timeSeries0.getDomainDescription());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertNull(timeSeriesDataItem0);
//       
//       timeSeries0.clear();
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("9", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("9", timeSeries0.getDomainDescription());
//   }

  @Test
  public void test21()  throws Throwable  {
      int int0 = (-13);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNotNull(timeSeries0);
      
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test
  public void test22()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      //  // Unstable assertion: assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310399999L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertNotNull(quarter0);
      
      Year year0 = quarter0.getYear();
      //  // Unstable assertion: assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310399999L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(year0);
      
      long long0 = year0.getSerialIndex();
      //  // Unstable assertion: assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310399999L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, long0);
      
      String string0 = "q)QI*CS3gGE*";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, string0, string0);
      //  // Unstable assertion: assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310399999L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("q)QI*CS3gGE*", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("q)QI*CS3gGE*", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      timeSeries0.add((RegularTimePeriod) year0, (double) long0);
      //  // Unstable assertion: assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310399999L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2014.0, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("q)QI*CS3gGE*", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("q)QI*CS3gGE*", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2014.0, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      int int0 = 0;
      boolean boolean0 = false;
      timeSeries0.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310399999L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("q)QI*CS3gGE*", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("q)QI*CS3gGE*", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
  }

  ////@Test
  public void test23()  throws Throwable  {
      int int0 = (-2118);
      Year year0 = new Year(int0);
      assertEquals(4733510399999L, year0.getLastMillisecond());
      assertEquals((-2118L), year0.getSerialIndex());
      assertEquals((-62136417600001L), year0.getMiddleMillisecond());
      assertEquals(-2118, year0.getYear());
      assertEquals((-129006345600000L), year0.getFirstMillisecond());
      assertEquals("-2118", year0.toString());
      assertNotNull(year0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertEquals(4733510399999L, year0.getLastMillisecond());
      assertEquals((-2118L), year0.getSerialIndex());
      assertEquals((-62136417600001L), year0.getMiddleMillisecond());
      assertEquals(-2118, year0.getYear());
      assertEquals((-129006345600000L), year0.getFirstMillisecond());
      assertEquals("-2118", year0.toString());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      boolean boolean0 = true;
      timeSeries0.add((RegularTimePeriod) year0, (double) int0, boolean0);
      assertEquals(4733510399999L, year0.getLastMillisecond());
      assertEquals((-2118L), year0.getSerialIndex());
      assertEquals((-62136417600001L), year0.getMiddleMillisecond());
      assertEquals(-2118, year0.getYear());
      assertEquals((-129006345600000L), year0.getFirstMillisecond());
      assertEquals("-2118", year0.toString());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals((-2118.0), timeSeries0.getMinY(), 0.01D);
      assertEquals((-2118.0), timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      timeSeries0.removeAgedItems((long) int0, boolean0);
      assertEquals(4733510399999L, year0.getLastMillisecond());
      assertEquals((-2118L), year0.getSerialIndex());
      assertEquals((-62136417600001L), year0.getMiddleMillisecond());
      assertEquals(-2118, year0.getYear());
      assertEquals((-129006345600000L), year0.getFirstMillisecond());
      assertEquals("-2118", year0.toString());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals((-2118.0), timeSeries0.getMinY(), 0.01D);
      assertEquals((-2118.0), timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test
  public void test24()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310399999L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertNotNull(quarter0);
      
      Year year0 = quarter0.getYear();
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310399999L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertNotNull(year0);
      
      String string0 = "q)Q'*CS:gGE*";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, string0, string0);
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310399999L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      double double0 = 1765.0;
      timeSeries0.add((RegularTimePeriod) year0, double0);
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310399999L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1765.0, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1765.0, timeSeries0.getMaxY(), 0.01D);
      
      int int0 = timeSeries0.hashCode();
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310399999L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1765.0, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1765.0, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals((-61583995), int0);
      
      boolean boolean0 = true;
      timeSeries0.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310399999L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, double0);
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310399999L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1765.0, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1765.0, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      timeSeries0.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310399999L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
  }

  @Test
  public void test25() {}
//   @Test
//   public void test25()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertNotNull(quarter0);
//       
//       String string0 = "?g";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, string0, string0);
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("?g", timeSeries0.getRangeDescription());
//       assertEquals("?g", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNotNull(timeSeries0);
//       
//       int int0 = timeSeries0.hashCode();
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("?g", timeSeries0.getRangeDescription());
//       assertEquals("?g", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals((-48346837), int0);
//       
//       boolean boolean0 = false;
//       timeSeries0.removeAgedItems((long) int0, boolean0);
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("?g", timeSeries0.getRangeDescription());
//       assertEquals("?g", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//   }

  @Test
  public void test26() {}
//   @Test
//   public void test26()  throws Throwable  {
//       long long0 = 0L;
//       String string0 = "\",C/$+*iRI~6t:";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, string0, string0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("\",C/$+*iRI~6t:", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("\",C/$+*iRI~6t:", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNotNull(timeSeries0);
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertNotNull(fixedMillisecond0);
//       
//       timeSeries0.setMaximumItemAge(long0);
//       assertEquals(0L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("\",C/$+*iRI~6t:", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("\",C/$+*iRI~6t:", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.previous();
//       assertEquals(1392409281319L, fixedMillisecond1.getLastMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281319L, fixedMillisecond1.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotNull(fixedMillisecond1);
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       
//       timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) long0);
//       assertEquals(0L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("\",C/$+*iRI~6t:", timeSeries0.getRangeDescription());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("\",C/$+*iRI~6t:", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       
//       boolean boolean0 = false;
//       timeSeries0.add((RegularTimePeriod) fixedMillisecond1, (Number) long0, boolean0);
//       assertEquals(0L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("\",C/$+*iRI~6t:", timeSeries0.getRangeDescription());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("\",C/$+*iRI~6t:", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1392409281319L, fixedMillisecond1.getLastMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281319L, fixedMillisecond1.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//   }

  @Test
  public void test27() {}
//   @Test
//   public void test27()  throws Throwable  {
//       int int0 = 0;
//       String string0 = ";?I\\rk/:WOD1kc}&xl";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(";?I\\rk/:WOD1kc}&xl", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(";?I\\rk/:WOD1kc}&xl", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNotNull(timeSeries0);
//       
//       Day day0 = new Day();
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertNotNull(day0);
//       
//       double double0 = timeSeries0.getMinY();
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(";?I\\rk/:WOD1kc}&xl", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(";?I\\rk/:WOD1kc}&xl", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, double0, 0.01D);
//       
//       timeSeries0.setMaximumItemCount(int0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(";?I\\rk/:WOD1kc}&xl", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(";?I\\rk/:WOD1kc}&xl", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, double0);
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(";?I\\rk/:WOD1kc}&xl", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(";?I\\rk/:WOD1kc}&xl", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeriesDataItem0);
//   }

  @Test
  public void test28() {}
//   @Test
//   public void test28()  throws Throwable  {
//       int int0 = 1;
//       String string0 = "-xFu|o^BBc$sk!L^";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
//       assertEquals("-xFu|o^BBc$sk!L^", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("-xFu|o^BBc$sk!L^", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertNotNull(timeSeries0);
//       
//       Day day0 = new Day();
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertNotNull(day0);
//       
//       double double0 = timeSeries0.getMinY();
//       assertEquals("-xFu|o^BBc$sk!L^", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("-xFu|o^BBc$sk!L^", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, double0, 0.01D);
//       
//       timeSeries0.add((RegularTimePeriod) day0, (Number) double0);
//       assertEquals("-xFu|o^BBc$sk!L^", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("-xFu|o^BBc$sk!L^", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) int0);
//       assertEquals("-xFu|o^BBc$sk!L^", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("-xFu|o^BBc$sk!L^", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1.0, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertNotNull(timeSeriesDataItem0);
//   }

  @Test
  public void test29() {}
//   @Test
//   public void test29()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       assertNotNull(quarter0);
//       
//       Year year0 = quarter0.getYear();
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals("2014", year0.toString());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertNotNull(year0);
//       
//       long long0 = year0.getSerialIndex();
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals("2014", year0.toString());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014L, long0);
//       
//       String string0 = "q)QI*CS3gGE*";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, string0, string0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("q)QI*CS3gGE*", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("q)QI*CS3gGE*", timeSeries0.getRangeDescription());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       assertNotNull(timeSeries0);
//       
//       double double0 = 1771.3602241174567;
//       timeSeries0.add((RegularTimePeriod) year0, double0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1771.3602241174567, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1771.3602241174567, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("q)QI*CS3gGE*", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("q)QI*CS3gGE*", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals("2014", year0.toString());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       
//       int int0 = 0;
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(int0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1771.3602241174567, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1771.3602241174567, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("q)QI*CS3gGE*", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("q)QI*CS3gGE*", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertNotNull(timeSeriesDataItem0);
//       
//       timeSeriesDataItem0.setValue((Number) long0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1771.3602241174567, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1771.3602241174567, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("q)QI*CS3gGE*", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("q)QI*CS3gGE*", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals("2014", year0.toString());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       
//       TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2014.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2014.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("q)QI*CS3gGE*", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("q)QI*CS3gGE*", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(2014.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(2014.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotNull(timeSeries1);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//   }

  @Test
  public void test30() {}
//   @Test
//   public void test30()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertNotNull(quarter0);
//       
//       Year year0 = quarter0.getYear();
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       assertEquals("2014", year0.toString());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertNotNull(year0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       assertEquals("2014", year0.toString());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNotNull(timeSeries0);
//       
//       Number number0 = null;
//       timeSeries0.add((RegularTimePeriod) year0, number0);
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       assertEquals("2014", year0.toString());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, number0);
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       assertEquals("2014", year0.toString());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertNotNull(timeSeriesDataItem0);
//       
//       TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(false, timeSeriesDataItem1.isSelected());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       assertEquals("2014", year0.toString());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNotSame(timeSeriesDataItem1, timeSeriesDataItem0);
//       assertNotSame(timeSeriesDataItem0, timeSeriesDataItem1);
//       assertNotNull(timeSeriesDataItem1);
//       assertTrue(timeSeriesDataItem1.equals((Object)timeSeriesDataItem0));
//       assertTrue(timeSeriesDataItem0.equals((Object)timeSeriesDataItem1));
//   }

  @Test
  public void test31() {}
//   @Test
//   public void test31()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertNotNull(quarter0);
//       
//       Year year0 = quarter0.getYear();
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertNotNull(year0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertNotNull(timeSeries0);
//       
//       Number number0 = null;
//       timeSeries0.add((RegularTimePeriod) year0, number0);
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       
//       MockDate mockDate0 = (MockDate)quarter0.getEnd();
//       assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertNotNull(mockDate0);
//       
//       Minute minute0 = new Minute((Date) mockDate0);
//       assertEquals(1396310340000L, minute0.getFirstMillisecond());
//       assertEquals(1396310369999L, minute0.getMiddleMillisecond());
//       assertEquals(23, minute0.getHourValue());
//       assertEquals(59, minute0.getMinute());
//       assertEquals(1396310399999L, minute0.getLastMillisecond());
//       assertEquals(60091199L, minute0.getSerialIndex());
//       assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertNotNull(minute0);
//       
//       Day day0 = minute0.getDay();
//       assertEquals(1396310340000L, minute0.getFirstMillisecond());
//       assertEquals(1396310369999L, minute0.getMiddleMillisecond());
//       assertEquals(23, minute0.getHourValue());
//       assertEquals(59, minute0.getMinute());
//       assertEquals(1396310399999L, minute0.getLastMillisecond());
//       assertEquals(60091199L, minute0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1396310399999L, day0.getLastMillisecond());
//       assertEquals(1396267199999L, day0.getMiddleMillisecond());
//       assertEquals(3, day0.getMonth());
//       assertEquals(31, day0.getDayOfMonth());
//       assertEquals(41729L, day0.getSerialIndex());
//       assertEquals(1396224000000L, day0.getFirstMillisecond());
//       assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertNotNull(day0);
//       
//       int int0 = timeSeries0.getIndex((RegularTimePeriod) minute0);
//       assertEquals(1396310340000L, minute0.getFirstMillisecond());
//       assertEquals(1396310369999L, minute0.getMiddleMillisecond());
//       assertEquals(23, minute0.getHourValue());
//       assertEquals(59, minute0.getMinute());
//       assertEquals(1396310399999L, minute0.getLastMillisecond());
//       assertEquals(60091199L, minute0.getSerialIndex());
//       assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(0, int0);
//       
//       // Undeclared exception!
//       try {
//         TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) int0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // You are trying to add data where the time period class is org.jfree.data.time.Day, but the TimeSeries is expecting an instance of org.jfree.data.time.Year.
//          //
//       }
//   }

  ////@Test
  public void test32()  throws Throwable  {
      int int0 = 1693;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(int0);
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(8, spreadsheetDate0.getMonth());
      assertEquals(1693, spreadsheetDate0.toSerial());
      assertEquals(19, spreadsheetDate0.getDayOfMonth());
      assertEquals(1904, spreadsheetDate0.getYYYY());
      assertNotNull(spreadsheetDate0);
      
      Date date0 = spreadsheetDate0.toDate();
      assertEquals("Fri Aug 19 00:00:00 GMT 1904", date0.toString());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(8, spreadsheetDate0.getMonth());
      assertEquals(1693, spreadsheetDate0.toSerial());
      assertEquals(19, spreadsheetDate0.getDayOfMonth());
      assertEquals(1904, spreadsheetDate0.getYYYY());
      assertNotNull(date0);
      
      Month month0 = new Month(date0);
      assertEquals("Fri Aug 19 00:00:00 GMT 1904", date0.toString());
      assertEquals((-2061763200001L), month0.getLastMillisecond());
      assertEquals(8, month0.getMonth());
      assertEquals(1904, month0.getYearValue());
      assertEquals((-2063102400001L), month0.getMiddleMillisecond());
      assertEquals(22856L, month0.getSerialIndex());
      assertEquals((-2064441600000L), month0.getFirstMillisecond());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(8, spreadsheetDate0.getMonth());
      assertEquals(1693, spreadsheetDate0.toSerial());
      assertEquals(19, spreadsheetDate0.getDayOfMonth());
      assertEquals(1904, spreadsheetDate0.getYYYY());
      assertNotNull(month0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0);
      assertEquals("Fri Aug 19 00:00:00 GMT 1904", date0.toString());
      assertEquals((-2061763200001L), month0.getLastMillisecond());
      assertEquals(8, month0.getMonth());
      assertEquals(1904, month0.getYearValue());
      assertEquals((-2063102400001L), month0.getMiddleMillisecond());
      assertEquals(22856L, month0.getSerialIndex());
      assertEquals((-2064441600000L), month0.getFirstMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(8, spreadsheetDate0.getMonth());
      assertEquals(1693, spreadsheetDate0.toSerial());
      assertEquals(19, spreadsheetDate0.getDayOfMonth());
      assertEquals(1904, spreadsheetDate0.getYYYY());
      assertNotNull(timeSeries0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, (Number) int0);
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertEquals("Fri Aug 19 00:00:00 GMT 1904", date0.toString());
      assertEquals((-2061763200001L), month0.getLastMillisecond());
      assertEquals(8, month0.getMonth());
      assertEquals(1904, month0.getYearValue());
      assertEquals((-2063102400001L), month0.getMiddleMillisecond());
      assertEquals(22856L, month0.getSerialIndex());
      assertEquals((-2064441600000L), month0.getFirstMillisecond());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(8, spreadsheetDate0.getMonth());
      assertEquals(1693, spreadsheetDate0.toSerial());
      assertEquals(19, spreadsheetDate0.getDayOfMonth());
      assertEquals(1904, spreadsheetDate0.getYYYY());
      assertNotNull(timeSeriesDataItem0);
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertEquals("Fri Aug 19 00:00:00 GMT 1904", date0.toString());
      assertEquals((-2061763200001L), month0.getLastMillisecond());
      assertEquals(8, month0.getMonth());
      assertEquals(1904, month0.getYearValue());
      assertEquals((-2063102400001L), month0.getMiddleMillisecond());
      assertEquals(22856L, month0.getSerialIndex());
      assertEquals((-2064441600000L), month0.getFirstMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1693.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1693.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(8, spreadsheetDate0.getMonth());
      assertEquals(1693, spreadsheetDate0.toSerial());
      assertEquals(19, spreadsheetDate0.getDayOfMonth());
      assertEquals(1904, spreadsheetDate0.getYYYY());
      assertNull(timeSeriesDataItem1);
      
      // Undeclared exception!
      try {
        TimeSeriesDataItem timeSeriesDataItem2 = timeSeries0.addOrUpdate(timeSeriesDataItem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test33() {}
//   @Test
//   public void test33()  throws Throwable  {
//       long long0 = 55L;
//       String string0 = "9";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, string0, string0);
//       assertEquals("9", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("9", timeSeries0.getDomainDescription());
//       assertNotNull(timeSeries0);
//       
//       int int0 = 45;
//       TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
//       assertNull(timeSeries1.getDescription());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals("9", timeSeries1.getRangeDescription());
//       assertEquals("9", timeSeries1.getDomainDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals("9", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("9", timeSeries0.getDomainDescription());
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotNull(timeSeries1);
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertNotNull(fixedMillisecond0);
//       
//       timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) int0);
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals("9", timeSeries0.getRangeDescription());
//       assertEquals(45.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(45.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("9", timeSeries0.getDomainDescription());
//       assertNotSame(timeSeries0, timeSeries1);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       
//       TimeSeries timeSeries2 = timeSeries1.addAndOrUpdate(timeSeries0);
//       assertEquals(false, timeSeries1.isEmpty());
//       assertNull(timeSeries1.getDescription());
//       assertEquals("9", timeSeries1.getRangeDescription());
//       assertEquals("9", timeSeries1.getDomainDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(45.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(45.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries2.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
//       assertEquals(0, timeSeries2.getItemCount());
//       assertEquals(2147483647, timeSeries2.getMaximumItemCount());
//       assertEquals(true, timeSeries2.getNotify());
//       assertNull(timeSeries2.getDescription());
//       assertEquals("Time", timeSeries2.getDomainDescription());
//       assertEquals("Value", timeSeries2.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries2.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries2.getMaxY(), 0.01D);
//       assertEquals("9", timeSeries0.getRangeDescription());
//       assertEquals(45.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(45.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("9", timeSeries0.getDomainDescription());
//       assertNotSame(timeSeries1, timeSeries2);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries2, timeSeries1);
//       assertNotSame(timeSeries2, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries0, timeSeries2);
//       assertNotNull(timeSeries2);
//       assertFalse(timeSeries1.equals((Object)timeSeries2));
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries2.equals((Object)timeSeries1));
//       assertFalse(timeSeries2.equals((Object)timeSeries0));
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries0.equals((Object)timeSeries2));
//   }

  @Test
  public void test34() {}
//   @Test
//   public void test34()  throws Throwable  {
//       int int0 = (-2045);
//       Year year0 = new Year(int0);
//       assertEquals((-62136374400001L), year0.getMiddleMillisecond());
//       assertEquals((-126702662400000L), year0.getFirstMillisecond());
//       assertEquals(2429913599999L, year0.getLastMillisecond());
//       assertEquals(-2045, year0.getYear());
//       assertEquals("-2045", year0.toString());
//       assertEquals((-2045L), year0.getSerialIndex());
//       assertNotNull(year0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals((-62136374400001L), year0.getMiddleMillisecond());
//       assertEquals((-126702662400000L), year0.getFirstMillisecond());
//       assertEquals(2429913599999L, year0.getLastMillisecond());
//       assertEquals(-2045, year0.getYear());
//       assertEquals("-2045", year0.toString());
//       assertEquals((-2045L), year0.getSerialIndex());
//       assertNotNull(timeSeries0);
//       
//       boolean boolean0 = true;
//       timeSeries0.add((RegularTimePeriod) year0, (double) int0, boolean0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals((-2045.0), timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals((-2045.0), timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals((-62136374400001L), year0.getMiddleMillisecond());
//       assertEquals((-126702662400000L), year0.getFirstMillisecond());
//       assertEquals(2429913599999L, year0.getLastMillisecond());
//       assertEquals(-2045, year0.getYear());
//       assertEquals("-2045", year0.toString());
//       assertEquals((-2045L), year0.getSerialIndex());
//       
//       Week week0 = new Week();
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(7, week0.getWeek());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertNotNull(week0);
//       
//       Year year1 = week0.getYear();
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(7, week0.getWeek());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(2014, year1.getYear());
//       assertEquals(2014L, year1.getSerialIndex());
//       assertEquals("2014", year1.toString());
//       assertEquals(1420070399999L, year1.getLastMillisecond());
//       assertEquals(1388534400000L, year1.getFirstMillisecond());
//       assertEquals(1404302399999L, year1.getMiddleMillisecond());
//       assertNotSame(year1, year0);
//       assertNotNull(year1);
//       assertFalse(year1.equals((Object)year0));
//       
//       double double0 = (-2.147483648E9);
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year1, double0);
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(7, week0.getWeek());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals((-2045.0), timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals((-2.147483648E9), timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals((-62136374400001L), year0.getMiddleMillisecond());
//       assertEquals((-126702662400000L), year0.getFirstMillisecond());
//       assertEquals(2429913599999L, year0.getLastMillisecond());
//       assertEquals(-2045, year0.getYear());
//       assertEquals("-2045", year0.toString());
//       assertEquals((-2045L), year0.getSerialIndex());
//       assertEquals(2014, year1.getYear());
//       assertEquals(2014L, year1.getSerialIndex());
//       assertEquals("2014", year1.toString());
//       assertEquals(1420070399999L, year1.getLastMillisecond());
//       assertEquals(1388534400000L, year1.getFirstMillisecond());
//       assertEquals(1404302399999L, year1.getMiddleMillisecond());
//       assertNotSame(year0, year1);
//       assertNotSame(year1, year0);
//       assertNull(timeSeriesDataItem0);
//       assertFalse(year0.equals((Object)year1));
//       assertFalse(year1.equals((Object)year0));
//       
//       timeSeries0.update((RegularTimePeriod) year0, (Number) int0);
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals((-2045.0), timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals((-2.147483648E9), timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals((-62136374400001L), year0.getMiddleMillisecond());
//       assertEquals((-126702662400000L), year0.getFirstMillisecond());
//       assertEquals(2429913599999L, year0.getLastMillisecond());
//       assertEquals(-2045, year0.getYear());
//       assertEquals("-2045", year0.toString());
//       assertEquals((-2045L), year0.getSerialIndex());
//       assertNotSame(year0, year1);
//       assertFalse(year0.equals((Object)year1));
//   }

  @Test
  public void test35() {}
//   @Test
//   public void test35()  throws Throwable  {
//       int int0 = 1;
//       String string0 = "-xFu|o^BBc$sk!L^";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("-xFu|o^BBc$sk!L^", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("-xFu|o^BBc$sk!L^", timeSeries0.getDomainDescription());
//       assertNotNull(timeSeries0);
//       
//       Day day0 = new Day();
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertNotNull(day0);
//       
//       double double0 = timeSeries0.getMinY();
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("-xFu|o^BBc$sk!L^", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("-xFu|o^BBc$sk!L^", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, double0, 0.01D);
//       
//       timeSeries0.add((RegularTimePeriod) day0, (Number) double0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("-xFu|o^BBc$sk!L^", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("-xFu|o^BBc$sk!L^", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       
//       timeSeries0.update((RegularTimePeriod) day0, (Number) double0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("-xFu|o^BBc$sk!L^", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("-xFu|o^BBc$sk!L^", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//   }

  ////@Test
  public void test36()  throws Throwable  {
      int int0 = (-2045);
      Year year0 = new Year(int0);
      assertEquals((-62136374400001L), year0.getMiddleMillisecond());
      assertEquals(-2045, year0.getYear());
      assertEquals(2429913599999L, year0.getLastMillisecond());
      assertEquals("-2045", year0.toString());
      assertEquals((-2045L), year0.getSerialIndex());
      assertEquals((-126702662400000L), year0.getFirstMillisecond());
      assertNotNull(year0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals((-62136374400001L), year0.getMiddleMillisecond());
      assertEquals(-2045, year0.getYear());
      assertEquals(2429913599999L, year0.getLastMillisecond());
      assertEquals("-2045", year0.toString());
      assertEquals((-2045L), year0.getSerialIndex());
      assertEquals((-126702662400000L), year0.getFirstMillisecond());
      assertNotNull(timeSeries0);
      
      boolean boolean0 = true;
      timeSeries0.add((RegularTimePeriod) year0, (double) int0, boolean0);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals((-2045.0), timeSeries0.getMinY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals((-2045.0), timeSeries0.getMaxY(), 0.01D);
      assertEquals((-62136374400001L), year0.getMiddleMillisecond());
      assertEquals(-2045, year0.getYear());
      assertEquals(2429913599999L, year0.getLastMillisecond());
      assertEquals("-2045", year0.toString());
      assertEquals((-2045L), year0.getSerialIndex());
      assertEquals((-126702662400000L), year0.getFirstMillisecond());
      
      timeSeries0.update((RegularTimePeriod) year0, (Number) int0);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals((-2045.0), timeSeries0.getMinY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals((-2045.0), timeSeries0.getMaxY(), 0.01D);
      assertEquals((-62136374400001L), year0.getMiddleMillisecond());
      assertEquals(-2045, year0.getYear());
      assertEquals(2429913599999L, year0.getLastMillisecond());
      assertEquals("-2045", year0.toString());
      assertEquals((-2045L), year0.getSerialIndex());
      assertEquals((-126702662400000L), year0.getFirstMillisecond());
  }

  ////@Test
  public void test37()  throws Throwable  {
      int int0 = 93;
      Week week0 = new Week(int0, int0);
      assertEquals(93, week0.getWeek());
      assertEquals(93, week0.getYearValue());
      assertEquals((-59176310400001L), week0.getLastMillisecond());
      assertEquals((-59176612800001L), week0.getMiddleMillisecond());
      assertEquals((-59176915200000L), week0.getFirstMillisecond());
      assertEquals(5022L, week0.getSerialIndex());
      assertNotNull(week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      assertEquals(93, week0.getWeek());
      assertEquals(93, week0.getYearValue());
      assertEquals((-59176310400001L), week0.getLastMillisecond());
      assertEquals((-59176612800001L), week0.getMiddleMillisecond());
      assertEquals((-59176915200000L), week0.getFirstMillisecond());
      assertEquals(5022L, week0.getSerialIndex());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      // Undeclared exception!
      try {
        timeSeries0.update((RegularTimePeriod) week0, (Number) int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no existing value for the specified 'period'.
         //
      }
  }

  @Test
  public void test38() {}
//   @Test
//   public void test38()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertNotNull(quarter0);
//       
//       Year year0 = quarter0.getYear();
//       assertEquals(2014, year0.getYear());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertNotNull(year0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
//       assertEquals(2014, year0.getYear());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertNotNull(timeSeries0);
//       
//       Number number0 = null;
//       timeSeries0.add((RegularTimePeriod) year0, number0);
//       assertEquals(2014, year0.getYear());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       
//       timeSeries0.update((RegularTimePeriod) quarter0, number0);
//       assertEquals(2014, year0.getYear());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//   }

  @Test
  public void test39() {}
//   @Test
//   public void test39()  throws Throwable  {
//       int int0 = 0;
//       String string0 = ";?I\\rk/:WOD1kc}&xl";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
//       assertEquals(";?I\\rk/:WOD1kc}&xl", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(";?I\\rk/:WOD1kc}&xl", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNotNull(timeSeries0);
//       
//       Day day0 = new Day();
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertNotNull(day0);
//       
//       boolean boolean0 = true;
//       timeSeries0.setMaximumItemCount(int0);
//       assertEquals(";?I\\rk/:WOD1kc}&xl", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(";?I\\rk/:WOD1kc}&xl", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       
//       timeSeries0.add((RegularTimePeriod) day0, (double) int0, boolean0);
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(";?I\\rk/:WOD1kc}&xl", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(";?I\\rk/:WOD1kc}&xl", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//   }

  @Test
  public void test40() {}
//   @Test
//   public void test40()  throws Throwable  {
//       long long0 = 0L;
//       String string0 = "\",C/$+*iRI~6t:";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, string0, string0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("\",C/$+*iRI~6t:", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("\",C/$+*iRI~6t:", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertNotNull(timeSeries0);
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertNotNull(fixedMillisecond0);
//       
//       timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) long0);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("\",C/$+*iRI~6t:", timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("\",C/$+*iRI~6t:", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       
//       boolean boolean0 = false;
//       // Undeclared exception!
//       try {
//         timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) long0, boolean0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
//          //
//       }
//   }

  @Test
  public void test41() {}
//   @Test
//   public void test41()  throws Throwable  {
//       Minute minute0 = new Minute();
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertNotNull(minute0);
//       
//       Hour hour0 = minute0.getHour();
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertNotNull(hour0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertNotNull(timeSeries0);
//       
//       Month month0 = new Month();
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertNotNull(month0);
//       
//       MockDate mockDate0 = (MockDate)month0.getEnd();
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals("Fri Feb 28 23:59:59 GMT 2014", mockDate0.toString());
//       assertNotNull(mockDate0);
//       
//       Year year0 = new Year((Date) mockDate0);
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals("Fri Feb 28 23:59:59 GMT 2014", mockDate0.toString());
//       assertNotNull(year0);
//       
//       int int0 = timeSeries0.getMaximumItemCount();
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(Integer.MAX_VALUE, int0);
//       
//       boolean boolean0 = false;
//       timeSeries0.add((RegularTimePeriod) hour0, (Number) int0, boolean0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2.147483647E9, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(2.147483647E9, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.add((RegularTimePeriod) year0, (double) int0, boolean0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Hour.
//          //
//       }
//   }

  @Test
  public void test42() {}
//   @Test
//   public void test42()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertNotNull(quarter0);
//       
//       Year year0 = quarter0.getYear();
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertNotNull(year0);
//       
//       long long0 = year0.getSerialIndex();
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(2014L, long0);
//       
//       String string0 = "q)Q'*CS:gGE*";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, string0, string0);
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNotNull(timeSeries0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) long0);
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2014.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2014.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertNull(timeSeriesDataItem0);
//       
//       boolean boolean0 = false;
//       // Undeclared exception!
//       try {
//         timeSeries0.add(timeSeriesDataItem0, boolean0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'item' argument.
//          //
//       }
//   }

  @Test
  public void test43() {}
//   @Test
//   public void test43()  throws Throwable  {
//       long long0 = 55L;
//       String string0 = "9";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, string0, string0);
//       assertEquals("9", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("9", timeSeries0.getRangeDescription());
//       assertNotNull(timeSeries0);
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertNotNull(fixedMillisecond0);
//       
//       Number number0 = timeSeries0.getValue((RegularTimePeriod) fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals("9", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("9", timeSeries0.getRangeDescription());
//       assertNull(number0);
//   }

  ////@Test
  public void test44()  throws Throwable  {
      int int0 = (-2040);
      Year year0 = new Year(int0);
      assertEquals((-62136374400001L), year0.getMiddleMillisecond());
      assertEquals(2272147199999L, year0.getLastMillisecond());
      assertEquals((-2040L), year0.getSerialIndex());
      assertEquals("-2040", year0.toString());
      assertEquals(-2040, year0.getYear());
      assertEquals((-126544896000000L), year0.getFirstMillisecond());
      assertNotNull(year0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals((-62136374400001L), year0.getMiddleMillisecond());
      assertEquals(2272147199999L, year0.getLastMillisecond());
      assertEquals((-2040L), year0.getSerialIndex());
      assertEquals("-2040", year0.toString());
      assertEquals(-2040, year0.getYear());
      assertEquals((-126544896000000L), year0.getFirstMillisecond());
      assertNotNull(timeSeries0);
      
      Year year1 = null;
      // Undeclared exception!
      try {
        int int1 = timeSeries0.getIndex((RegularTimePeriod) year1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test45() {}
//   @Test
//   public void test45()  throws Throwable  {
//       long long0 = 55L;
//       String string0 = "9";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, string0, string0);
//       assertEquals("9", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("9", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNotNull(timeSeries0);
//       
//       int int0 = 45;
//       TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals("9", timeSeries1.getDomainDescription());
//       assertEquals("9", timeSeries1.getRangeDescription());
//       assertEquals("9", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("9", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotNull(timeSeries1);
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertNotNull(fixedMillisecond0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries1.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) long0);
//       assertEquals(true, timeSeries1.getNotify());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(55.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals("9", timeSeries1.getDomainDescription());
//       assertEquals("9", timeSeries1.getRangeDescription());
//       assertEquals(55.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals("9", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("9", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNull(timeSeriesDataItem0);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       
//       Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
//       assertEquals(true, timeSeries1.getNotify());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(55.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals("9", timeSeries1.getDomainDescription());
//       assertEquals("9", timeSeries1.getRangeDescription());
//       assertEquals(55.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals("9", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("9", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotNull(collection0);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//   }

  @Test
  public void test46() {}
//   @Test
//   public void test46()  throws Throwable  {
//       long long0 = 0L;
//       String string0 = "\",C/$+*iRI~6t:";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, string0, string0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("\",C/$+*iRI~6t:", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("\",C/$+*iRI~6t:", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNotNull(timeSeries0);
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertNotNull(fixedMillisecond0);
//       
//       timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) long0);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("\",C/$+*iRI~6t:", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("\",C/$+*iRI~6t:", timeSeries0.getDomainDescription());
//       
//       Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("\",C/$+*iRI~6t:", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("\",C/$+*iRI~6t:", timeSeries0.getDomainDescription());
//       assertNotNull(collection0);
//   }

  ////@Test
  public void test47()  throws Throwable  {
      int int0 = (-2045);
      Year year0 = new Year(int0);
      assertEquals((-2045L), year0.getSerialIndex());
      assertEquals((-62136374400001L), year0.getMiddleMillisecond());
      assertEquals(2429913599999L, year0.getLastMillisecond());
      assertEquals("-2045", year0.toString());
      assertEquals((-126702662400000L), year0.getFirstMillisecond());
      assertEquals(-2045, year0.getYear());
      assertNotNull(year0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals((-2045L), year0.getSerialIndex());
      assertEquals((-62136374400001L), year0.getMiddleMillisecond());
      assertEquals(2429913599999L, year0.getLastMillisecond());
      assertEquals("-2045", year0.toString());
      assertEquals((-126702662400000L), year0.getFirstMillisecond());
      assertEquals(-2045, year0.getYear());
      assertNotNull(timeSeries0);
      
      boolean boolean0 = true;
      timeSeries0.add((RegularTimePeriod) year0, (double) int0, boolean0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals((-2045.0), timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals((-2045.0), timeSeries0.getMinY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals((-2045L), year0.getSerialIndex());
      assertEquals((-62136374400001L), year0.getMiddleMillisecond());
      assertEquals(2429913599999L, year0.getLastMillisecond());
      assertEquals("-2045", year0.toString());
      assertEquals((-126702662400000L), year0.getFirstMillisecond());
      assertEquals(-2045, year0.getYear());
      
      Collection collection0 = timeSeries0.getTimePeriods();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals((-2045.0), timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals((-2045.0), timeSeries0.getMinY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals((-2045L), year0.getSerialIndex());
      assertEquals((-62136374400001L), year0.getMiddleMillisecond());
      assertEquals(2429913599999L, year0.getLastMillisecond());
      assertEquals("-2045", year0.toString());
      assertEquals((-126702662400000L), year0.getFirstMillisecond());
      assertEquals(-2045, year0.getYear());
      assertNotNull(collection0);
  }

  @Test
  public void test48() {}
//   @Test
//   public void test48()  throws Throwable  {
//       int int0 = 0;
//       String string0 = ";?I\\rk/:WOD1kc}&xl";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(";?I\\rk/:WOD1kc}&xl", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(";?I\\rk/:WOD1kc}&xl", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNotNull(timeSeries0);
//       
//       Day day0 = new Day();
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertNotNull(day0);
//       
//       double double0 = timeSeries0.getMinY();
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(";?I\\rk/:WOD1kc}&xl", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(";?I\\rk/:WOD1kc}&xl", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, double0, 0.01D);
//       
//       timeSeries0.add((RegularTimePeriod) day0, (Number) double0);
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(";?I\\rk/:WOD1kc}&xl", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(";?I\\rk/:WOD1kc}&xl", timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(day0);
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(";?I\\rk/:WOD1kc}&xl", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(";?I\\rk/:WOD1kc}&xl", timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNotNull(timeSeriesDataItem0);
//   }

  @Test
  public void test49() {}
//   @Test
//   public void test49()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertNotNull(quarter0);
//       
//       Year year0 = quarter0.getYear();
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertNotNull(year0);
//       
//       String string0 = "q)QI*CS3gGE*";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, string0, string0);
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("q)QI*CS3gGE*", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("q)QI*CS3gGE*", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertNotNull(timeSeries0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(year0);
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("q)QI*CS3gGE*", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("q)QI*CS3gGE*", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertNull(timeSeriesDataItem0);
//   }

  @Test
  public void test50() {}
//   @Test
//   public void test50()  throws Throwable  {
//       long long0 = 0L;
//       String string0 = "\",C/$+*iRI~6t:";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, string0, string0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("\",C/$+*iRI~6t:", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("\",C/$+*iRI~6t:", timeSeries0.getDomainDescription());
//       assertNotNull(timeSeries0);
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertNotNull(fixedMillisecond0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("\",C/$+*iRI~6t:", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("\",C/$+*iRI~6t:", timeSeries0.getDomainDescription());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertNull(timeSeriesDataItem0);
//   }

  @Test
  public void test51() {}
//   @Test
//   public void test51()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertNotNull(quarter0);
//       
//       String string0 = "q)Q'*CS:gGE*";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, string0, string0);
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNotNull(timeSeries0);
//       
//       int int0 = timeSeries0.hashCode();
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals((-2198435), int0);
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.setMaximumItemAge((long) int0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Negative 'periods' argument.
//          //
//       }
//   }

  @Test
  public void test52() {}
//   @Test
//   public void test52()  throws Throwable  {
//       Month month0 = new Month();
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertNotNull(month0);
//       
//       String string0 = "[~C{3rk$zgx<hp@H";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, string0, string0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("[~C{3rk$zgx<hp@H", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("[~C{3rk$zgx<hp@H", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertNotNull(timeSeries0);
//       
//       int int0 = (-1877);
//       // Undeclared exception!
//       try {
//         timeSeries0.setMaximumItemCount(int0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Negative 'maximum' argument.
//          //
//       }
//   }

  @Test
  public void test53() {}
//   @Test
//   public void test53()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertNotNull(quarter0);
//       
//       Year year0 = quarter0.getYear();
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertNotNull(year0);
//       
//       long long0 = year0.getSerialIndex();
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014L, long0);
//       
//       String string0 = "q)Q'*CS:gGE*";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, string0, string0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertNotNull(timeSeries0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) long0);
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2014.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2014.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertNull(timeSeriesDataItem0);
//       
//       Double double0 = (Double)timeSeries0.getValue((RegularTimePeriod) quarter0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2014.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2014.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014.0, (double)double0, 0.01D);
//   }

  ////@Test
  public void test54()  throws Throwable  {
      int int0 = (-2045);
      Year year0 = new Year(int0);
      assertEquals((-126702662400000L), year0.getFirstMillisecond());
      assertEquals((-62136374400001L), year0.getMiddleMillisecond());
      assertEquals((-2045L), year0.getSerialIndex());
      assertEquals("-2045", year0.toString());
      assertEquals(2429913599999L, year0.getLastMillisecond());
      assertEquals(-2045, year0.getYear());
      assertNotNull(year0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals((-126702662400000L), year0.getFirstMillisecond());
      assertEquals((-62136374400001L), year0.getMiddleMillisecond());
      assertEquals((-2045L), year0.getSerialIndex());
      assertEquals("-2045", year0.toString());
      assertEquals(2429913599999L, year0.getLastMillisecond());
      assertEquals(-2045, year0.getYear());
      assertNotNull(timeSeries0);
      
      // Undeclared exception!
      try {
        RegularTimePeriod regularTimePeriod0 = timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test55()  throws Throwable  {
      int int0 = (-13);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      List list0 = timeSeries0.getItems();
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test56() {}
//   @Test
//   public void test56()  throws Throwable  {
//       Minute minute0 = new Minute();
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertNotNull(minute0);
//       
//       Hour hour0 = minute0.getHour();
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertNotNull(hour0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertNotNull(timeSeries0);
//       
//       Month month0 = new Month();
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertNotNull(month0);
//       
//       int int0 = timeSeries0.getMaximumItemCount();
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(Integer.MAX_VALUE, int0);
//       
//       boolean boolean0 = false;
//       timeSeries0.add((RegularTimePeriod) hour0, (Number) int0, boolean0);
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2.147483647E9, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2.147483647E9, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) month0);
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2.147483647E9, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2.147483647E9, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertNotNull(timeSeriesDataItem0);
//   }

  @Test
  public void test57()  throws Throwable  {
      int int0 = 1;
      String string0 = "-xFu|o^BBc$sk!L^";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("-xFu|o^BBc$sk!L^", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("-xFu|o^BBc$sk!L^", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNotNull(timeSeries0);
      
      Class class0 = timeSeries0.getTimePeriodClass();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("-xFu|o^BBc$sk!L^", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("-xFu|o^BBc$sk!L^", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(class0);
  }

  ////@Test
  public void test58()  throws Throwable  {
      int int0 = (-2118);
      Year year0 = new Year(int0);
      assertEquals(-2118, year0.getYear());
      assertEquals((-2118L), year0.getSerialIndex());
      assertEquals(4733510399999L, year0.getLastMillisecond());
      assertEquals("-2118", year0.toString());
      assertEquals((-129006345600000L), year0.getFirstMillisecond());
      assertEquals((-62136417600001L), year0.getMiddleMillisecond());
      assertNotNull(year0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertEquals(-2118, year0.getYear());
      assertEquals((-2118L), year0.getSerialIndex());
      assertEquals(4733510399999L, year0.getLastMillisecond());
      assertEquals("-2118", year0.toString());
      assertEquals((-129006345600000L), year0.getFirstMillisecond());
      assertEquals((-62136417600001L), year0.getMiddleMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNotNull(timeSeries0);
      
      double double0 = timeSeries0.getMaxY();
      assertEquals(-2118, year0.getYear());
      assertEquals((-2118L), year0.getSerialIndex());
      assertEquals(4733510399999L, year0.getLastMillisecond());
      assertEquals("-2118", year0.toString());
      assertEquals((-129006345600000L), year0.getFirstMillisecond());
      assertEquals((-62136417600001L), year0.getMiddleMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test59() {}
//   @Test
//   public void test59()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertNotNull(quarter0);
//       
//       Year year0 = quarter0.getYear();
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       assertEquals("2014", year0.toString());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertNotNull(year0);
//       
//       String string0 = "?g";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, string0, string0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("?g", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("?g", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertNotNull(timeSeries0);
//       
//       double double0 = 1764.848596;
//       timeSeries0.add((RegularTimePeriod) year0, double0);
//       assertEquals(1764.848596, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("?g", timeSeries0.getRangeDescription());
//       assertEquals(1764.848596, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("?g", timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       assertEquals("2014", year0.toString());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       
//       int int0 = 0;
//       timeSeries0.setMaximumItemCount(int0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("?g", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("?g", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//   }

  @Test
  public void test60()  throws Throwable  {
      long long0 = 55L;
      String string0 = "9";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, string0, string0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("9", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("9", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals("9", timeSeries1.getRangeDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("9", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("9", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("9", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotNull(timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
  }

  @Test
  public void test61()  throws Throwable  {
      long long0 = 24L;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      int int0 = 65;
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertNull(timeSeries1.getDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertNull(timeSeries1.getDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertTrue(boolean0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
  }

  @Test
  public void test62() {}
//   @Test
//   public void test62()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertNotNull(quarter0);
//       
//       Year year0 = quarter0.getYear();
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertNotNull(year0);
//       
//       long long0 = year0.getSerialIndex();
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014L, long0);
//       
//       String string0 = "q)QI*CS3gGE*";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, string0, string0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("q)QI*CS3gGE*", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("q)QI*CS3gGE*", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertNotNull(timeSeries0);
//       
//       timeSeries0.add((RegularTimePeriod) year0, (double) long0);
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("q)QI*CS3gGE*", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2014.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("q)QI*CS3gGE*", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(2014.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       
//       TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("q)QI*CS3gGE*", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2014.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("q)QI*CS3gGE*", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(2014.0, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries1.getDescription());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(2014.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(2014.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotNull(timeSeries1);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//   }

  @Test
  public void test63() {}
//   @Test
//   public void test63()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertNotNull(quarter0);
//       
//       String string0 = "q)Q'*CS:gGE*";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, string0, string0);
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNotNull(timeSeries0);
//       
//       timeSeries0.setRangeDescription(string0);
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("q)Q'*CS:gGE*", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//   }
}
