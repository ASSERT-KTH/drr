/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:12:33 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.event.ComponentEvent;
import java.text.DateFormatSymbols;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import javax.print.attribute.standard.OutputDeviceAssigned;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.FileSystemHandling;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.general.SeriesException;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.MonthConstants;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class TimeSeriesEvoSuite_branch_Test   {

  @Test
  public void test00() {}
//   @Test
//   public void test00()  throws Throwable  {
//       String string0 = "";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       
//       int int0 = timeSeries0.getItemCount();
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, int0);
//       
//       MockDate mockDate0 = new MockDate((long) int0);
//       assertNotNull(mockDate0);
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       
//       Month month0 = new Month((Date) mockDate0);
//       assertNotNull(month0);
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       assertEquals(2678399999L, month0.getLastMillisecond());
//       assertEquals(0L, month0.getFirstMillisecond());
//       assertEquals(1339199999L, month0.getMiddleMillisecond());
//       assertEquals(1970, month0.getYearValue());
//       assertEquals(23641L, month0.getSerialIndex());
//       assertEquals(1, month0.getMonth());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       
//       Month month1 = (Month)month0.next();
//       assertNotNull(month1);
//       assertNotSame(month0, month1);
//       assertNotSame(month1, month0);
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       assertEquals(2678399999L, month0.getLastMillisecond());
//       assertEquals(0L, month0.getFirstMillisecond());
//       assertEquals(1339199999L, month0.getMiddleMillisecond());
//       assertEquals(1970, month0.getYearValue());
//       assertEquals(23641L, month0.getSerialIndex());
//       assertEquals(1, month0.getMonth());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(3887999999L, month1.getMiddleMillisecond());
//       assertEquals(2678400000L, month1.getFirstMillisecond());
//       assertEquals(1970, month1.getYearValue());
//       assertEquals(5097599999L, month1.getLastMillisecond());
//       assertEquals(23642L, month1.getSerialIndex());
//       assertEquals(2, month1.getMonth());
//       assertFalse(month0.equals((Object)month1));
//       assertFalse(month1.equals((Object)month0));
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month1, (Number) int0);
//       assertNull(timeSeriesDataItem0);
//       assertNotSame(month0, month1);
//       assertNotSame(month1, month0);
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       assertEquals(2678399999L, month0.getLastMillisecond());
//       assertEquals(0L, month0.getFirstMillisecond());
//       assertEquals(1339199999L, month0.getMiddleMillisecond());
//       assertEquals(1970, month0.getYearValue());
//       assertEquals(23641L, month0.getSerialIndex());
//       assertEquals(1, month0.getMonth());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(3887999999L, month1.getMiddleMillisecond());
//       assertEquals(2678400000L, month1.getFirstMillisecond());
//       assertEquals(1970, month1.getYearValue());
//       assertEquals(5097599999L, month1.getLastMillisecond());
//       assertEquals(23642L, month1.getSerialIndex());
//       assertEquals(2, month1.getMonth());
//       assertFalse(month0.equals((Object)month1));
//       assertFalse(month1.equals((Object)month0));
//       
//       timeSeries0.add((RegularTimePeriod) month0, (Number) int0);
//       assertNotSame(month0, month1);
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       assertEquals(2678399999L, month0.getLastMillisecond());
//       assertEquals(0L, month0.getFirstMillisecond());
//       assertEquals(1339199999L, month0.getMiddleMillisecond());
//       assertEquals(1970, month0.getYearValue());
//       assertEquals(23641L, month0.getSerialIndex());
//       assertEquals(1, month0.getMonth());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertFalse(month0.equals((Object)month1));
//       
//       int int1 = timeSeries0.hashCode();
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertFalse(int1 == int0);
//       assertEquals(1223307716, int1);
//   }

  @Test
  public void test01() {}
//   @Test
//   public void test01()  throws Throwable  {
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       
//       String string0 = "_Im";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("_Im", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("_Im", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       
//       int int0 = 0;
//       timeSeries0.add((RegularTimePeriod) month0, (double) int0);
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("_Im", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("_Im", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       
//       int int1 = timeSeries0.hashCode();
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("_Im", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("_Im", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertFalse(int1 == int0);
//       assertEquals(1115527386, int1);
//   }

  @Test
  public void test02()  throws Throwable  {
      String string0 = " for that time period. Duplicates are not ";
      String string1 = null;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string1);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(" for that time period. Duplicates are not ", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      
      int int0 = timeSeries0.hashCode();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(" for that time period. Duplicates are not ", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1103733265, int0);
  }

  @Test
  public void test03() {}
//   @Test
//   public void test03()  throws Throwable  {
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       
//       String string0 = "_Im";
//       String string1 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, string1, string0);
//       assertNotNull(timeSeries0);
//       assertEquals("_Im", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       
//       int int0 = timeSeries0.hashCode();
//       assertEquals("_Im", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(731784106, int0);
//   }

  @Test
  public void test04()  throws Throwable  {
      int int0 = MonthConstants.OCTOBER;
      assertEquals(10, int0);
      
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      assertNotNull(timeSeries1);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries1.getDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("", timeSeries1.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("", timeSeries1.getDomainDescription());
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      
      timeSeries1.setMaximumItemAge((long) int0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries1.getDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("", timeSeries1.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(10L, timeSeries1.getMaximumItemAge());
      assertEquals("", timeSeries1.getDomainDescription());
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      boolean boolean0 = timeSeries1.equals((Object) timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries1.getDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("", timeSeries1.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(10L, timeSeries1.getMaximumItemAge());
      assertEquals("", timeSeries1.getDomainDescription());
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(boolean0);
  }

  @Test
  public void test05() {}
//   @Test
//   public void test05()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       assertNotNull(quarter0);
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
//       assertNotNull(timeSeries0);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       
//       int int0 = 2188;
//       TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
//       assertNotNull(timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries1.addOrUpdate((RegularTimePeriod) quarter0, (Number) int0);
//       assertNull(timeSeriesDataItem0);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(2188.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(2188.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       
//       boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(2188.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(2188.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(boolean0);
//   }

  @Test
  public void test06()  throws Throwable  {
      int int0 = MonthConstants.OCTOBER;
      assertEquals(10, int0);
      
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      assertNotNull(timeSeries1);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertNull(timeSeries1.getDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertNull(timeSeries1.getDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = MonthConstants.OCTOBER;
      assertEquals(10, int0);
      
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      
      boolean boolean0 = timeSeries0.equals((Object) string0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertFalse(boolean0);
  }

  @Test
  public void test08() {}
//   @Test
//   public void test08()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       assertNotNull(quarter0);
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(2014, quarter0.getYearValue());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
//       assertNotNull(timeSeries0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(2014, quarter0.getYearValue());
//       
//       TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
//       assertNotNull(timeSeries1);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       
//       boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(boolean0);
//   }

  @Test
  public void test09()  throws Throwable  {
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertNotNull(timeSeries0);
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      assertNotNull(timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
  }

  @Test
  public void test10() {}
//   @Test
//   public void test10()  throws Throwable  {
//       Week week0 = new Week();
//       assertNotNull(week0);
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       assertEquals(7, week0.getWeek());
//       
//       Week week1 = (Week)week0.next();
//       assertNotNull(week1);
//       assertNotSame(week1, week0);
//       assertNotSame(week0, week1);
//       assertEquals(1393199999999L, week1.getLastMillisecond());
//       assertEquals(8, week1.getWeek());
//       assertEquals(2014, week1.getYearValue());
//       assertEquals(1392897599999L, week1.getMiddleMillisecond());
//       assertEquals(106750L, week1.getSerialIndex());
//       assertEquals(1392595200000L, week1.getFirstMillisecond());
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       assertEquals(7, week0.getWeek());
//       assertFalse(week1.equals((Object)week0));
//       assertFalse(week0.equals((Object)week1));
//       
//       String string0 = "";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) week1, string0, string0);
//       assertNotNull(timeSeries0);
//       assertNotSame(week1, week0);
//       assertNotSame(week0, week1);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(1393199999999L, week1.getLastMillisecond());
//       assertEquals(8, week1.getWeek());
//       assertEquals(2014, week1.getYearValue());
//       assertEquals(1392897599999L, week1.getMiddleMillisecond());
//       assertEquals(106750L, week1.getSerialIndex());
//       assertEquals(1392595200000L, week1.getFirstMillisecond());
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       assertEquals(7, week0.getWeek());
//       assertFalse(week1.equals((Object)week0));
//       assertFalse(week0.equals((Object)week1));
//       
//       // Undeclared exception!
//       try {
//         TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) week1, (RegularTimePeriod) week0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Requires start on or before end.
//          //
//       }
//   }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      
      int int0 = timeSeries0.getItemCount();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, int0);
      
      Year year0 = new Year(int0);
      assertNotNull(year0);
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals(0, year0.getYear());
      assertEquals("0", year0.toString());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year0, regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 1279;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = 1782.36;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) double0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      
      int int0 = 1791;
      int int1 = (-5);
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-1538);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      int int0 = timeSeries0.getItemCount();
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, int0);
      
      MockDate mockDate0 = new MockDate((long) int0);
      assertNotNull(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      Month month0 = new Month((Date) mockDate0);
      assertNotNull(month0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals(1, month0.getMonth());
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      Month month1 = (Month)month0.next();
      assertNotNull(month1);
      assertNotSame(month1, month0);
      assertNotSame(month0, month1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(3887999999L, month1.getMiddleMillisecond());
      assertEquals(2, month1.getMonth());
      assertEquals(5097599999L, month1.getLastMillisecond());
      assertEquals(2678400000L, month1.getFirstMillisecond());
      assertEquals(1970, month1.getYearValue());
      assertEquals(23642L, month1.getSerialIndex());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals(1, month0.getMonth());
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertFalse(month1.equals((Object)month0));
      assertFalse(month0.equals((Object)month1));
      
      timeSeries0.add((RegularTimePeriod) month0, (Number) int0);
      assertNotSame(month0, month1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals(1, month0.getMonth());
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertFalse(month0.equals((Object)month1));
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month1, (double) int0);
      assertNull(timeSeriesDataItem0);
      assertNotSame(month1, month0);
      assertNotSame(month0, month1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(3887999999L, month1.getMiddleMillisecond());
      assertEquals(2, month1.getMonth());
      assertEquals(5097599999L, month1.getLastMillisecond());
      assertEquals(2678400000L, month1.getFirstMillisecond());
      assertEquals(1970, month1.getYearValue());
      assertEquals(23642L, month1.getSerialIndex());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals(1, month0.getMonth());
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertFalse(month1.equals((Object)month0));
      assertFalse(month0.equals((Object)month1));
      
      boolean boolean0 = false;
      timeSeries0.delete(int0, int0, boolean0);
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test
  public void test16() {}
//   @Test
//   public void test16()  throws Throwable  {
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       
//       String string0 = "_Im";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("_Im", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("_Im", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       int int0 = 0;
//       int int1 = 1845;
//       boolean boolean0 = false;
//       // Undeclared exception!
//       try {
//         timeSeries0.delete(int1, int0, boolean0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Requires start <= end.
//          //
//       }
//   }

  @Test
  public void test17()  throws Throwable  {
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      
      double double0 = (-200.9652561979857);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, double0);
      assertNull(timeSeriesDataItem0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals((-200.9652561979857), timeSeries0.getMinY(), 0.01D);
      assertEquals((-200.9652561979857), timeSeries0.getMaxY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      
      timeSeries0.delete((RegularTimePeriod) year0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = MonthConstants.OCTOBER;
      assertEquals(10, int0);
      
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Thu Nov 10 10:10:10 GMT 1910", mockDate0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Hour hour0 = new Hour((Date) mockDate0, (TimeZone) zoneInfo0);
      assertNotNull(hour0);
      assertEquals(10, hour0.getHour());
      assertEquals((-1866373200001L), hour0.getLastMillisecond());
      assertEquals(1910, hour0.getYear());
      assertEquals((-1866376800000L), hour0.getFirstMillisecond());
      assertEquals(10, hour0.getDayOfMonth());
      assertEquals(95218L, hour0.getSerialIndex());
      assertEquals(11, hour0.getMonth());
      assertEquals((-1866375000001L), hour0.getMiddleMillisecond());
      assertEquals("Thu Nov 10 10:10:10 GMT 1910", mockDate0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      
      Minute minute0 = new Minute(int0, hour0);
      assertNotNull(minute0);
      assertEquals(10, hour0.getHour());
      assertEquals((-1866373200001L), hour0.getLastMillisecond());
      assertEquals(1910, hour0.getYear());
      assertEquals((-1866376800000L), hour0.getFirstMillisecond());
      assertEquals(10, hour0.getDayOfMonth());
      assertEquals(95218L, hour0.getSerialIndex());
      assertEquals(11, hour0.getMonth());
      assertEquals((-1866375000001L), hour0.getMiddleMillisecond());
      assertEquals((-1866376140001L), minute0.getLastMillisecond());
      assertEquals((-1866376200000L), minute0.getFirstMillisecond());
      assertEquals((-1866376170001L), minute0.getMiddleMillisecond());
      assertEquals(10, minute0.getHourValue());
      assertEquals(10, minute0.getMinute());
      assertEquals(5713090L, minute0.getSerialIndex());
      assertEquals("Thu Nov 10 10:10:10 GMT 1910", mockDate0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      
      timeSeries0.delete((RegularTimePeriod) minute0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(10, hour0.getHour());
      assertEquals((-1866373200001L), hour0.getLastMillisecond());
      assertEquals(1910, hour0.getYear());
      assertEquals((-1866376800000L), hour0.getFirstMillisecond());
      assertEquals(10, hour0.getDayOfMonth());
      assertEquals(95218L, hour0.getSerialIndex());
      assertEquals(11, hour0.getMonth());
      assertEquals((-1866375000001L), hour0.getMiddleMillisecond());
      assertEquals((-1866376140001L), minute0.getLastMillisecond());
      assertEquals((-1866376200000L), minute0.getFirstMillisecond());
      assertEquals((-1866376170001L), minute0.getMiddleMillisecond());
      assertEquals(10, minute0.getHourValue());
      assertEquals(10, minute0.getMinute());
      assertEquals(5713090L, minute0.getSerialIndex());
      assertEquals("Thu Nov 10 10:10:10 GMT 1910", mockDate0.toString());
      assertEquals("GMT", zoneInfo0.getID());
  }

  @Test
  public void test19()  throws Throwable  {
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertNotNull(timeSeries0);
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      
      double double0 = (-200.9652561979857);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, double0);
      assertNull(timeSeriesDataItem0);
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals((-200.9652561979857), timeSeries0.getMinY(), 0.01D);
      assertEquals((-200.9652561979857), timeSeries0.getMaxY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      
      timeSeries0.clear();
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = " for that time period. Duplicates are not ";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(" for that time period. Duplicates are not ", timeSeries0.getDomainDescription());
      assertEquals(" for that time period. Duplicates are not ", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      
      timeSeries0.clear();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(" for that time period. Duplicates are not ", timeSeries0.getDomainDescription());
      assertEquals(" for that time period. Duplicates are not ", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
  }

  @Test
  public void test21()  throws Throwable  {
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      
      long long0 = 9223372036854775777L;
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) long0);
      //  // Unstable assertion: assertNotNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(false, timeSeriesDataItem0.isSelected());
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem1);
      //  // Unstable assertion: assertEquals(9.223372036854776E18, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9.223372036854776E18, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(false, timeSeriesDataItem0.isSelected());
      
      boolean boolean0 = false;
      timeSeries0.removeAgedItems(long0, boolean0);
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = (-1538);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      Year year0 = new Year(int0);
      assertNotNull(year0);
      assertEquals((-110702937600000L), year0.getFirstMillisecond());
      assertEquals((-13568688000001L), year0.getLastMillisecond());
      assertEquals(-1538, year0.getYear());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("-1538", year0.toString());
      assertEquals((-1538L), year0.getSerialIndex());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (double) int0);
      assertNotNull(timeSeriesDataItem0);
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertEquals((-110702937600000L), year0.getFirstMillisecond());
      assertEquals((-13568688000001L), year0.getLastMillisecond());
      assertEquals(-1538, year0.getYear());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("-1538", year0.toString());
      assertEquals((-1538L), year0.getSerialIndex());
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertNull(timeSeriesDataItem1);
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertEquals((-110702937600000L), year0.getFirstMillisecond());
      assertEquals((-13568688000001L), year0.getLastMillisecond());
      assertEquals(-1538, year0.getYear());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("-1538", year0.toString());
      assertEquals((-1538L), year0.getSerialIndex());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals((-1538.0), timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals((-1538.0), timeSeries0.getMinY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      
      timeSeries0.removeAgedItems((long) int0, boolean0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals((-1538.0), timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals((-1538.0), timeSeries0.getMinY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      
      timeSeries0.removeAgedItems((long) int0, boolean0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals((-1538.0), timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals((-1538.0), timeSeries0.getMinY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
  }

  @Test
  public void test23()  throws Throwable  {
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertNotNull(timeSeries0);
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      long long0 = year0.getMiddleMillisecond();
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1404302399999L, long0);
      
      boolean boolean0 = true;
      timeSeries0.removeAgedItems(long0, boolean0);
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test
  public void test24()  throws Throwable  {
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      
      double double0 = (-200.9652561979857);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, double0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals((-200.9652561979857), timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals((-200.9652561979857), timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      
      long long0 = 9223372036854775807L;
      boolean boolean0 = true;
      timeSeries0.removeAgedItems(long0, boolean0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      int int0 = timeSeries0.getItemCount();
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, int0);
      
      timeSeries0.setMaximumItemAge((long) int0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      MockDate mockDate0 = new MockDate((long) int0);
      assertNotNull(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      Month month0 = new Month((Date) mockDate0);
      assertNotNull(month0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals(1, month0.getMonth());
      
      Month month1 = (Month)month0.next();
      assertNotNull(month1);
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals(1, month0.getMonth());
      assertEquals(3887999999L, month1.getMiddleMillisecond());
      assertEquals(1970, month1.getYearValue());
      assertEquals(2678400000L, month1.getFirstMillisecond());
      assertEquals(23642L, month1.getSerialIndex());
      assertEquals(2, month1.getMonth());
      assertEquals(5097599999L, month1.getLastMillisecond());
      assertFalse(month0.equals((Object)month1));
      assertFalse(month1.equals((Object)month0));
      
      timeSeries0.add((RegularTimePeriod) month0, (Number) int0);
      assertNotSame(month0, month1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(0L, timeSeries0.getMaximumItemAge());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals(1, month0.getMonth());
      assertFalse(month0.equals((Object)month1));
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month1, (double) int0);
      assertNull(timeSeriesDataItem0);
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(0L, timeSeries0.getMaximumItemAge());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals(1, month0.getMonth());
      assertEquals(3887999999L, month1.getMiddleMillisecond());
      assertEquals(1970, month1.getYearValue());
      assertEquals(2678400000L, month1.getFirstMillisecond());
      assertEquals(23642L, month1.getSerialIndex());
      assertEquals(2, month1.getMonth());
      assertEquals(5097599999L, month1.getLastMillisecond());
      assertFalse(month0.equals((Object)month1));
      assertFalse(month1.equals((Object)month0));
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = MonthConstants.OCTOBER;
      assertEquals(10, int0);
      
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Thu Nov 10 10:10:10 GMT 1910", mockDate0.toString());
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      timeSeries0.setMaximumItemCount(int1);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Hour hour0 = new Hour((Date) mockDate0, (TimeZone) zoneInfo0);
      assertNotNull(hour0);
      assertEquals(1910, hour0.getYear());
      assertEquals(11, hour0.getMonth());
      assertEquals(10, hour0.getDayOfMonth());
      assertEquals(95218L, hour0.getSerialIndex());
      assertEquals((-1866375000001L), hour0.getMiddleMillisecond());
      assertEquals((-1866376800000L), hour0.getFirstMillisecond());
      assertEquals((-1866373200001L), hour0.getLastMillisecond());
      assertEquals(10, hour0.getHour());
      assertEquals("Thu Nov 10 10:10:10 GMT 1910", mockDate0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(int0 == int1);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(1910, hour0.getYear());
      assertEquals(11, hour0.getMonth());
      assertEquals(10, hour0.getDayOfMonth());
      assertEquals(95218L, hour0.getSerialIndex());
      assertEquals((-1866375000001L), hour0.getMiddleMillisecond());
      assertEquals((-1866376800000L), hour0.getFirstMillisecond());
      assertEquals((-1866373200001L), hour0.getLastMillisecond());
      assertEquals(10, hour0.getHour());
      assertEquals("Thu Nov 10 10:10:10 GMT 1910", mockDate0.toString());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(int0 == int1);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "0";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      int int0 = timeSeries0.getItemCount();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, int0);
      
      double double0 = timeSeries0.getMinY();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, double0, 0.01D);
      
      MockDate mockDate0 = new MockDate((long) int0);
      assertNotNull(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      Month month0 = new Month((Date) mockDate0);
      assertNotNull(month0);
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals(1, month0.getMonth());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(1970, month0.getYearValue());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      Number number0 = null;
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, (Number) double0);
      assertNotNull(timeSeriesDataItem0);
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals(1, month0.getMonth());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(1970, month0.getYearValue());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      timeSeries0.add(timeSeriesDataItem0);
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals(1, month0.getMonth());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(1970, month0.getYearValue());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, number0);
      assertNotNull(timeSeriesDataItem1);
      assertNotSame(timeSeriesDataItem1, timeSeriesDataItem0);
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals(1, month0.getMonth());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(1970, month0.getYearValue());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(false, timeSeriesDataItem1.isSelected());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeriesDataItem1.equals((Object)timeSeriesDataItem0));
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "";
      byte[] byteArray0 = new byte[5];
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      
      OutputDeviceAssigned outputDeviceAssigned0 = new OutputDeviceAssigned(string0, locale0);
      assertNotNull(outputDeviceAssigned0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      
      String string1 = outputDeviceAssigned0.getValue();
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", string1);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string1, string1, string0);
      assertNotNull(timeSeries0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      
      MockDate mockDate0 = new MockDate((long) byteArray0[3]);
      assertNotNull(mockDate0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      Month month0 = new Month((Date) mockDate0);
      assertNotNull(month0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(1, month0.getMonth());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      Number number0 = null;
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, number0);
      assertNull(timeSeriesDataItem0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(1, month0.getMonth());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (double) byteArray0[2]);
      assertNotNull(timeSeriesDataItem1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(1, month0.getMonth());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(false, timeSeriesDataItem1.isSelected());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      
      int int0 = timeSeries0.getItemCount();
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, int0);
      
      MockDate mockDate0 = new MockDate((long) int0);
      assertNotNull(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      
      Month month0 = new Month((Date) mockDate0);
      assertNotNull(month0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals(1, month0.getMonth());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      
      timeSeries0.add((RegularTimePeriod) month0, (Number) int0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals(1, month0.getMonth());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Day day0 = new Day((Date) mockDate0, (TimeZone) zoneInfo0);
      assertNotNull(day0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0L, day0.getFirstMillisecond());
      assertEquals(1, day0.getMonth());
      assertEquals(86399999L, day0.getLastMillisecond());
      assertEquals(25569L, day0.getSerialIndex());
      assertEquals(1, day0.getDayOfMonth());
      assertEquals(43199999L, day0.getMiddleMillisecond());
      assertEquals(1970, day0.getYear());
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Day, but the TimeSeries is expecting an instance of org.jfree.data.time.Month.
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "\\ji _Vmu 5v";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      
      int int0 = timeSeries0.getItemCount();
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, int0);
      
      MockDate mockDate0 = new MockDate((long) int0);
      assertNotNull(mockDate0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      Month month0 = new Month((Date) mockDate0);
      assertNotNull(month0);
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals(1, month0.getMonth());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (double) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals(1, month0.getMonth());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      // Undeclared exception!
      try {
        TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = MonthConstants.OCTOBER;
      assertEquals(10, int0);
      
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      assertNotNull(timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("", timeSeries1.getDomainDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Thu Nov 10 10:10:10 GMT 1910", mockDate0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Hour hour0 = new Hour((Date) mockDate0, (TimeZone) zoneInfo0);
      assertNotNull(hour0);
      assertEquals(95218L, hour0.getSerialIndex());
      assertEquals((-1866376800000L), hour0.getFirstMillisecond());
      assertEquals(10, hour0.getHour());
      assertEquals((-1866373200001L), hour0.getLastMillisecond());
      assertEquals(1910, hour0.getYear());
      assertEquals(10, hour0.getDayOfMonth());
      assertEquals(11, hour0.getMonth());
      assertEquals((-1866375000001L), hour0.getMiddleMillisecond());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Thu Nov 10 10:10:10 GMT 1910", mockDate0.toString());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) int0);
      assertNull(timeSeriesDataItem0);
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals(95218L, hour0.getSerialIndex());
      assertEquals((-1866376800000L), hour0.getFirstMillisecond());
      assertEquals(10, hour0.getHour());
      assertEquals((-1866373200001L), hour0.getLastMillisecond());
      assertEquals(1910, hour0.getYear());
      assertEquals(10, hour0.getDayOfMonth());
      assertEquals(11, hour0.getMonth());
      assertEquals((-1866375000001L), hour0.getMiddleMillisecond());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(10.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(10.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Thu Nov 10 10:10:10 GMT 1910", mockDate0.toString());
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      
      TimeSeries timeSeries2 = timeSeries1.addAndOrUpdate(timeSeries0);
      assertNotNull(timeSeries2);
      assertNotSame(timeSeries2, timeSeries0);
      assertNotSame(timeSeries2, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries1, timeSeries2);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries0, timeSeries2);
      assertEquals(Double.NaN, timeSeries2.getMaxY(), 0.01D);
      assertEquals(true, timeSeries2.isEmpty());
      assertEquals("Value", timeSeries2.getRangeDescription());
      assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      assertEquals(true, timeSeries2.getNotify());
      assertNull(timeSeries2.getDescription());
      assertEquals(0, timeSeries2.getItemCount());
      assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      assertEquals("Time", timeSeries2.getDomainDescription());
      assertEquals(Double.NaN, timeSeries2.getMinY(), 0.01D);
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("", timeSeries1.getDomainDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(10.0, timeSeries1.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(false, timeSeries1.isEmpty());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(10.0, timeSeries1.getMaxY(), 0.01D);
      assertEquals("", timeSeries1.getRangeDescription());
      assertEquals(10.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(10.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertFalse(timeSeries2.equals((Object)timeSeries0));
      assertFalse(timeSeries2.equals((Object)timeSeries1));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries1.equals((Object)timeSeries2));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries0.equals((Object)timeSeries2));
  }

  @Test
  public void test32() {}
//   @Test
//   public void test32()  throws Throwable  {
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) month0);
//       assertNotNull(timeSeries0);
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       double double0 = 5637.397373866322;
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, double0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(5637.397373866322, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(5637.397373866322, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
//       assertNotNull(timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(5637.397373866322, timeSeries1.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(5637.397373866322, timeSeries1.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(5637.397373866322, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(5637.397373866322, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//   }

  @Test
  public void test33() {}
//   @Test
//   public void test33()  throws Throwable  {
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       
//       String string0 = "_Im";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("_Im", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("_Im", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       
//       int int0 = 8;
//       double double0 = Double.NaN;
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, double0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("_Im", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("_Im", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       
//       timeSeries0.update((RegularTimePeriod) month0, (Number) int0);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("_Im", timeSeries0.getDomainDescription());
//       assertEquals(8.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("_Im", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(8.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//   }

  @Test
  public void test34() {}
//   @Test
//   public void test34()  throws Throwable  {
//       boolean boolean0 = false;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0);
//       assertNotNull(timeSeries0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       
//       long long0 = 0L;
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) long0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // There is no existing value for the specified 'period'.
//          //
//       }
//   }

  @Test
  public void test35() {}
//   @Test
//   public void test35()  throws Throwable  {
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2, month0.getMonth());
//       
//       String string0 = "_Im";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals("_Im", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("_Im", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2, month0.getMonth());
//       
//       int int0 = 8;
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (double) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(8.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("_Im", timeSeries0.getDomainDescription());
//       assertEquals(8.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("_Im", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2, month0.getMonth());
//       
//       timeSeries0.update((RegularTimePeriod) month0, (Number) int0);
//       assertEquals(8.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("_Im", timeSeries0.getDomainDescription());
//       assertEquals(8.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("_Im", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2, month0.getMonth());
//   }

  @Test
  public void test36() {}
//   @Test
//   public void test36()  throws Throwable  {
//       String string0 = " for that time period. Duplicates are not ";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(" for that time period. Duplicates are not ", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(" for that time period. Duplicates are not ", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       
//       long long0 = timeSeries0.getMaximumItemAge();
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(" for that time period. Duplicates are not ", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(" for that time period. Duplicates are not ", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, long0);
//       
//       int int0 = 0;
//       timeSeries0.setMaximumItemCount(int0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(" for that time period. Duplicates are not ", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(" for that time period. Duplicates are not ", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       
//       Second second0 = new Second();
//       assertNotNull(second0);
//       assertEquals(1392409281499L, second0.getMiddleMillisecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(21, second0.getSecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       
//       timeSeries0.add((RegularTimePeriod) second0, (double) long0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(" for that time period. Duplicates are not ", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(" for that time period. Duplicates are not ", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1392409281499L, second0.getMiddleMillisecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(21, second0.getSecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//   }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      int int0 = timeSeries0.getItemCount();
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, int0);
      
      MockDate mockDate0 = new MockDate((long) int0);
      assertNotNull(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      Month month0 = new Month((Date) mockDate0);
      assertNotNull(month0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals(1, month0.getMonth());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      Month month1 = (Month)month0.next();
      assertNotNull(month1);
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals(1, month0.getMonth());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals(2678400000L, month1.getFirstMillisecond());
      assertEquals(3887999999L, month1.getMiddleMillisecond());
      assertEquals(23642L, month1.getSerialIndex());
      assertEquals(5097599999L, month1.getLastMillisecond());
      assertEquals(2, month1.getMonth());
      assertEquals(1970, month1.getYearValue());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertFalse(month0.equals((Object)month1));
      assertFalse(month1.equals((Object)month0));
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month1, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals(1, month0.getMonth());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals(2678400000L, month1.getFirstMillisecond());
      assertEquals(3887999999L, month1.getMiddleMillisecond());
      assertEquals(23642L, month1.getSerialIndex());
      assertEquals(5097599999L, month1.getLastMillisecond());
      assertEquals(2, month1.getMonth());
      assertEquals(1970, month1.getYearValue());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertFalse(month0.equals((Object)month1));
      assertFalse(month1.equals((Object)month0));
      
      timeSeries0.add((RegularTimePeriod) month0, (Number) int0);
      assertNotSame(month0, month1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals(1, month0.getMonth());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertFalse(month0.equals((Object)month1));
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) month1, (double) int0);
      assertNotNull(timeSeriesDataItem1);
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals(1, month0.getMonth());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals(2678400000L, month1.getFirstMillisecond());
      assertEquals(3887999999L, month1.getMiddleMillisecond());
      assertEquals(23642L, month1.getSerialIndex());
      assertEquals(5097599999L, month1.getLastMillisecond());
      assertEquals(2, month1.getMonth());
      assertEquals(1970, month1.getYearValue());
      assertEquals(false, timeSeriesDataItem1.isSelected());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertFalse(month0.equals((Object)month1));
      assertFalse(month1.equals((Object)month0));
      
      boolean boolean0 = false;
      timeSeries0.delete((RegularTimePeriod) month1);
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals(1, month0.getMonth());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals(2678400000L, month1.getFirstMillisecond());
      assertEquals(3887999999L, month1.getMiddleMillisecond());
      assertEquals(23642L, month1.getSerialIndex());
      assertEquals(5097599999L, month1.getLastMillisecond());
      assertEquals(2, month1.getMonth());
      assertEquals(1970, month1.getYearValue());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertFalse(month0.equals((Object)month1));
      assertFalse(month1.equals((Object)month0));
      
      timeSeries0.add(timeSeriesDataItem1, boolean0);
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals(1, month0.getMonth());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals(2678400000L, month1.getFirstMillisecond());
      assertEquals(3887999999L, month1.getMiddleMillisecond());
      assertEquals(23642L, month1.getSerialIndex());
      assertEquals(5097599999L, month1.getLastMillisecond());
      assertEquals(2, month1.getMonth());
      assertEquals(1970, month1.getYearValue());
      assertEquals(false, timeSeriesDataItem1.isSelected());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertFalse(month0.equals((Object)month1));
      assertFalse(month1.equals((Object)month0));
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      int int0 = timeSeries0.getItemCount();
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, int0);
      
      MockDate mockDate0 = new MockDate((long) int0);
      assertNotNull(mockDate0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      Month month0 = new Month((Date) mockDate0);
      assertNotNull(month0);
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals(1, month0.getMonth());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals(1, month0.getMonth());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      // Undeclared exception!
      try {
        timeSeries0.add((RegularTimePeriod) month0, (Number) int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period  1970 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
      }
  }

  @Test
  public void test39() {}
//   @Test
//   public void test39()  throws Throwable  {
//       long long0 = 0L;
//       String string0 = "";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       int int0 = 24;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=24,MONTH=24,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=24,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=24,MONTH=24,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=24,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Class<Hour> class0 = Hour.class;
//       timeSeries0.timePeriodClass = class0;
//       assertNotNull(timeSeries0.timePeriodClass);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("class org.jfree.data.time.Hour", timeSeries0.timePeriodClass.toString());
//       assertEquals(false, timeSeries0.timePeriodClass.isPrimitive());
//       assertEquals(false, timeSeries0.timePeriodClass.isInterface());
//       assertEquals(false, timeSeries0.timePeriodClass.isSynthetic());
//       assertEquals(false, timeSeries0.timePeriodClass.isEnum());
//       assertEquals(false, timeSeries0.timePeriodClass.isArray());
//       assertEquals(false, timeSeries0.timePeriodClass.isAnnotation());
//       assertEquals(1, timeSeries0.timePeriodClass.getModifiers());
//       
//       DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
//       assertNotNull(dateFormatSymbols0);
//       assertEquals("GaMjkHmsSEDFwWxhKzZ", dateFormatSymbols0.getLocalPatternChars());
//       
//       SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat(string0, dateFormatSymbols0);
//       assertNotNull(simpleDateFormat0);
//       assertEquals("", simpleDateFormat0.toLocalizedPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       assertEquals("", simpleDateFormat0.toPattern());
//       assertEquals("GaMjkHmsSEDFwWxhKzZ", dateFormatSymbols0.getLocalPatternChars());
//       
//       ParsePosition parsePosition0 = new ParsePosition(int0);
//       assertNotNull(parsePosition0);
//       assertEquals(24, parsePosition0.getIndex());
//       assertEquals("java.text.ParsePosition[index=24,errorIndex=-1]", parsePosition0.toString());
//       assertEquals(-1, parsePosition0.getErrorIndex());
//       
//       Date date0 = simpleDateFormat0.parse(string0, parsePosition0);
//       assertNotNull(date0);
//       assertEquals(24, parsePosition0.getIndex());
//       assertEquals("java.text.ParsePosition[index=24,errorIndex=-1]", parsePosition0.toString());
//       assertEquals(-1, parsePosition0.getErrorIndex());
//       assertEquals("", simpleDateFormat0.toLocalizedPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       assertEquals("", simpleDateFormat0.toPattern());
//       assertEquals("GaMjkHmsSEDFwWxhKzZ", dateFormatSymbols0.getLocalPatternChars());
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
//       
//       Minute minute0 = new Minute(date0, (TimeZone) zoneInfo0);
//       assertNotNull(minute0);
//       assertEquals(24, parsePosition0.getIndex());
//       assertEquals("java.text.ParsePosition[index=24,errorIndex=-1]", parsePosition0.toString());
//       assertEquals(-1, parsePosition0.getErrorIndex());
//       assertEquals(0L, minute0.getFirstMillisecond());
//       assertEquals(29999L, minute0.getMiddleMillisecond());
//       assertEquals(59999L, minute0.getLastMillisecond());
//       assertEquals(36819360L, minute0.getSerialIndex());
//       assertEquals(0, minute0.getMinute());
//       assertEquals(0, minute0.getHourValue());
//       assertEquals("", simpleDateFormat0.toLocalizedPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       assertEquals("", simpleDateFormat0.toPattern());
//       assertEquals("GaMjkHmsSEDFwWxhKzZ", dateFormatSymbols0.getLocalPatternChars());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=24,MONTH=24,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=24,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.add((RegularTimePeriod) minute0, (double) int0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of org.jfree.data.time.Hour.
//          //
//       }
//   }

  @Test
  public void test40()  throws Throwable  {
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertNotNull(timeSeries0);
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      
      double double0 = (-200.9652561979857);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, double0);
      assertNull(timeSeriesDataItem0);
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals((-200.9652561979857), timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals((-200.9652561979857), timeSeries0.getMaxY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      
      // Undeclared exception!
      try {
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      int int0 = MonthConstants.OCTOBER;
      assertEquals(10, int0);
      
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Thu Nov 10 10:10:10 GMT 1910", mockDate0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Hour hour0 = new Hour((Date) mockDate0, (TimeZone) zoneInfo0);
      assertNotNull(hour0);
      assertEquals((-1866376800000L), hour0.getFirstMillisecond());
      assertEquals((-1866375000001L), hour0.getMiddleMillisecond());
      assertEquals(95218L, hour0.getSerialIndex());
      assertEquals(1910, hour0.getYear());
      assertEquals((-1866373200001L), hour0.getLastMillisecond());
      assertEquals(10, hour0.getDayOfMonth());
      assertEquals(11, hour0.getMonth());
      assertEquals(10, hour0.getHour());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Thu Nov 10 10:10:10 GMT 1910", mockDate0.toString());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals((-1866376800000L), hour0.getFirstMillisecond());
      assertEquals((-1866375000001L), hour0.getMiddleMillisecond());
      assertEquals(95218L, hour0.getSerialIndex());
      assertEquals(1910, hour0.getYear());
      assertEquals((-1866373200001L), hour0.getLastMillisecond());
      assertEquals(10, hour0.getDayOfMonth());
      assertEquals(11, hour0.getMonth());
      assertEquals(10, hour0.getHour());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(10.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(10.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Thu Nov 10 10:10:10 GMT 1910", mockDate0.toString());
      
      Hour hour1 = (Hour)timeSeries0.getNextTimePeriod();
      assertNotNull(hour1);
      assertNotSame(hour1, hour0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(10.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(10.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals((-1866369600001L), hour1.getLastMillisecond());
      assertEquals(95219L, hour1.getSerialIndex());
      assertEquals(11, hour1.getMonth());
      assertEquals(10, hour1.getDayOfMonth());
      assertEquals((-1866371400001L), hour1.getMiddleMillisecond());
      assertEquals((-1866373200000L), hour1.getFirstMillisecond());
      assertEquals(1910, hour1.getYear());
      assertEquals(11, hour1.getHour());
      assertFalse(hour1.equals((Object)hour0));
      
      Number number0 = timeSeries0.getValue((RegularTimePeriod) hour1);
      assertNull(number0);
      assertNotSame(hour1, hour0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(10.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(10.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals((-1866369600001L), hour1.getLastMillisecond());
      assertEquals(95219L, hour1.getSerialIndex());
      assertEquals(11, hour1.getMonth());
      assertEquals(10, hour1.getDayOfMonth());
      assertEquals((-1866371400001L), hour1.getMiddleMillisecond());
      assertEquals((-1866373200000L), hour1.getFirstMillisecond());
      assertEquals(1910, hour1.getYear());
      assertEquals(11, hour1.getHour());
      assertFalse(hour1.equals((Object)hour0));
  }

  @Test
  public void test42()  throws Throwable  {
      String string0 = DefaultEditorKit.selectionEndParagraphAction;
      assertNotNull(string0);
      assertEquals("selection-end-paragraph", string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      
      Second second0 = Second.parseSecond(string0);
      assertNull(second0);
      
      // Undeclared exception!
      try {
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) second0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertNotNull(timeSeries0);
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      
      double double0 = (-200.9652561979857);
      String string0 = "ygo83pHGC^O^";
      TimeSeries timeSeries1 = new TimeSeries((Comparable) double0, string0, string0);
      assertNotNull(timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(0, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals("ygo83pHGC^O^", timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals("ygo83pHGC^O^", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      timeSeries1.add((RegularTimePeriod) year0, (Number) double0);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals((-200.9652561979857), timeSeries1.getMaxY(), 0.01D);
      assertNull(timeSeries1.getDescription());
      assertEquals("ygo83pHGC^O^", timeSeries1.getDomainDescription());
      assertEquals(false, timeSeries1.isEmpty());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals((-200.9652561979857), timeSeries1.getMinY(), 0.01D);
      assertEquals("ygo83pHGC^O^", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      assertNotNull(collection0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals((-200.9652561979857), timeSeries1.getMaxY(), 0.01D);
      assertNull(timeSeries1.getDescription());
      assertEquals("ygo83pHGC^O^", timeSeries1.getDomainDescription());
      assertEquals(false, timeSeries1.isEmpty());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals((-200.9652561979857), timeSeries1.getMinY(), 0.01D);
      assertEquals("ygo83pHGC^O^", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
  }

  @Test
  public void test44()  throws Throwable  {
      int int0 = MonthConstants.OCTOBER;
      assertEquals(10, int0);
      
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("", timeSeries0.getDomainDescription());
      
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Thu Nov 10 10:10:10 GMT 1910", mockDate0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Hour hour0 = new Hour((Date) mockDate0, (TimeZone) zoneInfo0);
      assertNotNull(hour0);
      assertEquals("Thu Nov 10 10:10:10 GMT 1910", mockDate0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals((-1866376800000L), hour0.getFirstMillisecond());
      assertEquals(10, hour0.getDayOfMonth());
      assertEquals((-1866373200001L), hour0.getLastMillisecond());
      assertEquals(1910, hour0.getYear());
      assertEquals(95218L, hour0.getSerialIndex());
      assertEquals(11, hour0.getMonth());
      assertEquals((-1866375000001L), hour0.getMiddleMillisecond());
      assertEquals(10, hour0.getHour());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals("Thu Nov 10 10:10:10 GMT 1910", mockDate0.toString());
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(10.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(10.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals((-1866376800000L), hour0.getFirstMillisecond());
      assertEquals(10, hour0.getDayOfMonth());
      assertEquals((-1866373200001L), hour0.getLastMillisecond());
      assertEquals(1910, hour0.getYear());
      assertEquals(95218L, hour0.getSerialIndex());
      assertEquals(11, hour0.getMonth());
      assertEquals((-1866375000001L), hour0.getMiddleMillisecond());
      assertEquals(10, hour0.getHour());
      
      Collection collection0 = timeSeries0.getTimePeriods();
      assertNotNull(collection0);
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(10.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(10.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test
  public void test45()  throws Throwable  {
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      
      int int0 = timeSeries0.getItemCount();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, int0);
      
      MockDate mockDate0 = new MockDate((long) int0);
      assertNotNull(mockDate0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      Month month0 = new Month((Date) mockDate0);
      assertNotNull(month0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals(1, month0.getMonth());
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (double) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals(1, month0.getMonth());
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.getRawDataItem(month0);
      assertNotNull(timeSeriesDataItem1);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(2678399999L, month0.getLastMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals(1, month0.getMonth());
      assertEquals(1339199999L, month0.getMiddleMillisecond());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(false, timeSeriesDataItem1.isSelected());
  }

  @Test
  public void test46()  throws Throwable  {
      int int0 = MonthConstants.OCTOBER;
      assertEquals(10, int0);
      
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Thu Nov 10 10:10:10 GMT 1910", mockDate0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Hour hour0 = new Hour((Date) mockDate0, (TimeZone) zoneInfo0);
      assertNotNull(hour0);
      assertEquals((-1866373200001L), hour0.getLastMillisecond());
      assertEquals((-1866376800000L), hour0.getFirstMillisecond());
      assertEquals(10, hour0.getHour());
      assertEquals(1910, hour0.getYear());
      assertEquals(10, hour0.getDayOfMonth());
      assertEquals(11, hour0.getMonth());
      assertEquals((-1866375000001L), hour0.getMiddleMillisecond());
      assertEquals(95218L, hour0.getSerialIndex());
      assertEquals("Thu Nov 10 10:10:10 GMT 1910", mockDate0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      
      Minute minute0 = new Minute(int0, hour0);
      assertNotNull(minute0);
      assertEquals(10, minute0.getMinute());
      assertEquals((-1866376200000L), minute0.getFirstMillisecond());
      assertEquals(10, minute0.getHourValue());
      assertEquals(5713090L, minute0.getSerialIndex());
      assertEquals((-1866376170001L), minute0.getMiddleMillisecond());
      assertEquals((-1866376140001L), minute0.getLastMillisecond());
      assertEquals((-1866373200001L), hour0.getLastMillisecond());
      assertEquals((-1866376800000L), hour0.getFirstMillisecond());
      assertEquals(10, hour0.getHour());
      assertEquals(1910, hour0.getYear());
      assertEquals(10, hour0.getDayOfMonth());
      assertEquals(11, hour0.getMonth());
      assertEquals((-1866375000001L), hour0.getMiddleMillisecond());
      assertEquals(95218L, hour0.getSerialIndex());
      assertEquals("Thu Nov 10 10:10:10 GMT 1910", mockDate0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(minute0);
      assertNull(timeSeriesDataItem0);
      assertEquals(10, minute0.getMinute());
      assertEquals((-1866376200000L), minute0.getFirstMillisecond());
      assertEquals(10, minute0.getHourValue());
      assertEquals(5713090L, minute0.getSerialIndex());
      assertEquals((-1866376170001L), minute0.getMiddleMillisecond());
      assertEquals((-1866376140001L), minute0.getLastMillisecond());
      assertEquals((-1866373200001L), hour0.getLastMillisecond());
      assertEquals((-1866376800000L), hour0.getFirstMillisecond());
      assertEquals(10, hour0.getHour());
      assertEquals(1910, hour0.getYear());
      assertEquals(10, hour0.getDayOfMonth());
      assertEquals(11, hour0.getMonth());
      assertEquals((-1866375000001L), hour0.getMiddleMillisecond());
      assertEquals(95218L, hour0.getSerialIndex());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Thu Nov 10 10:10:10 GMT 1910", mockDate0.toString());
      assertEquals("GMT", zoneInfo0.getID());
  }

  @Test
  public void test47() {}
//   @Test
//   public void test47()  throws Throwable  {
//       int int0 = ComponentEvent.COMPONENT_RESIZED;
//       assertEquals(101, int0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertNotNull(timeSeries0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       
//       Week week0 = new Week();
//       assertNotNull(week0);
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       assertEquals(7, week0.getWeek());
//       assertEquals(2014, week0.getYearValue());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) week0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       assertEquals(7, week0.getWeek());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//   }

  @Test
  public void test48()  throws Throwable  {
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      
      int int0 = (-3790);
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemAge((long) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      String string0 = "Null 'visibleSeriesKeys' argument.";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals("Null 'visibleSeriesKeys' argument.", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Null 'visibleSeriesKeys' argument.", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      
      int int0 = (-1643);
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemCount(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
      }
  }

  @Test
  public void test50() {}
//   @Test
//   public void test50()  throws Throwable  {
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(2, month0.getMonth());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       
//       String string0 = "_Im";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals("_Im", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("_Im", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2, month0.getMonth());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       
//       int int0 = 8;
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (double) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals("_Im", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(8.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(8.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("_Im", timeSeries0.getRangeDescription());
//       assertEquals(2, month0.getMonth());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       
//       Double double0 = (Double)timeSeries0.getValue((RegularTimePeriod) month0);
//       assertEquals("_Im", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(8.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(8.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("_Im", timeSeries0.getRangeDescription());
//       assertEquals(2, month0.getMonth());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(8.0, (double)double0, 0.01D);
//   }

  @Test
  public void test51()  throws Throwable  {
      String string0 = "Null 'visibleSeriesKeys' argument.";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals("Null 'visibleSeriesKeys' argument.", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Null 'visibleSeriesKeys' argument.", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      
      List list0 = timeSeries0.getItems();
      assertNotNull(list0);
      assertEquals("Null 'visibleSeriesKeys' argument.", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Null 'visibleSeriesKeys' argument.", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test52()  throws Throwable  {
      int int0 = (-1538);
      Year year0 = new Year(int0);
      assertNotNull(year0);
      assertEquals(-1538, year0.getYear());
      assertEquals((-110702937600000L), year0.getFirstMillisecond());
      assertEquals((-13568688000001L), year0.getLastMillisecond());
      assertEquals((-1538L), year0.getSerialIndex());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("-1538", year0.toString());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (double) int0);
      assertNotNull(timeSeriesDataItem0);
      assertEquals(-1538, year0.getYear());
      assertEquals((-110702937600000L), year0.getFirstMillisecond());
      assertEquals((-13568688000001L), year0.getLastMillisecond());
      assertEquals((-1538L), year0.getSerialIndex());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("-1538", year0.toString());
      assertEquals(false, timeSeriesDataItem0.isSelected());
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertNull(timeSeriesDataItem1);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals((-1538.0), timeSeries0.getMinY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals((-1538.0), timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(false, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(-1538, year0.getYear());
      assertEquals((-110702937600000L), year0.getFirstMillisecond());
      assertEquals((-13568688000001L), year0.getLastMillisecond());
      assertEquals((-1538L), year0.getSerialIndex());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("-1538", year0.toString());
      assertEquals(false, timeSeriesDataItem0.isSelected());
      
      TimeSeriesDataItem timeSeriesDataItem2 = timeSeries0.getDataItem((RegularTimePeriod) year0);
      assertNotNull(timeSeriesDataItem2);
      assertNotSame(timeSeriesDataItem2, timeSeriesDataItem0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals((-1538.0), timeSeries0.getMinY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals((-1538.0), timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(false, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeriesDataItem2.isSelected());
      assertEquals(-1538, year0.getYear());
      assertEquals((-110702937600000L), year0.getFirstMillisecond());
      assertEquals((-13568688000001L), year0.getLastMillisecond());
      assertEquals((-1538L), year0.getSerialIndex());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("-1538", year0.toString());
      assertTrue(timeSeriesDataItem2.equals((Object)timeSeriesDataItem0));
  }

  @Test
  public void test53()  throws Throwable  {
      int int0 = MonthConstants.OCTOBER;
      assertEquals(10, int0);
      
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      
      Class class0 = timeSeries0.getTimePeriodClass();
      assertNull(class0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test
  public void test54()  throws Throwable  {
      int int0 = (-1538);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      
      double double0 = timeSeries0.getMaxY();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test55() {}
//   @Test
//   public void test55()  throws Throwable  {
//       int int0 = ComponentEvent.COMPONENT_RESIZED;
//       assertEquals(101, int0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertNotNull(timeSeries0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       
//       Week week0 = new Week();
//       assertNotNull(week0);
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(7, week0.getWeek());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       
//       timeSeries0.add((RegularTimePeriod) week0, (double) int0);
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(7, week0.getWeek());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(101.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(101.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       
//       int int1 = 0;
//       assertFalse(int1 == int0);
//       
//       timeSeries0.setMaximumItemCount(int1);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//   }

  @Test
  public void test56()  throws Throwable  {
      int int0 = MonthConstants.OCTOBER;
      assertEquals(10, int0);
      
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertNotNull(timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals("", timeSeries1.getDomainDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals("", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
  }

  @Test
  public void test57() {}
//   @Test
//   public void test57()  throws Throwable  {
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       
//       String string0 = "_Im";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("_Im", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("_Im", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       
//       int int0 = 0;
//       timeSeries0.add((RegularTimePeriod) month0, (double) int0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("_Im", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("_Im", timeSeries0.getDomainDescription());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       
//       Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
//       assertNotNull(collection0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("_Im", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("_Im", timeSeries0.getDomainDescription());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//   }

  @Test
  public void test58()  throws Throwable  {
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      
      String string0 = "Invalid 'index': ";
      timeSeries0.setDomainDescription(string0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Invalid 'index': ", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
  }

  @Test
  public void test59() {}
//   @Test
//   public void test59()  throws Throwable  {
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       
//       String string0 = "_Im";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("_Im", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("_Im", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       
//       int int0 = 8;
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (double) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("_Im", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("_Im", timeSeries0.getRangeDescription());
//       assertEquals(8.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(8.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       
//       Week week0 = new Week(int0, int0);
//       assertNotNull(week0);
//       assertEquals(8, week0.getYearValue());
//       assertEquals(8, week0.getWeek());
//       assertEquals((-61910308800001L), week0.getMiddleMillisecond());
//       assertEquals((-61910611200000L), week0.getFirstMillisecond());
//       assertEquals((-61910006400001L), week0.getLastMillisecond());
//       assertEquals(432L, week0.getSerialIndex());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) week0);
//       assertNotNull(timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals("_Im", timeSeries1.getDomainDescription());
//       assertEquals("_Im", timeSeries1.getRangeDescription());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(8.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(8.0, timeSeries1.getMaxY(), 0.01D);
//       assertNull(timeSeries1.getDescription());
//       assertEquals(8, week0.getYearValue());
//       assertEquals(8, week0.getWeek());
//       assertEquals((-61910308800001L), week0.getMiddleMillisecond());
//       assertEquals((-61910611200000L), week0.getFirstMillisecond());
//       assertEquals((-61910006400001L), week0.getLastMillisecond());
//       assertEquals(432L, week0.getSerialIndex());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("_Im", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("_Im", timeSeries0.getRangeDescription());
//       assertEquals(8.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(8.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//   }

  @Test
  public void test60()  throws Throwable  {
      int int0 = MonthConstants.OCTOBER;
      assertEquals(10, int0);
      
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      assertNotNull(timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals("", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals("", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertTrue(boolean0);
  }

  @Test
  public void test61()  throws Throwable  {
      int int0 = ComponentEvent.COMPONENT_RESIZED;
      assertEquals(101, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      
      String string0 = "";
      timeSeries0.setRangeDescription(string0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("", timeSeries0.getRangeDescription());
  }
}
