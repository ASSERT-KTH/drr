/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:18:56 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Component;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_Profile;
import java.util.Collection;
import java.util.List;
import javax.swing.AbstractButton;
import javax.swing.JComponent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.jfree.data.general.SeriesException;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

 
public class TimeSeriesEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00() {}
//   @Test(timeout = 4000)
//   public void test00()  throws Throwable  {
//       Minute minute0 = new Minute();
//       assertNotNull(minute0);
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       
//       Hour hour0 = minute0.getHour();
//       assertNotNull(hour0);
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       
//       String string0 = "You are trying to add data where the time period class is ";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("You are trying to add data where the time period class is ", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("You are trying to add data where the time period class is ", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       
//       int int0 = JComponent.WHEN_FOCUSED;
//       assertEquals(0, int0);
//       
//       Number number0 = timeSeries0.getValue((RegularTimePeriod) minute0);
//       assertNull(number0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("You are trying to add data where the time period class is ", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("You are trying to add data where the time period class is ", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       
//       timeSeries0.setMaximumItemCount(int0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("You are trying to add data where the time period class is ", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("You are trying to add data where the time period class is ", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       
//       timeSeries0.add((RegularTimePeriod) hour0, number0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("You are trying to add data where the time period class is ", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("You are trying to add data where the time period class is ", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//   }

  @Test(timeout = 4000)
  public void test01() {}
//   @Test(timeout = 4000)
//   public void test01()  throws Throwable  {
//       int int0 = 1111;
//       Year year0 = new Year(int0);
//       assertNotNull(year0);
//       assertEquals((-27091108800001L), year0.getMiddleMillisecond());
//       assertEquals("1111", year0.toString());
//       assertEquals(1111L, year0.getSerialIndex());
//       assertEquals((-27106876800000L), year0.getFirstMillisecond());
//       assertEquals((-27075340800001L), year0.getLastMillisecond());
//       assertEquals(1111, year0.getYear());
//       
//       String string0 = "org.jfree.data.ti\"e.SerialDate";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals((-27091108800001L), year0.getMiddleMillisecond());
//       assertEquals("1111", year0.toString());
//       assertEquals(1111L, year0.getSerialIndex());
//       assertEquals((-27106876800000L), year0.getFirstMillisecond());
//       assertEquals((-27075340800001L), year0.getLastMillisecond());
//       assertEquals(1111, year0.getYear());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getDomainDescription());
//       
//       timeSeries0.add((RegularTimePeriod) year0, (double) int0);
//       assertEquals((-27091108800001L), year0.getMiddleMillisecond());
//       assertEquals("1111", year0.toString());
//       assertEquals(1111L, year0.getSerialIndex());
//       assertEquals((-27106876800000L), year0.getFirstMillisecond());
//       assertEquals((-27075340800001L), year0.getLastMillisecond());
//       assertEquals(1111, year0.getYear());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(1111.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1111.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getDomainDescription());
//       
//       int int1 = timeSeries0.hashCode();
//       assertEquals(572196404, int1);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals((-27091108800001L), year0.getMiddleMillisecond());
//       assertEquals("1111", year0.toString());
//       assertEquals(1111L, year0.getSerialIndex());
//       assertEquals((-27106876800000L), year0.getFirstMillisecond());
//       assertEquals((-27075340800001L), year0.getLastMillisecond());
//       assertEquals(1111, year0.getYear());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(1111.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1111.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getDomainDescription());
//   }

  @Test(timeout = 4000)
  public void test02() {}
//   @Test(timeout = 4000)
//   public void test02()  throws Throwable  {
//       int int0 = 1111;
//       Year year0 = new Year(int0);
//       assertNotNull(year0);
//       assertEquals("1111", year0.toString());
//       assertEquals((-27075340800001L), year0.getLastMillisecond());
//       assertEquals(1111, year0.getYear());
//       assertEquals((-27106876800000L), year0.getFirstMillisecond());
//       assertEquals((-27091108800001L), year0.getMiddleMillisecond());
//       assertEquals(1111L, year0.getSerialIndex());
//       
//       String string0 = "org.jfree.data.ti\"e.SerialDate";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals("1111", year0.toString());
//       assertEquals((-27075340800001L), year0.getLastMillisecond());
//       assertEquals(1111, year0.getYear());
//       assertEquals((-27106876800000L), year0.getFirstMillisecond());
//       assertEquals((-27091108800001L), year0.getMiddleMillisecond());
//       assertEquals(1111L, year0.getSerialIndex());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getRangeDescription());
//       
//       int int1 = timeSeries0.hashCode();
//       assertEquals((-1461334113), int1);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertEquals("1111", year0.toString());
//       assertEquals((-27075340800001L), year0.getLastMillisecond());
//       assertEquals(1111, year0.getYear());
//       assertEquals((-27106876800000L), year0.getFirstMillisecond());
//       assertEquals((-27091108800001L), year0.getMiddleMillisecond());
//       assertEquals(1111L, year0.getSerialIndex());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getRangeDescription());
//   }

  @Test(timeout = 4000)
  public void test03() {}
//   @Test(timeout = 4000)
//   public void test03()  throws Throwable  {
//       Minute minute0 = new Minute();
//       assertNotNull(minute0);
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       
//       Day day0 = minute0.getDay();
//       assertNotNull(day0);
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2014, day0.getYear());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2014, day0.getYear());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) minute0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertNotNull(timeSeries1);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(true, timeSeries1.getNotify());
//       assertNull(timeSeries1.getDescription());
//       
//       int int0 = 13;
//       timeSeries0.setMaximumItemCount(int0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(13, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2014, day0.getYear());
//       
//       boolean boolean0 = timeSeries1.equals((Object) timeSeries0);
//       assertFalse(boolean0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(13, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(true, timeSeries1.getNotify());
//       assertNull(timeSeries1.getDescription());
//   }

  @Test(timeout = 4000)
  public void test04() {}
//   @Test(timeout = 4000)
//   public void test04()  throws Throwable  {
//       int int0 = 0;
//       Year year0 = new Year(int0);
//       assertNotNull(year0);
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals(0, year0.getYear());
//       assertEquals("0", year0.toString());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       
//       String string0 = "vu2J:B";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals("vu2J:B", timeSeries0.getDomainDescription());
//       assertEquals("vu2J:B", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals(0, year0.getYear());
//       assertEquals("0", year0.toString());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       
//       timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) int0);
//       assertEquals("vu2J:B", timeSeries0.getDomainDescription());
//       assertEquals("vu2J:B", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals(0, year0.getYear());
//       assertEquals("0", year0.toString());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       
//       String string1 = timeSeries0.getRangeDescription();
//       assertEquals("vu2J:B", string1);
//       assertSame(string0, string1);
//       assertSame(string1, string0);
//       assertNotNull(string1);
//       assertEquals("vu2J:B", timeSeries0.getDomainDescription());
//       assertEquals("vu2J:B", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals(0, year0.getYear());
//       assertEquals("0", year0.toString());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       
//       TimeSeries timeSeries1 = new TimeSeries((Comparable) string1, string1, string1);
//       assertSame(string0, string1);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertSame(string1, string0);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotNull(timeSeries1);
//       assertEquals("vu2J:B", timeSeries0.getDomainDescription());
//       assertEquals("vu2J:B", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(true, timeSeries1.getNotify());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("vu2J:B", timeSeries1.getDomainDescription());
//       assertEquals("vu2J:B", timeSeries1.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals(0, year0.getYear());
//       assertEquals("0", year0.toString());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       
//       boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
//       assertFalse(boolean0);
//       assertSame(string0, string1);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertSame(string1, string0);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertEquals("vu2J:B", timeSeries0.getDomainDescription());
//       assertEquals("vu2J:B", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(true, timeSeries1.getNotify());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("vu2J:B", timeSeries1.getDomainDescription());
//       assertEquals("vu2J:B", timeSeries1.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals(0, year0.getYear());
//       assertEquals("0", year0.toString());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//   }

  @Test(timeout = 4000)
  public void test05() {}
//   @Test(timeout = 4000)
//   public void test05()  throws Throwable  {
//       Minute minute0 = new Minute();
//       assertNotNull(minute0);
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       
//       Day day0 = minute0.getDay();
//       assertNotNull(day0);
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       
//       Hour hour0 = minute0.getHour();
//       assertNotNull(hour0);
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       
//       boolean boolean0 = hour0.equals((Object) minute0);
//       assertFalse(boolean0);
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
//       assertNotNull(timeSeries0);
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       
//       String string0 = null;
//       TimeSeries timeSeries1 = new TimeSeries((Comparable) boolean0, string0, string0);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotNull(timeSeries1);
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertNull(timeSeries1.getDomainDescription());
//       assertNull(timeSeries1.getRangeDescription());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       
//       boolean boolean1 = timeSeries0.equals((Object) timeSeries1);
//       assertFalse(boolean1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertTrue(boolean1 == boolean0);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertTrue(boolean0 == boolean1);
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertNull(timeSeries1.getDomainDescription());
//       assertNull(timeSeries1.getRangeDescription());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//   }

  @Test(timeout = 4000)
  public void test06() {}
//   @Test(timeout = 4000)
//   public void test06()  throws Throwable  {
//       String string0 = "1`PG[z+HPj|";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertNotNull(timeSeries0);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       Second second0 = new Second();
//       assertNotNull(second0);
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(1392409281499L, second0.getMiddleMillisecond());
//       assertEquals(21, second0.getSecond());
//       
//       Second second1 = (Second)second0.next();
//       assertNotSame(second1, second0);
//       assertNotSame(second0, second1);
//       assertFalse(second1.equals((Object)second0));
//       assertFalse(second0.equals((Object)second1));
//       assertNotNull(second1);
//       assertEquals(22, second1.getSecond());
//       assertEquals(1392409282999L, second1.getLastMillisecond());
//       assertEquals(1392409282000L, second1.getFirstMillisecond());
//       assertEquals(1392409282499L, second1.getMiddleMillisecond());
//       assertEquals(3601570882L, second1.getSerialIndex());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(1392409281499L, second0.getMiddleMillisecond());
//       assertEquals(21, second0.getSecond());
//       
//       // Undeclared exception!
//       try {
//         TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) second1, (RegularTimePeriod) second0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Requires start on or before end.
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = (-15);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
      assertNotNull(fixedMillisecond0);
      assertEquals((-15L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-15L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-15L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-15L), fixedMillisecond0.getSerialIndex());
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
      }
  }

  ////@Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 1111;
      Year year0 = new Year(int0);
      assertNotNull(year0);
      assertEquals((-27075340800001L), year0.getLastMillisecond());
      assertEquals((-27106876800000L), year0.getFirstMillisecond());
      assertEquals(1111L, year0.getSerialIndex());
      assertEquals("1111", year0.toString());
      assertEquals((-27091108800001L), year0.getMiddleMillisecond());
      assertEquals(1111, year0.getYear());
      
      String string0 = "org.jfree.data.ti\"e.SerialDate";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals((-27075340800001L), year0.getLastMillisecond());
      assertEquals((-27106876800000L), year0.getFirstMillisecond());
      assertEquals(1111L, year0.getSerialIndex());
      assertEquals("1111", year0.toString());
      assertEquals((-27091108800001L), year0.getMiddleMillisecond());
      assertEquals(1111, year0.getYear());
      
      Year year1 = null;
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year1, (RegularTimePeriod) year0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test09() {}
//   @Test(timeout = 4000)
//   public void test09()  throws Throwable  {
//       Day day0 = new Day();
//       assertNotNull(day0);
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertNull(timeSeries0.getDescription());
//       assertNull(timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       
//       int int0 = ICC_Profile.icICCAbsoluteColorimetric;
//       assertEquals(3, int0);
//       
//       int int1 = 0;
//       assertFalse(int1 == int0);
//       
//       // Undeclared exception!
//       try {
//         TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int1);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Requires start <= end.
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test10() {}
//   @Test(timeout = 4000)
//   public void test10()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       
//       Day day0 = hour0.getDay();
//       assertNotNull(day0);
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       
//       String string0 = "";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       int int0 = (-2275);
//       // Undeclared exception!
//       try {
//         TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Requires start >= 0.
//          //
//       }
//   }

  ////@Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 1111;
      Year year0 = new Year(int0);
      assertNotNull(year0);
      assertEquals((-27106876800000L), year0.getFirstMillisecond());
      assertEquals(1111, year0.getYear());
      assertEquals((-27075340800001L), year0.getLastMillisecond());
      assertEquals((-27091108800001L), year0.getMiddleMillisecond());
      assertEquals(1111L, year0.getSerialIndex());
      assertEquals("1111", year0.toString());
      
      String string0 = "org.jfree.data.ti\"e.SerialDate";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getRangeDescription());
      assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals((-27106876800000L), year0.getFirstMillisecond());
      assertEquals(1111, year0.getYear());
      assertEquals((-27075340800001L), year0.getLastMillisecond());
      assertEquals((-27091108800001L), year0.getMiddleMillisecond());
      assertEquals(1111L, year0.getSerialIndex());
      assertEquals("1111", year0.toString());
      
      timeSeries0.add((RegularTimePeriod) year0, (double) int0);
      assertEquals(1111.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getRangeDescription());
      assertEquals(1111.0, timeSeries0.getMinY(), 0.01D);
      assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals((-27106876800000L), year0.getFirstMillisecond());
      assertEquals(1111, year0.getYear());
      assertEquals((-27075340800001L), year0.getLastMillisecond());
      assertEquals((-27091108800001L), year0.getMiddleMillisecond());
      assertEquals(1111L, year0.getSerialIndex());
      assertEquals("1111", year0.toString());
      
      boolean boolean0 = false;
      int int1 = timeSeries0.getMaximumItemCount();
      assertEquals(Integer.MAX_VALUE, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1111.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getRangeDescription());
      assertEquals(1111.0, timeSeries0.getMinY(), 0.01D);
      assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals((-27106876800000L), year0.getFirstMillisecond());
      assertEquals(1111, year0.getYear());
      assertEquals((-27075340800001L), year0.getLastMillisecond());
      assertEquals((-27091108800001L), year0.getMiddleMillisecond());
      assertEquals(1111L, year0.getSerialIndex());
      assertEquals("1111", year0.toString());
      
      int int2 = (-79);
      assertFalse(int2 == int1);
      
      timeSeries0.delete(int2, int1, boolean0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1111.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getRangeDescription());
      assertEquals(1111.0, timeSeries0.getMinY(), 0.01D);
      assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals((-27106876800000L), year0.getFirstMillisecond());
      assertEquals(1111, year0.getYear());
      assertEquals((-27075340800001L), year0.getLastMillisecond());
      assertEquals((-27091108800001L), year0.getMiddleMillisecond());
      assertEquals(1111L, year0.getSerialIndex());
      assertEquals("1111", year0.toString());
  }

  @Test(timeout = 4000)
  public void test12() {}
//   @Test(timeout = 4000)
//   public void test12()  throws Throwable  {
//       int int0 = (-551);
//       Week week0 = new Week(int0, int0);
//       assertNotNull(week0);
//       assertEquals((-79579238400001L), week0.getLastMillisecond());
//       assertEquals((-79579843200000L), week0.getFirstMillisecond());
//       assertEquals(-551, week0.getYearValue());
//       assertEquals((-29242L), week0.getSerialIndex());
//       assertEquals(-39, week0.getWeek());
//       assertEquals((-79579540800001L), week0.getMiddleMillisecond());
//       
//       boolean boolean0 = true;
//       Week week1 = (Week)week0.next();
//       assertNotSame(week0, week1);
//       assertNotSame(week1, week0);
//       assertFalse(week0.equals((Object)week1));
//       assertFalse(week1.equals((Object)week0));
//       assertNotNull(week1);
//       assertEquals((-79579238400001L), week0.getLastMillisecond());
//       assertEquals((-79579843200000L), week0.getFirstMillisecond());
//       assertEquals(-551, week0.getYearValue());
//       assertEquals((-29242L), week0.getSerialIndex());
//       assertEquals(-39, week0.getWeek());
//       assertEquals((-79579540800001L), week0.getMiddleMillisecond());
//       assertEquals((-79578936000001L), week1.getMiddleMillisecond());
//       assertEquals(-38, week1.getWeek());
//       assertEquals((-79578633600001L), week1.getLastMillisecond());
//       assertEquals((-79579238400000L), week1.getFirstMillisecond());
//       assertEquals((-29241L), week1.getSerialIndex());
//       assertEquals(-551, week1.getYearValue());
//       
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       int int1 = timeSeries0.hashCode();
//       assertEquals(231809606, int1);
//       assertFalse(int1 == int0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.delete(int1, int0, boolean0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Requires start <= end.
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test13() {}
//   @Test(timeout = 4000)
//   public void test13()  throws Throwable  {
//       Minute minute0 = new Minute();
//       assertNotNull(minute0);
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       
//       Day day0 = minute0.getDay();
//       assertNotNull(day0);
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       
//       Hour hour0 = minute0.getHour();
//       assertNotNull(hour0);
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
//       assertNotNull(timeSeries0);
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       
//       int int0 = ColorSpace.TYPE_HSV;
//       assertEquals(7, int0);
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(7.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(7.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       
//       timeSeries0.delete((RegularTimePeriod) hour0);
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//   }

  ////@Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = (-4103);
      Year year0 = new Year(int0);
      assertNotNull(year0);
      assertEquals(67374115199999L, year0.getLastMillisecond());
      assertEquals(-4103, year0.getYear());
      assertEquals((-62137022400001L), year0.getMiddleMillisecond());
      assertEquals("-4103", year0.toString());
      assertEquals((-191648160000000L), year0.getFirstMillisecond());
      assertEquals((-4103L), year0.getSerialIndex());
      
      String string0 = "org.jfree.data.time.SerialDate";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(67374115199999L, year0.getLastMillisecond());
      assertEquals(-4103, year0.getYear());
      assertEquals((-62137022400001L), year0.getMiddleMillisecond());
      assertEquals("-4103", year0.toString());
      assertEquals((-191648160000000L), year0.getFirstMillisecond());
      assertEquals((-4103L), year0.getSerialIndex());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("org.jfree.data.time.SerialDate", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("org.jfree.data.time.SerialDate", timeSeries0.getDomainDescription());
      
      timeSeries0.delete((RegularTimePeriod) year0);
      assertEquals(67374115199999L, year0.getLastMillisecond());
      assertEquals(-4103, year0.getYear());
      assertEquals((-62137022400001L), year0.getMiddleMillisecond());
      assertEquals("-4103", year0.toString());
      assertEquals((-191648160000000L), year0.getFirstMillisecond());
      assertEquals((-4103L), year0.getSerialIndex());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("org.jfree.data.time.SerialDate", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("org.jfree.data.time.SerialDate", timeSeries0.getDomainDescription());
  }

  ////@Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = (-4103);
      Year year0 = new Year(int0);
      assertNotNull(year0);
      assertEquals("-4103", year0.toString());
      assertEquals((-4103L), year0.getSerialIndex());
      assertEquals(67374115199999L, year0.getLastMillisecond());
      assertEquals((-191648160000000L), year0.getFirstMillisecond());
      assertEquals(-4103, year0.getYear());
      assertEquals((-62137022400001L), year0.getMiddleMillisecond());
      
      String string0 = "org.jfree.data.time.SerialDate";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, string0, string0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("org.jfree.data.time.SerialDate", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("org.jfree.data.time.SerialDate", timeSeries0.getRangeDescription());
      assertEquals("-4103", year0.toString());
      assertEquals((-4103L), year0.getSerialIndex());
      assertEquals(67374115199999L, year0.getLastMillisecond());
      assertEquals((-191648160000000L), year0.getFirstMillisecond());
      assertEquals(-4103, year0.getYear());
      assertEquals((-62137022400001L), year0.getMiddleMillisecond());
      
      timeSeries0.add((RegularTimePeriod) year0, (double) int0);
      assertNull(timeSeries0.getDescription());
      assertEquals("org.jfree.data.time.SerialDate", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals((-4103.0), timeSeries0.getMinY(), 0.01D);
      assertEquals((-4103.0), timeSeries0.getMaxY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("org.jfree.data.time.SerialDate", timeSeries0.getRangeDescription());
      assertEquals("-4103", year0.toString());
      assertEquals((-4103L), year0.getSerialIndex());
      assertEquals(67374115199999L, year0.getLastMillisecond());
      assertEquals((-191648160000000L), year0.getFirstMillisecond());
      assertEquals(-4103, year0.getYear());
      assertEquals((-62137022400001L), year0.getMiddleMillisecond());
      
      timeSeries0.clear();
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("org.jfree.data.time.SerialDate", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("org.jfree.data.time.SerialDate", timeSeries0.getRangeDescription());
      assertEquals("-4103", year0.toString());
      assertEquals((-4103L), year0.getSerialIndex());
      assertEquals(67374115199999L, year0.getLastMillisecond());
      assertEquals((-191648160000000L), year0.getFirstMillisecond());
      assertEquals(-4103, year0.getYear());
      assertEquals((-62137022400001L), year0.getMiddleMillisecond());
  }

  ////@Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      Year year0 = new Year(int0);
      assertNotNull(year0);
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals("0", year0.toString());
      assertEquals(0, year0.getYear());
      
      String string0 = "vu2J:B";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals("0", year0.toString());
      assertEquals(0, year0.getYear());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("vu2J:B", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("vu2J:B", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      
      timeSeries0.clear();
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals("0", year0.toString());
      assertEquals(0, year0.getYear());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("vu2J:B", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("vu2J:B", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Minute minute0 = new Minute();
      //  // Unstable assertion: assertNotNull(minute0);
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      
      Day day0 = minute0.getDay();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      
      Hour hour0 = minute0.getHour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392409799999L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392408000000L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411599999L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries0);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      
      int int0 = ColorSpace.TYPE_HSV;
      //  // Unstable assertion: assertEquals(7, int0);
      
      timeSeries0.add((RegularTimePeriod) hour0, (Number) int0);
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(7.0, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(7.0, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392409799999L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392408000000L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411599999L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      
      timeSeries0.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Day day0 = new Day();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      
      String string0 = null;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      int int0 = ICC_Profile.icICCAbsoluteColorimetric;
      //  // Unstable assertion: assertEquals(3, int0);
      
      timeSeries0.add((RegularTimePeriod) day0, (Number) int0);
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(3.0, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(3.0, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(21, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281499L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281000L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281999L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570881L, second0.getSerialIndex());
      
      boolean boolean0 = timeSeries0.equals((Object) second0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(3.0, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(3.0, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(21, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281499L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281000L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281999L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570881L, second0.getSerialIndex());
      
      long long0 = day0.getLastMillisecond();
      //  // Unstable assertion: assertEquals(1392422399999L, long0);
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      
      timeSeries0.removeAgedItems(long0, boolean0);
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(3.0, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(3.0, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(21, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281499L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281000L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281999L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570881L, second0.getSerialIndex());
      
      timeSeries0.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(21, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281499L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281000L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281999L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570881L, second0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test19() {}
//   @Test(timeout = 4000)
//   public void test19()  throws Throwable  {
//       Minute minute0 = new Minute();
//       assertNotNull(minute0);
//       assertEquals(21, minute0.getMinute());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       
//       Hour hour0 = minute0.getHour();
//       assertNotNull(hour0);
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       
//       boolean boolean0 = hour0.equals((Object) minute0);
//       assertFalse(boolean0);
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       
//       String string0 = "The 'data' array must contain three arrays all having the same length.";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals("The 'data' array must contain three arrays all having the same length.", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("The 'data' array must contain three arrays all having the same length.", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       
//       int int0 = JComponent.WHEN_FOCUSED;
//       assertEquals(0, int0);
//       
//       timeSeries0.removeAgedItems((long) int0, boolean0);
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals("The 'data' array must contain three arrays all having the same length.", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("The 'data' array must contain three arrays all having the same length.", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//   }

  @Test(timeout = 4000)
  public void test20() {}
//   @Test(timeout = 4000)
//   public void test20()  throws Throwable  {
//       int int0 = 0;
//       Year year0 = new Year(int0);
//       assertNotNull(year0);
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals("0", year0.toString());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals(0, year0.getYear());
//       
//       String string0 = "vu2J:B";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals("0", year0.toString());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals(0, year0.getYear());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("vu2J:B", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("vu2J:B", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       
//       timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) int0);
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals("0", year0.toString());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals(0, year0.getYear());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals("vu2J:B", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("vu2J:B", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       
//       timeSeries0.setMaximumItemAge((long) int0);
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals("0", year0.toString());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals(0, year0.getYear());
//       assertEquals("vu2J:B", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("vu2J:B", timeSeries0.getDomainDescription());
//       assertEquals(0L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       
//       FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.previous();
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertNotNull(fixedMillisecond1);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281319L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getLastMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281319L, fixedMillisecond1.getFirstMillisecond());
//       
//       timeSeries0.add((RegularTimePeriod) fixedMillisecond1, (Number) int0);
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals("0", year0.toString());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals(0, year0.getYear());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281319L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getLastMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281319L, fixedMillisecond1.getFirstMillisecond());
//       assertEquals("vu2J:B", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("vu2J:B", timeSeries0.getDomainDescription());
//       assertEquals(0L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//   }

  @Test(timeout = 4000)
  public void test21() {}
//   @Test(timeout = 4000)
//   public void test21()  throws Throwable  {
//       int int0 = (-551);
//       Week week0 = new Week(int0, int0);
//       assertNotNull(week0);
//       assertEquals((-29242L), week0.getSerialIndex());
//       assertEquals((-79579540800001L), week0.getMiddleMillisecond());
//       assertEquals(-39, week0.getWeek());
//       assertEquals((-79579238400001L), week0.getLastMillisecond());
//       assertEquals((-79579843200000L), week0.getFirstMillisecond());
//       assertEquals(-551, week0.getYearValue());
//       
//       boolean boolean0 = true;
//       Week week1 = (Week)week0.next();
//       assertNotSame(week0, week1);
//       assertNotSame(week1, week0);
//       assertFalse(week0.equals((Object)week1));
//       assertFalse(week1.equals((Object)week0));
//       assertNotNull(week1);
//       assertEquals((-29242L), week0.getSerialIndex());
//       assertEquals((-79579540800001L), week0.getMiddleMillisecond());
//       assertEquals(-39, week0.getWeek());
//       assertEquals((-79579238400001L), week0.getLastMillisecond());
//       assertEquals((-79579843200000L), week0.getFirstMillisecond());
//       assertEquals(-551, week0.getYearValue());
//       assertEquals(-551, week1.getYearValue());
//       assertEquals((-79579238400000L), week1.getFirstMillisecond());
//       assertEquals((-29241L), week1.getSerialIndex());
//       assertEquals((-79578936000001L), week1.getMiddleMillisecond());
//       assertEquals(-38, week1.getWeek());
//       assertEquals((-79578633600001L), week1.getLastMillisecond());
//       
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       
//       int int1 = timeSeries0.hashCode();
//       assertEquals(231809606, int1);
//       assertFalse(int1 == int0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) int1);
//       assertNotSame(week0, week1);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertFalse(week0.equals((Object)week1));
//       assertNull(timeSeriesDataItem0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2.31809606E8, timeSeries0.getMinY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2.31809606E8, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals((-29242L), week0.getSerialIndex());
//       assertEquals((-79579540800001L), week0.getMiddleMillisecond());
//       assertEquals(-39, week0.getWeek());
//       assertEquals((-79579238400001L), week0.getLastMillisecond());
//       assertEquals((-79579843200000L), week0.getFirstMillisecond());
//       assertEquals(-551, week0.getYearValue());
//       
//       timeSeries0.add((RegularTimePeriod) week1, (Number) int1);
//       assertNotSame(week0, week1);
//       assertNotSame(week1, week0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertFalse(week0.equals((Object)week1));
//       assertFalse(week1.equals((Object)week0));
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals(2.31809606E8, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2.31809606E8, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals((-29242L), week0.getSerialIndex());
//       assertEquals((-79579540800001L), week0.getMiddleMillisecond());
//       assertEquals(-39, week0.getWeek());
//       assertEquals((-79579238400001L), week0.getLastMillisecond());
//       assertEquals((-79579843200000L), week0.getFirstMillisecond());
//       assertEquals(-551, week0.getYearValue());
//       assertEquals(-551, week1.getYearValue());
//       assertEquals((-79579238400000L), week1.getFirstMillisecond());
//       assertEquals((-29241L), week1.getSerialIndex());
//       assertEquals((-79578936000001L), week1.getMiddleMillisecond());
//       assertEquals(-38, week1.getWeek());
//       assertEquals((-79578633600001L), week1.getLastMillisecond());
//       
//       int int2 = 0;
//       assertFalse(int2 == int1);
//       
//       timeSeries0.setMaximumItemAge((long) int2);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int0);
//       assertEquals(0L, timeSeries0.getMaximumItemAge());
//       assertEquals(2.31809606E8, timeSeries0.getMinY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2.31809606E8, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//   }

  @Test(timeout = 4000)
  public void test22() {}
//   @Test(timeout = 4000)
//   public void test22()  throws Throwable  {
//       Day day0 = new Day();
//       assertNotNull(day0);
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2, day0.getMonth());
//       
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2, day0.getMonth());
//       
//       int int0 = 0;
//       double double0 = timeSeries0.getMinY();
//       assertEquals(Double.NaN, double0, 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2, day0.getMonth());
//       
//       timeSeries0.setMaximumItemCount(int0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2, day0.getMonth());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, double0);
//       assertNull(timeSeriesDataItem0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2, day0.getMonth());
//   }

  @Test(timeout = 4000)
  public void test23() {}
//   @Test(timeout = 4000)
//   public void test23()  throws Throwable  {
//       Day day0 = new Day();
//       assertNotNull(day0);
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       
//       Number number0 = null;
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, number0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       
//       int int0 = ICC_Profile.icICCAbsoluteColorimetric;
//       assertEquals(3, int0);
//       
//       TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) int0);
//       assertNotNull(timeSeriesDataItem1);
//       assertEquals(false, timeSeriesDataItem1.isSelected());
//       assertNull(timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(3.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(3.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//   }

  @Test(timeout = 4000)
  public void test24() {}
//   @Test(timeout = 4000)
//   public void test24()  throws Throwable  {
//       Day day0 = new Day();
//       assertNotNull(day0);
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertNull(timeSeries0.getDescription());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       Number number0 = null;
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, number0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertNull(timeSeries0.getDescription());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       
//       TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, number0);
//       assertNotNull(timeSeriesDataItem1);
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(false, timeSeriesDataItem1.isSelected());
//       assertNull(timeSeries0.getDescription());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//   }

  @Test(timeout = 4000)
  public void test25() {}
//   @Test(timeout = 4000)
//   public void test25()  throws Throwable  {
//       Minute minute0 = new Minute();
//       assertNotNull(minute0);
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       
//       Hour hour0 = minute0.getHour();
//       assertNotNull(hour0);
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       
//       String string0 = "You are trying to add data where the time period class is ";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("You are trying to add data where the time period class is ", timeSeries0.getDomainDescription());
//       assertEquals("You are trying to add data where the time period class is ", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       
//       int int0 = JComponent.WHEN_FOCUSED;
//       assertEquals(0, int0);
//       
//       timeSeries0.add((RegularTimePeriod) minute0, (Number) int0);
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("You are trying to add data where the time period class is ", timeSeries0.getDomainDescription());
//       assertEquals("You are trying to add data where the time period class is ", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       
//       // Undeclared exception!
//       try {
//         TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) int0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of org.jfree.data.time.Minute.
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test26() {}
//   @Test(timeout = 4000)
//   public void test26()  throws Throwable  {
//       Minute minute0 = new Minute();
//       assertNotNull(minute0);
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       
//       String string0 = "}+{?]k1_f'Z7S~P#Y";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries0.getDomainDescription());
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       
//       float float0 = Component.CENTER_ALIGNMENT;
//       assertEquals(0.5F, float0, 0.01F);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) float0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0.5, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0.5, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       
//       // Undeclared exception!
//       try {
//         TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'period' argument.
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test27() {}
//   @Test(timeout = 4000)
//   public void test27()  throws Throwable  {
//       Minute minute0 = new Minute();
//       assertNotNull(minute0);
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       
//       String string0 = "}+{?]k1_f'Z7S~P#Y";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       int int0 = 1255;
//       TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertNotNull(timeSeries1);
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries1.getDomainDescription());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries1.getRangeDescription());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       timeSeries1.add((RegularTimePeriod) minute0, (Number) int0);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries1.getDomainDescription());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(1255.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(1255.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries1.getRangeDescription());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
//       assertNotSame(timeSeries1, timeSeries2);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries0, timeSeries2);
//       assertNotSame(timeSeries2, timeSeries0);
//       assertNotSame(timeSeries2, timeSeries1);
//       assertFalse(timeSeries1.equals((Object)timeSeries2));
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries0.equals((Object)timeSeries2));
//       assertFalse(timeSeries2.equals((Object)timeSeries0));
//       assertFalse(timeSeries2.equals((Object)timeSeries1));
//       assertNotNull(timeSeries2);
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries1.getDomainDescription());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(1255.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(1255.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries1.getRangeDescription());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1255.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(1255.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries2.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
//       assertNull(timeSeries2.getDescription());
//       assertEquals(true, timeSeries2.getNotify());
//       assertEquals("Time", timeSeries2.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries2.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries2.getRangeDescription());
//       assertEquals(0, timeSeries2.getItemCount());
//       assertEquals(2147483647, timeSeries2.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries2.getMinY(), 0.01D);
//   }

  @Test(timeout = 4000)
  public void test28() {}
//   @Test(timeout = 4000)
//   public void test28()  throws Throwable  {
//       Day day0 = new Day();
//       assertNotNull(day0);
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDomainDescription());
//       
//       int int0 = ICC_Profile.icICCAbsoluteColorimetric;
//       assertEquals(3, int0);
//       
//       timeSeries0.add((RegularTimePeriod) day0, (Number) int0);
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(3.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(3.0, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       
//       TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertNotNull(timeSeries1);
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(3.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(3.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(3.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(3.0, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//   }

  @Test(timeout = 4000)
  public void test29() {}
//   @Test(timeout = 4000)
//   public void test29()  throws Throwable  {
//       Minute minute0 = new Minute();
//       assertNotNull(minute0);
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       
//       Hour hour0 = minute0.getHour();
//       assertNotNull(hour0);
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       
//       String string0 = "The 'data' array must contain three arrays all having the same length.";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("The 'data' array must contain three arrays all having the same length.", timeSeries0.getDomainDescription());
//       assertEquals("The 'data' array must contain three arrays all having the same length.", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       int int0 = JComponent.WHEN_FOCUSED;
//       assertEquals(0, int0);
//       
//       Number number0 = timeSeries0.getValue((RegularTimePeriod) minute0);
//       assertNull(number0);
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("The 'data' array must contain three arrays all having the same length.", timeSeries0.getDomainDescription());
//       assertEquals("The 'data' array must contain three arrays all having the same length.", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       timeSeries0.add((RegularTimePeriod) hour0, number0);
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals("The 'data' array must contain three arrays all having the same length.", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("The 'data' array must contain three arrays all having the same length.", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       timeSeries0.update(int0, (Number) int0);
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("The 'data' array must contain three arrays all having the same length.", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("The 'data' array must contain three arrays all having the same length.", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//   }

  @Test(timeout = 4000)
  public void test30() {}
//   @Test(timeout = 4000)
//   public void test30()  throws Throwable  {
//       Day day0 = new Day();
//       assertNotNull(day0);
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       
//       int int0 = ICC_Profile.icICCAbsoluteColorimetric;
//       assertEquals(3, int0);
//       
//       timeSeries0.add((RegularTimePeriod) day0, (Number) int0);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(3.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(3.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       
//       timeSeries0.update((RegularTimePeriod) day0, (Number) int0);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(3.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(3.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//   }

  @Test(timeout = 4000)
  public void test31() {}
//   @Test(timeout = 4000)
//   public void test31()  throws Throwable  {
//       Minute minute0 = new Minute();
//       assertNotNull(minute0);
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       
//       Day day0 = minute0.getDay();
//       assertNotNull(day0);
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
//       assertNotNull(timeSeries0);
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       
//       int int0 = ColorSpace.TYPE_HSV;
//       assertEquals(7, int0);
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.update((RegularTimePeriod) minute0, (Number) int0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // There is no existing value for the specified 'period'.
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test32() {}
//   @Test(timeout = 4000)
//   public void test32()  throws Throwable  {
//       Day day0 = new Day();
//       assertNotNull(day0);
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       
//       Number number0 = null;
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, number0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       
//       timeSeries0.update((RegularTimePeriod) hour0, number0);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//   }

  @Test(timeout = 4000)
  public void test33() {}
//   @Test(timeout = 4000)
//   public void test33()  throws Throwable  {
//       Minute minute0 = new Minute();
//       assertNotNull(minute0);
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       
//       Day day0 = minute0.getDay();
//       assertNotNull(day0);
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       
//       Hour hour0 = minute0.getHour();
//       assertNotNull(hour0);
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       
//       Hour hour1 = (Hour)hour0.previous();
//       assertNotSame(hour1, hour0);
//       assertNotSame(hour0, hour1);
//       assertFalse(hour1.equals((Object)hour0));
//       assertFalse(hour0.equals((Object)hour1));
//       assertNotNull(hour1);
//       assertEquals(1392406199999L, hour1.getMiddleMillisecond());
//       assertEquals(1392404400000L, hour1.getFirstMillisecond());
//       assertEquals(2, hour1.getMonth());
//       assertEquals(1392407999999L, hour1.getLastMillisecond());
//       assertEquals(2014, hour1.getYear());
//       assertEquals(14, hour1.getDayOfMonth());
//       assertEquals(19, hour1.getHour());
//       assertEquals(1000435L, hour1.getSerialIndex());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       
//       boolean boolean0 = hour0.equals((Object) minute0);
//       assertFalse(boolean0);
//       assertNotSame(hour0, hour1);
//       assertFalse(hour0.equals((Object)hour1));
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       
//       int int0 = ColorSpace.TYPE_HSV;
//       assertEquals(7, int0);
//       
//       timeSeries0.add((RegularTimePeriod) hour1, (Number) int0);
//       assertNotSame(hour1, hour0);
//       assertNotSame(hour0, hour1);
//       assertFalse(hour1.equals((Object)hour0));
//       assertFalse(hour0.equals((Object)hour1));
//       assertEquals(7.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(7.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392406199999L, hour1.getMiddleMillisecond());
//       assertEquals(1392404400000L, hour1.getFirstMillisecond());
//       assertEquals(2, hour1.getMonth());
//       assertEquals(1392407999999L, hour1.getLastMillisecond());
//       assertEquals(2014, hour1.getYear());
//       assertEquals(14, hour1.getDayOfMonth());
//       assertEquals(19, hour1.getHour());
//       assertEquals(1000435L, hour1.getSerialIndex());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       
//       timeSeries0.add((RegularTimePeriod) hour0, (double) int0, boolean0);
//       assertNotSame(hour0, hour1);
//       assertFalse(hour0.equals((Object)hour1));
//       assertEquals(7.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(7.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//   }

  @Test(timeout = 4000)
  public void test34() {}
//   @Test(timeout = 4000)
//   public void test34()  throws Throwable  {
//       Day day0 = new Day();
//       assertNotNull(day0);
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(14, day0.getDayOfMonth());
//       
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       
//       Number number0 = null;
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, number0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       
//       int int0 = ICC_Profile.icICCAbsoluteColorimetric;
//       assertEquals(3, int0);
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.add((RegularTimePeriod) day0, (Number) int0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test35() {}
//   @Test(timeout = 4000)
//   public void test35()  throws Throwable  {
//       int int0 = (-4103);
//       Year year0 = new Year(int0);
//       assertNotNull(year0);
//       assertEquals((-62137022400001L), year0.getMiddleMillisecond());
//       assertEquals((-4103L), year0.getSerialIndex());
//       assertEquals("-4103", year0.toString());
//       assertEquals(67374115199999L, year0.getLastMillisecond());
//       assertEquals((-191648160000000L), year0.getFirstMillisecond());
//       assertEquals(-4103, year0.getYear());
//       
//       String string0 = "org.jfree.data.time.SerialDate";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals((-62137022400001L), year0.getMiddleMillisecond());
//       assertEquals((-4103L), year0.getSerialIndex());
//       assertEquals("-4103", year0.toString());
//       assertEquals(67374115199999L, year0.getLastMillisecond());
//       assertEquals((-191648160000000L), year0.getFirstMillisecond());
//       assertEquals(-4103, year0.getYear());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("org.jfree.data.time.SerialDate", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("org.jfree.data.time.SerialDate", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       timeSeries0.add((RegularTimePeriod) year0, (double) int0);
//       assertEquals((-62137022400001L), year0.getMiddleMillisecond());
//       assertEquals((-4103L), year0.getSerialIndex());
//       assertEquals("-4103", year0.toString());
//       assertEquals(67374115199999L, year0.getLastMillisecond());
//       assertEquals((-191648160000000L), year0.getFirstMillisecond());
//       assertEquals(-4103, year0.getYear());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("org.jfree.data.time.SerialDate", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("org.jfree.data.time.SerialDate", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals((-4103.0), timeSeries0.getMinY(), 0.01D);
//       assertEquals((-4103.0), timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) int0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Year.
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test36() {}
//   @Test(timeout = 4000)
//   public void test36()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       assertNotNull(quarter0);
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
//       assertNotNull(timeSeries0);
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) quarter0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       
//       boolean boolean0 = true;
//       // Undeclared exception!
//       try {
//         timeSeries0.add(timeSeriesDataItem0, boolean0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'item' argument.
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = AbstractButton.TEXT_CHANGED_PROPERTY;
      assertEquals("text", string0);
      assertNotNull(string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        timeSeries0.delete(regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test38() {}
//   @Test(timeout = 4000)
//   public void test38()  throws Throwable  {
//       byte byte0 = (byte)45;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) byte0);
//       assertNotNull(timeSeries0);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       TimeSeries timeSeries1 = new TimeSeries((Comparable) byte0);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertNotNull(timeSeries1);
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       
//       boolean boolean0 = false;
//       timeSeries1.add((RegularTimePeriod) fixedMillisecond0, (Number) byte0, boolean0);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertEquals(45.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(45.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals(1, timeSeries1.getItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       
//       Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertNotNull(collection0);
//       assertEquals(45.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(45.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals(1, timeSeries1.getItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//   }

  @Test(timeout = 4000)
  public void test39() {}
//   @Test(timeout = 4000)
//   public void test39()  throws Throwable  {
//       byte byte0 = (byte)45;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) byte0);
//       assertNotNull(timeSeries0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       
//       boolean boolean0 = false;
//       timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) byte0, boolean0);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(45.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(45.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
//       assertNotNull(collection0);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(45.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(45.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//   }

  @Test(timeout = 4000)
  public void test40() {}
//   @Test(timeout = 4000)
//   public void test40()  throws Throwable  {
//       Minute minute0 = new Minute();
//       assertNotNull(minute0);
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       
//       String string0 = "}+{?]k1_f'Z7S~P#Y";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries0.getDomainDescription());
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       int int0 = 1255;
//       timeSeries0.add((RegularTimePeriod) minute0, (Number) int0);
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries0.getDomainDescription());
//       assertEquals(1255.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries0.getRangeDescription());
//       assertEquals(1255.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       Collection collection0 = timeSeries0.getTimePeriods();
//       assertNotNull(collection0);
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries0.getDomainDescription());
//       assertEquals(1255.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries0.getRangeDescription());
//       assertEquals(1255.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//   }

  ////@Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 1111;
      Year year0 = new Year(int0);
      assertNotNull(year0);
      assertEquals((-27106876800000L), year0.getFirstMillisecond());
      assertEquals(1111, year0.getYear());
      assertEquals(1111L, year0.getSerialIndex());
      assertEquals((-27091108800001L), year0.getMiddleMillisecond());
      assertEquals((-27075340800001L), year0.getLastMillisecond());
      assertEquals("1111", year0.toString());
      
      String string0 = "org.jfree.data.ti\"e.SerialDate";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals((-27106876800000L), year0.getFirstMillisecond());
      assertEquals(1111, year0.getYear());
      assertEquals(1111L, year0.getSerialIndex());
      assertEquals((-27091108800001L), year0.getMiddleMillisecond());
      assertEquals((-27075340800001L), year0.getLastMillisecond());
      assertEquals("1111", year0.toString());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getDomainDescription());
      
      timeSeries0.add((RegularTimePeriod) year0, (double) int0);
      assertEquals((-27106876800000L), year0.getFirstMillisecond());
      assertEquals(1111, year0.getYear());
      assertEquals(1111L, year0.getSerialIndex());
      assertEquals((-27091108800001L), year0.getMiddleMillisecond());
      assertEquals((-27075340800001L), year0.getLastMillisecond());
      assertEquals("1111", year0.toString());
      assertEquals(1111.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getDomainDescription());
      assertEquals(1111.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(year0);
      assertNotNull(timeSeriesDataItem0);
      assertEquals((-27106876800000L), year0.getFirstMillisecond());
      assertEquals(1111, year0.getYear());
      assertEquals(1111L, year0.getSerialIndex());
      assertEquals((-27091108800001L), year0.getMiddleMillisecond());
      assertEquals((-27075340800001L), year0.getLastMillisecond());
      assertEquals("1111", year0.toString());
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertEquals(1111.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getDomainDescription());
      assertEquals(1111.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test42() {}
//   @Test(timeout = 4000)
//   public void test42()  throws Throwable  {
//       Minute minute0 = new Minute();
//       assertNotNull(minute0);
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       
//       Hour hour0 = minute0.getHour();
//       assertNotNull(hour0);
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       
//       Day day0 = minute0.getDay();
//       assertNotNull(day0);
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
//       assertNotNull(timeSeries0);
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(hour0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//   }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = AbstractButton.TEXT_CHANGED_PROPERTY;
      assertEquals("text", string0);
      assertNotNull(string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      long long0 = (-1450L);
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemAge(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test44() {}
//   @Test(timeout = 4000)
//   public void test44()  throws Throwable  {
//       Minute minute0 = new Minute();
//       assertNotNull(minute0);
//       assertEquals(21, minute0.getMinute());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       
//       Day day0 = minute0.getDay();
//       assertNotNull(day0);
//       assertEquals(21, minute0.getMinute());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
//       assertNotNull(timeSeries0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       
//       int int0 = timeSeries0.getIndex((RegularTimePeriod) minute0);
//       assertEquals((-1), int0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.setMaximumItemCount(int0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Negative 'maximum' argument.
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test45() {}
//   @Test(timeout = 4000)
//   public void test45()  throws Throwable  {
//       Minute minute0 = new Minute();
//       assertNotNull(minute0);
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       
//       String string0 = "}+{?]k1_f'Z7S~P#Y";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries0.getDomainDescription());
//       
//       int int0 = 1255;
//       timeSeries0.add((RegularTimePeriod) minute0, (Number) int0);
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1255.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1255.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries0.getDomainDescription());
//       
//       Integer integer0 = (Integer)timeSeries0.getValue((RegularTimePeriod) minute0);
//       assertEquals(1255, (int)integer0);
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1255.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1255.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("}+{?]k1_f'Z7S~P#Y", timeSeries0.getDomainDescription());
//   }

  @Test(timeout = 4000)
  public void test46() {}
//   @Test(timeout = 4000)
//   public void test46()  throws Throwable  {
//       Day day0 = new Day();
//       assertNotNull(day0);
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2014, day0.getYear());
//       
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       
//       List list0 = timeSeries0.getItems();
//       assertNotNull(list0);
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, list0.isEmpty());
//       assertEquals(0, list0.size());
//   }

  ////@Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 1111;
      Year year0 = new Year(int0);
      assertNotNull(year0);
      assertEquals((-27106876800000L), year0.getFirstMillisecond());
      assertEquals("1111", year0.toString());
      assertEquals((-27091108800001L), year0.getMiddleMillisecond());
      assertEquals((-27075340800001L), year0.getLastMillisecond());
      assertEquals(1111L, year0.getSerialIndex());
      assertEquals(1111, year0.getYear());
      
      String string0 = "org.jfree.data.ti\"e.SerialDate";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals((-27106876800000L), year0.getFirstMillisecond());
      assertEquals("1111", year0.toString());
      assertEquals((-27091108800001L), year0.getMiddleMillisecond());
      assertEquals((-27075340800001L), year0.getLastMillisecond());
      assertEquals(1111L, year0.getSerialIndex());
      assertEquals(1111, year0.getYear());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      
      timeSeries0.add((RegularTimePeriod) year0, (double) int0);
      assertEquals((-27106876800000L), year0.getFirstMillisecond());
      assertEquals("1111", year0.toString());
      assertEquals((-27091108800001L), year0.getMiddleMillisecond());
      assertEquals((-27075340800001L), year0.getLastMillisecond());
      assertEquals(1111L, year0.getSerialIndex());
      assertEquals(1111, year0.getYear());
      assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getRangeDescription());
      assertEquals(1111.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getDomainDescription());
      assertEquals(1111.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) year0);
      assertNotNull(timeSeriesDataItem0);
      assertEquals((-27106876800000L), year0.getFirstMillisecond());
      assertEquals("1111", year0.toString());
      assertEquals((-27091108800001L), year0.getMiddleMillisecond());
      assertEquals((-27075340800001L), year0.getLastMillisecond());
      assertEquals(1111L, year0.getSerialIndex());
      assertEquals(1111, year0.getYear());
      assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getRangeDescription());
      assertEquals(1111.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("org.jfree.data.ti\"e.SerialDate", timeSeries0.getDomainDescription());
      assertEquals(1111.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeriesDataItem0.isSelected());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 269;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      
      Class class0 = timeSeries0.getTimePeriodClass();
      assertNull(class0);
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test49() {}
//   @Test(timeout = 4000)
//   public void test49()  throws Throwable  {
//       Day day0 = new Day();
//       assertNotNull(day0);
//       assertEquals(2014, day0.getYear());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2014, day0.getYear());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       
//       double double0 = timeSeries0.getMaxY();
//       assertEquals(Double.NaN, double0, 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2014, day0.getYear());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//   }

  @Test(timeout = 4000)
  public void test50() {}
//   @Test(timeout = 4000)
//   public void test50()  throws Throwable  {
//       Minute minute0 = new Minute();
//       assertNotNull(minute0);
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       
//       Hour hour0 = minute0.getHour();
//       assertNotNull(hour0);
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       
//       String string0 = "The 'data' array must contain three arrays all having the same length.";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("The 'data' array must contain three arrays all having the same length.", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("The 'data' array must contain three arrays all having the same length.", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       
//       int int0 = JComponent.WHEN_FOCUSED;
//       assertEquals(0, int0);
//       
//       timeSeries0.add((RegularTimePeriod) hour0, (Number) int0);
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("The 'data' array must contain three arrays all having the same length.", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("The 'data' array must contain three arrays all having the same length.", timeSeries0.getDomainDescription());
//       
//       timeSeries0.setMaximumItemCount(int0);
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals("The 'data' array must contain three arrays all having the same length.", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("The 'data' array must contain three arrays all having the same length.", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//   }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 269;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertNotNull(timeSeries1);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test52() {}
//   @Test(timeout = 4000)
//   public void test52()  throws Throwable  {
//       Minute minute0 = new Minute();
//       assertNotNull(minute0);
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(21, minute0.getMinute());
//       
//       String string0 = "fK2v-";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals("fK2v-", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("fK2v-", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(21, minute0.getMinute());
//       
//       // Undeclared exception!
//       try {
//         RegularTimePeriod regularTimePeriod0 = timeSeries0.getNextTimePeriod();
//         fail("Expecting exception: ArrayIndexOutOfBoundsException");
//       
//       } catch(ArrayIndexOutOfBoundsException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test53() {}
//   @Test(timeout = 4000)
//   public void test53()  throws Throwable  {
//       Minute minute0 = new Minute();
//       assertNotNull(minute0);
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       
//       Hour hour0 = minute0.getHour();
//       assertNotNull(hour0);
//       assertEquals(2, hour0.getMonth());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       
//       String string0 = "The 'data' array must contain three arrays all having the same length.";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("The 'data' array must contain three arrays all having the same length.", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("The 'data' array must contain three arrays all having the same length.", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       
//       timeSeries0.setDomainDescription(string0);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("The 'data' array must contain three arrays all having the same length.", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("The 'data' array must contain three arrays all having the same length.", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//   }

  @Test(timeout = 4000)
  public void test54() {}
//   @Test(timeout = 4000)
//   public void test54()  throws Throwable  {
//       Day day0 = new Day();
//       assertNotNull(day0);
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       
//       int int0 = ICC_Profile.icICCAbsoluteColorimetric;
//       assertEquals(3, int0);
//       
//       timeSeries0.add((RegularTimePeriod) day0, (Number) int0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(3.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(3.0, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       
//       Quarter quarter0 = new Quarter(int0, int0);
//       assertNotNull(quarter0);
//       assertEquals((-62049110400001L), quarter0.getLastMillisecond());
//       assertEquals(3, quarter0.getYearValue());
//       assertEquals((-62053084800001L), quarter0.getMiddleMillisecond());
//       assertEquals(3, quarter0.getQuarter());
//       assertEquals((-62057059200000L), quarter0.getFirstMillisecond());
//       assertEquals(15L, quarter0.getSerialIndex());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) day0);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertNotNull(timeSeries1);
//       assertEquals((-62049110400001L), quarter0.getLastMillisecond());
//       assertEquals(3, quarter0.getYearValue());
//       assertEquals((-62053084800001L), quarter0.getMiddleMillisecond());
//       assertEquals(3, quarter0.getQuarter());
//       assertEquals((-62057059200000L), quarter0.getFirstMillisecond());
//       assertEquals(15L, quarter0.getSerialIndex());
//       assertEquals(true, timeSeries1.getNotify());
//       assertNull(timeSeries1.getDescription());
//       assertNull(timeSeries1.getDomainDescription());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertNull(timeSeries1.getRangeDescription());
//       assertEquals(3.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(3.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(3.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(3.0, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//   }

  @Test(timeout = 4000)
  public void test55() {}
//   @Test(timeout = 4000)
//   public void test55()  throws Throwable  {
//       Minute minute0 = new Minute();
//       assertNotNull(minute0);
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       
//       Day day0 = minute0.getDay();
//       assertNotNull(day0);
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       
//       Hour hour0 = minute0.getHour();
//       assertNotNull(hour0);
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
//       assertNotNull(timeSeries0);
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) minute0);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertNotNull(timeSeries1);
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       
//       boolean boolean0 = timeSeries1.equals((Object) timeSeries0);
//       assertTrue(boolean0);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//   }

  @Test(timeout = 4000)
  public void test56() {}
//   @Test(timeout = 4000)
//   public void test56()  throws Throwable  {
//       Minute minute0 = new Minute();
//       assertNotNull(minute0);
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(21, minute0.getMinute());
//       
//       String string0 = "fK2v-";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("fK2v-", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("fK2v-", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(21, minute0.getMinute());
//       
//       timeSeries0.setRangeDescription(string0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("fK2v-", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("fK2v-", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(21, minute0.getMinute());
//   }
}
