/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:08:17 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.System;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriodFormatException;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class WeekEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00() {}
//   @Test(timeout = 4000)
//   public void test00()  throws Throwable  {
//       Week week0 = new Week();
//       assertNotNull(week0);
//       assertEquals(1392206399999L, week0.getMiddleMillisecond());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(1391904000000L, week0.getFirstMillisecond());
//       assertEquals(1392508799999L, week0.getLastMillisecond());
//       assertEquals(7, week0.getWeek());
//       
//       String string0 = week0.toString();
//       assertNotNull(string0);
//       assertEquals("Week 7, 2014", string0);
//       assertEquals(1392206399999L, week0.getMiddleMillisecond());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(1391904000000L, week0.getFirstMillisecond());
//       assertEquals(1392508799999L, week0.getLastMillisecond());
//       assertEquals(7, week0.getWeek());
//       
//       // Undeclared exception!
//       try {
//         Week week1 = Week.parseWeek(string0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Can't evaluate the week.
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "bQeQ'!n";
      // Undeclared exception!
      try {
        Week week0 = Week.parseWeek(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = null;
      Week week0 = Week.parseWeek(string0);
      assertNull(week0);
  }

  @Test(timeout = 4000)
  public void test03() {}
//   @Test(timeout = 4000)
//   public void test03()  throws Throwable  {
//       int int0 = 52;
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       
//       Week week0 = new Week(int0, int0);
//       assertNotNull(week0);
//       assertEquals((-60495768000001L), week0.getMiddleMillisecond());
//       assertEquals(52, week0.getWeek());
//       assertEquals(52, week0.getYearValue());
//       assertEquals((-60495465600001L), week0.getLastMillisecond());
//       assertEquals(2808L, week0.getSerialIndex());
//       assertEquals((-60496070400000L), week0.getFirstMillisecond());
//       
//       Year year0 = month0.getYear();
//       assertNotNull(year0);
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals("2014", year0.toString());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       
//       int int1 = week0.compareTo((Object) year0);
//       assertEquals(0, int1);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals("2014", year0.toString());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals((-60495768000001L), week0.getMiddleMillisecond());
//       assertEquals(52, week0.getWeek());
//       assertEquals(52, week0.getYearValue());
//       assertEquals((-60495465600001L), week0.getLastMillisecond());
//       assertEquals(2808L, week0.getSerialIndex());
//       assertEquals((-60496070400000L), week0.getFirstMillisecond());
//   }

  @Test(timeout = 4000)
  public void test04() {}
//   @Test(timeout = 4000)
//   public void test04()  throws Throwable  {
//       int int0 = 52;
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       
//       Week week0 = new Week(int0, int0);
//       assertNotNull(week0);
//       assertEquals((-60495465600001L), week0.getLastMillisecond());
//       assertEquals(52, week0.getYearValue());
//       assertEquals((-60496070400000L), week0.getFirstMillisecond());
//       assertEquals(2808L, week0.getSerialIndex());
//       assertEquals(52, week0.getWeek());
//       assertEquals((-60495768000001L), week0.getMiddleMillisecond());
//       
//       Year year0 = month0.getYear();
//       assertNotNull(year0);
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(2014, year0.getYear());
//       
//       Week week1 = new Week(int0, year0);
//       assertNotNull(week1);
//       assertFalse(week1.equals((Object)week0));
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1419422399999L, week1.getMiddleMillisecond());
//       assertEquals(2014, week1.getYearValue());
//       assertEquals(1419724799999L, week1.getLastMillisecond());
//       assertEquals(52, week1.getWeek());
//       assertEquals(106794L, week1.getSerialIndex());
//       assertEquals(1419120000000L, week1.getFirstMillisecond());
//       assertNotSame(week1, week0);
//       
//       int int1 = week0.compareTo((Object) week1);
//       assertEquals((-1962), int1);
//       assertFalse(week0.equals((Object)week1));
//       assertFalse(int0 == int1);
//       assertFalse(week1.equals((Object)week0));
//       assertFalse(int1 == int0);
//       assertEquals((-60495465600001L), week0.getLastMillisecond());
//       assertEquals(52, week0.getYearValue());
//       assertEquals((-60496070400000L), week0.getFirstMillisecond());
//       assertEquals(2808L, week0.getSerialIndex());
//       assertEquals(52, week0.getWeek());
//       assertEquals((-60495768000001L), week0.getMiddleMillisecond());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1419422399999L, week1.getMiddleMillisecond());
//       assertEquals(2014, week1.getYearValue());
//       assertEquals(1419724799999L, week1.getLastMillisecond());
//       assertEquals(52, week1.getWeek());
//       assertEquals(106794L, week1.getSerialIndex());
//       assertEquals(1419120000000L, week1.getFirstMillisecond());
//       assertNotSame(week0, week1);
//       assertNotSame(week1, week0);
//   }

  @Test(timeout = 4000)
  public void test05() {}
//   @Test(timeout = 4000)
//   public void test05()  throws Throwable  {
//       Week week0 = new Week();
//       assertNotNull(week0);
//       assertEquals(1392508799999L, week0.getLastMillisecond());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1391904000000L, week0.getFirstMillisecond());
//       assertEquals(1392206399999L, week0.getMiddleMillisecond());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(7, week0.getWeek());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       
//       int int0 = week0.compareTo((Object) mockGregorianCalendar0);
//       assertEquals(1, int0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1392508799999L, week0.getLastMillisecond());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1391904000000L, week0.getFirstMillisecond());
//       assertEquals(1392206399999L, week0.getMiddleMillisecond());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(7, week0.getWeek());
//   }

  @Test(timeout = 4000)
  public void test06() {}
//   @Test(timeout = 4000)
//   public void test06()  throws Throwable  {
//       Week week0 = new Week();
//       assertNotNull(week0);
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(7, week0.getWeek());
//       assertEquals(1392206399999L, week0.getMiddleMillisecond());
//       assertEquals(1392508799999L, week0.getLastMillisecond());
//       assertEquals(1391904000000L, week0.getFirstMillisecond());
//       assertEquals(106749L, week0.getSerialIndex());
//       
//       int int0 = week0.getWeek();
//       assertEquals(7, int0);
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(7, week0.getWeek());
//       assertEquals(1392206399999L, week0.getMiddleMillisecond());
//       assertEquals(1392508799999L, week0.getLastMillisecond());
//       assertEquals(1391904000000L, week0.getFirstMillisecond());
//       assertEquals(106749L, week0.getSerialIndex());
//       
//       Week week1 = new Week(int0, int0);
//       assertNotNull(week1);
//       assertFalse(week1.equals((Object)week0));
//       assertFalse(week0.equals((Object)week1));
//       assertEquals((-61943054400001L), week1.getMiddleMillisecond());
//       assertEquals(7, week1.getWeek());
//       assertEquals((-61942752000001L), week1.getLastMillisecond());
//       assertEquals((-61943356800000L), week1.getFirstMillisecond());
//       assertEquals(7, week1.getYearValue());
//       assertEquals(378L, week1.getSerialIndex());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(7, week0.getWeek());
//       assertEquals(1392206399999L, week0.getMiddleMillisecond());
//       assertEquals(1392508799999L, week0.getLastMillisecond());
//       assertEquals(1391904000000L, week0.getFirstMillisecond());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertNotSame(week1, week0);
//       assertNotSame(week0, week1);
//       
//       boolean boolean0 = week1.equals((Object) week0);
//       assertFalse(boolean0);
//       assertFalse(week1.equals((Object)week0));
//       assertFalse(week0.equals((Object)week1));
//       assertEquals((-61943054400001L), week1.getMiddleMillisecond());
//       assertEquals(7, week1.getWeek());
//       assertEquals((-61942752000001L), week1.getLastMillisecond());
//       assertEquals((-61943356800000L), week1.getFirstMillisecond());
//       assertEquals(7, week1.getYearValue());
//       assertEquals(378L, week1.getSerialIndex());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(7, week0.getWeek());
//       assertEquals(1392206399999L, week0.getMiddleMillisecond());
//       assertEquals(1392508799999L, week0.getLastMillisecond());
//       assertEquals(1391904000000L, week0.getFirstMillisecond());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertNotSame(week1, week0);
//       assertNotSame(week0, week1);
//   }

  @Test(timeout = 4000)
  public void test07() {}
//   @Test(timeout = 4000)
//   public void test07()  throws Throwable  {
//       int int0 = 18;
//       Week week0 = new Week(int0, int0);
//       assertNotNull(week0);
//       assertEquals(18, week0.getYearValue());
//       assertEquals((-61589548800000L), week0.getFirstMillisecond());
//       assertEquals(972L, week0.getSerialIndex());
//       assertEquals((-61589246400001L), week0.getMiddleMillisecond());
//       assertEquals((-61588944000001L), week0.getLastMillisecond());
//       assertEquals(18, week0.getWeek());
//       
//       Week week1 = (Week)week0.next();
//       assertNotNull(week1);
//       assertFalse(week1.equals((Object)week0));
//       assertFalse(week0.equals((Object)week1));
//       assertEquals(18, week1.getYearValue());
//       assertEquals(19, week1.getWeek());
//       assertEquals((-61588339200001L), week1.getLastMillisecond());
//       assertEquals((-61588641600001L), week1.getMiddleMillisecond());
//       assertEquals(973L, week1.getSerialIndex());
//       assertEquals((-61588944000000L), week1.getFirstMillisecond());
//       assertEquals(18, week0.getYearValue());
//       assertEquals((-61589548800000L), week0.getFirstMillisecond());
//       assertEquals(972L, week0.getSerialIndex());
//       assertEquals((-61589246400001L), week0.getMiddleMillisecond());
//       assertEquals((-61588944000001L), week0.getLastMillisecond());
//       assertEquals(18, week0.getWeek());
//       assertNotSame(week1, week0);
//       assertNotSame(week0, week1);
//       
//       boolean boolean0 = week0.equals((Object) week1);
//       assertFalse(boolean0);
//       assertFalse(week1.equals((Object)week0));
//       assertFalse(week0.equals((Object)week1));
//       assertEquals(18, week1.getYearValue());
//       assertEquals(19, week1.getWeek());
//       assertEquals((-61588339200001L), week1.getLastMillisecond());
//       assertEquals((-61588641600001L), week1.getMiddleMillisecond());
//       assertEquals(973L, week1.getSerialIndex());
//       assertEquals((-61588944000000L), week1.getFirstMillisecond());
//       assertEquals(18, week0.getYearValue());
//       assertEquals((-61589548800000L), week0.getFirstMillisecond());
//       assertEquals(972L, week0.getSerialIndex());
//       assertEquals((-61589246400001L), week0.getMiddleMillisecond());
//       assertEquals((-61588944000001L), week0.getLastMillisecond());
//       assertEquals(18, week0.getWeek());
//       assertNotSame(week1, week0);
//       assertNotSame(week0, week1);
//   }

  @Test(timeout = 4000)
  public void test08() {}
//   @Test(timeout = 4000)
//   public void test08()  throws Throwable  {
//       Week week0 = new Week();
//       assertNotNull(week0);
//       assertEquals(1391904000000L, week0.getFirstMillisecond());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(7, week0.getWeek());
//       assertEquals(1392206399999L, week0.getMiddleMillisecond());
//       assertEquals(1392508799999L, week0.getLastMillisecond());
//       
//       MockDate mockDate0 = (MockDate)week0.getStart();
//       assertNotNull(mockDate0);
//       assertEquals(1391904000000L, week0.getFirstMillisecond());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(7, week0.getWeek());
//       assertEquals(1392206399999L, week0.getMiddleMillisecond());
//       assertEquals(1392508799999L, week0.getLastMillisecond());
//       assertEquals("Sun Feb 09 00:00:00 GMT 2014", mockDate0.toString());
//       
//       Week week1 = new Week((Date) mockDate0);
//       assertNotNull(week1);
//       assertTrue(week0.equals((Object)week1));
//       assertTrue(week1.equals((Object)week0));
//       assertEquals(1391904000000L, week0.getFirstMillisecond());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(7, week0.getWeek());
//       assertEquals(1392206399999L, week0.getMiddleMillisecond());
//       assertEquals(1392508799999L, week0.getLastMillisecond());
//       assertEquals("Sun Feb 09 00:00:00 GMT 2014", mockDate0.toString());
//       assertEquals(1392508799999L, week1.getLastMillisecond());
//       assertEquals(1392206399999L, week1.getMiddleMillisecond());
//       assertEquals(1391904000000L, week1.getFirstMillisecond());
//       assertEquals(106749L, week1.getSerialIndex());
//       assertEquals(7, week1.getWeek());
//       assertEquals(2014, week1.getYearValue());
//       assertNotSame(week0, week1);
//       assertNotSame(week1, week0);
//       
//       boolean boolean0 = week0.equals((Object) week1);
//       assertTrue(boolean0);
//       assertTrue(week0.equals((Object)week1));
//       assertTrue(week1.equals((Object)week0));
//       assertEquals(1391904000000L, week0.getFirstMillisecond());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(7, week0.getWeek());
//       assertEquals(1392206399999L, week0.getMiddleMillisecond());
//       assertEquals(1392508799999L, week0.getLastMillisecond());
//       assertEquals("Sun Feb 09 00:00:00 GMT 2014", mockDate0.toString());
//       assertEquals(1392508799999L, week1.getLastMillisecond());
//       assertEquals(1392206399999L, week1.getMiddleMillisecond());
//       assertEquals(1391904000000L, week1.getFirstMillisecond());
//       assertEquals(106749L, week1.getSerialIndex());
//       assertEquals(7, week1.getWeek());
//       assertEquals(2014, week1.getYearValue());
//       assertNotSame(week0, week1);
//       assertNotSame(week1, week0);
//   }

  @Test(timeout = 4000)
  public void test09() {}
//   @Test(timeout = 4000)
//   public void test09()  throws Throwable  {
//       int int0 = 3177;
//       Class<Integer> class0 = Integer.class;
//       Week week0 = new Week(int0, int0);
//       assertNotNull(week0);
//       assertEquals(38151950399999L, week0.getMiddleMillisecond());
//       assertEquals(168486L, week0.getSerialIndex());
//       assertEquals(105, week0.getWeek());
//       assertEquals(3177, week0.getYearValue());
//       assertEquals(38152252799999L, week0.getLastMillisecond());
//       assertEquals(38151648000000L, week0.getFirstMillisecond());
//       
//       boolean boolean0 = week0.equals((Object) class0);
//       assertFalse(boolean0);
//       assertEquals(38151950399999L, week0.getMiddleMillisecond());
//       assertEquals(168486L, week0.getSerialIndex());
//       assertEquals(105, week0.getWeek());
//       assertEquals(3177, week0.getYearValue());
//       assertEquals(38152252799999L, week0.getLastMillisecond());
//       assertEquals(38151648000000L, week0.getFirstMillisecond());
//   }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 2958465;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(int0);
      assertNotNull(spreadsheetDate0);
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(12, spreadsheetDate0.getMonth());
      assertEquals(31, spreadsheetDate0.getDayOfMonth());
      assertEquals(9999, spreadsheetDate0.getYYYY());
      assertEquals(2958465, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      
      Date date0 = spreadsheetDate0.toDate();
      assertNotNull(date0);
      assertEquals("Fri Dec 31 00:00:00 GMT 9999", date0.toString());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(12, spreadsheetDate0.getMonth());
      assertEquals(31, spreadsheetDate0.getDayOfMonth());
      assertEquals(9999, spreadsheetDate0.getYYYY());
      assertEquals(2958465, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Week week0 = new Week(date0, (TimeZone) zoneInfo0, locale0);
      assertNotNull(week0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("Fri Dec 31 00:00:00 GMT 9999", date0.toString());
      assertEquals(253401868800000L, week0.getFirstMillisecond());
      assertEquals(9999, week0.getYearValue());
      assertEquals(529999L, week0.getSerialIndex());
      assertEquals(52, week0.getWeek());
      assertEquals(253402171199999L, week0.getMiddleMillisecond());
      assertEquals(253402473599999L, week0.getLastMillisecond());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(12, spreadsheetDate0.getMonth());
      assertEquals(31, spreadsheetDate0.getDayOfMonth());
      assertEquals(9999, spreadsheetDate0.getYYYY());
      assertEquals(2958465, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("GMT", zoneInfo0.getID());
      
      RegularTimePeriod regularTimePeriod0 = week0.next();
      assertNull(regularTimePeriod0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("Fri Dec 31 00:00:00 GMT 9999", date0.toString());
      assertEquals(253401868800000L, week0.getFirstMillisecond());
      assertEquals(9999, week0.getYearValue());
      assertEquals(529999L, week0.getSerialIndex());
      assertEquals(52, week0.getWeek());
      assertEquals(253402171199999L, week0.getMiddleMillisecond());
      assertEquals(253402473599999L, week0.getLastMillisecond());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(12, spreadsheetDate0.getMonth());
      assertEquals(31, spreadsheetDate0.getDayOfMonth());
      assertEquals(9999, spreadsheetDate0.getYYYY());
      assertEquals(2958465, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("GMT", zoneInfo0.getID());
  }

  @Test(timeout = 4000)
  public void test11() {}
//   @Test(timeout = 4000)
//   public void test11()  throws Throwable  {
//       int int0 = 1868;
//       Week week0 = new Week(int0, int0);
//       assertNotNull(week0);
//       assertEquals(1868, week0.getYearValue());
//       assertEquals((-3173126400001L), week0.getLastMillisecond());
//       assertEquals(99080L, week0.getSerialIndex());
//       assertEquals(76, week0.getWeek());
//       assertEquals((-3173731200000L), week0.getFirstMillisecond());
//       assertEquals((-3173428800001L), week0.getMiddleMillisecond());
//       
//       Week week1 = (Week)week0.next();
//       assertNotNull(week1);
//       assertFalse(week0.equals((Object)week1));
//       assertFalse(week1.equals((Object)week0));
//       assertEquals(1868, week0.getYearValue());
//       assertEquals((-3173126400001L), week0.getLastMillisecond());
//       assertEquals(99080L, week0.getSerialIndex());
//       assertEquals(76, week0.getWeek());
//       assertEquals((-3173731200000L), week0.getFirstMillisecond());
//       assertEquals((-3173428800001L), week0.getMiddleMillisecond());
//       assertEquals((-3187036800001L), week1.getLastMillisecond());
//       assertEquals(99058L, week1.getSerialIndex());
//       assertEquals(1, week1.getWeek());
//       assertEquals(1869, week1.getYearValue());
//       assertEquals((-3187339200001L), week1.getMiddleMillisecond());
//       assertEquals((-3187641600000L), week1.getFirstMillisecond());
//       assertNotSame(week0, week1);
//       assertNotSame(week1, week0);
//   }

  @Test(timeout = 4000)
  public void test12() {}
//   @Test(timeout = 4000)
//   public void test12()  throws Throwable  {
//       int int0 = 1076;
//       Week week0 = new Week(int0, int0);
//       assertNotNull(week0);
//       assertEquals(1076, week0.getYearValue());
//       assertEquals(52, week0.getWeek());
//       assertEquals(57080L, week0.getSerialIndex());
//       assertEquals((-28181001600000L), week0.getFirstMillisecond());
//       assertEquals((-28180699200001L), week0.getMiddleMillisecond());
//       assertEquals((-28180396800001L), week0.getLastMillisecond());
//       
//       Week week1 = (Week)week0.next();
//       assertNotNull(week1);
//       assertFalse(week0.equals((Object)week1));
//       assertFalse(week1.equals((Object)week0));
//       assertEquals(1076, week0.getYearValue());
//       assertEquals(52, week0.getWeek());
//       assertEquals(57080L, week0.getSerialIndex());
//       assertEquals((-28181001600000L), week0.getFirstMillisecond());
//       assertEquals((-28180699200001L), week0.getMiddleMillisecond());
//       assertEquals((-28180396800001L), week0.getLastMillisecond());
//       assertEquals(1076, week1.getYearValue());
//       assertEquals(57081L, week1.getSerialIndex());
//       assertEquals((-28180396800000L), week1.getFirstMillisecond());
//       assertEquals(53, week1.getWeek());
//       assertEquals((-28180094400001L), week1.getMiddleMillisecond());
//       assertEquals((-28179792000001L), week1.getLastMillisecond());
//       assertNotSame(week0, week1);
//       assertNotSame(week1, week0);
//   }

  @Test(timeout = 4000)
  public void test13() {}
//   @Test(timeout = 4000)
//   public void test13()  throws Throwable  {
//       int int0 = 1868;
//       System.setCurrentTimeMillis((long) int0);
//       Week week0 = new Week();
//       assertNotNull(week0);
//       assertEquals(1, week0.getWeek());
//       assertEquals((-345600000L), week0.getFirstMillisecond());
//       assertEquals(259199999L, week0.getLastMillisecond());
//       assertEquals((-43200001L), week0.getMiddleMillisecond());
//       assertEquals(1970, week0.getYearValue());
//       assertEquals(104411L, week0.getSerialIndex());
//       
//       Week week1 = (Week)week0.previous();
//       assertNotNull(week1);
//       assertFalse(week1.equals((Object)week0));
//       assertFalse(week0.equals((Object)week1));
//       assertEquals((-345600001L), week1.getLastMillisecond());
//       assertEquals(1969, week1.getYearValue());
//       assertEquals((-648000001L), week1.getMiddleMillisecond());
//       assertEquals((-950400000L), week1.getFirstMillisecond());
//       assertEquals(52, week1.getWeek());
//       assertEquals(104409L, week1.getSerialIndex());
//       assertEquals(1, week0.getWeek());
//       assertEquals((-345600000L), week0.getFirstMillisecond());
//       assertEquals(259199999L, week0.getLastMillisecond());
//       assertEquals((-43200001L), week0.getMiddleMillisecond());
//       assertEquals(1970, week0.getYearValue());
//       assertEquals(104411L, week0.getSerialIndex());
//       assertNotSame(week1, week0);
//       assertNotSame(week0, week1);
//   }

  @Test(timeout = 4000)
  public void test14() {}
//   @Test(timeout = 4000)
//   public void test14()  throws Throwable  {
//       int int0 = 52;
//       Week week0 = new Week(int0, int0);
//       assertNotNull(week0);
//       assertEquals(2808L, week0.getSerialIndex());
//       assertEquals((-60495768000001L), week0.getMiddleMillisecond());
//       assertEquals(52, week0.getWeek());
//       assertEquals(52, week0.getYearValue());
//       assertEquals((-60495465600001L), week0.getLastMillisecond());
//       assertEquals((-60496070400000L), week0.getFirstMillisecond());
//       
//       Week week1 = (Week)week0.previous();
//       assertNotNull(week1);
//       assertFalse(week0.equals((Object)week1));
//       assertFalse(week1.equals((Object)week0));
//       assertEquals(2808L, week0.getSerialIndex());
//       assertEquals((-60495768000001L), week0.getMiddleMillisecond());
//       assertEquals(52, week0.getWeek());
//       assertEquals(52, week0.getYearValue());
//       assertEquals((-60495465600001L), week0.getLastMillisecond());
//       assertEquals((-60496070400000L), week0.getFirstMillisecond());
//       assertEquals((-60496372800001L), week1.getMiddleMillisecond());
//       assertEquals((-60496070400001L), week1.getLastMillisecond());
//       assertEquals(2807L, week1.getSerialIndex());
//       assertEquals((-60496675200000L), week1.getFirstMillisecond());
//       assertEquals(52, week1.getYearValue());
//       assertEquals(51, week1.getWeek());
//       assertNotSame(week0, week1);
//       assertNotSame(week1, week0);
//   }

  @Test(timeout = 4000)
  public void test15() {}
//   @Test(timeout = 4000)
//   public void test15()  throws Throwable  {
//       int int0 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       Date date0 = mockGregorianCalendar0.getTime();
//       assertNotNull(date0);
//       assertEquals("Wed Dec 31 00:00:00 GMT 2", date0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       String string0 = "";
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
//       assertNotNull(simpleTimeZone0);
//       assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       
//       Week week0 = new Week(date0, (TimeZone) simpleTimeZone0);
//       assertNotNull(week0);
//       assertEquals("Wed Dec 31 00:00:00 GMT 2", date0.toString());
//       assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals((-62072481600001L), week0.getMiddleMillisecond());
//       assertEquals(160L, week0.getSerialIndex());
//       assertEquals((-62072179200001L), week0.getLastMillisecond());
//       assertEquals(1, week0.getWeek());
//       assertEquals((-62072784000000L), week0.getFirstMillisecond());
//       assertEquals(3, week0.getYearValue());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       RegularTimePeriod regularTimePeriod0 = week0.previous();
//       assertNull(regularTimePeriod0);
//       assertEquals("Wed Dec 31 00:00:00 GMT 2", date0.toString());
//       assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals((-62072481600001L), week0.getMiddleMillisecond());
//       assertEquals(160L, week0.getSerialIndex());
//       assertEquals((-62072179200001L), week0.getLastMillisecond());
//       assertEquals(1, week0.getWeek());
//       assertEquals((-62072784000000L), week0.getFirstMillisecond());
//       assertEquals(3, week0.getYearValue());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//   }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 1908;
      MockDate mockDate0 = new MockDate(int0, int0, int0);
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Wed Mar 22 00:00:00 GMT 3972", mockDate0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("|\\(\"5", zoneInfo0.getID());
      
      Locale locale0 = null;
      Week week0 = null;
      try {
        week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0, locale0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test17() {}
//   @Test(timeout = 4000)
//   public void test17()  throws Throwable  {
//       int int0 = 1137;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1137,MONTH=1137,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1137,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       Date date0 = mockGregorianCalendar0.getGregorianChange();
//       assertNotNull(date0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1137,MONTH=1137,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1137,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
//       
//       TimeZone timeZone0 = null;
//       Locale locale0 = Locale.JAPAN;
//       assertNotNull(locale0);
//       assertEquals("JPN", locale0.getISO3Country());
//       assertEquals("JP", locale0.getCountry());
//       assertEquals("ja_JP", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("ja", locale0.getLanguage());
//       
//       Week week0 = null;
//       try {
//         week0 = new Week(date0, timeZone0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'zone' argument.
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Date date0 = null;
      Week week0 = null;
      try {
        week0 = new Week(date0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test19() {}
//   @Test(timeout = 4000)
//   public void test19()  throws Throwable  {
//       int int0 = (-29);
//       Year year0 = new Year();
//       assertNotNull(year0);
//       assertEquals(2014, year0.getYear());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       
//       Week week0 = new Week(int0, year0);
//       assertNotNull(week0);
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(1370131200000L, week0.getFirstMillisecond());
//       assertEquals(106713L, week0.getSerialIndex());
//       assertEquals(1370735999999L, week0.getLastMillisecond());
//       assertEquals(1370433599999L, week0.getMiddleMillisecond());
//       assertEquals(-29, week0.getWeek());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//   }

  @Test(timeout = 4000)
  public void test20() {}
//   @Test(timeout = 4000)
//   public void test20()  throws Throwable  {
//       int int0 = 52;
//       int int1 = 0;
//       Week week0 = new Week(int1, int0);
//       assertNotNull(week0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals(0, week0.getWeek());
//       assertEquals((-60527217600001L), week0.getMiddleMillisecond());
//       assertEquals((-60526915200001L), week0.getLastMillisecond());
//       assertEquals(52, week0.getYearValue());
//       assertEquals(2756L, week0.getSerialIndex());
//       assertEquals((-60527520000000L), week0.getFirstMillisecond());
//   }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "~<{0{*;-4L:jT-6";
      // Undeclared exception!
      try {
        Week week0 = Week.parseWeek(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
      }
  }

  @Test(timeout = 4000)
  public void test22() {}
//   @Test(timeout = 4000)
//   public void test22()  throws Throwable  {
//       int int0 = 18;
//       Week week0 = new Week(int0, int0);
//       assertNotNull(week0);
//       assertEquals((-61588944000001L), week0.getLastMillisecond());
//       assertEquals((-61589548800000L), week0.getFirstMillisecond());
//       assertEquals(18, week0.getYearValue());
//       assertEquals(18, week0.getWeek());
//       assertEquals((-61589246400001L), week0.getMiddleMillisecond());
//       assertEquals(972L, week0.getSerialIndex());
//       
//       int int1 = week0.getYearValue();
//       assertEquals(18, int1);
//       assertTrue(int0 == int1);
//       assertTrue(int1 == int0);
//       assertEquals((-61588944000001L), week0.getLastMillisecond());
//       assertEquals((-61589548800000L), week0.getFirstMillisecond());
//       assertEquals(18, week0.getYearValue());
//       assertEquals(18, week0.getWeek());
//       assertEquals((-61589246400001L), week0.getMiddleMillisecond());
//       assertEquals(972L, week0.getSerialIndex());
//   }

  @Test(timeout = 4000)
  public void test23() {}
//   @Test(timeout = 4000)
//   public void test23()  throws Throwable  {
//       int int0 = 1908;
//       MockDate mockDate0 = new MockDate(int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Wed Mar 22 00:00:00 GMT 3972", mockDate0.toString());
//       
//       Week week0 = new Week((Date) mockDate0);
//       assertNotNull(week0);
//       assertEquals(63184319999999L, week0.getLastMillisecond());
//       assertEquals(63183715200000L, week0.getFirstMillisecond());
//       assertEquals(13, week0.getWeek());
//       assertEquals(3972, week0.getYearValue());
//       assertEquals(210529L, week0.getSerialIndex());
//       assertEquals(63184017599999L, week0.getMiddleMillisecond());
//       assertEquals("Wed Mar 22 00:00:00 GMT 3972", mockDate0.toString());
//       
//       MockDate mockDate1 = (MockDate)week0.getEnd();
//       assertNotNull(mockDate1);
//       assertFalse(mockDate1.equals((Object)mockDate0));
//       assertFalse(mockDate0.equals((Object)mockDate1));
//       assertEquals("Sat Mar 25 23:59:59 GMT 3972", mockDate1.toString());
//       assertEquals(63184319999999L, week0.getLastMillisecond());
//       assertEquals(63183715200000L, week0.getFirstMillisecond());
//       assertEquals(13, week0.getWeek());
//       assertEquals(3972, week0.getYearValue());
//       assertEquals(210529L, week0.getSerialIndex());
//       assertEquals(63184017599999L, week0.getMiddleMillisecond());
//       assertEquals("Wed Mar 22 00:00:00 GMT 3972", mockDate0.toString());
//       assertNotSame(mockDate1, mockDate0);
//       assertNotSame(mockDate0, mockDate1);
//   }

  @Test(timeout = 4000)
  public void test24() {}
//   @Test(timeout = 4000)
//   public void test24()  throws Throwable  {
//       Week week0 = new Week();
//       assertNotNull(week0);
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(1392206399999L, week0.getMiddleMillisecond());
//       assertEquals(1392508799999L, week0.getLastMillisecond());
//       assertEquals(1391904000000L, week0.getFirstMillisecond());
//       assertEquals(7, week0.getWeek());
//       
//       int int0 = week0.compareTo((Object) week0);
//       assertEquals(0, int0);
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(1392206399999L, week0.getMiddleMillisecond());
//       assertEquals(1392508799999L, week0.getLastMillisecond());
//       assertEquals(1391904000000L, week0.getFirstMillisecond());
//       assertEquals(7, week0.getWeek());
//   }

  @Test(timeout = 4000)
  public void test25() {}
//   @Test(timeout = 4000)
//   public void test25()  throws Throwable  {
//       int int0 = 21;
//       Year year0 = new Year();
//       assertNotNull(year0);
//       assertEquals(2014, year0.getYear());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       
//       Week week0 = new Week(int0, year0);
//       assertNotNull(week0);
//       assertEquals(2014, year0.getYear());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1400371200000L, week0.getFirstMillisecond());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(1400975999999L, week0.getLastMillisecond());
//       assertEquals(1400673599999L, week0.getMiddleMillisecond());
//       assertEquals(21, week0.getWeek());
//       assertEquals(106763L, week0.getSerialIndex());
//       
//       long long0 = week0.getSerialIndex();
//       assertEquals(106763L, long0);
//       assertEquals(2014, year0.getYear());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1400371200000L, week0.getFirstMillisecond());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(1400975999999L, week0.getLastMillisecond());
//       assertEquals(1400673599999L, week0.getMiddleMillisecond());
//       assertEquals(21, week0.getWeek());
//       assertEquals(106763L, week0.getSerialIndex());
//   }

  @Test(timeout = 4000)
  public void test26() {}
//   @Test(timeout = 4000)
//   public void test26()  throws Throwable  {
//       int int0 = 3177;
//       Week week0 = new Week(int0, int0);
//       assertNotNull(week0);
//       assertEquals(3177, week0.getYearValue());
//       assertEquals(38151648000000L, week0.getFirstMillisecond());
//       assertEquals(105, week0.getWeek());
//       assertEquals(38152252799999L, week0.getLastMillisecond());
//       assertEquals(168486L, week0.getSerialIndex());
//       assertEquals(38151950399999L, week0.getMiddleMillisecond());
//       
//       int int1 = week0.hashCode();
//       assertEquals(30335, int1);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals(3177, week0.getYearValue());
//       assertEquals(38151648000000L, week0.getFirstMillisecond());
//       assertEquals(105, week0.getWeek());
//       assertEquals(38152252799999L, week0.getLastMillisecond());
//       assertEquals(168486L, week0.getSerialIndex());
//       assertEquals(38151950399999L, week0.getMiddleMillisecond());
//   }
}
