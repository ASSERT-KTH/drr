/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:37:03 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimePeriodFormatException;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class WeekEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 0;
      int int1 = 305;
      MockDate mockDate0 = new MockDate(int0, int1, int1);
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Thu Apr 01 00:00:00 GMT 1926", mockDate0.toString());
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(quarter0);
      //  // Unstable assertion: assertEquals((-1380758400017L), quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-1376827200018L), quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1926, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(7706L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1372896000018L), quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Thu Apr 01 00:00:00 GMT 1926", mockDate0.toString());
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      Year year0 = quarter0.getYear();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals((-1380758400017L), quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-1376827200018L), quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1926, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(7706L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1372896000018L), quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-1372766400001L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1926, year0.getYear());
      //  // Unstable assertion: assertEquals(1926L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1356998400001L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-1388534400000L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("1926", year0.toString());
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Thu Apr 01 00:00:00 GMT 1926", mockDate0.toString());
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(1926, week0.getYearValue());
      //  // Unstable assertion: assertEquals(102078L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(0, week0.getWeek());
      //  // Unstable assertion: assertEquals((-1388880000000L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-1388577600001L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-1388275200001L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-1380758400017L), quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-1376827200018L), quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1926, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(7706L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1372896000018L), quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-1372766400001L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1926, year0.getYear());
      //  // Unstable assertion: assertEquals(1926L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1356998400001L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-1388534400000L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("1926", year0.toString());
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Thu Apr 01 00:00:00 GMT 1926", mockDate0.toString());
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      String string0 = week0.toString();
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(1926, week0.getYearValue());
      //  // Unstable assertion: assertEquals(102078L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(0, week0.getWeek());
      //  // Unstable assertion: assertEquals((-1388880000000L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-1388577600001L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-1388275200001L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-1380758400017L), quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-1376827200018L), quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1926, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(7706L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1372896000018L), quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-1372766400001L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1926, year0.getYear());
      //  // Unstable assertion: assertEquals(1926L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1356998400001L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-1388534400000L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("1926", year0.toString());
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Thu Apr 01 00:00:00 GMT 1926", mockDate0.toString());
      //  // Unstable assertion: assertEquals("Week 0, 1926", string0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      // Undeclared exception!
      try {
        Week week1 = Week.parseWeek(string0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the week.
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "cuiXU:FT[~ze";
      // Undeclared exception!
      try {
        Week week0 = Week.parseWeek(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = null;
      Week week0 = Week.parseWeek(string0);
      assertNull(week0);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 0;
      int int1 = 305;
      MockDate mockDate0 = new MockDate(int0, int1, int1);
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Thu Apr 01 00:00:00 GMT 1926", mockDate0.toString());
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(quarter0);
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Thu Apr 01 00:00:00 GMT 1926", mockDate0.toString());
      //  // Unstable assertion: assertEquals((-1372896000018L), quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals((-1376827200018L), quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-1380758400017L), quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1926, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(7706L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      Year year0 = quarter0.getYear();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals("1926", year0.toString());
      //  // Unstable assertion: assertEquals((-1356998400001L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-1372766400001L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1926, year0.getYear());
      //  // Unstable assertion: assertEquals((-1388534400000L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1926L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Thu Apr 01 00:00:00 GMT 1926", mockDate0.toString());
      //  // Unstable assertion: assertEquals((-1372896000018L), quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals((-1376827200018L), quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-1380758400017L), quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1926, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(7706L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals("1926", year0.toString());
      //  // Unstable assertion: assertEquals((-1356998400001L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-1372766400001L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1926, year0.getYear());
      //  // Unstable assertion: assertEquals((-1388534400000L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1926L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Thu Apr 01 00:00:00 GMT 1926", mockDate0.toString());
      //  // Unstable assertion: assertEquals((-1388275200001L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-1388880000000L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(0, week0.getWeek());
      //  // Unstable assertion: assertEquals(102078L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1926, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-1388577600001L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-1372896000018L), quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals((-1376827200018L), quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-1380758400017L), quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1926, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(7706L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      int int2 = week0.compareTo((Object) year0);
      //  // Unstable assertion: assertEquals("1926", year0.toString());
      //  // Unstable assertion: assertEquals((-1356998400001L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-1372766400001L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1926, year0.getYear());
      //  // Unstable assertion: assertEquals((-1388534400000L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1926L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Thu Apr 01 00:00:00 GMT 1926", mockDate0.toString());
      //  // Unstable assertion: assertEquals((-1388275200001L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-1388880000000L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(0, week0.getWeek());
      //  // Unstable assertion: assertEquals(102078L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1926, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-1388577600001L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-1372896000018L), quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals((-1376827200018L), quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-1380758400017L), quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1926, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(7706L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(0, int2);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertTrue(int0 == int2);
      //  // Unstable assertion: assertTrue(int2 == int0);
      //  // Unstable assertion: assertFalse(int2 == int1);
  }

  @Test
  public void test04()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      
      Locale locale0 = Locale.FRENCH;
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("fra", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("fr", locale0.toString());
      //  // Unstable assertion: assertEquals("fr", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0, locale0);
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      //  // Unstable assertion: assertEquals("fra", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("fr", locale0.toString());
      //  // Unstable assertion: assertEquals("fr", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Null 'zone' argument.\",offset=17,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=337,ZONE_OFFSET=17,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      
      Date date0 = mockGregorianCalendar0.getTime();
      //  // Unstable assertion: assertNotNull(date0);
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      //  // Unstable assertion: assertEquals("fra", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("fr", locale0.toString());
      //  // Unstable assertion: assertEquals("fr", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Null 'zone' argument.\",offset=17,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=337,ZONE_OFFSET=17,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      
      Year year0 = new Year(date0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      //  // Unstable assertion: assertEquals("fra", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("fr", locale0.toString());
      //  // Unstable assertion: assertEquals("fr", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals(1404302399982L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399982L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534399983L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Null 'zone' argument.\",offset=17,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=337,ZONE_OFFSET=17,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      
      MockDate mockDate0 = (MockDate)year0.getEnd();
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:59 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals("fra", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("fr", locale0.toString());
      //  // Unstable assertion: assertEquals("fr", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals(1404302399982L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399982L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534399983L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Null 'zone' argument.\",offset=17,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=337,ZONE_OFFSET=17,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      
      Week week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0, locale0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:59 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(106796L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420415999982L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals(2015, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1419811199983L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420113599982L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("fra", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("fr", locale0.toString());
      //  // Unstable assertion: assertEquals("fr", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals(1404302399982L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399982L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534399983L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Null 'zone' argument.\",offset=17,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=337,ZONE_OFFSET=17,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      
      Week week1 = new Week();
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertEquals(1392292799982L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391990399983L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week1.getWeek());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392595199982L, week1.getLastMillisecond());
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      
      int int0 = week0.compareTo((Object) week1);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:59 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(106796L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420415999982L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals(2015, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1419811199983L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420113599982L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("fra", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("fr", locale0.toString());
      //  // Unstable assertion: assertEquals("fr", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals(1404302399982L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399982L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534399983L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392292799982L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391990399983L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week1.getWeek());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392595199982L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Null 'zone' argument.\",offset=17,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=337,ZONE_OFFSET=17,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(1, int0);
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
  }

  @Test
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      String string0 = "yQ";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Week week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0);
      assertNotNull(week0);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      int int0 = week0.compareTo((Object) mockDate0);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, int0);
  }

  @Test
  public void test06()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990399983L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595199982L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392292799982L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      
      MockDate mockDate0 = (MockDate)week0.getEnd();
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Sun Feb 16 23:59:59 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990399983L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595199982L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392292799982L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      
      Week week1 = new Week((Date) mockDate0);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertEquals(1392292799982L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392595199982L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391990399983L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(7, week1.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals("Sun Feb 16 23:59:59 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990399983L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595199982L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392292799982L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertTrue(week1.equals((Object)week0));
      //  // Unstable assertion: assertTrue(week0.equals((Object)week1));
      
      boolean boolean0 = week0.equals((Object) week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertEquals(1392292799982L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392595199982L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391990399983L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(7, week1.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals("Sun Feb 16 23:59:59 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990399983L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595199982L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392292799982L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertTrue(week1.equals((Object)week0));
      //  // Unstable assertion: assertTrue(week0.equals((Object)week1));
  }

  @Test
  public void test07()  throws Throwable  {
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399983L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399982L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1420070399982L, year0.getLastMillisecond());
      
      int int0 = 2612;
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399983L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399982L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1420070399982L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1419811199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1419508799999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(52, week0.getWeek());
      //  // Unstable assertion: assertEquals(1419206400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106794L, week0.getSerialIndex());
      
      Week week1 = new Week();
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1391990399983L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week1.getWeek());
      //  // Unstable assertion: assertEquals(1392292799982L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392595199982L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week1.getSerialIndex());
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      
      boolean boolean0 = week0.equals((Object) week1);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399983L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399982L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1420070399982L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1419811199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1419508799999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(52, week0.getWeek());
      //  // Unstable assertion: assertEquals(1419206400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106794L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1391990399983L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week1.getWeek());
      //  // Unstable assertion: assertEquals(1392292799982L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392595199982L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week1.getSerialIndex());
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
  }

  @Test
  public void test08()  throws Throwable  {
      long long0 = 2785L;
      MockDate mockDate0 = new MockDate(long0);
      assertNotNull(mockDate0);
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Week week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0);
      assertNotNull(week0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(43199999L, week0.getMiddleMillisecond());
      assertEquals((-259200000L), week0.getFirstMillisecond());
      assertEquals(345599999L, week0.getLastMillisecond());
      assertEquals(1, week0.getWeek());
      assertEquals(1970, week0.getYearValue());
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      
      String string0 = locale0.getISO3Language();
      assertNotNull(string0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", string0);
      
      boolean boolean0 = week0.equals((Object) string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(43199999L, week0.getMiddleMillisecond());
      assertEquals((-259200000L), week0.getFirstMillisecond());
      assertEquals(345599999L, week0.getLastMillisecond());
      assertEquals(1, week0.getWeek());
      assertEquals(1970, week0.getYearValue());
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(1420070399982L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399983L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1404302399982L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      
      int int0 = 2612;
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(1419811199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(52, week0.getWeek());
      //  // Unstable assertion: assertEquals(1419206400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1419508799999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(106794L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399982L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399983L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1404302399982L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      
      Week week1 = new Week(int0, int0);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertEquals(2612, week1.getYearValue());
      //  // Unstable assertion: assertEquals(138488L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(20290176000000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20290780799999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(52, week1.getWeek());
      //  // Unstable assertion: assertEquals(20290478399999L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      
      boolean boolean0 = week0.equals((Object) week1);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertEquals(1419811199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(52, week0.getWeek());
      //  // Unstable assertion: assertEquals(1419206400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1419508799999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(106794L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399982L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399983L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1404302399982L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2612, week1.getYearValue());
      //  // Unstable assertion: assertEquals(138488L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(20290176000000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20290780799999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(52, week1.getWeek());
      //  // Unstable assertion: assertEquals(20290478399999L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      int int1 = 305;
      MockDate mockDate0 = new MockDate(int0, int1, int1);
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Thu Apr 01 00:00:00 GMT 1926", mockDate0.toString());
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(quarter0);
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Thu Apr 01 00:00:00 GMT 1926", mockDate0.toString());
      //  // Unstable assertion: assertEquals((-1380758400017L), quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7706L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1376827200018L), quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-1372896000018L), quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1926, quarter0.getYearValue());
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      Year year0 = quarter0.getYear();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("1926", year0.toString());
      //  // Unstable assertion: assertEquals((-1356998400001L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-1388534400000L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-1372766400001L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1926, year0.getYear());
      //  // Unstable assertion: assertEquals(1926L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Thu Apr 01 00:00:00 GMT 1926", mockDate0.toString());
      //  // Unstable assertion: assertEquals((-1380758400017L), quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7706L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1376827200018L), quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-1372896000018L), quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1926, quarter0.getYearValue());
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("1926", year0.toString());
      //  // Unstable assertion: assertEquals((-1356998400001L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-1388534400000L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-1372766400001L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1926, year0.getYear());
      //  // Unstable assertion: assertEquals(1926L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Thu Apr 01 00:00:00 GMT 1926", mockDate0.toString());
      //  // Unstable assertion: assertEquals((-1380758400017L), quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7706L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1376827200018L), quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-1372896000018L), quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1926, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1926, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-1388880000000L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(0, week0.getWeek());
      //  // Unstable assertion: assertEquals((-1388577600001L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-1388275200001L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(102078L, week0.getSerialIndex());
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      Week week1 = (Week)week0.next();
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("1926", year0.toString());
      //  // Unstable assertion: assertEquals((-1356998400001L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-1388534400000L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-1372766400001L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1926, year0.getYear());
      //  // Unstable assertion: assertEquals(1926L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Thu Apr 01 00:00:00 GMT 1926", mockDate0.toString());
      //  // Unstable assertion: assertEquals((-1380758400017L), quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7706L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1376827200018L), quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-1372896000018L), quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1926, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(102079L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1387972800001L), week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1, week1.getWeek());
      //  // Unstable assertion: assertEquals((-1387670400001L), week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-1388275200000L), week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1926, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1926, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-1388880000000L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(0, week0.getWeek());
      //  // Unstable assertion: assertEquals((-1388577600001L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-1388275200001L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(102078L, week0.getSerialIndex());
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertFalse(int1 == int0);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 3914;
      Week week0 = new Week(int0, int0);
      assertNotNull(week0);
      assertEquals(61390569600000L, week0.getFirstMillisecond());
      assertEquals(3914, week0.getYearValue());
      assertEquals(61390871999999L, week0.getMiddleMillisecond());
      assertEquals(74, week0.getWeek());
      assertEquals(207516L, week0.getSerialIndex());
      assertEquals(61391174399999L, week0.getLastMillisecond());
      
      Week week1 = (Week)week0.next();
      assertNotSame(week1, week0);
      assertNotSame(week0, week1);
      assertNotNull(week1);
      assertEquals(3915, week1.getYearValue());
      assertEquals(1, week1.getWeek());
      assertEquals(61379078399999L, week1.getLastMillisecond());
      assertEquals(61378775999999L, week1.getMiddleMillisecond());
      assertEquals(61378473600000L, week1.getFirstMillisecond());
      assertEquals(207496L, week1.getSerialIndex());
      assertEquals(61390569600000L, week0.getFirstMillisecond());
      assertEquals(3914, week0.getYearValue());
      assertEquals(61390871999999L, week0.getMiddleMillisecond());
      assertEquals(74, week0.getWeek());
      assertEquals(207516L, week0.getSerialIndex());
      assertEquals(61391174399999L, week0.getLastMillisecond());
      assertFalse(week1.equals((Object)week0));
      assertFalse(week0.equals((Object)week1));
  }

  @Test
  public void test12()  throws Throwable  {
      long long0 = 2785L;
      MockDate mockDate0 = new MockDate(long0);
      assertNotNull(mockDate0);
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      int int0 = (-1);
      mockDate0.setYear(int0);
      assertEquals("Sun Jan 01 00:00:02 GMT 1899", mockDate0.toString());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      Week week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0, locale0);
      assertNotNull(week0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("Sun Jan 01 00:00:02 GMT 1899", mockDate0.toString());
      assertEquals(100648L, week0.getSerialIndex());
      assertEquals((-2239920000001L), week0.getLastMillisecond());
      assertEquals((-2240524800000L), week0.getFirstMillisecond());
      assertEquals(1899, week0.getYearValue());
      assertEquals((-2240222400001L), week0.getMiddleMillisecond());
      assertEquals(1, week0.getWeek());
      
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      assertNull(regularTimePeriod0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("Sun Jan 01 00:00:02 GMT 1899", mockDate0.toString());
      assertEquals(100648L, week0.getSerialIndex());
      assertEquals((-2239920000001L), week0.getLastMillisecond());
      assertEquals((-2240524800000L), week0.getFirstMillisecond());
      assertEquals(1899, week0.getYearValue());
      assertEquals((-2240222400001L), week0.getMiddleMillisecond());
      assertEquals(1, week0.getWeek());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-4834);
      Week week0 = new Week(int0, int0);
      assertNotNull(week0);
      assertEquals(30, week0.getWeek());
      assertEquals((-214698816000001L), week0.getLastMillisecond());
      assertEquals((-256172L), week0.getSerialIndex());
      assertEquals((-214699420800000L), week0.getFirstMillisecond());
      assertEquals(-4834, week0.getYearValue());
      assertEquals((-214699118400001L), week0.getMiddleMillisecond());
      
      Week week1 = (Week)week0.previous();
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(week1);
      assertEquals(30, week0.getWeek());
      assertEquals((-214698816000001L), week0.getLastMillisecond());
      assertEquals((-256172L), week0.getSerialIndex());
      assertEquals((-214699420800000L), week0.getFirstMillisecond());
      assertEquals(-4834, week0.getYearValue());
      assertEquals((-214699118400001L), week0.getMiddleMillisecond());
      assertEquals((-256173L), week1.getSerialIndex());
      assertEquals((-214699723200001L), week1.getMiddleMillisecond());
      assertEquals(-4834, week1.getYearValue());
      assertEquals((-214699420800001L), week1.getLastMillisecond());
      assertEquals((-214700025600000L), week1.getFirstMillisecond());
      assertEquals(29, week1.getWeek());
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
  }

  @Test
  public void test14()  throws Throwable  {
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534399983L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399982L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302399982L, year0.getMiddleMillisecond());
      
      MockDate mockDate0 = (MockDate)year0.getEnd();
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534399983L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399982L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302399982L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:59 GMT 2014", mockDate0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      
      Locale locale0 = Locale.UK;
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      
      Week week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0, locale0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(1420113599982L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2015, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1419811199983L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals(1420415999982L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106796L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534399983L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399982L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302399982L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:59 GMT 2014", mockDate0.toString());
      
      Week week1 = (Week)week0.previous();
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertEquals(1420113599982L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2015, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1419811199983L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals(1420415999982L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106796L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(52, week1.getWeek());
      //  // Unstable assertion: assertEquals(106794L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1419811199999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1419206400000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1419508799999L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534399983L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399982L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302399982L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:59 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
  }

  @Test
  public void test15()  throws Throwable  {
      long long0 = 2785L;
      MockDate mockDate0 = new MockDate(long0);
      assertNotNull(mockDate0);
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      int int0 = (-1);
      mockDate0.setYear(int0);
      assertEquals("Sun Jan 01 00:00:02 GMT 1899", mockDate0.toString());
      
      Week week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0);
      assertNotNull(week0);
      assertEquals("Sun Jan 01 00:00:02 GMT 1899", mockDate0.toString());
      assertEquals((-2240740800001L), week0.getMiddleMillisecond());
      assertEquals((-2241043200000L), week0.getFirstMillisecond());
      assertEquals(1898, week0.getYearValue());
      assertEquals((-2240438400001L), week0.getLastMillisecond());
      assertEquals(100646L, week0.getSerialIndex());
      assertEquals(52, week0.getWeek());
      assertEquals("GMT", zoneInfo0.getID());
  }

  @Test
  public void test16()  throws Throwable  {
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534399983L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399982L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399982L, year0.getLastMillisecond());
      
      MockDate mockDate0 = (MockDate)year0.getEnd();
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:59 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534399983L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399982L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399982L, year0.getLastMillisecond());
      
      int int0 = 119;
      String string0 = "koKhu";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      //  // Unstable assertion: assertNotNull(simpleTimeZone0);
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
      //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id=koKhu,offset=119,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      //  // Unstable assertion: assertEquals("koKhu", simpleTimeZone0.getID());
      //  // Unstable assertion: assertEquals(false, simpleTimeZone0.useDaylightTime());
      //  // Unstable assertion: assertEquals(119, simpleTimeZone0.getRawOffset());
      
      Locale locale0 = null;
      Week week0 = null;
      try {
        week0 = new Week((Date) mockDate0, (TimeZone) simpleTimeZone0, locale0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      
      Week week0 = null;
      try {
        week0 = new Week((Date) mockDate0, timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Date date0 = null;
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      
      Week week0 = null;
      try {
        week0 = new Week(date0, timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "In<lid Oay-of-the-eek code";
      // Undeclared exception!
      try {
        Week week0 = Week.parseWeek(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = (-2968);
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(1388534399983L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399982L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302399982L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(1451260799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1450958399999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106846L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1450656000000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(104, week0.getWeek());
      //  // Unstable assertion: assertEquals(1388534399983L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399982L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302399982L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      
      int int1 = week0.getYearValue();
      //  // Unstable assertion: assertEquals(1451260799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1450958399999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106846L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1450656000000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(104, week0.getWeek());
      //  // Unstable assertion: assertEquals(1388534399983L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399982L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302399982L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, int1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = 52;
      Week week0 = new Week(int0, int0);
      assertNotNull(week0);
      assertEquals((-60495076800001L), week0.getMiddleMillisecond());
      assertEquals((-60494774400001L), week0.getLastMillisecond());
      assertEquals(2808L, week0.getSerialIndex());
      assertEquals(52, week0.getYearValue());
      assertEquals((-60495379200000L), week0.getFirstMillisecond());
      assertEquals(52, week0.getWeek());
      
      long long0 = week0.getMiddleMillisecond();
      assertEquals((-60495076800001L), week0.getMiddleMillisecond());
      assertEquals((-60494774400001L), week0.getLastMillisecond());
      assertEquals(2808L, week0.getSerialIndex());
      assertEquals(52, week0.getYearValue());
      assertEquals((-60495379200000L), week0.getFirstMillisecond());
      assertEquals(52, week0.getWeek());
      assertEquals((-60495076800001L), long0);
  }

  @Test
  public void test22()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(1391990399983L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595199982L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392292799982L, week0.getMiddleMillisecond());
      
      int int0 = week0.compareTo((Object) week0);
      //  // Unstable assertion: assertEquals(1391990399983L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595199982L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392292799982L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = 0;
      int int1 = 305;
      MockDate mockDate0 = new MockDate(int0, int1, int1);
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Thu Apr 01 00:00:00 GMT 1926", mockDate0.toString());
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(quarter0);
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals((-1372896000018L), quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1926, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals((-1376827200018L), quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7706L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1380758400017L), quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals("Thu Apr 01 00:00:00 GMT 1926", mockDate0.toString());
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      Year year0 = quarter0.getYear();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals((-1372896000018L), quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1926, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals((-1376827200018L), quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7706L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1380758400017L), quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals("Thu Apr 01 00:00:00 GMT 1926", mockDate0.toString());
      //  // Unstable assertion: assertEquals((-1372766400001L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("1926", year0.toString());
      //  // Unstable assertion: assertEquals((-1388534400000L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1926L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1926, year0.getYear());
      //  // Unstable assertion: assertEquals((-1356998400001L), year0.getLastMillisecond());
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals((-1388577600001L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-1388880000000L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-1388275200001L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1926, week0.getYearValue());
      //  // Unstable assertion: assertEquals(102078L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(0, week0.getWeek());
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals((-1372896000018L), quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1926, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals((-1376827200018L), quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7706L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1380758400017L), quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals("Thu Apr 01 00:00:00 GMT 1926", mockDate0.toString());
      //  // Unstable assertion: assertEquals((-1372766400001L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("1926", year0.toString());
      //  // Unstable assertion: assertEquals((-1388534400000L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1926L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1926, year0.getYear());
      //  // Unstable assertion: assertEquals((-1356998400001L), year0.getLastMillisecond());
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      long long0 = week0.getSerialIndex();
      //  // Unstable assertion: assertEquals((-1388577600001L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-1388880000000L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-1388275200001L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1926, week0.getYearValue());
      //  // Unstable assertion: assertEquals(102078L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(0, week0.getWeek());
      //  // Unstable assertion: assertEquals("Null 'zone' argument.", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals((-1372896000018L), quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1926, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals((-1376827200018L), quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7706L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1380758400017L), quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals("Thu Apr 01 00:00:00 GMT 1926", mockDate0.toString());
      //  // Unstable assertion: assertEquals((-1372766400001L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("1926", year0.toString());
      //  // Unstable assertion: assertEquals((-1388534400000L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1926L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1926, year0.getYear());
      //  // Unstable assertion: assertEquals((-1356998400001L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(102078L, long0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 3914;
      Week week0 = new Week(int0, int0);
      assertNotNull(week0);
      assertEquals(207516L, week0.getSerialIndex());
      assertEquals(61390569600000L, week0.getFirstMillisecond());
      assertEquals(74, week0.getWeek());
      assertEquals(61391174399999L, week0.getLastMillisecond());
      assertEquals(61390871999999L, week0.getMiddleMillisecond());
      assertEquals(3914, week0.getYearValue());
      
      int int1 = week0.hashCode();
      assertEquals(207516L, week0.getSerialIndex());
      assertEquals(61390569600000L, week0.getFirstMillisecond());
      assertEquals(74, week0.getWeek());
      assertEquals(61391174399999L, week0.getLastMillisecond());
      assertEquals(61390871999999L, week0.getMiddleMillisecond());
      assertEquals(3914, week0.getYearValue());
      assertEquals(29925, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }
}
