/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:18:43 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimePeriodFormatException;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class WeekEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = (-305);
      Year year0 = new Year();
      //  // Unstable assertion: assertEquals(1420070399985L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302399985L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399986L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertNotNull(year0);
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertEquals(1420070399985L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302399985L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399986L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(106693L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1358035200000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1358639999999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1358337599999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(-49, week0.getWeek());
      //  // Unstable assertion: assertNotNull(week0);
      
      String string0 = week0.toString();
      //  // Unstable assertion: assertEquals(1420070399985L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302399985L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399986L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(106693L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1358035200000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1358639999999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1358337599999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(-49, week0.getWeek());
      //  // Unstable assertion: assertEquals("Week -49, 2014", string0);
      //  // Unstable assertion: assertNotNull(string0);
      
      // Undeclared exception!
      try {
        Week week1 = Week.parseWeek(string0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "B=sM8M]&|8{";
      // Undeclared exception!
      try {
        Week week0 = Week.parseWeek(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = null;
      Week week0 = Week.parseWeek(string0);
      assertNull(week0);
  }

  @Test(timeout = 4000)
  public void test03() {}
//   @Test(timeout = 4000)
//   public void test03()  throws Throwable  {
//       int int0 = (-551);
//       Week week0 = new Week(int0, int0);
//       assertEquals(-39, week0.getWeek());
//       assertEquals((-29242L), week0.getSerialIndex());
//       assertEquals((-79579627200001L), week0.getMiddleMillisecond());
//       assertEquals(-551, week0.getYearValue());
//       assertEquals((-79579929600000L), week0.getFirstMillisecond());
//       assertEquals((-79579324800001L), week0.getLastMillisecond());
//       assertNotNull(week0);
//       
//       String string0 = "_Lg3";
//       int int1 = week0.compareTo((Object) string0);
//       assertEquals(-39, week0.getWeek());
//       assertEquals((-29242L), week0.getSerialIndex());
//       assertEquals((-79579627200001L), week0.getMiddleMillisecond());
//       assertEquals(-551, week0.getYearValue());
//       assertEquals((-79579929600000L), week0.getFirstMillisecond());
//       assertEquals((-79579324800001L), week0.getLastMillisecond());
//       assertEquals(1, int1);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//   }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(1392206399985L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391903999986L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392508799985L, week0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(week0);
      
      int int0 = 32;
      Week week1 = new Week(int0, int0);
      //  // Unstable assertion: assertEquals((-61138972800000L), week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(32, week1.getWeek());
      //  // Unstable assertion: assertEquals(32, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1728L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals((-61138368000001L), week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-61138670400001L), week1.getMiddleMillisecond());
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      
      int int1 = week1.compareTo((Object) week0);
      //  // Unstable assertion: assertEquals(1392206399985L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391903999986L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392508799985L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-61138972800000L), week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(32, week1.getWeek());
      //  // Unstable assertion: assertEquals(32, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1728L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals((-61138368000001L), week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-61138670400001L), week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-1982), int1);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertFalse(int1 == int0);
  }

  //@Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      //  // Unstable assertion: assertEquals(1392422399985L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1396310399985L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399986L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertNotNull(quarter0);
      
      Year year0 = new Year();
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534399986L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399985L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302399985L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertNotNull(year0);
      
      MockDate mockDate0 = (MockDate)year0.getEnd();
      //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:59 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534399986L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399985L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302399985L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertNotNull(mockDate0);
      
      Week week0 = new Week((Date) mockDate0);
      //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:59 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(2015, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106796L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1419724799986L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420027199985L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1420329599985L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534399986L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399985L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302399985L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertNotNull(week0);
      
      int int0 = week0.compareTo((Object) quarter0);
      //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:59 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(2015, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106796L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1419724799986L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420027199985L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1420329599985L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392422399985L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1396310399985L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399986L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534399986L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399985L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302399985L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(1392508799985L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392206399985L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391903999986L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(week0);
      
      int int0 = 0;
      Week week1 = new Week(int0, int0);
      //  // Unstable assertion: assertEquals((-62167737600001L), week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-62168040000001L), week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(0, week1.getYearValue());
      //  // Unstable assertion: assertEquals(0, week1.getWeek());
      //  // Unstable assertion: assertEquals((-62168342400000L), week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(0L, week1.getSerialIndex());
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      
      boolean boolean0 = week0.equals((Object) week1);
      //  // Unstable assertion: assertEquals((-62167737600001L), week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-62168040000001L), week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(0, week1.getYearValue());
      //  // Unstable assertion: assertEquals(0, week1.getWeek());
      //  // Unstable assertion: assertEquals((-62168342400000L), week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(0L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392508799985L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392206399985L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391903999986L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(1391903999986L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392508799985L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392206399985L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertNotNull(week0);
      
      Week week1 = new Week();
      //  // Unstable assertion: assertEquals(1391903999986L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week1.getWeek());
      //  // Unstable assertion: assertEquals(1392206399985L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392508799985L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week1.getSerialIndex());
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertTrue(week1.equals((Object)week0));
      
      boolean boolean0 = week1.equals((Object) week0);
      //  // Unstable assertion: assertEquals(1391903999986L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392508799985L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392206399985L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391903999986L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week1.getWeek());
      //  // Unstable assertion: assertEquals(1392206399985L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392508799985L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week1.getSerialIndex());
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertTrue(week0.equals((Object)week1));
      //  // Unstable assertion: assertTrue(week1.equals((Object)week0));
  }

 // @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Year year0 = new Year();
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534399986L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399985L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399985L, year0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(year0);
      
      MockDate mockDate0 = (MockDate)year0.getEnd();
      //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:59 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534399986L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399985L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399985L, year0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(mockDate0);
      
      Week week0 = new Week((Date) mockDate0);
      //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:59 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1419724799986L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420329599985L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2015, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106796L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420027199985L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534399986L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399985L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399985L, year0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(week0);
      
      boolean boolean0 = week0.equals((Object) year0);
      //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:59 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1419724799986L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420329599985L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2015, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106796L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420027199985L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534399986L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399985L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399985L, year0.getLastMillisecond());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09() {}
//   @Test(timeout = 4000)
//   public void test09()  throws Throwable  {
//       int int0 = 2665;
//       int int1 = 10011;
//       Week week0 = new Week(int0, int1);
//       assertEquals(105, week0.getWeek());
//       assertEquals(253811836800000L, week0.getFirstMillisecond());
//       assertEquals(530688L, week0.getSerialIndex());
//       assertEquals(10011, week0.getYearValue());
//       assertEquals(253812139199999L, week0.getMiddleMillisecond());
//       assertEquals(253812441599999L, week0.getLastMillisecond());
//       assertNotNull(week0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       
//       RegularTimePeriod regularTimePeriod0 = week0.next();
//       assertEquals(105, week0.getWeek());
//       assertEquals(253811836800000L, week0.getFirstMillisecond());
//       assertEquals(530688L, week0.getSerialIndex());
//       assertEquals(10011, week0.getYearValue());
//       assertEquals(253812139199999L, week0.getMiddleMillisecond());
//       assertEquals(253812441599999L, week0.getLastMillisecond());
//       assertNull(regularTimePeriod0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//   }

  @Test(timeout = 4000)
  public void test10() {}
//   @Test(timeout = 4000)
//   public void test10()  throws Throwable  {
//       int int0 = 52;
//       Week week0 = new Week(int0, int0);
//       assertEquals(2808L, week0.getSerialIndex());
//       assertEquals(52, week0.getWeek());
//       assertEquals(52, week0.getYearValue());
//       assertEquals((-60495465600001L), week0.getLastMillisecond());
//       assertEquals((-60496070400000L), week0.getFirstMillisecond());
//       assertEquals((-60495768000001L), week0.getMiddleMillisecond());
//       assertNotNull(week0);
//       
//       Week week1 = (Week)week0.next();
//       assertEquals((-60495465600000L), week1.getFirstMillisecond());
//       assertEquals((-60495163200001L), week1.getMiddleMillisecond());
//       assertEquals(52, week1.getYearValue());
//       assertEquals((-60494860800001L), week1.getLastMillisecond());
//       assertEquals(2809L, week1.getSerialIndex());
//       assertEquals(53, week1.getWeek());
//       assertEquals(2808L, week0.getSerialIndex());
//       assertEquals(52, week0.getWeek());
//       assertEquals(52, week0.getYearValue());
//       assertEquals((-60495465600001L), week0.getLastMillisecond());
//       assertEquals((-60496070400000L), week0.getFirstMillisecond());
//       assertEquals((-60495768000001L), week0.getMiddleMillisecond());
//       assertNotSame(week1, week0);
//       assertNotSame(week0, week1);
//       assertNotNull(week1);
//       assertFalse(week1.equals((Object)week0));
//       assertFalse(week0.equals((Object)week1));
//   }

  @Test(timeout = 4000)
  public void test11() {}
//   @Test(timeout = 4000)
//   public void test11()  throws Throwable  {
//       int int0 = (-551);
//       Week week0 = new Week(int0, int0);
//       assertEquals(-551, week0.getYearValue());
//       assertEquals((-79579929600000L), week0.getFirstMillisecond());
//       assertEquals(-39, week0.getWeek());
//       assertEquals((-79579324800001L), week0.getLastMillisecond());
//       assertEquals((-29242L), week0.getSerialIndex());
//       assertEquals((-79579627200001L), week0.getMiddleMillisecond());
//       assertNotNull(week0);
//       
//       Week week1 = (Week)week0.next();
//       assertEquals((-29241L), week1.getSerialIndex());
//       assertEquals(-551, week1.getYearValue());
//       assertEquals((-79578720000001L), week1.getLastMillisecond());
//       assertEquals(-38, week1.getWeek());
//       assertEquals((-79579022400001L), week1.getMiddleMillisecond());
//       assertEquals((-79579324800000L), week1.getFirstMillisecond());
//       assertEquals(-551, week0.getYearValue());
//       assertEquals((-79579929600000L), week0.getFirstMillisecond());
//       assertEquals(-39, week0.getWeek());
//       assertEquals((-79579324800001L), week0.getLastMillisecond());
//       assertEquals((-29242L), week0.getSerialIndex());
//       assertEquals((-79579627200001L), week0.getMiddleMillisecond());
//       assertNotSame(week1, week0);
//       assertNotSame(week0, week1);
//       assertNotNull(week1);
//       assertFalse(week1.equals((Object)week0));
//       assertFalse(week0.equals((Object)week1));
//   }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 1525;
      int int1 = 11;
      int int2 = (-1163);
      MockDate mockDate0 = new MockDate(int0, int0, int1, int2, int1, int0);
      //  // Unstable assertion: assertEquals("Mon Dec 24 13:36:25 GMT 3551", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int0 == int2);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.UK;
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertNotNull(locale0);
      
      Week week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0, locale0);
      //  // Unstable assertion: assertEquals(49922654399985L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(49922351999986L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(49922956799985L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(188255L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(3551, week0.getYearValue());
      //  // Unstable assertion: assertEquals(52, week0.getWeek());
      //  // Unstable assertion: assertEquals("Mon Dec 24 13:36:25 GMT 3551", mockDate0.toString());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int0 == int2);
      
      Week week1 = (Week)week0.next();
      //  // Unstable assertion: assertEquals(49922654399985L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(49922351999986L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(49922956799985L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(188255L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(3551, week0.getYearValue());
      //  // Unstable assertion: assertEquals(52, week0.getWeek());
      //  // Unstable assertion: assertEquals("Mon Dec 24 13:36:25 GMT 3551", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1, week1.getWeek());
      //  // Unstable assertion: assertEquals(49923172799999L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(49922870400000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3552, week1.getYearValue());
      //  // Unstable assertion: assertEquals(49923475199999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(188257L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long long0 = 1642L;
      MockDate mockDate0 = new MockDate(long0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(mockDate0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      Week week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertEquals(104411L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-345600014L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1970, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals(259199985L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-43200015L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(week0);
      
      Week week1 = (Week)week0.previous();
      //  // Unstable assertion: assertEquals(104409L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals((-648000001L), week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-345600001L), week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(52, week1.getWeek());
      //  // Unstable assertion: assertEquals(1969, week1.getYearValue());
      //  // Unstable assertion: assertEquals((-950400000L), week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(104411L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-345600014L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1970, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals(259199985L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-43200015L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
  }

  @Test(timeout = 4000)
  public void test14() {}
//   @Test(timeout = 4000)
//   public void test14()  throws Throwable  {
//       int int0 = (-551);
//       Week week0 = new Week(int0, int0);
//       assertEquals(-551, week0.getYearValue());
//       assertEquals(-39, week0.getWeek());
//       assertEquals((-79579627200001L), week0.getMiddleMillisecond());
//       assertEquals((-79579324800001L), week0.getLastMillisecond());
//       assertEquals((-29242L), week0.getSerialIndex());
//       assertEquals((-79579929600000L), week0.getFirstMillisecond());
//       assertNotNull(week0);
//       
//       Week week1 = (Week)week0.previous();
//       assertEquals(-551, week1.getYearValue());
//       assertEquals(-40, week1.getWeek());
//       assertEquals((-79580534400000L), week1.getFirstMillisecond());
//       assertEquals((-79579929600001L), week1.getLastMillisecond());
//       assertEquals((-29243L), week1.getSerialIndex());
//       assertEquals((-79580232000001L), week1.getMiddleMillisecond());
//       assertEquals(-551, week0.getYearValue());
//       assertEquals(-39, week0.getWeek());
//       assertEquals((-79579627200001L), week0.getMiddleMillisecond());
//       assertEquals((-79579324800001L), week0.getLastMillisecond());
//       assertEquals((-29242L), week0.getSerialIndex());
//       assertEquals((-79579929600000L), week0.getFirstMillisecond());
//       assertNotSame(week1, week0);
//       assertNotSame(week0, week1);
//       assertNotNull(week1);
//       assertFalse(week1.equals((Object)week0));
//       assertFalse(week0.equals((Object)week1));
//   }

  @Test(timeout = 4000)
  public void test15() {}
//   @Test(timeout = 4000)
//   public void test15()  throws Throwable  {
//       int int0 = (-2303);
//       Week week0 = new Week(int0, int0);
//       assertEquals(-2303, week0.getYearValue());
//       assertEquals((-134844739200000L), week0.getFirstMillisecond());
//       assertEquals((-134844436800001L), week0.getMiddleMillisecond());
//       assertEquals(1, week0.getWeek());
//       assertEquals((-122058L), week0.getSerialIndex());
//       assertEquals((-134844134400001L), week0.getLastMillisecond());
//       assertNotNull(week0);
//       
//       RegularTimePeriod regularTimePeriod0 = week0.previous();
//       assertEquals(-2303, week0.getYearValue());
//       assertEquals((-134844739200000L), week0.getFirstMillisecond());
//       assertEquals((-134844436800001L), week0.getMiddleMillisecond());
//       assertEquals(1, week0.getWeek());
//       assertEquals((-122058L), week0.getSerialIndex());
//       assertEquals((-134844134400001L), week0.getLastMillisecond());
//       assertNull(regularTimePeriod0);
//   }

 // @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(334L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570881334L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(millisecond0);
      
      MockDate mockDate0 = (MockDate)millisecond0.getStart();
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(334L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570881334L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(mockDate0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      Locale locale0 = null;
      Week week0 = null;
      try {
        week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0, locale0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
      }
  }

  //@Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391903999986L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392508799985L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392206399985L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertNotNull(week0);
      
      MockDate mockDate0 = (MockDate)week0.getEnd();
      //  // Unstable assertion: assertEquals("Sat Feb 15 23:59:59 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391903999986L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392508799985L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392206399985L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertNotNull(mockDate0);
      
      Class<Week> class0 = Week.class;
      TimeZone timeZone0 = null;
      RegularTimePeriod regularTimePeriod0 = RegularTimePeriod.createInstance((Class) class0, (Date) mockDate0, timeZone0);
      //  // Unstable assertion: assertEquals("Sat Feb 15 23:59:59 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391903999986L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392508799985L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392206399985L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertNull(regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Date date0 = null;
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      Week week0 = null;
      try {
        week0 = new Week(date0, (TimeZone) zoneInfo0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392508799985L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391903999986L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392206399985L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertNotNull(week0);
      
      String string0 = week0.toString();
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392508799985L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391903999986L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392206399985L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Week 7, 2014", string0);
      //  // Unstable assertion: assertNotNull(string0);
      
      // Undeclared exception!
      try {
        Week week1 = Week.parseWeek(string0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the week.
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392206399985L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392508799985L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391903999986L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertNotNull(week0);
      
      int int0 = week0.getYearValue();
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392206399985L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392508799985L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391903999986L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, int0);
  }

  @Test(timeout = 4000)
  public void test21() {}
//   @Test(timeout = 4000)
//   public void test21()  throws Throwable  {
//       int int0 = (-2303);
//       Week week0 = new Week(int0, int0);
//       assertEquals((-122058L), week0.getSerialIndex());
//       assertEquals(1, week0.getWeek());
//       assertEquals((-134844134400001L), week0.getLastMillisecond());
//       assertEquals(-2303, week0.getYearValue());
//       assertEquals((-134844436800001L), week0.getMiddleMillisecond());
//       assertEquals((-134844739200000L), week0.getFirstMillisecond());
//       assertNotNull(week0);
//       
//       long long0 = week0.getFirstMillisecond();
//       assertEquals((-122058L), week0.getSerialIndex());
//       assertEquals(1, week0.getWeek());
//       assertEquals((-134844134400001L), week0.getLastMillisecond());
//       assertEquals(-2303, week0.getYearValue());
//       assertEquals((-134844436800001L), week0.getMiddleMillisecond());
//       assertEquals((-134844739200000L), week0.getFirstMillisecond());
//       assertEquals((-134844739200000L), long0);
//   }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(1392206399985L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392508799985L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391903999986L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertNotNull(week0);
      
      int int0 = week0.compareTo((Object) week0);
      //  // Unstable assertion: assertEquals(1392206399985L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392508799985L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391903999986L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 14;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=14,MONTH=14,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getTime();
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61687785600000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=15,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("Thu Mar 14 00:00:00 GMT 15", date0.toString());
      //  // Unstable assertion: assertNotNull(date0);
      
      Year year0 = new Year(date0);
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61687785600000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=15,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(15L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-61662470400015L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(15, year0.getYear());
      //  // Unstable assertion: assertEquals((-61678238400015L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("15", year0.toString());
      //  // Unstable assertion: assertEquals((-61694006400014L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Thu Mar 14 00:00:00 GMT 15", date0.toString());
      //  // Unstable assertion: assertNotNull(year0);
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61687785600000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=15,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(15L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-61662470400015L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(15, year0.getYear());
      //  // Unstable assertion: assertEquals((-61678238400015L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("15", year0.toString());
      //  // Unstable assertion: assertEquals((-61694006400014L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Thu Mar 14 00:00:00 GMT 15", date0.toString());
      //  // Unstable assertion: assertEquals(14, week0.getWeek());
      //  // Unstable assertion: assertEquals((-61685712000001L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-61686014400001L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-61686316800000L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(809L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(15, week0.getYearValue());
      //  // Unstable assertion: assertNotNull(week0);
      
      long long0 = week0.getSerialIndex();
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61687785600000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=15,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(15L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-61662470400015L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(15, year0.getYear());
      //  // Unstable assertion: assertEquals((-61678238400015L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("15", year0.toString());
      //  // Unstable assertion: assertEquals((-61694006400014L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Thu Mar 14 00:00:00 GMT 15", date0.toString());
      //  // Unstable assertion: assertEquals(14, week0.getWeek());
      //  // Unstable assertion: assertEquals((-61685712000001L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-61686014400001L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-61686316800000L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(809L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(15, week0.getYearValue());
      //  // Unstable assertion: assertEquals(809L, long0);
  }

  @Test(timeout = 4000)
  public void test24() {}
//   @Test(timeout = 4000)
//   public void test24()  throws Throwable  {
//       int int0 = (-2303);
//       Week week0 = new Week(int0, int0);
//       assertEquals(1, week0.getWeek());
//       assertEquals((-134844739200000L), week0.getFirstMillisecond());
//       assertEquals(-2303, week0.getYearValue());
//       assertEquals((-122058L), week0.getSerialIndex());
//       assertEquals((-134844436800001L), week0.getMiddleMillisecond());
//       assertEquals((-134844134400001L), week0.getLastMillisecond());
//       assertNotNull(week0);
//       
//       int int1 = week0.hashCode();
//       assertEquals(1, week0.getWeek());
//       assertEquals((-134844739200000L), week0.getFirstMillisecond());
//       assertEquals(-2303, week0.getYearValue());
//       assertEquals((-122058L), week0.getSerialIndex());
//       assertEquals((-134844436800001L), week0.getMiddleMillisecond());
//       assertEquals((-134844134400001L), week0.getLastMillisecond());
//       assertEquals(21007, int1);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//   }
}
