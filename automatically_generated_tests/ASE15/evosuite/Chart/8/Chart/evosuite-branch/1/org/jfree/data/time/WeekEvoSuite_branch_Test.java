/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:47:27 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimePeriodFormatException;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class WeekEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392292801972L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391990401973L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595201972L, week0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(week0);
      
      String string0 = week0.toString();
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392292801972L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391990401973L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595201972L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Week 7, 2014", string0);
      //  // Unstable assertion: assertNotNull(string0);
      
      // Undeclared exception!
      try {
        Week week1 = Week.parseWeek(string0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the week.
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        Week week0 = Week.parseWeek(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = null;
      Week week0 = Week.parseWeek(string0);
      assertNull(week0);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 5503;
      Week week0 = new Week(int0, int0);
      assertEquals(111567196799999L, week0.getLastMillisecond());
      assertEquals(5503, week0.getYearValue());
      assertEquals(111566592000000L, week0.getFirstMillisecond());
      assertEquals(127, week0.getWeek());
      assertEquals(111566894399999L, week0.getMiddleMillisecond());
      assertEquals(291786L, week0.getSerialIndex());
      assertNotNull(week0);
      
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      int int1 = week0.compareTo((Object) mockDate0);
      assertEquals(111567196799999L, week0.getLastMillisecond());
      assertEquals(5503, week0.getYearValue());
      assertEquals(111566592000000L, week0.getFirstMillisecond());
      assertEquals(127, week0.getWeek());
      assertEquals(111566894399999L, week0.getMiddleMillisecond());
      assertEquals(291786L, week0.getSerialIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test04()  throws Throwable  {
      Year year0 = new Year();
      //  // Unstable assertion: assertEquals(1404302401972L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070401972L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534401973L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(year0);
      
      MockDate mockDate0 = (MockDate)year0.getStart();
      //  // Unstable assertion: assertEquals("Wed Jan 01 00:00:01 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1404302401972L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070401972L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534401973L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(mockDate0);
      
      Week week0 = new Week((Date) mockDate0);
      //  // Unstable assertion: assertEquals("Wed Jan 01 00:00:01 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1404302401972L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070401972L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534401973L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1388664001972L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388966401972L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388361601973L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106743L, week0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(week0);
      
      Week week1 = (Week)week0.previous();
      //  // Unstable assertion: assertEquals("Wed Jan 01 00:00:01 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1404302401972L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070401972L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534401973L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(52, week1.getWeek());
      //  // Unstable assertion: assertEquals(1388059199999L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2013, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1388361599999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106741L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1387756800000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1388664001972L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388966401972L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388361601973L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106743L, week0.getSerialIndex());
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      
      int int0 = week0.compareTo((Object) week1);
      //  // Unstable assertion: assertEquals("Wed Jan 01 00:00:01 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1404302401972L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070401972L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534401973L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(52, week1.getWeek());
      //  // Unstable assertion: assertEquals(1388059199999L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2013, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1388361599999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106741L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1387756800000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1388664001972L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388966401972L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388361601973L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106743L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1, int0);
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
  }

  @Test
  public void test05()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(1392595201972L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392292801972L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1391990401973L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(week0);
      
      int int0 = week0.getYearValue();
      //  // Unstable assertion: assertEquals(1392595201972L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392292801972L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1391990401973L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, int0);
      
      Year year0 = new Year(int0);
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392595201972L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392292801972L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1391990401973L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(year0);
      
      int int1 = week0.compareTo((Object) year0);
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392595201972L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392292801972L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1391990401973L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(0, int1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
  }

  @Test
  public void test06()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392292801972L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391990401973L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392595201972L, week0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(week0);
      
      Week week1 = new Week();
      //  // Unstable assertion: assertEquals(1392292801972L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7, week1.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391990401973L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595201972L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertTrue(week1.equals((Object)week0));
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      
      boolean boolean0 = week1.equals((Object) week0);
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392292801972L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391990401973L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392595201972L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392292801972L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7, week1.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391990401973L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595201972L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertTrue(week0.equals((Object)week1));
      //  // Unstable assertion: assertTrue(week1.equals((Object)week0));
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 54;
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392292801972L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391990401973L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595201972L, week0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(week0);
      
      Week week1 = new Week(int0, int0);
      //  // Unstable assertion: assertEquals((-60430665600001L), week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2916L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(54, week1.getWeek());
      //  // Unstable assertion: assertEquals((-60431270400000L), week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-60430968000001L), week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(54, week1.getYearValue());
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      
      boolean boolean0 = week1.equals((Object) week0);
      //  // Unstable assertion: assertEquals((-60430665600001L), week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2916L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(54, week1.getWeek());
      //  // Unstable assertion: assertEquals((-60431270400000L), week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-60430968000001L), week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(54, week1.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392292801972L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391990401973L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595201972L, week0.getLastMillisecond());
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 0;
      Week week0 = new Week(int0, int0);
      assertEquals(0L, week0.getSerialIndex());
      assertEquals((-62167651200001L), week0.getLastMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals((-62168256000000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals((-62167953600001L), week0.getMiddleMillisecond());
      assertNotNull(week0);
      
      boolean boolean0 = week0.equals((Object) int0);
      assertEquals(0L, week0.getSerialIndex());
      assertEquals((-62167651200001L), week0.getLastMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals((-62168256000000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals((-62167953600001L), week0.getMiddleMillisecond());
      assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 2340;
      Year year0 = new Year();
      //  // Unstable assertion: assertEquals(1388534401973L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070401972L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302401972L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(year0);
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertEquals(1388534401973L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070401972L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302401972L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(106778L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1410134399999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(36, week0.getWeek());
      //  // Unstable assertion: assertEquals(1409831999999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1409529600000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(week0);
      
      Week week1 = new Week(int0, int0);
      //  // Unstable assertion: assertEquals(2340, week1.getYearValue());
      //  // Unstable assertion: assertEquals(124056L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(11697479999999L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(11697177600000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(11697782399999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(36, week1.getWeek());
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      
      boolean boolean0 = week0.equals((Object) week1);
      //  // Unstable assertion: assertEquals(2340, week1.getYearValue());
      //  // Unstable assertion: assertEquals(124056L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(11697479999999L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(11697177600000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(11697782399999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(36, week1.getWeek());
      //  // Unstable assertion: assertEquals(1388534401973L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070401972L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302401972L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(106778L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1410134399999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(36, week0.getWeek());
      //  // Unstable assertion: assertEquals(1409831999999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1409529600000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-1228);
      int int1 = 11;
      Week week0 = new Week(int0, int1);
      assertEquals((-61789046400001L), week0.getLastMillisecond());
      assertEquals(635L, week0.getSerialIndex());
      assertEquals((-61789651200000L), week0.getFirstMillisecond());
      assertEquals(52, week0.getWeek());
      assertEquals((-61789348800001L), week0.getMiddleMillisecond());
      assertEquals(11, week0.getYearValue());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      assertEquals((-61788441600001L), week1.getLastMillisecond());
      assertEquals(53, week1.getWeek());
      assertEquals((-61789046400000L), week1.getFirstMillisecond());
      assertEquals((-61788744000001L), week1.getMiddleMillisecond());
      assertEquals(11, week1.getYearValue());
      assertEquals(636L, week1.getSerialIndex());
      assertEquals((-61789046400001L), week0.getLastMillisecond());
      assertEquals(635L, week0.getSerialIndex());
      assertEquals((-61789651200000L), week0.getFirstMillisecond());
      assertEquals(52, week0.getWeek());
      assertEquals((-61789348800001L), week0.getMiddleMillisecond());
      assertEquals(11, week0.getYearValue());
      assertFalse(week1.equals((Object)week0));
      assertFalse(week0.equals((Object)week1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(week1);
      assertNotSame(week1, week0);
      assertNotSame(week0, week1);
  }

  @Test
  public void test11()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(1392292801972L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392595201972L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401973L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      //  // Unstable assertion: assertEquals(1392595200000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(8, week1.getWeek());
      //  // Unstable assertion: assertEquals(1393199999999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(106750L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392897599999L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392292801972L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392595201972L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401973L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-1228);
      Week week0 = new Week(int0, int0);
      assertEquals((-100889366400000L), week0.getFirstMillisecond());
      assertEquals((-65032L), week0.getSerialIndex());
      assertEquals((-100889064000001L), week0.getMiddleMillisecond());
      assertEquals(-1228, week0.getYearValue());
      assertEquals(52, week0.getWeek());
      assertEquals((-100888761600001L), week0.getLastMillisecond());
      assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      assertEquals((-100888459200001L), week1.getMiddleMillisecond());
      assertEquals(-1227, week1.getYearValue());
      assertEquals((-65030L), week1.getSerialIndex());
      assertEquals((-100888761600000L), week1.getFirstMillisecond());
      assertEquals((-100888156800001L), week1.getLastMillisecond());
      assertEquals(1, week1.getWeek());
      assertEquals((-100889366400000L), week0.getFirstMillisecond());
      assertEquals((-65032L), week0.getSerialIndex());
      assertEquals((-100889064000001L), week0.getMiddleMillisecond());
      assertEquals(-1228, week0.getYearValue());
      assertEquals(52, week0.getWeek());
      assertEquals((-100888761600001L), week0.getLastMillisecond());
      assertFalse(week1.equals((Object)week0));
      assertFalse(week0.equals((Object)week1));
      assertNotNull(week1);
      assertNotSame(week1, week0);
      assertNotSame(week0, week1);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getTime();
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("Wed Dec 31 00:00:00 GMT 2", date0.toString());
      //  // Unstable assertion: assertNotNull(date0);
      
      Week week0 = new Week(date0);
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals((-62072395198028L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3, week0.getYearValue());
      //  // Unstable assertion: assertEquals(160L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-62072092798028L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-62072697598027L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("Wed Dec 31 00:00:00 GMT 2", date0.toString());
      //  // Unstable assertion: assertNotNull(week0);
      
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals((-62072395198028L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3, week0.getYearValue());
      //  // Unstable assertion: assertEquals(160L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-62072092798028L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-62072697598027L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("Wed Dec 31 00:00:00 GMT 2", date0.toString());
      //  // Unstable assertion: assertNull(regularTimePeriod0);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 0;
      Week week0 = new Week(int0, int0);
      assertEquals((-62167651200001L), week0.getLastMillisecond());
      assertEquals((-62168256000000L), week0.getFirstMillisecond());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(0, week0.getYearValue());
      assertEquals((-62167953600001L), week0.getMiddleMillisecond());
      assertEquals(0, week0.getWeek());
      assertNotNull(week0);
      
      Week week1 = (Week)week0.previous();
      assertEquals((-62168860800000L), week1.getFirstMillisecond());
      assertEquals(-1, week1.getWeek());
      assertEquals((-62168256000001L), week1.getLastMillisecond());
      assertEquals(0, week1.getYearValue());
      assertEquals((-62168558400001L), week1.getMiddleMillisecond());
      assertEquals((-1L), week1.getSerialIndex());
      assertEquals((-62167651200001L), week0.getLastMillisecond());
      assertEquals((-62168256000000L), week0.getFirstMillisecond());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(0, week0.getYearValue());
      assertEquals((-62167953600001L), week0.getMiddleMillisecond());
      assertEquals(0, week0.getWeek());
      assertFalse(week1.equals((Object)week0));
      assertFalse(week0.equals((Object)week1));
      assertNotNull(week1);
      assertNotSame(week1, week0);
      assertNotSame(week0, week1);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "";
      long long0 = 60L;
      MockDate mockDate0 = new MockDate(long0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(mockDate0);
      
      int int0 = 2806;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals("java.util.SimpleTimeZone[id=,offset=2806,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(2806, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) simpleTimeZone0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("java.util.SimpleTimeZone[id=,offset=2806,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(2806, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(7881L, quarter0.getSerialIndex());
      assertEquals(1970, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(7775997193L, quarter0.getLastMillisecond());
      assertEquals((-2806L), quarter0.getFirstMillisecond());
      assertEquals(3887997193L, quarter0.getMiddleMillisecond());
      assertNotNull(quarter0);
      
      Year year0 = quarter0.getYear();
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("java.util.SimpleTimeZone[id=,offset=2806,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(2806, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(31535999999L, year0.getLastMillisecond());
      assertEquals(0L, year0.getFirstMillisecond());
      assertEquals(1970, year0.getYear());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals("1970", year0.toString());
      assertEquals(15767999999L, year0.getMiddleMillisecond());
      assertEquals(7881L, quarter0.getSerialIndex());
      assertEquals(1970, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(7775997193L, quarter0.getLastMillisecond());
      assertEquals((-2806L), quarter0.getFirstMillisecond());
      assertEquals(3887997193L, quarter0.getMiddleMillisecond());
      assertNotNull(year0);
      
      MockDate mockDate1 = (MockDate)year0.getEnd();
      assertEquals("Thu Dec 31 23:59:59 GMT 1970", mockDate1.toString());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("java.util.SimpleTimeZone[id=,offset=2806,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(2806, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(31535999999L, year0.getLastMillisecond());
      assertEquals(0L, year0.getFirstMillisecond());
      assertEquals(1970, year0.getYear());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals("1970", year0.toString());
      assertEquals(15767999999L, year0.getMiddleMillisecond());
      assertEquals(7881L, quarter0.getSerialIndex());
      assertEquals(1970, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(7775997193L, quarter0.getLastMillisecond());
      assertEquals((-2806L), quarter0.getFirstMillisecond());
      assertEquals(3887997193L, quarter0.getMiddleMillisecond());
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertNotNull(mockDate1);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(mockDate0, mockDate1);
      
      Week week0 = new Week((Date) mockDate1, (TimeZone) simpleTimeZone0);
      assertEquals("Thu Dec 31 23:59:59 GMT 1970", mockDate1.toString());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(31190397194L, week0.getFirstMillisecond());
      assertEquals(104463L, week0.getSerialIndex());
      assertEquals(53, week0.getWeek());
      assertEquals(31795197193L, week0.getLastMillisecond());
      assertEquals(1970, week0.getYearValue());
      assertEquals(31492797193L, week0.getMiddleMillisecond());
      assertEquals("java.util.SimpleTimeZone[id=,offset=2806,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(2806, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(31535999999L, year0.getLastMillisecond());
      assertEquals(0L, year0.getFirstMillisecond());
      assertEquals(1970, year0.getYear());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals("1970", year0.toString());
      assertEquals(15767999999L, year0.getMiddleMillisecond());
      assertEquals(7881L, quarter0.getSerialIndex());
      assertEquals(1970, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(7775997193L, quarter0.getLastMillisecond());
      assertEquals((-2806L), quarter0.getFirstMillisecond());
      assertEquals(3887997193L, quarter0.getMiddleMillisecond());
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertNotNull(week0);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(mockDate0, mockDate1);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 24;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=24,MONTH=24,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=24,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=24,HOUR_OF_DAY=24,MINUTE=24,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getTime();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61344776160000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=26,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=25,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=24,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Jan 25 00:24:00 GMT 26", date0.toString());
      assertNotNull(date0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = null;
      Week week0 = null;
      try {
        week0 = new Week(date0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getTime();
      assertEquals("Wed Dec 31 00:00:00 GMT 2", date0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(date0);
      
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.CANADA;
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      Week week0 = null;
      try {
        week0 = new Week(date0, timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Date date0 = null;
      Week week0 = null;
      try {
        week0 = new Week(date0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = (-2647);
      int int1 = 4499;
      Year year0 = new Year(int1);
      assertEquals(4499L, year0.getSerialIndex());
      assertEquals("4499", year0.toString());
      assertEquals(79823361599999L, year0.getMiddleMillisecond());
      assertEquals(4499, year0.getYear());
      assertEquals(79807593600000L, year0.getFirstMillisecond());
      assertEquals(79839129599999L, year0.getLastMillisecond());
      assertFalse(int1 == int0);
      assertNotNull(year0);
      
      Week week0 = new Week(int0, year0);
      assertEquals(4499L, year0.getSerialIndex());
      assertEquals("4499", year0.toString());
      assertEquals(79823361599999L, year0.getMiddleMillisecond());
      assertEquals(4499, year0.getYear());
      assertEquals(79807593600000L, year0.getFirstMillisecond());
      assertEquals(79839129599999L, year0.getLastMillisecond());
      assertEquals(238360L, week0.getSerialIndex());
      assertEquals(-87, week0.getWeek());
      assertEquals(79754112000000L, week0.getFirstMillisecond());
      assertEquals(4499, week0.getYearValue());
      assertEquals(79754716799999L, week0.getLastMillisecond());
      assertEquals(79754414399999L, week0.getMiddleMillisecond());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(week0);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = " (5fubu-";
      // Undeclared exception!
      try {
        Week week0 = Week.parseWeek(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = (-1228);
      Week week0 = new Week(int0, int0);
      assertEquals(-1228, week0.getYearValue());
      assertEquals((-100889064000001L), week0.getMiddleMillisecond());
      assertEquals(52, week0.getWeek());
      assertEquals((-65032L), week0.getSerialIndex());
      assertEquals((-100889366400000L), week0.getFirstMillisecond());
      assertEquals((-100888761600001L), week0.getLastMillisecond());
      assertNotNull(week0);
      
      long long0 = week0.getMiddleMillisecond();
      assertEquals(-1228, week0.getYearValue());
      assertEquals((-100889064000001L), week0.getMiddleMillisecond());
      assertEquals(52, week0.getWeek());
      assertEquals((-65032L), week0.getSerialIndex());
      assertEquals((-100889366400000L), week0.getFirstMillisecond());
      assertEquals((-100888761600001L), week0.getLastMillisecond());
      assertEquals((-100889064000001L), long0);
  }

  @Test
  public void test22()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(1391990401973L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392292801972L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392595201972L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertNotNull(week0);
      
      int int0 = week0.compareTo((Object) week0);
      //  // Unstable assertion: assertEquals(1391990401973L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392292801972L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392595201972L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "";
      long long0 = 60L;
      MockDate mockDate0 = new MockDate(long0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(mockDate0);
      
      int int0 = 2806;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(2806, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=2806,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      Week week0 = new Week((Date) mockDate0, (TimeZone) simpleTimeZone0);
      assertEquals(2806, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=2806,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1970, week0.getYearValue());
      assertEquals(1, week0.getWeek());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(345597193L, week0.getLastMillisecond());
      assertEquals((-259202806L), week0.getFirstMillisecond());
      assertEquals(43197193L, week0.getMiddleMillisecond());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(week0);
      
      long long1 = week0.getSerialIndex();
      assertEquals(2806, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=2806,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1970, week0.getYearValue());
      assertEquals(1, week0.getWeek());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(345597193L, week0.getLastMillisecond());
      assertEquals((-259202806L), week0.getFirstMillisecond());
      assertEquals(43197193L, week0.getMiddleMillisecond());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(104411L, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 2340;
      Year year0 = new Year();
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534401973L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070401972L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302401972L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertNotNull(year0);
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534401973L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070401972L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302401972L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1410134399999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(36, week0.getWeek());
      //  // Unstable assertion: assertEquals(1409831999999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1409529600000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106778L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertNotNull(week0);
      
      int int1 = week0.hashCode();
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534401973L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070401972L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302401972L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1410134399999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(36, week0.getWeek());
      //  // Unstable assertion: assertEquals(1409831999999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1409529600000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106778L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(26619, int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
  }
}
