/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:47:03 GMT 2014
 */

package org.jfree.chart.util;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Arc2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Path2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.io.File;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JTabbedPane;
import javax.swing.JTextPane;
import javax.swing.JToolBar;
import javax.swing.JToolTip;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockFile;

import org.evosuite.runtime.mock.javax.swing.MockJFileChooser;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.ShapeUtilities;
import org.junit.runner.RunWith;

 
public class ShapeUtilitiesEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      byte byte0 = (byte)0;
      JTextPane jTextPane0 = new JTextPane();
      assertNotNull(jTextPane0);
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      
      Rectangle rectangle0 = jTextPane0.getVisibleRect();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      
      double double0 = 2.0;
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double((double) rectangle0.x, double0, (double) byte0, (double) rectangle0.y);
      assertNotNull(ellipse2D_Double0);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(2.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(2.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(2.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(2.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)ellipse2D_Double0.getBounds2D();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(2.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(2.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(2.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(2.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(2.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      
      boolean boolean0 = ShapeUtilities.intersects((Rectangle2D) rectangle0, (Rectangle2D) rectangle2D_Double0);
      assertFalse(boolean0);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(2.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(2.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(2.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(2.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(2.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = 745.686327452474;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(double1, double0, double0, double1);
      assertNotNull(rectangle2D_Double0);
      assertEquals(371.843163726237, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(745.686327452474, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(744.686327452474, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(744.686327452474, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(745.186327452474, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-1.0), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-1.0), rectangle2D_Double0.width, 0.01D);
      assertEquals(745.686327452474, rectangle2D_Double0.x, 0.01D);
      assertEquals(745.686327452474, rectangle2D_Double0.height, 0.01D);
      assertEquals((-1.0), rectangle2D_Double0.y, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(371.843163726237, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(745.686327452474, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(744.686327452474, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(744.686327452474, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(745.186327452474, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-1.0), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals((-1.0), rectangle2D_Double0.width, 0.01D);
      assertEquals(745.686327452474, rectangle2D_Double0.x, 0.01D);
      assertEquals(745.686327452474, rectangle2D_Double0.height, 0.01D);
      assertEquals((-1.0), rectangle2D_Double0.y, 0.01D);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      boolean boolean0 = ShapeUtilities.intersects((Rectangle2D) rectangle0, (Rectangle2D) rectangle2D_Double0);
      assertFalse(boolean0);
      assertEquals(371.843163726237, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(745.686327452474, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(744.686327452474, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(744.686327452474, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(745.186327452474, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-1.0), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals((-1.0), rectangle2D_Double0.width, 0.01D);
      assertEquals(745.686327452474, rectangle2D_Double0.x, 0.01D);
      assertEquals(745.686327452474, rectangle2D_Double0.height, 0.01D);
      assertEquals((-1.0), rectangle2D_Double0.y, 0.01D);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test02()  throws Throwable  {
      JTextPane jTextPane0 = new JTextPane();
      assertNotNull(jTextPane0);
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(false, jTextPane0.isShowing());
      
      Rectangle rectangle0 = jTextPane0.getVisibleRect();
      assertNotNull(rectangle0);
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      
      boolean boolean0 = ShapeUtilities.intersects((Rectangle2D) rectangle0, (Rectangle2D) rectangle0);
      assertTrue(boolean0);
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser((File) mockFile0);
      assertNotNull(mockJFileChooser0);
      assertEquals(true, mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, mockJFileChooser0.isDisplayable());
      assertEquals(false, mockJFileChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, mockJFileChooser0.isBackgroundSet());
      assertEquals(false, mockJFileChooser0.isLightweight());
      assertEquals(4, mockJFileChooser0.getComponentCount());
      assertEquals(false, mockJFileChooser0.isForegroundSet());
      assertEquals(false, mockJFileChooser0.isFocusTraversalPolicySet());
      assertEquals(4, mockJFileChooser0.countComponents());
      assertEquals(false, mockJFileChooser0.getIgnoreRepaint());
      assertEquals(false, mockJFileChooser0.isCursorSet());
      assertEquals(true, mockJFileChooser0.isVisible());
      assertEquals(false, mockJFileChooser0.isFocusCycleRoot());
      assertEquals(false, mockJFileChooser0.isMinimumSizeSet());
      assertEquals(false, mockJFileChooser0.isShowing());
      assertEquals(false, mockJFileChooser0.isFontSet());
      assertEquals(true, mockJFileChooser0.isEnabled());
      assertEquals(false, mockJFileChooser0.isValid());
      assertEquals(false, mockJFileChooser0.isPreferredSizeSet());
      assertEquals(false, mockJFileChooser0.isMaximumSizeSet());
      
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource0 = new DefaultTableCellRenderer.UIResource();
      assertNotNull(defaultTableCellRenderer_UIResource0);
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      
      EmptyBorder emptyBorder0 = (EmptyBorder)defaultTableCellRenderer_UIResource0.getBorder();
      assertNotNull(emptyBorder0);
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      
      int int0 = (-2823);
      Rectangle rectangle0 = AbstractBorder.getInteriorRectangle((Component) mockJFileChooser0, (Border) emptyBorder0, int0, int0, int0, int0);
      assertNotNull(rectangle0);
      assertEquals("java.awt.Rectangle[x=-2822,y=-2822,width=-2825,height=-2825]", rectangle0.toString());
      assertEquals((-4234.5), rectangle0.getCenterY(), 0.01D);
      assertEquals((-4234.5), rectangle0.getCenterX(), 0.01D);
      assertEquals((-2822.0), rectangle0.getY(), 0.01D);
      assertEquals((-2822.0), rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals((-2825.0), rectangle0.getWidth(), 0.01D);
      assertEquals((-2822.0), rectangle0.getMinY(), 0.01D);
      assertEquals((-2822.0), rectangle0.getMinX(), 0.01D);
      assertEquals((-2825.0), rectangle0.getHeight(), 0.01D);
      assertEquals((-5647.0), rectangle0.getMaxX(), 0.01D);
      assertEquals((-5647.0), rectangle0.getMaxY(), 0.01D);
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(true, mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, mockJFileChooser0.isDisplayable());
      assertEquals(false, mockJFileChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, mockJFileChooser0.isBackgroundSet());
      assertEquals(false, mockJFileChooser0.isLightweight());
      assertEquals(4, mockJFileChooser0.getComponentCount());
      assertEquals(false, mockJFileChooser0.isForegroundSet());
      assertEquals(false, mockJFileChooser0.isFocusTraversalPolicySet());
      assertEquals(4, mockJFileChooser0.countComponents());
      assertEquals(false, mockJFileChooser0.getIgnoreRepaint());
      assertEquals(false, mockJFileChooser0.isCursorSet());
      assertEquals(true, mockJFileChooser0.isVisible());
      assertEquals(false, mockJFileChooser0.isFocusCycleRoot());
      assertEquals(false, mockJFileChooser0.isMinimumSizeSet());
      assertEquals(false, mockJFileChooser0.isShowing());
      assertEquals(false, mockJFileChooser0.isFontSet());
      assertEquals(true, mockJFileChooser0.isEnabled());
      assertEquals(false, mockJFileChooser0.isValid());
      assertEquals(false, mockJFileChooser0.isPreferredSizeSet());
      assertEquals(false, mockJFileChooser0.isMaximumSizeSet());
      assertEquals((-2825), rectangle0.width);
      assertEquals((-2825), rectangle0.height);
      assertEquals((-2822), rectangle0.x);
      assertEquals((-2822), rectangle0.y);
      
      boolean boolean0 = ShapeUtilities.intersects((Rectangle2D) rectangle0, (Rectangle2D) rectangle0);
      assertFalse(boolean0);
      assertEquals("java.awt.Rectangle[x=-2822,y=-2822,width=-2825,height=-2825]", rectangle0.toString());
      assertEquals((-4234.5), rectangle0.getCenterY(), 0.01D);
      assertEquals((-4234.5), rectangle0.getCenterX(), 0.01D);
      assertEquals((-2822.0), rectangle0.getY(), 0.01D);
      assertEquals((-2822.0), rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals((-2825.0), rectangle0.getWidth(), 0.01D);
      assertEquals((-2822.0), rectangle0.getMinY(), 0.01D);
      assertEquals((-2822.0), rectangle0.getMinX(), 0.01D);
      assertEquals((-2825.0), rectangle0.getHeight(), 0.01D);
      assertEquals((-5647.0), rectangle0.getMaxX(), 0.01D);
      assertEquals((-5647.0), rectangle0.getMaxY(), 0.01D);
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(true, mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, mockJFileChooser0.isDisplayable());
      assertEquals(false, mockJFileChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, mockJFileChooser0.isBackgroundSet());
      assertEquals(false, mockJFileChooser0.isLightweight());
      assertEquals(4, mockJFileChooser0.getComponentCount());
      assertEquals(false, mockJFileChooser0.isForegroundSet());
      assertEquals(false, mockJFileChooser0.isFocusTraversalPolicySet());
      assertEquals(4, mockJFileChooser0.countComponents());
      assertEquals(false, mockJFileChooser0.getIgnoreRepaint());
      assertEquals(false, mockJFileChooser0.isCursorSet());
      assertEquals(true, mockJFileChooser0.isVisible());
      assertEquals(false, mockJFileChooser0.isFocusCycleRoot());
      assertEquals(false, mockJFileChooser0.isMinimumSizeSet());
      assertEquals(false, mockJFileChooser0.isShowing());
      assertEquals(false, mockJFileChooser0.isFontSet());
      assertEquals(true, mockJFileChooser0.isEnabled());
      assertEquals(false, mockJFileChooser0.isValid());
      assertEquals(false, mockJFileChooser0.isPreferredSizeSet());
      assertEquals(false, mockJFileChooser0.isMaximumSizeSet());
      assertEquals((-2825), rectangle0.width);
      assertEquals((-2825), rectangle0.height);
      assertEquals((-2822), rectangle0.x);
      assertEquals((-2822), rectangle0.y);
  }

  @Test
  public void test04()  throws Throwable  {
      byte byte0 = (byte)0;
      JTextPane jTextPane0 = new JTextPane();
      assertNotNull(jTextPane0);
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(true, jTextPane0.isEnabled());
      
      Rectangle rectangle0 = jTextPane0.getVisibleRect();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      
      double double0 = 2.0;
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double((double) byte0, double0, (double) byte0, (double) rectangle0.y);
      assertNotNull(ellipse2D_Double0);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(2.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(2.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(2.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(2.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)ellipse2D_Double0.getBounds2D();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(2.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(2.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(2.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(2.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(2.0, rectangle2D_Double0.y, 0.01D);
      
      boolean boolean0 = ShapeUtilities.contains((Rectangle2D) rectangle0, (Rectangle2D) rectangle2D_Double0);
      assertFalse(boolean0);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(2.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(2.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(2.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(2.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(2.0, rectangle2D_Double0.y, 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      JTextPane jTextPane0 = new JTextPane();
      assertNotNull(jTextPane0);
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      
      Rectangle rectangle0 = jTextPane0.getVisibleRect();
      assertNotNull(rectangle0);
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      
      boolean boolean0 = ShapeUtilities.contains((Rectangle2D) rectangle0, (Rectangle2D) rectangle0);
      assertTrue(boolean0);
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
  }

  @Test
  public void test06()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = 561.12897F;
      Line2D.Float line2D_Float0 = new Line2D.Float(float0, float1, float1, float0);
      assertNotNull(line2D_Float0);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(561.12897F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(561.12897F, line2D_Float0.x2, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createLineRegion((Line2D) line2D_Float0, line2D_Float0.x1);
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(561.12897F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(561.12897F, line2D_Float0.x2, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = 654.2227175748114;
      Point2D.Double point2D_Double0 = new Point2D.Double(double0, double0);
      assertNotNull(point2D_Double0);
      assertEquals(654.2227175748114, point2D_Double0.y, 0.01D);
      assertEquals(654.2227175748114, point2D_Double0.x, 0.01D);
      
      Line2D line2D0 = null;
      float float0 = 1.0F;
      Shape shape0 = ShapeUtilities.rotateShape((Shape) line2D0, point2D_Double0.y, float0, float0);
      assertNull(shape0);
      assertEquals(654.2227175748114, point2D_Double0.y, 0.01D);
      assertEquals(654.2227175748114, point2D_Double0.x, 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertNotNull(ellipse2D_Float0);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      
      Path2D.Double path2D_Double0 = (Path2D.Double)ShapeUtilities.rotateShape((Shape) ellipse2D_Float0, (double) ellipse2D_Float0.height, ellipse2D_Float0.height, ellipse2D_Float0.height);
      assertNotNull(path2D_Double0);
      assertEquals(1, path2D_Double0.getWindingRule());
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
  }

  @Test
  public void test09()  throws Throwable  {
      float float0 = 1.0F;
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createUpTriangle(float0);
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertNotNull(ellipse2D_Float0);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      assertNotNull(arc2D_Float0);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      assertNotNull(rectangleAnchor0);
      assertEquals("RectangleAnchor.BOTTOM_LEFT", rectangleAnchor0.toString());
      
      Path2D.Double path2D_Double0 = (Path2D.Double)ShapeUtilities.createTranslatedShape((Shape) generalPath0, rectangleAnchor0, (double) arc2D_Float0.y, (double) ellipse2D_Float0.x);
      assertNotNull(path2D_Double0);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(1, path2D_Double0.getWindingRule());
      assertEquals("RectangleAnchor.BOTTOM_LEFT", rectangleAnchor0.toString());
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      assertNotNull(defaultListCellRenderer0);
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      
      Rectangle rectangle0 = defaultListCellRenderer0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      
      Arc2D arc2D0 = null;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      assertNotNull(rectangleAnchor0);
      assertEquals("RectangleAnchor.TOP_RIGHT", rectangleAnchor0.toString());
      
      // Undeclared exception!
      try {
        Shape shape0 = ShapeUtilities.createTranslatedShape((Shape) arc2D0, rectangleAnchor0, (double) rectangle0.height, (double) rectangle0.height);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      assertNotNull(arc2D_Float0);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      
      RectangleAnchor rectangleAnchor0 = null;
      // Undeclared exception!
      try {
        Shape shape0 = ShapeUtilities.createTranslatedShape((Shape) arc2D_Float0, rectangleAnchor0, (double) arc2D_Float0.width, (double) arc2D_Float0.width);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' argument.
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Arc2D arc2D0 = null;
      double double0 = 1100.739575;
      int int0 = (-2823);
      // Undeclared exception!
      try {
        Shape shape0 = ShapeUtilities.createTranslatedShape((Shape) arc2D0, double0, (double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      
      Polygon polygon0 = new Polygon();
      assertNotNull(polygon0);
      assertEquals(0, polygon0.npoints);
      
      Path2D.Double path2D_Double0 = (Path2D.Double)ShapeUtilities.createTranslatedShape((Shape) line2D_Double0, (double) polygon0.npoints, (double) polygon0.npoints);
      assertNotNull(path2D_Double0);
      assertEquals(1, path2D_Double0.getWindingRule());
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0, polygon0.npoints);
  }

  @Test
  public void test14()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertNotNull(ellipse2D_Float0);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createRegularCross(ellipse2D_Float0.y, ellipse2D_Float0.height);
      assertNotNull(generalPath0);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      
      GeneralPath generalPath1 = (GeneralPath)ShapeUtilities.createDiamond(ellipse2D_Float0.height);
      assertNotSame(generalPath1, generalPath0);
      assertNotNull(generalPath1);
      assertEquals(1, generalPath1.getWindingRule());
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertFalse(generalPath1.equals((Object)generalPath0));
      
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath0, (Shape) generalPath1);
      assertNotSame(generalPath1, generalPath0);
      assertNotSame(generalPath0, generalPath1);
      assertFalse(boolean0);
      assertEquals(1, generalPath1.getWindingRule());
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertFalse(generalPath0.equals((Object)generalPath1));
  }

  @Test
  public void test15()  throws Throwable  {
      GeneralPath generalPath0 = new GeneralPath();
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath0);
      assertTrue(boolean0);
      assertEquals(1, generalPath0.getWindingRule());
  }

  @Test
  public void test16()  throws Throwable  {
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      assertNotNull(defaultListCellRenderer0);
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      
      Rectangle rectangle0 = defaultListCellRenderer0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      
      GeneralPath generalPath0 = new GeneralPath((Shape) rectangle0);
      assertNotNull(generalPath0);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      
      GeneralPath generalPath1 = new GeneralPath();
      assertNotSame(generalPath1, generalPath0);
      assertNotNull(generalPath1);
      assertEquals(1, generalPath1.getWindingRule());
      assertFalse(generalPath1.equals((Object)generalPath0));
      
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath1, (Shape) generalPath0);
      assertNotSame(generalPath0, generalPath1);
      assertNotSame(generalPath1, generalPath0);
      assertFalse(boolean0);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(1, generalPath1.getWindingRule());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertFalse(generalPath0.equals((Object)generalPath1));
      assertFalse(generalPath1.equals((Object)generalPath0));
  }

  @Test
  public void test17()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertNotNull(line2D_Float0);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator();
      assertNotNull(jToolBar_Separator0);
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      
      JToolTip jToolTip0 = jToolBar_Separator0.createToolTip();
      assertNotNull(jToolTip0);
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(false, jToolTip0.isMinimumSizeSet());
      assertEquals(true, jToolTip0.isEnabled());
      assertEquals(0, jToolTip0.countComponents());
      assertEquals(true, jToolTip0.isBackgroundSet());
      assertEquals(false, jToolTip0.isDisplayable());
      assertEquals(false, jToolTip0.isFocusCycleRoot());
      assertEquals(false, jToolTip0.isShowing());
      assertEquals(true, jToolTip0.isForegroundSet());
      assertEquals(false, jToolTip0.isMaximumSizeSet());
      assertEquals(false, jToolTip0.isCursorSet());
      assertEquals(0, jToolTip0.getComponentCount());
      assertEquals(true, jToolTip0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolTip0.isLightweight());
      assertEquals(false, jToolTip0.getIgnoreRepaint());
      assertEquals(false, jToolTip0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolTip0.isFontSet());
      assertEquals(false, jToolTip0.isPreferredSizeSet());
      assertEquals(true, jToolTip0.isVisible());
      assertEquals(false, jToolTip0.isValid());
      assertEquals(false, jToolTip0.isFocusTraversalPolicySet());
      
      Point point0 = jToolTip0.location();
      assertNotNull(point0);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(false, jToolTip0.isMinimumSizeSet());
      assertEquals(true, jToolTip0.isEnabled());
      assertEquals(0, jToolTip0.countComponents());
      assertEquals(true, jToolTip0.isBackgroundSet());
      assertEquals(false, jToolTip0.isDisplayable());
      assertEquals(false, jToolTip0.isFocusCycleRoot());
      assertEquals(false, jToolTip0.isShowing());
      assertEquals(true, jToolTip0.isForegroundSet());
      assertEquals(false, jToolTip0.isMaximumSizeSet());
      assertEquals(false, jToolTip0.isCursorSet());
      assertEquals(0, jToolTip0.getComponentCount());
      assertEquals(true, jToolTip0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolTip0.isLightweight());
      assertEquals(false, jToolTip0.getIgnoreRepaint());
      assertEquals(false, jToolTip0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolTip0.isFontSet());
      assertEquals(false, jToolTip0.isPreferredSizeSet());
      assertEquals(true, jToolTip0.isVisible());
      assertEquals(false, jToolTip0.isValid());
      assertEquals(false, jToolTip0.isFocusTraversalPolicySet());
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      
      GeneralPath generalPath0 = new GeneralPath(point0.y);
      assertNotNull(generalPath0);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(0, generalPath0.getWindingRule());
      assertEquals(false, jToolTip0.isMinimumSizeSet());
      assertEquals(true, jToolTip0.isEnabled());
      assertEquals(0, jToolTip0.countComponents());
      assertEquals(true, jToolTip0.isBackgroundSet());
      assertEquals(false, jToolTip0.isDisplayable());
      assertEquals(false, jToolTip0.isFocusCycleRoot());
      assertEquals(false, jToolTip0.isShowing());
      assertEquals(true, jToolTip0.isForegroundSet());
      assertEquals(false, jToolTip0.isMaximumSizeSet());
      assertEquals(false, jToolTip0.isCursorSet());
      assertEquals(0, jToolTip0.getComponentCount());
      assertEquals(true, jToolTip0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolTip0.isLightweight());
      assertEquals(false, jToolTip0.getIgnoreRepaint());
      assertEquals(false, jToolTip0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolTip0.isFontSet());
      assertEquals(false, jToolTip0.isPreferredSizeSet());
      assertEquals(true, jToolTip0.isVisible());
      assertEquals(false, jToolTip0.isValid());
      assertEquals(false, jToolTip0.isFocusTraversalPolicySet());
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      
      GeneralPath generalPath1 = new GeneralPath((Shape) line2D_Float0);
      assertNotSame(generalPath1, generalPath0);
      assertNotNull(generalPath1);
      assertEquals(1, generalPath1.getWindingRule());
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertFalse(generalPath1.equals((Object)generalPath0));
      
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath1);
      assertNotSame(generalPath1, generalPath0);
      assertNotSame(generalPath0, generalPath1);
      assertFalse(boolean0);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(1, generalPath1.getWindingRule());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(0, generalPath0.getWindingRule());
      assertEquals(false, jToolTip0.isMinimumSizeSet());
      assertEquals(true, jToolTip0.isEnabled());
      assertEquals(0, jToolTip0.countComponents());
      assertEquals(true, jToolTip0.isBackgroundSet());
      assertEquals(false, jToolTip0.isDisplayable());
      assertEquals(false, jToolTip0.isFocusCycleRoot());
      assertEquals(false, jToolTip0.isShowing());
      assertEquals(true, jToolTip0.isForegroundSet());
      assertEquals(false, jToolTip0.isMaximumSizeSet());
      assertEquals(false, jToolTip0.isCursorSet());
      assertEquals(0, jToolTip0.getComponentCount());
      assertEquals(true, jToolTip0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolTip0.isLightweight());
      assertEquals(false, jToolTip0.getIgnoreRepaint());
      assertEquals(false, jToolTip0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolTip0.isFontSet());
      assertEquals(false, jToolTip0.isPreferredSizeSet());
      assertEquals(true, jToolTip0.isVisible());
      assertEquals(false, jToolTip0.isValid());
      assertEquals(false, jToolTip0.isFocusTraversalPolicySet());
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertFalse(generalPath0.equals((Object)generalPath1));
  }

  @Test
  public void test18()  throws Throwable  {
      GeneralPath generalPath0 = new GeneralPath();
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      
      GeneralPath generalPath1 = null;
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath1);
      assertFalse(boolean0);
      assertEquals(1, generalPath0.getWindingRule());
  }

  @Test
  public void test19()  throws Throwable  {
      GeneralPath generalPath0 = null;
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath0);
      assertTrue(boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      GeneralPath generalPath0 = null;
      GeneralPath generalPath1 = new GeneralPath();
      assertNotNull(generalPath1);
      assertEquals(1, generalPath1.getWindingRule());
      
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath1);
      assertFalse(boolean0);
      assertEquals(1, generalPath1.getWindingRule());
  }

  @Test
  public void test21()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertNotNull(polygon0);
      assertEquals(0, polygon0.npoints);
      
      Polygon polygon1 = new Polygon(polygon0.ypoints, polygon0.ypoints, polygon0.npoints);
      assertNotSame(polygon0, polygon1);
      assertNotSame(polygon1, polygon0);
      assertNotNull(polygon1);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, polygon1.npoints);
      assertFalse(polygon0.equals((Object)polygon1));
      assertFalse(polygon1.equals((Object)polygon0));
      
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon1);
      assertNotSame(polygon0, polygon1);
      assertNotSame(polygon1, polygon0);
      assertFalse(boolean0);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, polygon1.npoints);
      assertFalse(polygon0.equals((Object)polygon1));
      assertFalse(polygon1.equals((Object)polygon0));
  }

  @Test
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 3;
      Polygon polygon0 = new Polygon(intArray0, intArray0, int0);
      assertNotNull(polygon0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(3, polygon0.npoints);
      
      Polygon polygon1 = new Polygon();
      assertNotSame(polygon1, polygon0);
      assertNotNull(polygon1);
      assertEquals(0, polygon1.npoints);
      assertFalse(polygon1.equals((Object)polygon0));
      
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon1);
      assertNotSame(polygon0, polygon1);
      assertNotSame(polygon1, polygon0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(3, polygon0.npoints);
      assertEquals(0, polygon1.npoints);
      assertFalse(polygon0.equals((Object)polygon1));
      assertFalse(polygon1.equals((Object)polygon0));
  }

  @Test
  public void test23()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertNotNull(polygon0);
      assertEquals(0, polygon0.npoints);
      
      Polygon polygon1 = null;
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon1);
      assertFalse(boolean0);
      assertEquals(0, polygon0.npoints);
  }

  @Test
  public void test24()  throws Throwable  {
      Polygon polygon0 = null;
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon0);
      assertTrue(boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertNotNull(polygon0);
      assertEquals(0, polygon0.npoints);
      
      Polygon polygon1 = null;
      boolean boolean0 = ShapeUtilities.equal(polygon1, polygon0);
      assertFalse(boolean0);
      assertEquals(0, polygon0.npoints);
  }

  @Test
  public void test26()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertNotNull(ellipse2D_Float0);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      assertNotNull(arc2D_Float0);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      
      float float0 = (-1.0F);
      int int0 = 0;
      Arc2D.Float arc2D_Float1 = new Arc2D.Float(arc2D_Float0.y, arc2D_Float0.height, arc2D_Float0.y, float0, arc2D_Float0.extent, ellipse2D_Float0.x, int0);
      assertNotSame(arc2D_Float0, arc2D_Float1);
      assertNotSame(arc2D_Float1, arc2D_Float0);
      assertNotNull(arc2D_Float1);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float1.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Float1.getArcType());
      assertEquals((-1.0), arc2D_Float1.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float1.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float1.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float1.getMaxX(), 0.01D);
      assertEquals((-0.5), arc2D_Float1.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals((-1.0F), arc2D_Float1.height, 0.01F);
      assertEquals(0.0F, arc2D_Float1.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float1.start, 0.01F);
      assertEquals(0.0F, arc2D_Float1.y, 0.01F);
      assertEquals(0.0F, arc2D_Float1.x, 0.01F);
      assertEquals(0.0F, arc2D_Float1.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertFalse(arc2D_Float0.equals((Object)arc2D_Float1));
      assertFalse(arc2D_Float1.equals((Object)arc2D_Float0));
      
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Float0, (Arc2D) arc2D_Float1);
      assertNotSame(arc2D_Float0, arc2D_Float1);
      assertNotSame(arc2D_Float1, arc2D_Float0);
      assertFalse(boolean0);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float1.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Float1.getArcType());
      assertEquals((-1.0), arc2D_Float1.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float1.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float1.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float1.getMaxX(), 0.01D);
      assertEquals((-0.5), arc2D_Float1.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals((-1.0F), arc2D_Float1.height, 0.01F);
      assertEquals(0.0F, arc2D_Float1.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float1.start, 0.01F);
      assertEquals(0.0F, arc2D_Float1.y, 0.01F);
      assertEquals(0.0F, arc2D_Float1.x, 0.01F);
      assertEquals(0.0F, arc2D_Float1.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertFalse(arc2D_Float0.equals((Object)arc2D_Float1));
      assertFalse(arc2D_Float1.equals((Object)arc2D_Float0));
  }

  @Test
  public void test27()  throws Throwable  {
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      assertNotNull(defaultListCellRenderer0);
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      
      Rectangle rectangle0 = defaultListCellRenderer0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      
      Arc2D.Float arc2D_Float0 = new Arc2D.Float(rectangle0.x);
      assertNotNull(arc2D_Float0);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      
      Arc2D arc2D0 = null;
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Float0, arc2D0);
      assertFalse(boolean0);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
  }

  @Test
  public void test28()  throws Throwable  {
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      assertNotNull(defaultListCellRenderer0);
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      
      Rectangle rectangle0 = defaultListCellRenderer0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      
      Arc2D.Float arc2D_Float0 = new Arc2D.Float(rectangle0.x);
      assertNotNull(arc2D_Float0);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      
      Arc2D arc2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(arc2D0, (Arc2D) arc2D_Float0);
      assertFalse(boolean0);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
  }

  @Test
  public void test29()  throws Throwable  {
      Arc2D arc2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(arc2D0, arc2D0);
      assertTrue(boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      double double0 = 654.2227175748114;
      Point2D.Double point2D_Double0 = new Point2D.Double(double0, double0);
      assertNotNull(point2D_Double0);
      assertEquals(654.2227175748114, point2D_Double0.y, 0.01D);
      assertEquals(654.2227175748114, point2D_Double0.x, 0.01D);
      
      byte[] byteArray0 = new byte[2];
      Line2D.Float line2D_Float0 = new Line2D.Float((Point2D) point2D_Double0, (Point2D) point2D_Double0);
      assertNotNull(line2D_Float0);
      assertEquals(654.2227175748114, point2D_Double0.y, 0.01D);
      assertEquals(654.2227175748114, point2D_Double0.x, 0.01D);
      assertEquals(654.2227F, line2D_Float0.y2, 0.01F);
      assertEquals(654.2227F, line2D_Float0.y1, 0.01F);
      assertEquals(654.2227F, line2D_Float0.x1, 0.01F);
      assertEquals(654.2227F, line2D_Float0.x2, 0.01F);
      
      byte byte0 = (byte) (-22);
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertNotNull(ellipse2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float(line2D_Float0.x1, (float) byte0, (float) byteArray0[0], (float) byteArray0[1]);
      assertNotNull(ellipse2D_Float0);
      assertEquals(654.2227172851562, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals((-22.0), ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(654.2227172851562, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(654.2227172851562, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals((-22.0), ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals((-22.0), ellipse2D_Float0.getCenterY(), 0.01D);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(654.2227175748114, point2D_Double0.y, 0.01D);
      assertEquals(654.2227175748114, point2D_Double0.x, 0.01D);
      assertEquals((-22.0F), ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(654.2227F, ellipse2D_Float0.x, 0.01F);
      assertEquals(654.2227F, line2D_Float0.y2, 0.01F);
      assertEquals(654.2227F, line2D_Float0.y1, 0.01F);
      assertEquals(654.2227F, line2D_Float0.x1, 0.01F);
      assertEquals(654.2227F, line2D_Float0.x2, 0.01F);
      
      boolean boolean0 = ShapeUtilities.equal((Ellipse2D) ellipse2D_Double0, (Ellipse2D) ellipse2D_Float0);
      assertFalse(boolean0);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(654.2227172851562, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals((-22.0), ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(654.2227172851562, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(654.2227172851562, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals((-22.0), ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals((-22.0), ellipse2D_Float0.getCenterY(), 0.01D);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(654.2227175748114, point2D_Double0.y, 0.01D);
      assertEquals(654.2227175748114, point2D_Double0.x, 0.01D);
      assertEquals((-22.0F), ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(654.2227F, ellipse2D_Float0.x, 0.01F);
      assertEquals(654.2227F, line2D_Float0.y2, 0.01F);
      assertEquals(654.2227F, line2D_Float0.y1, 0.01F);
      assertEquals(654.2227F, line2D_Float0.x1, 0.01F);
      assertEquals(654.2227F, line2D_Float0.x2, 0.01F);
  }

  @Test
  public void test31()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertNotNull(ellipse2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      
      Ellipse2D.Float ellipse2D_Float0 = null;
      boolean boolean0 = ShapeUtilities.equal((Ellipse2D) ellipse2D_Double0, (Ellipse2D) ellipse2D_Float0);
      assertFalse(boolean0);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
  }

  @Test
  public void test32()  throws Throwable  {
      Ellipse2D ellipse2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(ellipse2D0, ellipse2D0);
      assertTrue(boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertNotNull(ellipse2D_Float0);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      
      Ellipse2D.Float ellipse2D_Float1 = null;
      boolean boolean0 = ShapeUtilities.equal((Ellipse2D) ellipse2D_Float1, (Ellipse2D) ellipse2D_Float0);
      assertFalse(boolean0);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
  }

  @Test
  public void test34()  throws Throwable  {
      float float0 = 0.0F;
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      
      double double0 = 1.5;
      Line2D.Double line2D_Double1 = new Line2D.Double((double) float0, (double) float0, double0, double0);
      assertNotSame(line2D_Double1, line2D_Double0);
      assertNotNull(line2D_Double1);
      assertEquals(0.0, line2D_Double1.x1, 0.01D);
      assertEquals(0.0, line2D_Double1.y1, 0.01D);
      assertEquals(1.5, line2D_Double1.y2, 0.01D);
      assertEquals(1.5, line2D_Double1.x2, 0.01D);
      assertFalse(line2D_Double1.equals((Object)line2D_Double0));
      
      boolean boolean0 = ShapeUtilities.equal((Line2D) line2D_Double0, (Line2D) line2D_Double1);
      assertNotSame(line2D_Double0, line2D_Double1);
      assertNotSame(line2D_Double1, line2D_Double0);
      assertFalse(boolean0);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double1.x1, 0.01D);
      assertEquals(0.0, line2D_Double1.y1, 0.01D);
      assertEquals(1.5, line2D_Double1.y2, 0.01D);
      assertEquals(1.5, line2D_Double1.x2, 0.01D);
      assertFalse(line2D_Double0.equals((Object)line2D_Double1));
      assertFalse(line2D_Double1.equals((Object)line2D_Double0));
  }

  @Test
  public void test35()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      
      float float0 = (-1.0F);
      Point2D.Double point2D_Double0 = new Point2D.Double((double) float0, line2D_Double0.y2);
      assertNotNull(point2D_Double0);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals((-1.0), point2D_Double0.x, 0.01D);
      
      Line2D.Double line2D_Double1 = new Line2D.Double((double) float0, point2D_Double0.x, point2D_Double0.x, line2D_Double0.x2);
      assertNotSame(line2D_Double1, line2D_Double0);
      assertNotSame(line2D_Double0, line2D_Double1);
      assertNotNull(line2D_Double1);
      assertEquals(0.0, line2D_Double1.y2, 0.01D);
      assertEquals((-1.0), line2D_Double1.x2, 0.01D);
      assertEquals((-1.0), line2D_Double1.y1, 0.01D);
      assertEquals((-1.0), line2D_Double1.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals((-1.0), point2D_Double0.x, 0.01D);
      assertFalse(line2D_Double1.equals((Object)line2D_Double0));
      assertFalse(line2D_Double0.equals((Object)line2D_Double1));
      
      boolean boolean0 = ShapeUtilities.equal((Shape) line2D_Double0, (Shape) line2D_Double1);
      assertNotSame(line2D_Double1, line2D_Double0);
      assertNotSame(line2D_Double0, line2D_Double1);
      assertFalse(boolean0);
      assertEquals(0.0, line2D_Double1.y2, 0.01D);
      assertEquals((-1.0), line2D_Double1.x2, 0.01D);
      assertEquals((-1.0), line2D_Double1.y1, 0.01D);
      assertEquals((-1.0), line2D_Double1.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals((-1.0), point2D_Double0.x, 0.01D);
      assertFalse(line2D_Double1.equals((Object)line2D_Double0));
      assertFalse(line2D_Double0.equals((Object)line2D_Double1));
  }

  @Test
  public void test36()  throws Throwable  {
      double double0 = 654.2227175748114;
      Point2D.Double point2D_Double0 = new Point2D.Double(double0, double0);
      assertNotNull(point2D_Double0);
      assertEquals(654.2227175748114, point2D_Double0.x, 0.01D);
      assertEquals(654.2227175748114, point2D_Double0.y, 0.01D);
      
      Line2D line2D0 = null;
      Line2D.Float line2D_Float0 = new Line2D.Float((Point2D) point2D_Double0, (Point2D) point2D_Double0);
      assertNotNull(line2D_Float0);
      assertEquals(654.2227175748114, point2D_Double0.x, 0.01D);
      assertEquals(654.2227175748114, point2D_Double0.y, 0.01D);
      assertEquals(654.2227F, line2D_Float0.x2, 0.01F);
      assertEquals(654.2227F, line2D_Float0.x1, 0.01F);
      assertEquals(654.2227F, line2D_Float0.y1, 0.01F);
      assertEquals(654.2227F, line2D_Float0.y2, 0.01F);
      
      boolean boolean0 = ShapeUtilities.equal((Line2D) line2D_Float0, line2D0);
      assertFalse(boolean0);
      assertEquals(654.2227175748114, point2D_Double0.x, 0.01D);
      assertEquals(654.2227175748114, point2D_Double0.y, 0.01D);
      assertEquals(654.2227F, line2D_Float0.x2, 0.01F);
      assertEquals(654.2227F, line2D_Float0.x1, 0.01F);
      assertEquals(654.2227F, line2D_Float0.y1, 0.01F);
      assertEquals(654.2227F, line2D_Float0.y2, 0.01F);
  }

  @Test
  public void test37()  throws Throwable  {
      Line2D line2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(line2D0, line2D0);
      assertTrue(boolean0);
  }

  @Test
  public void test38()  throws Throwable  {
      Line2D line2D0 = null;
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      
      boolean boolean0 = ShapeUtilities.equal(line2D0, (Line2D) line2D_Double0);
      assertFalse(boolean0);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
  }

  @Test
  public void test39()  throws Throwable  {
      float float0 = 0.0F;
      Line2D.Float line2D_Float0 = new Line2D.Float(float0, float0, float0, float0);
      assertNotNull(line2D_Float0);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createLineRegion((Line2D) line2D_Float0, line2D_Float0.x2);
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      
      JTabbedPane jTabbedPane0 = new JTabbedPane();
      assertNotNull(jTabbedPane0);
      assertEquals(true, jTabbedPane0.isFontSet());
      assertEquals(false, jTabbedPane0.isCursorSet());
      assertEquals(false, jTabbedPane0.isFocusTraversalPolicySet());
      assertEquals(0, jTabbedPane0.countComponents());
      assertEquals(false, jTabbedPane0.isMinimumSizeSet());
      assertEquals(false, jTabbedPane0.isValid());
      assertEquals(true, jTabbedPane0.isBackgroundSet());
      assertEquals(false, jTabbedPane0.getIgnoreRepaint());
      assertEquals(false, jTabbedPane0.isMaximumSizeSet());
      assertEquals(false, jTabbedPane0.isLightweight());
      assertEquals(false, jTabbedPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTabbedPane0.isVisible());
      assertEquals(true, jTabbedPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTabbedPane0.isPreferredSizeSet());
      assertEquals(false, jTabbedPane0.isDisplayable());
      assertEquals(false, jTabbedPane0.isFocusCycleRoot());
      assertEquals(true, jTabbedPane0.isEnabled());
      assertEquals(0, jTabbedPane0.getComponentCount());
      assertEquals(false, jTabbedPane0.isShowing());
      assertEquals(true, jTabbedPane0.isForegroundSet());
      
      Rectangle rectangle0 = jTabbedPane0.bounds();
      assertNotNull(rectangle0);
      assertEquals(true, jTabbedPane0.isFontSet());
      assertEquals(false, jTabbedPane0.isCursorSet());
      assertEquals(false, jTabbedPane0.isFocusTraversalPolicySet());
      assertEquals(0, jTabbedPane0.countComponents());
      assertEquals(false, jTabbedPane0.isMinimumSizeSet());
      assertEquals(false, jTabbedPane0.isValid());
      assertEquals(true, jTabbedPane0.isBackgroundSet());
      assertEquals(false, jTabbedPane0.getIgnoreRepaint());
      assertEquals(false, jTabbedPane0.isMaximumSizeSet());
      assertEquals(false, jTabbedPane0.isLightweight());
      assertEquals(false, jTabbedPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTabbedPane0.isVisible());
      assertEquals(true, jTabbedPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTabbedPane0.isPreferredSizeSet());
      assertEquals(false, jTabbedPane0.isDisplayable());
      assertEquals(false, jTabbedPane0.isFocusCycleRoot());
      assertEquals(true, jTabbedPane0.isEnabled());
      assertEquals(0, jTabbedPane0.getComponentCount());
      assertEquals(false, jTabbedPane0.isShowing());
      assertEquals(true, jTabbedPane0.isForegroundSet());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath0, (Shape) rectangle0);
      assertFalse(boolean0);
      assertEquals(true, jTabbedPane0.isFontSet());
      assertEquals(false, jTabbedPane0.isCursorSet());
      assertEquals(false, jTabbedPane0.isFocusTraversalPolicySet());
      assertEquals(0, jTabbedPane0.countComponents());
      assertEquals(false, jTabbedPane0.isMinimumSizeSet());
      assertEquals(false, jTabbedPane0.isValid());
      assertEquals(true, jTabbedPane0.isBackgroundSet());
      assertEquals(false, jTabbedPane0.getIgnoreRepaint());
      assertEquals(false, jTabbedPane0.isMaximumSizeSet());
      assertEquals(false, jTabbedPane0.isLightweight());
      assertEquals(false, jTabbedPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTabbedPane0.isVisible());
      assertEquals(true, jTabbedPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTabbedPane0.isPreferredSizeSet());
      assertEquals(false, jTabbedPane0.isDisplayable());
      assertEquals(false, jTabbedPane0.isFocusCycleRoot());
      assertEquals(true, jTabbedPane0.isEnabled());
      assertEquals(0, jTabbedPane0.getComponentCount());
      assertEquals(false, jTabbedPane0.isShowing());
      assertEquals(true, jTabbedPane0.isForegroundSet());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
  }

  @Test
  public void test40()  throws Throwable  {
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      assertNotNull(defaultListCellRenderer0);
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      
      Rectangle rectangle0 = defaultListCellRenderer0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      
      GeneralPath generalPath0 = new GeneralPath((Shape) rectangle0);
      assertNotNull(generalPath0);
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath0, (Shape) generalPath0);
      assertTrue(boolean0);
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
  }

  @Test
  public void test41()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertNotNull(polygon0);
      assertEquals(0, polygon0.npoints);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) polygon0, (Shape) polygon0);
      assertTrue(boolean0);
      assertEquals(0, polygon0.npoints);
  }

  @Test
  public void test42()  throws Throwable  {
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      assertNotNull(arc2D_Float0);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      
      Polygon polygon0 = new Polygon();
      assertNotNull(polygon0);
      assertEquals(0, polygon0.npoints);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) arc2D_Float0, (Shape) polygon0);
      assertFalse(boolean0);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0, polygon0.npoints);
  }

  @Test
  public void test43()  throws Throwable  {
      float float0 = 0.0F;
      Line2D.Float line2D_Float0 = new Line2D.Float(float0, float0, float0, float0);
      assertNotNull(line2D_Float0);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertNotNull(ellipse2D_Float0);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) ellipse2D_Float0, (Shape) line2D_Float0);
      assertFalse(boolean0);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
  }

  @Test
  public void test44()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertNotNull(ellipse2D_Float0);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) ellipse2D_Float0, (Shape) ellipse2D_Float0);
      assertTrue(boolean0);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
  }

  @Test
  public void test45()  throws Throwable  {
      float float0 = 0.0F;
      Line2D.Float line2D_Float0 = new Line2D.Float(float0, float0, float0, float0);
      assertNotNull(line2D_Float0);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      
      JTabbedPane jTabbedPane0 = new JTabbedPane();
      assertNotNull(jTabbedPane0);
      assertEquals(0, jTabbedPane0.getComponentCount());
      assertEquals(true, jTabbedPane0.isEnabled());
      assertEquals(false, jTabbedPane0.isFocusTraversalPolicySet());
      assertEquals(false, jTabbedPane0.isMaximumSizeSet());
      assertEquals(false, jTabbedPane0.isCursorSet());
      assertEquals(false, jTabbedPane0.isFocusCycleRoot());
      assertEquals(false, jTabbedPane0.getIgnoreRepaint());
      assertEquals(false, jTabbedPane0.isShowing());
      assertEquals(true, jTabbedPane0.isForegroundSet());
      assertEquals(false, jTabbedPane0.isValid());
      assertEquals(false, jTabbedPane0.isMinimumSizeSet());
      assertEquals(false, jTabbedPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTabbedPane0.isLightweight());
      assertEquals(false, jTabbedPane0.isPreferredSizeSet());
      assertEquals(false, jTabbedPane0.isDisplayable());
      assertEquals(true, jTabbedPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTabbedPane0.isFontSet());
      assertEquals(true, jTabbedPane0.isBackgroundSet());
      assertEquals(0, jTabbedPane0.countComponents());
      assertEquals(true, jTabbedPane0.isVisible());
      
      Rectangle rectangle0 = jTabbedPane0.bounds();
      assertNotNull(rectangle0);
      assertEquals(0, jTabbedPane0.getComponentCount());
      assertEquals(true, jTabbedPane0.isEnabled());
      assertEquals(false, jTabbedPane0.isFocusTraversalPolicySet());
      assertEquals(false, jTabbedPane0.isMaximumSizeSet());
      assertEquals(false, jTabbedPane0.isCursorSet());
      assertEquals(false, jTabbedPane0.isFocusCycleRoot());
      assertEquals(false, jTabbedPane0.getIgnoreRepaint());
      assertEquals(false, jTabbedPane0.isShowing());
      assertEquals(true, jTabbedPane0.isForegroundSet());
      assertEquals(false, jTabbedPane0.isValid());
      assertEquals(false, jTabbedPane0.isMinimumSizeSet());
      assertEquals(false, jTabbedPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTabbedPane0.isLightweight());
      assertEquals(false, jTabbedPane0.isPreferredSizeSet());
      assertEquals(false, jTabbedPane0.isDisplayable());
      assertEquals(true, jTabbedPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTabbedPane0.isFontSet());
      assertEquals(true, jTabbedPane0.isBackgroundSet());
      assertEquals(0, jTabbedPane0.countComponents());
      assertEquals(true, jTabbedPane0.isVisible());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) line2D_Float0, (Shape) rectangle0);
      assertFalse(boolean0);
      assertEquals(0, jTabbedPane0.getComponentCount());
      assertEquals(true, jTabbedPane0.isEnabled());
      assertEquals(false, jTabbedPane0.isFocusTraversalPolicySet());
      assertEquals(false, jTabbedPane0.isMaximumSizeSet());
      assertEquals(false, jTabbedPane0.isCursorSet());
      assertEquals(false, jTabbedPane0.isFocusCycleRoot());
      assertEquals(false, jTabbedPane0.getIgnoreRepaint());
      assertEquals(false, jTabbedPane0.isShowing());
      assertEquals(true, jTabbedPane0.isForegroundSet());
      assertEquals(false, jTabbedPane0.isValid());
      assertEquals(false, jTabbedPane0.isMinimumSizeSet());
      assertEquals(false, jTabbedPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTabbedPane0.isLightweight());
      assertEquals(false, jTabbedPane0.isPreferredSizeSet());
      assertEquals(false, jTabbedPane0.isDisplayable());
      assertEquals(true, jTabbedPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTabbedPane0.isFontSet());
      assertEquals(true, jTabbedPane0.isBackgroundSet());
      assertEquals(0, jTabbedPane0.countComponents());
      assertEquals(true, jTabbedPane0.isVisible());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
  }

  @Test
  public void test46()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) line2D_Double0, (Shape) line2D_Double0);
      assertTrue(boolean0);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
  }

  @Test
  public void test47()  throws Throwable  {
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      assertNotNull(arc2D_Float0);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) arc2D_Float0, (Shape) arc2D_Float0);
      assertTrue(boolean0);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
  }

  @Test
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createUpTriangle((float) byteArray0[1]);
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      GeneralPath generalPath1 = (GeneralPath)ShapeUtilities.clone((Shape) generalPath0);
      assertNotSame(generalPath1, generalPath0);
      assertNotSame(generalPath0, generalPath1);
      assertNotNull(generalPath1);
      assertEquals(1, generalPath1.getWindingRule());
      assertEquals(1, generalPath0.getWindingRule());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertFalse(generalPath0.equals((Object)generalPath1));
  }

  @Test
  public void test49()  throws Throwable  {
      GeneralPath generalPath0 = null;
      Shape shape0 = ShapeUtilities.clone((Shape) generalPath0);
      assertNull(shape0);
  }

  @Test
  public void test50()  throws Throwable  {
      float float0 = 0.0F;
      Line2D.Float line2D_Float0 = new Line2D.Float(float0, float0, float0, float0);
      assertNotNull(line2D_Float0);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      
      JTabbedPane jTabbedPane0 = new JTabbedPane();
      assertNotNull(jTabbedPane0);
      assertEquals(true, jTabbedPane0.isFontSet());
      assertEquals(false, jTabbedPane0.isFocusCycleRoot());
      assertEquals(true, jTabbedPane0.isEnabled());
      assertEquals(0, jTabbedPane0.countComponents());
      assertEquals(false, jTabbedPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTabbedPane0.isMaximumSizeSet());
      assertEquals(true, jTabbedPane0.isBackgroundSet());
      assertEquals(false, jTabbedPane0.isShowing());
      assertEquals(0, jTabbedPane0.getComponentCount());
      assertEquals(false, jTabbedPane0.getIgnoreRepaint());
      assertEquals(false, jTabbedPane0.isDisplayable());
      assertEquals(false, jTabbedPane0.isMinimumSizeSet());
      assertEquals(false, jTabbedPane0.isCursorSet());
      assertEquals(false, jTabbedPane0.isValid());
      assertEquals(false, jTabbedPane0.isLightweight());
      assertEquals(true, jTabbedPane0.isVisible());
      assertEquals(false, jTabbedPane0.isPreferredSizeSet());
      assertEquals(true, jTabbedPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTabbedPane0.isForegroundSet());
      assertEquals(false, jTabbedPane0.isFocusTraversalPolicySet());
      
      Rectangle rectangle0 = jTabbedPane0.bounds();
      assertNotNull(rectangle0);
      assertEquals(true, jTabbedPane0.isFontSet());
      assertEquals(false, jTabbedPane0.isFocusCycleRoot());
      assertEquals(true, jTabbedPane0.isEnabled());
      assertEquals(0, jTabbedPane0.countComponents());
      assertEquals(false, jTabbedPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTabbedPane0.isMaximumSizeSet());
      assertEquals(true, jTabbedPane0.isBackgroundSet());
      assertEquals(false, jTabbedPane0.isShowing());
      assertEquals(0, jTabbedPane0.getComponentCount());
      assertEquals(false, jTabbedPane0.getIgnoreRepaint());
      assertEquals(false, jTabbedPane0.isDisplayable());
      assertEquals(false, jTabbedPane0.isMinimumSizeSet());
      assertEquals(false, jTabbedPane0.isCursorSet());
      assertEquals(false, jTabbedPane0.isValid());
      assertEquals(false, jTabbedPane0.isLightweight());
      assertEquals(true, jTabbedPane0.isVisible());
      assertEquals(false, jTabbedPane0.isPreferredSizeSet());
      assertEquals(true, jTabbedPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTabbedPane0.isForegroundSet());
      assertEquals(false, jTabbedPane0.isFocusTraversalPolicySet());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)ShapeUtilities.getPointInRectangle((double) line2D_Float0.x2, (double) rectangle0.width, (Rectangle2D) rectangle0);
      assertNotNull(point2D_Double0);
      assertEquals(true, jTabbedPane0.isFontSet());
      assertEquals(false, jTabbedPane0.isFocusCycleRoot());
      assertEquals(true, jTabbedPane0.isEnabled());
      assertEquals(0, jTabbedPane0.countComponents());
      assertEquals(false, jTabbedPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTabbedPane0.isMaximumSizeSet());
      assertEquals(true, jTabbedPane0.isBackgroundSet());
      assertEquals(false, jTabbedPane0.isShowing());
      assertEquals(0, jTabbedPane0.getComponentCount());
      assertEquals(false, jTabbedPane0.getIgnoreRepaint());
      assertEquals(false, jTabbedPane0.isDisplayable());
      assertEquals(false, jTabbedPane0.isMinimumSizeSet());
      assertEquals(false, jTabbedPane0.isCursorSet());
      assertEquals(false, jTabbedPane0.isValid());
      assertEquals(false, jTabbedPane0.isLightweight());
      assertEquals(true, jTabbedPane0.isVisible());
      assertEquals(false, jTabbedPane0.isPreferredSizeSet());
      assertEquals(true, jTabbedPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTabbedPane0.isForegroundSet());
      assertEquals(false, jTabbedPane0.isFocusTraversalPolicySet());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
  }

  @Test
  public void test51()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertNotNull(polygon0);
      assertEquals(0, polygon0.npoints);
      
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createDiagonalCross((float) polygon0.npoints, (float) polygon0.npoints);
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0, polygon0.npoints);
  }

  @Test
  public void test52()  throws Throwable  {
      float float0 = (-1388.7139F);
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createDownTriangle(float0);
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      
      Graphics2D graphics2D0 = null;
      // Undeclared exception!
      try {
        ShapeUtilities.drawRotatedShape(graphics2D0, (Shape) generalPath0, (double) float0, float0, float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
