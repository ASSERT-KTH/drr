/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:59:51 GMT 2014
 */

package org.jfree.chart.util;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Event;
import java.awt.GradientPaint;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.event.MouseEvent;
import java.awt.geom.Arc2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.text.AttributedString;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JInternalFrame;
import javax.swing.table.JTableHeader;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;

import org.jfree.chart.util.SerialUtilities;
import org.junit.runner.RunWith;

 
public class SerialUtilitiesEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(false, pipedInputStream0.markSupported());
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(false, pipedInputStream0.markSupported());
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) pipedOutputStream0);
      assertEquals(false, pipedInputStream0.markSupported());
      assertEquals(4, pipedInputStream0.available());
      assertNotNull(objectOutputStream0);
      
      String string0 = "@9u[)K5P=";
      AttributedString attributedString0 = new AttributedString(string0);
      assertNotNull(attributedString0);
      
      SerialUtilities.writeAttributedString(attributedString0, objectOutputStream0);
      assertEquals(false, pipedInputStream0.markSupported());
      assertEquals(105, pipedInputStream0.available());
  }

  @Test
  public void test01()  throws Throwable  {
      ObjectInputStream objectInputStream0 = null;
      // Undeclared exception!
      try {
        AttributedString attributedString0 = SerialUtilities.readAttributedString(objectInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 2810;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertNotNull(objectOutputStream0);
      
      Point2D.Double point2D_Double0 = new Point2D.Double((double) int0, (double) int0);
      assertNotNull(point2D_Double0);
      assertEquals(2810.0, point2D_Double0.x, 0.01D);
      assertEquals(2810.0, point2D_Double0.y, 0.01D);
      
      SerialUtilities.writePoint2D((Point2D) point2D_Double0, objectOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(2810.0, point2D_Double0.x, 0.01D);
      assertEquals(2810.0, point2D_Double0.y, 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "[5'K";
      boolean boolean0 = false;
      JInternalFrame jInternalFrame0 = new JInternalFrame(string0, boolean0, boolean0, boolean0, boolean0);
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertNotNull(jInternalFrame0);
      
      Point point0 = jInternalFrame0.location();
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertNotNull(point0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      
      ObjectOutputStream objectOutputStream0 = null;
      // Undeclared exception!
      try {
        SerialUtilities.writePoint2D((Point2D) point0, objectOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem(string0, boolean0);
      assertEquals(true, jCheckBoxMenuItem0.isBackgroundSet());
      assertEquals(false, jCheckBoxMenuItem0.isLightweight());
      assertEquals(false, jCheckBoxMenuItem0.isMaximumSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBoxMenuItem0.isCursorSet());
      assertEquals(false, jCheckBoxMenuItem0.isDisplayable());
      assertEquals(true, jCheckBoxMenuItem0.isEnabled());
      assertEquals(0, jCheckBoxMenuItem0.getComponentCount());
      assertEquals(false, jCheckBoxMenuItem0.getIgnoreRepaint());
      assertEquals(0, jCheckBoxMenuItem0.countComponents());
      assertEquals(false, jCheckBoxMenuItem0.isFocusCycleRoot());
      assertEquals(false, jCheckBoxMenuItem0.isMinimumSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isShowing());
      assertEquals(true, jCheckBoxMenuItem0.isVisible());
      assertEquals(true, jCheckBoxMenuItem0.isFontSet());
      assertEquals(true, jCheckBoxMenuItem0.isForegroundSet());
      assertEquals(true, jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBoxMenuItem0.isValid());
      assertEquals(false, jCheckBoxMenuItem0.isPreferredSizeSet());
      assertNotNull(jCheckBoxMenuItem0);
      
      int int0 = 0;
      MouseEvent mouseEvent0 = new MouseEvent((Component) jCheckBoxMenuItem0, int0, (long) int0, int0, int0, int0, int0, boolean0, int0);
      assertEquals(false, mouseEvent0.isMetaDown());
      assertEquals(false, mouseEvent0.isAltDown());
      assertEquals(0L, mouseEvent0.getWhen());
      assertEquals(0, mouseEvent0.getModifiers());
      assertEquals(false, mouseEvent0.isPopupTrigger());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(0, mouseEvent0.getButton());
      assertEquals(0, mouseEvent0.getID());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals(false, mouseEvent0.isShiftDown());
      assertEquals(false, mouseEvent0.isConsumed());
      assertEquals(false, mouseEvent0.isAltGraphDown());
      assertEquals(0, mouseEvent0.getY());
      assertEquals(0, mouseEvent0.getX());
      assertEquals(false, mouseEvent0.isControlDown());
      assertEquals(0, mouseEvent0.getClickCount());
      assertEquals(true, jCheckBoxMenuItem0.isBackgroundSet());
      assertEquals(false, jCheckBoxMenuItem0.isLightweight());
      assertEquals(false, jCheckBoxMenuItem0.isMaximumSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBoxMenuItem0.isCursorSet());
      assertEquals(false, jCheckBoxMenuItem0.isDisplayable());
      assertEquals(true, jCheckBoxMenuItem0.isEnabled());
      assertEquals(0, jCheckBoxMenuItem0.getComponentCount());
      assertEquals(false, jCheckBoxMenuItem0.getIgnoreRepaint());
      assertEquals(0, jCheckBoxMenuItem0.countComponents());
      assertEquals(false, jCheckBoxMenuItem0.isFocusCycleRoot());
      assertEquals(false, jCheckBoxMenuItem0.isMinimumSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isShowing());
      assertEquals(true, jCheckBoxMenuItem0.isVisible());
      assertEquals(true, jCheckBoxMenuItem0.isFontSet());
      assertEquals(true, jCheckBoxMenuItem0.isForegroundSet());
      assertEquals(true, jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBoxMenuItem0.isValid());
      assertEquals(false, jCheckBoxMenuItem0.isPreferredSizeSet());
      assertNotNull(mouseEvent0);
      
      Point point0 = jCheckBoxMenuItem0.getToolTipLocation(mouseEvent0);
      assertEquals(false, mouseEvent0.isMetaDown());
      assertEquals(false, mouseEvent0.isAltDown());
      assertEquals(0L, mouseEvent0.getWhen());
      assertEquals(0, mouseEvent0.getModifiers());
      assertEquals(false, mouseEvent0.isPopupTrigger());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(0, mouseEvent0.getButton());
      assertEquals(0, mouseEvent0.getID());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals(false, mouseEvent0.isShiftDown());
      assertEquals(false, mouseEvent0.isConsumed());
      assertEquals(false, mouseEvent0.isAltGraphDown());
      assertEquals(0, mouseEvent0.getY());
      assertEquals(0, mouseEvent0.getX());
      assertEquals(false, mouseEvent0.isControlDown());
      assertEquals(0, mouseEvent0.getClickCount());
      assertEquals(true, jCheckBoxMenuItem0.isBackgroundSet());
      assertEquals(false, jCheckBoxMenuItem0.isLightweight());
      assertEquals(false, jCheckBoxMenuItem0.isMaximumSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBoxMenuItem0.isCursorSet());
      assertEquals(false, jCheckBoxMenuItem0.isDisplayable());
      assertEquals(true, jCheckBoxMenuItem0.isEnabled());
      assertEquals(0, jCheckBoxMenuItem0.getComponentCount());
      assertEquals(false, jCheckBoxMenuItem0.getIgnoreRepaint());
      assertEquals(0, jCheckBoxMenuItem0.countComponents());
      assertEquals(false, jCheckBoxMenuItem0.isFocusCycleRoot());
      assertEquals(false, jCheckBoxMenuItem0.isMinimumSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isShowing());
      assertEquals(true, jCheckBoxMenuItem0.isVisible());
      assertEquals(true, jCheckBoxMenuItem0.isFontSet());
      assertEquals(true, jCheckBoxMenuItem0.isForegroundSet());
      assertEquals(true, jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBoxMenuItem0.isValid());
      assertEquals(false, jCheckBoxMenuItem0.isPreferredSizeSet());
      assertNull(point0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writePoint2D((Point2D) point0, objectOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(false, mouseEvent0.isMetaDown());
      assertEquals(false, mouseEvent0.isAltDown());
      assertEquals(0L, mouseEvent0.getWhen());
      assertEquals(0, mouseEvent0.getModifiers());
      assertEquals(false, mouseEvent0.isPopupTrigger());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(0, mouseEvent0.getButton());
      assertEquals(0, mouseEvent0.getID());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals(false, mouseEvent0.isShiftDown());
      assertEquals(false, mouseEvent0.isConsumed());
      assertEquals(false, mouseEvent0.isAltGraphDown());
      assertEquals(0, mouseEvent0.getY());
      assertEquals(0, mouseEvent0.getX());
      assertEquals(false, mouseEvent0.isControlDown());
      assertEquals(0, mouseEvent0.getClickCount());
      assertEquals(true, jCheckBoxMenuItem0.isBackgroundSet());
      assertEquals(false, jCheckBoxMenuItem0.isLightweight());
      assertEquals(false, jCheckBoxMenuItem0.isMaximumSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBoxMenuItem0.isCursorSet());
      assertEquals(false, jCheckBoxMenuItem0.isDisplayable());
      assertEquals(true, jCheckBoxMenuItem0.isEnabled());
      assertEquals(0, jCheckBoxMenuItem0.getComponentCount());
      assertEquals(false, jCheckBoxMenuItem0.getIgnoreRepaint());
      assertEquals(0, jCheckBoxMenuItem0.countComponents());
      assertEquals(false, jCheckBoxMenuItem0.isFocusCycleRoot());
      assertEquals(false, jCheckBoxMenuItem0.isMinimumSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isShowing());
      assertEquals(true, jCheckBoxMenuItem0.isVisible());
      assertEquals(true, jCheckBoxMenuItem0.isFontSet());
      assertEquals(true, jCheckBoxMenuItem0.isForegroundSet());
      assertEquals(true, jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBoxMenuItem0.isValid());
      assertEquals(false, jCheckBoxMenuItem0.isPreferredSizeSet());
  }

  @Test
  public void test05()  throws Throwable  {
      ObjectInputStream objectInputStream0 = null;
      // Undeclared exception!
      try {
        Point2D point2D0 = SerialUtilities.readPoint2D(objectInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "";
      JButton jButton0 = new JButton(string0);
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(0, jButton0.countComponents());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(false, jButton0.isShowing());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(true, jButton0.isVisible());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(true, jButton0.isEnabled());
      assertNotNull(jButton0);
      
      Rectangle rectangle0 = jButton0.getBounds();
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(0, jButton0.countComponents());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(false, jButton0.isShowing());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(true, jButton0.isVisible());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(true, jButton0.isEnabled());
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(false, pipedInputStream0.markSupported());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(false, pipedInputStream0.markSupported());
      assertNotNull(pipedOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) pipedOutputStream0);
      assertEquals(false, pipedInputStream0.markSupported());
      assertEquals(4, pipedInputStream0.available());
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeShape((Shape) rectangle0, objectOutputStream0);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(49, pipedInputStream0.available());
      assertEquals(false, pipedInputStream0.markSupported());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(0, jButton0.countComponents());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(false, jButton0.isShowing());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(true, jButton0.isVisible());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      
      ObjectInputStream objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
      assertEquals(false, pipedInputStream0.markSupported());
      assertEquals(45, pipedInputStream0.available());
      assertEquals(false, objectInputStream0.markSupported());
      assertNotNull(objectInputStream0);
      
      try {
        Point2D point2D0 = SerialUtilities.readPoint2D(objectInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertNotNull(ellipse2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      
      int int0 = 2589;
      PipedInputStream pipedInputStream0 = new PipedInputStream(int0);
      assertEquals(false, pipedInputStream0.markSupported());
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(false, pipedInputStream0.markSupported());
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) pipedOutputStream0);
      assertEquals(false, pipedInputStream0.markSupported());
      assertEquals(4, pipedInputStream0.available());
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeShape((Shape) ellipse2D_Double0, objectOutputStream0);
      assertEquals(false, pipedInputStream0.markSupported());
      assertEquals(47, pipedInputStream0.available());
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      
      SerialUtilities.writeShape((Shape) ellipse2D_Double0, objectOutputStream0);
      assertEquals(false, pipedInputStream0.markSupported());
      assertEquals(87, pipedInputStream0.available());
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      
      String string0 = "org.jfree.data.time.TimeSeriesCollection";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeShape((Shape) arc2D_Double0, objectOutputStream0);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "";
      JButton jButton0 = new JButton(string0);
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(0, jButton0.countComponents());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isShowing());
      assertEquals(true, jButton0.isVisible());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(0, jButton0.getComponentCount());
      assertNotNull(jButton0);
      
      Rectangle rectangle0 = jButton0.getBounds();
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(0, jButton0.countComponents());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isShowing());
      assertEquals(true, jButton0.isVisible());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(0, jButton0.getComponentCount());
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(false, pipedInputStream0.markSupported());
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(false, pipedInputStream0.markSupported());
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) pipedOutputStream0);
      assertEquals(4, pipedInputStream0.available());
      assertEquals(false, pipedInputStream0.markSupported());
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeShape((Shape) rectangle0, objectOutputStream0);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(0, jButton0.countComponents());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isShowing());
      assertEquals(true, jButton0.isVisible());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(49, pipedInputStream0.available());
      assertEquals(false, pipedInputStream0.markSupported());
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      
      SerialUtilities.writeShape((Shape) rectangle0, objectOutputStream0);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(0, jButton0.countComponents());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isShowing());
      assertEquals(true, jButton0.isVisible());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(89, pipedInputStream0.available());
      assertEquals(false, pipedInputStream0.markSupported());
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertNotNull(defaultTreeCellRenderer0);
      
      int int0 = 90;
      Line2D.Double line2D_Double0 = new Line2D.Double((double) int0, (double) int0, (double) int0, (double) int0);
      assertNotNull(line2D_Double0);
      assertEquals(90.0, line2D_Double0.x2, 0.01D);
      assertEquals(90.0, line2D_Double0.y1, 0.01D);
      assertEquals(90.0, line2D_Double0.y2, 0.01D);
      assertEquals(90.0, line2D_Double0.x1, 0.01D);
      
      Event event0 = new Event((Object) defaultTreeCellRenderer0, (long) int0, int0, int0, int0, int0, int0);
      assertEquals("java.awt.Event[id=90,x=90,y=90,key=90,control,target=javax.swing.tree.DefaultTreeCellRenderer[Tree.cellRenderer,0,0,0x0,invalid,alignmentX=0.0,alignmentY=0.0,border=,flags=8388608,maximumSize=,minimumSize=,preferredSize=,defaultIcon=,disabledIcon=,horizontalAlignment=LEADING,horizontalTextPosition=TRAILING,iconTextGap=4,labelFor=,text=,verticalAlignment=CENTER,verticalTextPosition=CENTER]]", event0.toString());
      assertEquals(true, event0.controlDown());
      assertEquals(false, event0.metaDown());
      assertEquals(false, event0.shiftDown());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertNotNull(event0);
      assertEquals(90, event0.y);
      assertEquals(90L, event0.when);
      assertEquals(90, event0.x);
      assertEquals(0, event0.clickCount);
      assertEquals(90, event0.id);
      assertEquals(90, event0.modifiers);
      assertEquals(90, event0.key);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(event0.key);
      assertEquals("java.awt.Event[id=90,x=90,y=90,key=90,control,target=javax.swing.tree.DefaultTreeCellRenderer[Tree.cellRenderer,0,0,0x0,invalid,alignmentX=0.0,alignmentY=0.0,border=,flags=8388608,maximumSize=,minimumSize=,preferredSize=,defaultIcon=,disabledIcon=,horizontalAlignment=LEADING,horizontalTextPosition=TRAILING,iconTextGap=4,labelFor=,text=,verticalAlignment=CENTER,verticalTextPosition=CENTER]]", event0.toString());
      assertEquals(true, event0.controlDown());
      assertEquals(false, event0.metaDown());
      assertEquals(false, event0.shiftDown());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      assertEquals(90, event0.y);
      assertEquals(90L, event0.when);
      assertEquals(90, event0.x);
      assertEquals(0, event0.clickCount);
      assertEquals(90, event0.id);
      assertEquals(90, event0.modifiers);
      assertEquals(90, event0.key);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      assertEquals("java.awt.Event[id=90,x=90,y=90,key=90,control,target=javax.swing.tree.DefaultTreeCellRenderer[Tree.cellRenderer,0,0,0x0,invalid,alignmentX=0.0,alignmentY=0.0,border=,flags=8388608,maximumSize=,minimumSize=,preferredSize=,defaultIcon=,disabledIcon=,horizontalAlignment=LEADING,horizontalTextPosition=TRAILING,iconTextGap=4,labelFor=,text=,verticalAlignment=CENTER,verticalTextPosition=CENTER]]", event0.toString());
      assertEquals(true, event0.controlDown());
      assertEquals(false, event0.metaDown());
      assertEquals(false, event0.shiftDown());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertNotNull(objectOutputStream0);
      assertEquals(90, event0.y);
      assertEquals(90L, event0.when);
      assertEquals(90, event0.x);
      assertEquals(0, event0.clickCount);
      assertEquals(90, event0.id);
      assertEquals(90, event0.modifiers);
      assertEquals(90, event0.key);
      
      SerialUtilities.writeShape((Shape) line2D_Double0, objectOutputStream0);
      assertEquals("java.awt.Event[id=90,x=90,y=90,key=90,control,target=javax.swing.tree.DefaultTreeCellRenderer[Tree.cellRenderer,0,0,0x0,invalid,alignmentX=0.0,alignmentY=0.0,border=,flags=8388608,maximumSize=,minimumSize=,preferredSize=,defaultIcon=,disabledIcon=,horizontalAlignment=LEADING,horizontalTextPosition=TRAILING,iconTextGap=4,labelFor=,text=,verticalAlignment=CENTER,verticalTextPosition=CENTER]]", event0.toString());
      assertEquals(true, event0.controlDown());
      assertEquals(false, event0.metaDown());
      assertEquals(false, event0.shiftDown());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(44, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005w\u0001\u0000vr\u0000\u0014java.awt.geom.Line2D\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000xp", byteArrayOutputStream0.toString());
      assertEquals(90, event0.y);
      assertEquals(90L, event0.when);
      assertEquals(90, event0.x);
      assertEquals(0, event0.clickCount);
      assertEquals(90, event0.id);
      assertEquals(90, event0.modifiers);
      assertEquals(90, event0.key);
      assertEquals(90.0, line2D_Double0.x2, 0.01D);
      assertEquals(90.0, line2D_Double0.y1, 0.01D);
      assertEquals(90.0, line2D_Double0.y2, 0.01D);
      assertEquals(90.0, line2D_Double0.x1, 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      Shape shape0 = null;
      String string0 = "ra-Cf.XL*;R";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) mockPrintStream0);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeShape(shape0, objectOutputStream0);
  }

  @Test
  public void test12()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      
      ObjectOutputStream objectOutputStream0 = null;
      // Undeclared exception!
      try {
        SerialUtilities.writeShape((Shape) rectangle2D_Double0, objectOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      ObjectInputStream objectInputStream0 = null;
      // Undeclared exception!
      try {
        Shape shape0 = SerialUtilities.readShape(objectInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertNotNull(defaultTreeCellRenderer0);
      
      int int0 = 90;
      Event event0 = new Event((Object) defaultTreeCellRenderer0, (long) int0, int0, int0, int0, int0, int0);
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(true, event0.controlDown());
      assertEquals("java.awt.Event[id=90,x=90,y=90,key=90,control,target=javax.swing.tree.DefaultTreeCellRenderer[Tree.cellRenderer,0,0,0x0,invalid,alignmentX=0.0,alignmentY=0.0,border=,flags=8388608,maximumSize=,minimumSize=,preferredSize=,defaultIcon=,disabledIcon=,horizontalAlignment=LEADING,horizontalTextPosition=TRAILING,iconTextGap=4,labelFor=,text=,verticalAlignment=CENTER,verticalTextPosition=CENTER]]", event0.toString());
      assertEquals(false, event0.metaDown());
      assertEquals(false, event0.shiftDown());
      assertNotNull(event0);
      assertEquals(90, event0.id);
      assertEquals(90, event0.key);
      assertEquals(90, event0.y);
      assertEquals(90, event0.x);
      assertEquals(90, event0.modifiers);
      assertEquals(90L, event0.when);
      assertEquals(0, event0.clickCount);
      
      BasicStroke basicStroke0 = new BasicStroke();
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(event0.key);
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(true, event0.controlDown());
      assertEquals("java.awt.Event[id=90,x=90,y=90,key=90,control,target=javax.swing.tree.DefaultTreeCellRenderer[Tree.cellRenderer,0,0,0x0,invalid,alignmentX=0.0,alignmentY=0.0,border=,flags=8388608,maximumSize=,minimumSize=,preferredSize=,defaultIcon=,disabledIcon=,horizontalAlignment=LEADING,horizontalTextPosition=TRAILING,iconTextGap=4,labelFor=,text=,verticalAlignment=CENTER,verticalTextPosition=CENTER]]", event0.toString());
      assertEquals(false, event0.metaDown());
      assertEquals(false, event0.shiftDown());
      assertNotNull(byteArrayOutputStream0);
      assertEquals(90, event0.id);
      assertEquals(90, event0.key);
      assertEquals(90, event0.y);
      assertEquals(90, event0.x);
      assertEquals(90, event0.modifiers);
      assertEquals(90L, event0.when);
      assertEquals(0, event0.clickCount);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals(true, event0.controlDown());
      assertEquals("java.awt.Event[id=90,x=90,y=90,key=90,control,target=javax.swing.tree.DefaultTreeCellRenderer[Tree.cellRenderer,0,0,0x0,invalid,alignmentX=0.0,alignmentY=0.0,border=,flags=8388608,maximumSize=,minimumSize=,preferredSize=,defaultIcon=,disabledIcon=,horizontalAlignment=LEADING,horizontalTextPosition=TRAILING,iconTextGap=4,labelFor=,text=,verticalAlignment=CENTER,verticalTextPosition=CENTER]]", event0.toString());
      assertEquals(false, event0.metaDown());
      assertEquals(false, event0.shiftDown());
      assertNotNull(objectOutputStream0);
      assertEquals(90, event0.id);
      assertEquals(90, event0.key);
      assertEquals(90, event0.y);
      assertEquals(90, event0.x);
      assertEquals(90, event0.modifiers);
      assertEquals(90L, event0.when);
      assertEquals(0, event0.clickCount);
      
      SerialUtilities.writeStroke((Stroke) basicStroke0, objectOutputStream0);
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(63, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005w\u0001\u0000vr\u0000\u0014java.awt.BasicStroke\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000xpw\u0010?\uFFFD\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000A \u0000\u0000p", byteArrayOutputStream0.toString());
      assertEquals(true, event0.controlDown());
      assertEquals("java.awt.Event[id=90,x=90,y=90,key=90,control,target=javax.swing.tree.DefaultTreeCellRenderer[Tree.cellRenderer,0,0,0x0,invalid,alignmentX=0.0,alignmentY=0.0,border=,flags=8388608,maximumSize=,minimumSize=,preferredSize=,defaultIcon=,disabledIcon=,horizontalAlignment=LEADING,horizontalTextPosition=TRAILING,iconTextGap=4,labelFor=,text=,verticalAlignment=CENTER,verticalTextPosition=CENTER]]", event0.toString());
      assertEquals(false, event0.metaDown());
      assertEquals(false, event0.shiftDown());
      assertEquals(90, event0.id);
      assertEquals(90, event0.key);
      assertEquals(90, event0.y);
      assertEquals(90, event0.x);
      assertEquals(90, event0.modifiers);
      assertEquals(90L, event0.when);
      assertEquals(0, event0.clickCount);
      
      SerialUtilities.writeStroke((Stroke) basicStroke0, objectOutputStream0);
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals("\uFFFD\uFFFD\u0000\u0005w\u0001\u0000vr\u0000\u0014java.awt.BasicStroke\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000xpw\u0010?\uFFFD\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000A \u0000\u0000pw\u0005\u0000\u0000\u0000\u0000\u0000q\u0000~\u0000\u0001w\u0010?\uFFFD\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000A \u0000\u0000p", byteArrayOutputStream0.toString());
      assertEquals(94, byteArrayOutputStream0.size());
      assertEquals(true, event0.controlDown());
      assertEquals("java.awt.Event[id=90,x=90,y=90,key=90,control,target=javax.swing.tree.DefaultTreeCellRenderer[Tree.cellRenderer,0,0,0x0,invalid,alignmentX=0.0,alignmentY=0.0,border=,flags=8388608,maximumSize=,minimumSize=,preferredSize=,defaultIcon=,disabledIcon=,horizontalAlignment=LEADING,horizontalTextPosition=TRAILING,iconTextGap=4,labelFor=,text=,verticalAlignment=CENTER,verticalTextPosition=CENTER]]", event0.toString());
      assertEquals(false, event0.metaDown());
      assertEquals(false, event0.shiftDown());
      assertEquals(90, event0.id);
      assertEquals(90, event0.key);
      assertEquals(90, event0.y);
      assertEquals(90, event0.x);
      assertEquals(90, event0.modifiers);
      assertEquals(90L, event0.when);
      assertEquals(0, event0.clickCount);
  }

  @Test
  public void test15()  throws Throwable  {
      Stroke stroke0 = null;
      String string0 = "%RHs5|e&K|bI";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeStroke(stroke0, objectOutputStream0);
  }

  @Test
  public void test16()  throws Throwable  {
      ObjectInputStream objectInputStream0 = null;
      // Undeclared exception!
      try {
        Stroke stroke0 = SerialUtilities.readStroke(objectInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      JTableHeader jTableHeader0 = new JTableHeader();
      assertEquals(false, jTableHeader0.isDisplayable());
      assertEquals(true, jTableHeader0.isFontSet());
      assertEquals(1, jTableHeader0.getComponentCount());
      assertEquals(true, jTableHeader0.isBackgroundSet());
      assertEquals(false, jTableHeader0.getIgnoreRepaint());
      assertEquals(false, jTableHeader0.isPreferredSizeSet());
      assertEquals(false, jTableHeader0.isCursorSet());
      assertEquals(false, jTableHeader0.isFocusCycleRoot());
      assertEquals(false, jTableHeader0.isValid());
      assertEquals(false, jTableHeader0.isMinimumSizeSet());
      assertEquals(true, jTableHeader0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTableHeader0.isVisible());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicySet());
      assertEquals(false, jTableHeader0.isMaximumSizeSet());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTableHeader0.isEnabled());
      assertEquals(true, jTableHeader0.isForegroundSet());
      assertEquals(1, jTableHeader0.countComponents());
      assertEquals(false, jTableHeader0.isShowing());
      assertEquals(false, jTableHeader0.isLightweight());
      assertNotNull(jTableHeader0);
      
      Dimension dimension0 = jTableHeader0.size();
      assertEquals("java.awt.Dimension[width=0,height=0]", dimension0.toString());
      assertEquals(0.0, dimension0.getWidth(), 0.01D);
      assertEquals(0.0, dimension0.getHeight(), 0.01D);
      assertEquals(false, jTableHeader0.isDisplayable());
      assertEquals(true, jTableHeader0.isFontSet());
      assertEquals(1, jTableHeader0.getComponentCount());
      assertEquals(true, jTableHeader0.isBackgroundSet());
      assertEquals(false, jTableHeader0.getIgnoreRepaint());
      assertEquals(false, jTableHeader0.isPreferredSizeSet());
      assertEquals(false, jTableHeader0.isCursorSet());
      assertEquals(false, jTableHeader0.isFocusCycleRoot());
      assertEquals(false, jTableHeader0.isValid());
      assertEquals(false, jTableHeader0.isMinimumSizeSet());
      assertEquals(true, jTableHeader0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTableHeader0.isVisible());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicySet());
      assertEquals(false, jTableHeader0.isMaximumSizeSet());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTableHeader0.isEnabled());
      assertEquals(true, jTableHeader0.isForegroundSet());
      assertEquals(1, jTableHeader0.countComponents());
      assertEquals(false, jTableHeader0.isShowing());
      assertEquals(false, jTableHeader0.isLightweight());
      assertNotNull(dimension0);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      
      Box.Filler box_Filler0 = new Box.Filler(dimension0, dimension0, dimension0);
      assertEquals(false, box_Filler0.isBackgroundSet());
      assertEquals(false, box_Filler0.isLightweight());
      assertEquals(false, box_Filler0.isValid());
      assertEquals(false, box_Filler0.isShowing());
      assertEquals(false, box_Filler0.isFocusCycleRoot());
      assertEquals(true, box_Filler0.isPreferredSizeSet());
      assertEquals(false, box_Filler0.isCursorSet());
      assertEquals(false, box_Filler0.isFocusTraversalPolicyProvider());
      assertEquals(false, box_Filler0.isFocusTraversalPolicySet());
      assertEquals(true, box_Filler0.isEnabled());
      assertEquals(0, box_Filler0.getComponentCount());
      assertEquals(false, box_Filler0.getIgnoreRepaint());
      assertEquals(false, box_Filler0.isForegroundSet());
      assertEquals(true, box_Filler0.isMaximumSizeSet());
      assertEquals(false, box_Filler0.isFontSet());
      assertEquals(true, box_Filler0.isMinimumSizeSet());
      assertEquals(0, box_Filler0.countComponents());
      assertEquals(true, box_Filler0.isVisible());
      assertEquals(false, box_Filler0.isDisplayable());
      assertEquals(true, box_Filler0.getFocusTraversalKeysEnabled());
      assertEquals("java.awt.Dimension[width=0,height=0]", dimension0.toString());
      assertEquals(0.0, dimension0.getWidth(), 0.01D);
      assertEquals(0.0, dimension0.getHeight(), 0.01D);
      assertEquals(false, jTableHeader0.isDisplayable());
      assertEquals(true, jTableHeader0.isFontSet());
      assertEquals(1, jTableHeader0.getComponentCount());
      assertEquals(true, jTableHeader0.isBackgroundSet());
      assertEquals(false, jTableHeader0.getIgnoreRepaint());
      assertEquals(false, jTableHeader0.isPreferredSizeSet());
      assertEquals(false, jTableHeader0.isCursorSet());
      assertEquals(false, jTableHeader0.isFocusCycleRoot());
      assertEquals(false, jTableHeader0.isValid());
      assertEquals(false, jTableHeader0.isMinimumSizeSet());
      assertEquals(true, jTableHeader0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTableHeader0.isVisible());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicySet());
      assertEquals(false, jTableHeader0.isMaximumSizeSet());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTableHeader0.isEnabled());
      assertEquals(true, jTableHeader0.isForegroundSet());
      assertEquals(1, jTableHeader0.countComponents());
      assertEquals(false, jTableHeader0.isShowing());
      assertEquals(false, jTableHeader0.isLightweight());
      assertNotNull(box_Filler0);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      
      Color color0 = box_Filler0.getForeground();
      assertEquals(false, box_Filler0.isBackgroundSet());
      assertEquals(false, box_Filler0.isLightweight());
      assertEquals(false, box_Filler0.isValid());
      assertEquals(false, box_Filler0.isShowing());
      assertEquals(false, box_Filler0.isFocusCycleRoot());
      assertEquals(true, box_Filler0.isPreferredSizeSet());
      assertEquals(false, box_Filler0.isCursorSet());
      assertEquals(false, box_Filler0.isFocusTraversalPolicyProvider());
      assertEquals(false, box_Filler0.isFocusTraversalPolicySet());
      assertEquals(true, box_Filler0.isEnabled());
      assertEquals(0, box_Filler0.getComponentCount());
      assertEquals(false, box_Filler0.getIgnoreRepaint());
      assertEquals(false, box_Filler0.isForegroundSet());
      assertEquals(true, box_Filler0.isMaximumSizeSet());
      assertEquals(false, box_Filler0.isFontSet());
      assertEquals(true, box_Filler0.isMinimumSizeSet());
      assertEquals(0, box_Filler0.countComponents());
      assertEquals(true, box_Filler0.isVisible());
      assertEquals(false, box_Filler0.isDisplayable());
      assertEquals(true, box_Filler0.getFocusTraversalKeysEnabled());
      assertEquals("java.awt.Dimension[width=0,height=0]", dimension0.toString());
      assertEquals(0.0, dimension0.getWidth(), 0.01D);
      assertEquals(0.0, dimension0.getHeight(), 0.01D);
      assertEquals(false, jTableHeader0.isDisplayable());
      assertEquals(true, jTableHeader0.isFontSet());
      assertEquals(1, jTableHeader0.getComponentCount());
      assertEquals(true, jTableHeader0.isBackgroundSet());
      assertEquals(false, jTableHeader0.getIgnoreRepaint());
      assertEquals(false, jTableHeader0.isPreferredSizeSet());
      assertEquals(false, jTableHeader0.isCursorSet());
      assertEquals(false, jTableHeader0.isFocusCycleRoot());
      assertEquals(false, jTableHeader0.isValid());
      assertEquals(false, jTableHeader0.isMinimumSizeSet());
      assertEquals(true, jTableHeader0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTableHeader0.isVisible());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicySet());
      assertEquals(false, jTableHeader0.isMaximumSizeSet());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTableHeader0.isEnabled());
      assertEquals(true, jTableHeader0.isForegroundSet());
      assertEquals(1, jTableHeader0.countComponents());
      assertEquals(false, jTableHeader0.isShowing());
      assertEquals(false, jTableHeader0.isLightweight());
      assertNull(color0);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      
      ObjectOutputStream objectOutputStream0 = null;
      // Undeclared exception!
      try {
        SerialUtilities.writePaint((Paint) color0, objectOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test18() {}
//   @Test
//   public void test18()  throws Throwable  {
//       Color color0 = Color.GRAY;
//       assertEquals(1, color0.getTransparency());
//       assertEquals(128, color0.getBlue());
//       assertEquals(128, color0.getGreen());
//       assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
//       assertEquals(128, color0.getRed());
//       assertEquals(-8355712, color0.getRGB());
//       assertEquals(255, color0.getAlpha());
//       assertNotNull(color0);
//       
//       ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
//       assertEquals("", byteArrayOutputStream0.toString());
//       assertEquals(0, byteArrayOutputStream0.size());
//       assertNotNull(byteArrayOutputStream0);
//       
//       ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
//       assertEquals(4, byteArrayOutputStream0.size());
//       assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
//       assertNotNull(objectOutputStream0);
//       
//       SerialUtilities.writePaint((Paint) color0, objectOutputStream0);
//       assertEquals(621, byteArrayOutputStream0.size());
//       assertEquals("\uFFFD\uFFFD\u0000\u0005w\u0001\u0000vr\u0000\u000Ejava.awt.Color\u0001\uFFFD\u0017\uFFFD\u0010\uFFFD3u\u0002\u0000\u0005F\u0000\u0006falphaI\u0000\u0005valueL\u0000\u0002cst\u0000\u001BLjava/awt/color/ColorSpace;[\u0000\tfrgbvaluet\u0000\u0002[F[\u0000\u0006fvalueq\u0000~\u0000\u0002xpsq\u0000~\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFDsr\u0000\u001Djava.awt.color.ICC_ColorSpace/\uFFFD\uFFFD\uFFFD\uFFFDN\uFFFD\uFFFD\u0002\u0000\u0006Z\u0000\rneedScaleInit[\u0000\ndiffMinMaxq\u0000~\u0000\u0002[\u0000\rinvDiffMinMaxq\u0000~\u0000\u0002[\u0000\u0006maxValq\u0000~\u0000\u0002[\u0000\u0006minValq\u0000~\u0000\u0002L\u0000\u000BthisProfilet\u0000\u001CLjava/awt/color/ICC_Profile;xr\u0000\u0019java.awt.color.ColorSpace\uFFFDQT\uFFFDO[\uFFFD\uFFFD\u0002\u0000\u0002I\u0000\rnumComponentsI\u0000\u0004typexp\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0005\u0000ur\u0000\u0002[F\u000B\uFFFD\uFFFD\uFFFD\"\uFFFD\fB\u0002\u0000\u0000xp\u0000\u0000\u0000\u0003?\uFFFD\u0000\u0000?\uFFFD\u0000\u0000?\uFFFD\u0000\u0000uq\u0000~\u0000\t\u0000\u0000\u0000\u0003G\uFFFD\u0000G\uFFFD\u0000G\uFFFD\u0000uq\u0000~\u0000\t\u0000\u0000\u0000\u0003?\uFFFD\u0000\u0000?\uFFFD\u0000\u0000?\uFFFD\u0000\u0000uq\u0000~\u0000\t\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000sr\u0000\u001Djava.awt.color.ICC_ProfileRGBv\b\u0011\uFFFD\uFFFD\u01E7\u0006\u0002\u0000\u0000xr\u0000\u001Ajava.awt.color.ICC_Profile\uFFFDW\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDB\u0003\u0000\u0001I\u0000\u001FiccProfileSerializedDataVersionxp\u0000\u0000\u0000\u0001t\u0000\u0007CS_sRGBpxpp", byteArrayOutputStream0.toString());
//       assertEquals(1, color0.getTransparency());
//       assertEquals(128, color0.getBlue());
//       assertEquals(128, color0.getGreen());
//       assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
//       assertEquals(128, color0.getRed());
//       assertEquals(-8355712, color0.getRGB());
//       assertEquals(255, color0.getAlpha());
//   }

  @Test
  public void test19()  throws Throwable  {
      ObjectInputStream objectInputStream0 = null;
      // Undeclared exception!
      try {
        Paint paint0 = SerialUtilities.readPaint(objectInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertNotNull(ellipse2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      
      int int0 = 2589;
      PipedInputStream pipedInputStream0 = new PipedInputStream(int0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(false, pipedInputStream0.markSupported());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(false, pipedInputStream0.markSupported());
      assertNotNull(pipedOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) pipedOutputStream0);
      assertEquals(4, pipedInputStream0.available());
      assertEquals(false, pipedInputStream0.markSupported());
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeShape((Shape) ellipse2D_Double0, objectOutputStream0);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(47, pipedInputStream0.available());
      assertEquals(false, pipedInputStream0.markSupported());
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      
      ObjectInputStream objectInputStream0 = new ObjectInputStream((InputStream) pipedInputStream0);
      assertEquals(false, objectInputStream0.markSupported());
      assertEquals(43, pipedInputStream0.available());
      assertEquals(false, pipedInputStream0.markSupported());
      assertNotNull(objectInputStream0);
      
      Paint paint0 = SerialUtilities.readPaint(objectInputStream0);
      assertEquals(false, objectInputStream0.markSupported());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(false, pipedInputStream0.markSupported());
      assertNull(paint0);
  }

  @Test
  public void test21()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = SerialUtilities.isSerializable(class0);
      assertTrue(boolean0);
      
      Class<GradientPaint> class1 = GradientPaint.class;
      boolean boolean1 = SerialUtilities.isSerializable(class1);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }
}
