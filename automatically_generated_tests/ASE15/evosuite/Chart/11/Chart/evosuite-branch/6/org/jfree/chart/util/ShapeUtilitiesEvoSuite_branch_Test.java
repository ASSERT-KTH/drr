/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:43:52 GMT 2014
 */

package org.jfree.chart.util;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Arc2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Path2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JSlider;
import javax.swing.JSpinner;
import javax.swing.JToggleButton;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.plaf.BorderUIResource;
import javax.swing.text.DefaultCaret;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.ShapeUtilities;
import org.junit.runner.RunWith;

 
public class ShapeUtilitiesEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = (-343.0);
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double(double0, double0, double0, double0);
      assertEquals((-343.0), ellipse2D_Double0.x, 0.01D);
      assertEquals((-343.0), ellipse2D_Double0.y, 0.01D);
      assertEquals((-343.0), ellipse2D_Double0.width, 0.01D);
      assertEquals((-343.0), ellipse2D_Double0.height, 0.01D);
      assertEquals((-686.0), ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals((-686.0), ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals((-343.0), ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals((-343.0), ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals((-514.5), ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals((-514.5), ellipse2D_Double0.getCenterX(), 0.01D);
      assertNotNull(ellipse2D_Double0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)ellipse2D_Double0.getFrame();
      assertEquals((-343.0), rectangle2D_Double0.height, 0.01D);
      assertEquals((-343.0), rectangle2D_Double0.width, 0.01D);
      assertEquals((-343.0), rectangle2D_Double0.y, 0.01D);
      assertEquals((-343.0), rectangle2D_Double0.x, 0.01D);
      assertEquals((-343.0), ellipse2D_Double0.x, 0.01D);
      assertEquals((-343.0), ellipse2D_Double0.y, 0.01D);
      assertEquals((-343.0), ellipse2D_Double0.width, 0.01D);
      assertEquals((-343.0), ellipse2D_Double0.height, 0.01D);
      assertEquals((-686.0), rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals((-686.0), rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals((-514.5), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-343.0), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals((-343.0), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-514.5), rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-686.0), ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals((-686.0), ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals((-343.0), ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals((-343.0), ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals((-514.5), ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals((-514.5), ellipse2D_Double0.getCenterX(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      String string0 = "\"*E]g~v4p'GbGP#";
      boolean boolean0 = true;
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem(string0, boolean0);
      assertEquals(false, jCheckBoxMenuItem0.isDisplayable());
      assertEquals(0, jCheckBoxMenuItem0.countComponents());
      assertEquals(false, jCheckBoxMenuItem0.isFocusCycleRoot());
      assertEquals(true, jCheckBoxMenuItem0.isForegroundSet());
      assertEquals(true, jCheckBoxMenuItem0.isFontSet());
      assertEquals(false, jCheckBoxMenuItem0.isLightweight());
      assertEquals(false, jCheckBoxMenuItem0.isValid());
      assertEquals(false, jCheckBoxMenuItem0.isMinimumSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isCursorSet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(true, jCheckBoxMenuItem0.isBackgroundSet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBoxMenuItem0.isPreferredSizeSet());
      assertEquals(true, jCheckBoxMenuItem0.isVisible());
      assertEquals(false, jCheckBoxMenuItem0.isMaximumSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isShowing());
      assertEquals(true, jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(true, jCheckBoxMenuItem0.isEnabled());
      assertEquals(false, jCheckBoxMenuItem0.getIgnoreRepaint());
      assertEquals(0, jCheckBoxMenuItem0.getComponentCount());
      assertNotNull(jCheckBoxMenuItem0);
      
      Rectangle rectangle0 = jCheckBoxMenuItem0.bounds();
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(false, jCheckBoxMenuItem0.isDisplayable());
      assertEquals(0, jCheckBoxMenuItem0.countComponents());
      assertEquals(false, jCheckBoxMenuItem0.isFocusCycleRoot());
      assertEquals(true, jCheckBoxMenuItem0.isForegroundSet());
      assertEquals(true, jCheckBoxMenuItem0.isFontSet());
      assertEquals(false, jCheckBoxMenuItem0.isLightweight());
      assertEquals(false, jCheckBoxMenuItem0.isValid());
      assertEquals(false, jCheckBoxMenuItem0.isMinimumSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isCursorSet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(true, jCheckBoxMenuItem0.isBackgroundSet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBoxMenuItem0.isPreferredSizeSet());
      assertEquals(true, jCheckBoxMenuItem0.isVisible());
      assertEquals(false, jCheckBoxMenuItem0.isMaximumSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isShowing());
      assertEquals(true, jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(true, jCheckBoxMenuItem0.isEnabled());
      assertEquals(false, jCheckBoxMenuItem0.getIgnoreRepaint());
      assertEquals(0, jCheckBoxMenuItem0.getComponentCount());
      assertNotNull(rectangle0);
      
      boolean boolean1 = ShapeUtilities.intersects((Rectangle2D) rectangle2D_Double0, (Rectangle2D) rectangle0);
      assertEquals((-343.0), rectangle2D_Double0.height, 0.01D);
      assertEquals((-343.0), rectangle2D_Double0.width, 0.01D);
      assertEquals((-343.0), rectangle2D_Double0.y, 0.01D);
      assertEquals((-343.0), rectangle2D_Double0.x, 0.01D);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals((-343.0), ellipse2D_Double0.x, 0.01D);
      assertEquals((-343.0), ellipse2D_Double0.y, 0.01D);
      assertEquals((-343.0), ellipse2D_Double0.width, 0.01D);
      assertEquals((-343.0), ellipse2D_Double0.height, 0.01D);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals((-686.0), rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals((-686.0), rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals((-514.5), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-343.0), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals((-343.0), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-514.5), rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals((-686.0), ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals((-686.0), ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals((-343.0), ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals((-343.0), ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals((-514.5), ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals((-514.5), ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(false, jCheckBoxMenuItem0.isDisplayable());
      assertEquals(0, jCheckBoxMenuItem0.countComponents());
      assertEquals(false, jCheckBoxMenuItem0.isFocusCycleRoot());
      assertEquals(true, jCheckBoxMenuItem0.isForegroundSet());
      assertEquals(true, jCheckBoxMenuItem0.isFontSet());
      assertEquals(false, jCheckBoxMenuItem0.isLightweight());
      assertEquals(false, jCheckBoxMenuItem0.isValid());
      assertEquals(false, jCheckBoxMenuItem0.isMinimumSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isCursorSet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(true, jCheckBoxMenuItem0.isBackgroundSet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBoxMenuItem0.isPreferredSizeSet());
      assertEquals(true, jCheckBoxMenuItem0.isVisible());
      assertEquals(false, jCheckBoxMenuItem0.isMaximumSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isShowing());
      assertEquals(true, jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(true, jCheckBoxMenuItem0.isEnabled());
      assertEquals(false, jCheckBoxMenuItem0.getIgnoreRepaint());
      assertEquals(0, jCheckBoxMenuItem0.getComponentCount());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertNotNull(arc2D_Float0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      float float0 = 3183.728F;
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(arc2D_Float0.width, float0, arc2D_Float0.width, arc2D_Float0.y);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(3183.728F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(3183.72802734375, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(3183.72802734375, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(3183.72802734375, rectangle2D_Float0.getMinY(), 0.01D);
      assertNotNull(rectangle2D_Float0);
      
      boolean boolean0 = ShapeUtilities.intersects((Rectangle2D) rectangle2D_Float0, (Rectangle2D) rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(3183.728F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(3183.72802734375, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(3183.72802734375, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(3183.72802734375, rectangle2D_Float0.getMinY(), 0.01D);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertNotNull(ellipse2D_Double0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)ellipse2D_Double0.getBounds2D();
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      boolean boolean0 = ShapeUtilities.intersects((Rectangle2D) rectangle2D_Double0, (Rectangle2D) rectangle2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 5;
      JSlider jSlider0 = new JSlider(int0, int0);
      assertEquals(true, jSlider0.isFontSet());
      assertEquals(0, jSlider0.countComponents());
      assertEquals(true, jSlider0.getFocusTraversalKeysEnabled());
      assertEquals(true, jSlider0.isEnabled());
      assertEquals(false, jSlider0.isLightweight());
      assertEquals(false, jSlider0.isDisplayable());
      assertEquals(false, jSlider0.isCursorSet());
      assertEquals(0, jSlider0.getComponentCount());
      assertEquals(false, jSlider0.isMinimumSizeSet());
      assertEquals(true, jSlider0.isBackgroundSet());
      assertEquals(false, jSlider0.isFocusCycleRoot());
      assertEquals(false, jSlider0.isMaximumSizeSet());
      assertEquals(true, jSlider0.isForegroundSet());
      assertEquals(false, jSlider0.isValid());
      assertEquals(false, jSlider0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSlider0.isShowing());
      assertEquals(false, jSlider0.isFocusTraversalPolicySet());
      assertEquals(false, jSlider0.getIgnoreRepaint());
      assertEquals(false, jSlider0.isPreferredSizeSet());
      assertEquals(true, jSlider0.isVisible());
      assertNotNull(jSlider0);
      
      Rectangle rectangle0 = jSlider0.getBounds();
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, jSlider0.isFontSet());
      assertEquals(0, jSlider0.countComponents());
      assertEquals(true, jSlider0.getFocusTraversalKeysEnabled());
      assertEquals(true, jSlider0.isEnabled());
      assertEquals(false, jSlider0.isLightweight());
      assertEquals(false, jSlider0.isDisplayable());
      assertEquals(false, jSlider0.isCursorSet());
      assertEquals(0, jSlider0.getComponentCount());
      assertEquals(false, jSlider0.isMinimumSizeSet());
      assertEquals(true, jSlider0.isBackgroundSet());
      assertEquals(false, jSlider0.isFocusCycleRoot());
      assertEquals(false, jSlider0.isMaximumSizeSet());
      assertEquals(true, jSlider0.isForegroundSet());
      assertEquals(false, jSlider0.isValid());
      assertEquals(false, jSlider0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSlider0.isShowing());
      assertEquals(false, jSlider0.isFocusTraversalPolicySet());
      assertEquals(false, jSlider0.getIgnoreRepaint());
      assertEquals(false, jSlider0.isPreferredSizeSet());
      assertEquals(true, jSlider0.isVisible());
      assertNotNull(rectangle0);
      
      JSpinner jSpinner0 = new JSpinner();
      assertEquals(true, jSpinner0.isVisible());
      assertEquals(false, jSpinner0.isDisplayable());
      assertEquals(false, jSpinner0.getIgnoreRepaint());
      assertEquals(false, jSpinner0.isLightweight());
      assertEquals(false, jSpinner0.isFocusCycleRoot());
      assertEquals(true, jSpinner0.isBackgroundSet());
      assertEquals(false, jSpinner0.isValid());
      assertEquals(false, jSpinner0.isPreferredSizeSet());
      assertEquals(true, jSpinner0.isEnabled());
      assertEquals(3, jSpinner0.getComponentCount());
      assertEquals(false, jSpinner0.isCursorSet());
      assertEquals(false, jSpinner0.isMinimumSizeSet());
      assertEquals(false, jSpinner0.isFocusTraversalPolicyProvider());
      assertEquals(3, jSpinner0.countComponents());
      assertEquals(false, jSpinner0.isShowing());
      assertEquals(true, jSpinner0.isFontSet());
      assertEquals(true, jSpinner0.isForegroundSet());
      assertEquals(false, jSpinner0.isFocusTraversalPolicySet());
      assertEquals(false, jSpinner0.isMaximumSizeSet());
      assertEquals(true, jSpinner0.getFocusTraversalKeysEnabled());
      assertNotNull(jSpinner0);
      
      BorderUIResource.CompoundBorderUIResource borderUIResource_CompoundBorderUIResource0 = (BorderUIResource.CompoundBorderUIResource)jSpinner0.getBorder();
      assertEquals(true, jSpinner0.isVisible());
      assertEquals(false, jSpinner0.isDisplayable());
      assertEquals(false, jSpinner0.getIgnoreRepaint());
      assertEquals(false, jSpinner0.isLightweight());
      assertEquals(false, jSpinner0.isFocusCycleRoot());
      assertEquals(true, jSpinner0.isBackgroundSet());
      assertEquals(false, jSpinner0.isValid());
      assertEquals(false, jSpinner0.isPreferredSizeSet());
      assertEquals(true, jSpinner0.isEnabled());
      assertEquals(3, jSpinner0.getComponentCount());
      assertEquals(false, jSpinner0.isCursorSet());
      assertEquals(false, jSpinner0.isMinimumSizeSet());
      assertEquals(false, jSpinner0.isFocusTraversalPolicyProvider());
      assertEquals(3, jSpinner0.countComponents());
      assertEquals(false, jSpinner0.isShowing());
      assertEquals(true, jSpinner0.isFontSet());
      assertEquals(true, jSpinner0.isForegroundSet());
      assertEquals(false, jSpinner0.isFocusTraversalPolicySet());
      assertEquals(false, jSpinner0.isMaximumSizeSet());
      assertEquals(true, jSpinner0.getFocusTraversalKeysEnabled());
      assertNotNull(borderUIResource_CompoundBorderUIResource0);
      
      Rectangle rectangle1 = AbstractBorder.getInteriorRectangle((Component) jSlider0, (Border) borderUIResource_CompoundBorderUIResource0, rectangle0.x, int0, rectangle0.height, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(7, rectangle1.y);
      assertEquals((-4), rectangle1.width);
      assertEquals(2, rectangle1.x);
      assertEquals((-4), rectangle1.height);
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertEquals(true, jSpinner0.isVisible());
      assertEquals(false, jSpinner0.isDisplayable());
      assertEquals(false, jSpinner0.getIgnoreRepaint());
      assertEquals(false, jSpinner0.isLightweight());
      assertEquals(false, jSpinner0.isFocusCycleRoot());
      assertEquals(true, jSpinner0.isBackgroundSet());
      assertEquals(false, jSpinner0.isValid());
      assertEquals(false, jSpinner0.isPreferredSizeSet());
      assertEquals(true, jSpinner0.isEnabled());
      assertEquals(3, jSpinner0.getComponentCount());
      assertEquals(false, jSpinner0.isCursorSet());
      assertEquals(false, jSpinner0.isMinimumSizeSet());
      assertEquals(false, jSpinner0.isFocusTraversalPolicyProvider());
      assertEquals(3, jSpinner0.countComponents());
      assertEquals(false, jSpinner0.isShowing());
      assertEquals(true, jSpinner0.isFontSet());
      assertEquals(true, jSpinner0.isForegroundSet());
      assertEquals(false, jSpinner0.isFocusTraversalPolicySet());
      assertEquals(false, jSpinner0.isMaximumSizeSet());
      assertEquals(true, jSpinner0.getFocusTraversalKeysEnabled());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(5.0, rectangle1.getCenterY(), 0.01D);
      assertEquals((-4.0), rectangle1.getHeight(), 0.01D);
      assertEquals(3.0, rectangle1.getMaxY(), 0.01D);
      assertEquals((-4.0), rectangle1.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=2,y=7,width=-4,height=-4]", rectangle1.toString());
      assertEquals(7.0, rectangle1.getMinY(), 0.01D);
      assertEquals(true, rectangle1.isEmpty());
      assertEquals(7.0, rectangle1.getY(), 0.01D);
      assertEquals(2.0, rectangle1.getMinX(), 0.01D);
      assertEquals(2.0, rectangle1.getX(), 0.01D);
      assertEquals((-2.0), rectangle1.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01D);
      assertEquals(true, jSlider0.isFontSet());
      assertEquals(0, jSlider0.countComponents());
      assertEquals(true, jSlider0.getFocusTraversalKeysEnabled());
      assertEquals(true, jSlider0.isEnabled());
      assertEquals(false, jSlider0.isLightweight());
      assertEquals(false, jSlider0.isDisplayable());
      assertEquals(false, jSlider0.isCursorSet());
      assertEquals(0, jSlider0.getComponentCount());
      assertEquals(false, jSlider0.isMinimumSizeSet());
      assertEquals(true, jSlider0.isBackgroundSet());
      assertEquals(false, jSlider0.isFocusCycleRoot());
      assertEquals(false, jSlider0.isMaximumSizeSet());
      assertEquals(true, jSlider0.isForegroundSet());
      assertEquals(false, jSlider0.isValid());
      assertEquals(false, jSlider0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSlider0.isShowing());
      assertEquals(false, jSlider0.isFocusTraversalPolicySet());
      assertEquals(false, jSlider0.getIgnoreRepaint());
      assertEquals(false, jSlider0.isPreferredSizeSet());
      assertEquals(true, jSlider0.isVisible());
      assertNotNull(rectangle1);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle1, rectangle0);
      
      boolean boolean0 = ShapeUtilities.intersects((Rectangle2D) rectangle0, (Rectangle2D) rectangle1);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(7, rectangle1.y);
      assertEquals((-4), rectangle1.width);
      assertEquals(2, rectangle1.x);
      assertEquals((-4), rectangle1.height);
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertEquals(true, jSpinner0.isVisible());
      assertEquals(false, jSpinner0.isDisplayable());
      assertEquals(false, jSpinner0.getIgnoreRepaint());
      assertEquals(false, jSpinner0.isLightweight());
      assertEquals(false, jSpinner0.isFocusCycleRoot());
      assertEquals(true, jSpinner0.isBackgroundSet());
      assertEquals(false, jSpinner0.isValid());
      assertEquals(false, jSpinner0.isPreferredSizeSet());
      assertEquals(true, jSpinner0.isEnabled());
      assertEquals(3, jSpinner0.getComponentCount());
      assertEquals(false, jSpinner0.isCursorSet());
      assertEquals(false, jSpinner0.isMinimumSizeSet());
      assertEquals(false, jSpinner0.isFocusTraversalPolicyProvider());
      assertEquals(3, jSpinner0.countComponents());
      assertEquals(false, jSpinner0.isShowing());
      assertEquals(true, jSpinner0.isFontSet());
      assertEquals(true, jSpinner0.isForegroundSet());
      assertEquals(false, jSpinner0.isFocusTraversalPolicySet());
      assertEquals(false, jSpinner0.isMaximumSizeSet());
      assertEquals(true, jSpinner0.getFocusTraversalKeysEnabled());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(5.0, rectangle1.getCenterY(), 0.01D);
      assertEquals((-4.0), rectangle1.getHeight(), 0.01D);
      assertEquals(3.0, rectangle1.getMaxY(), 0.01D);
      assertEquals((-4.0), rectangle1.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=2,y=7,width=-4,height=-4]", rectangle1.toString());
      assertEquals(7.0, rectangle1.getMinY(), 0.01D);
      assertEquals(true, rectangle1.isEmpty());
      assertEquals(7.0, rectangle1.getY(), 0.01D);
      assertEquals(2.0, rectangle1.getMinX(), 0.01D);
      assertEquals(2.0, rectangle1.getX(), 0.01D);
      assertEquals((-2.0), rectangle1.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01D);
      assertEquals(true, jSlider0.isFontSet());
      assertEquals(0, jSlider0.countComponents());
      assertEquals(true, jSlider0.getFocusTraversalKeysEnabled());
      assertEquals(true, jSlider0.isEnabled());
      assertEquals(false, jSlider0.isLightweight());
      assertEquals(false, jSlider0.isDisplayable());
      assertEquals(false, jSlider0.isCursorSet());
      assertEquals(0, jSlider0.getComponentCount());
      assertEquals(false, jSlider0.isMinimumSizeSet());
      assertEquals(true, jSlider0.isBackgroundSet());
      assertEquals(false, jSlider0.isFocusCycleRoot());
      assertEquals(false, jSlider0.isMaximumSizeSet());
      assertEquals(true, jSlider0.isForegroundSet());
      assertEquals(false, jSlider0.isValid());
      assertEquals(false, jSlider0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSlider0.isShowing());
      assertEquals(false, jSlider0.isFocusTraversalPolicySet());
      assertEquals(false, jSlider0.getIgnoreRepaint());
      assertEquals(false, jSlider0.isPreferredSizeSet());
      assertEquals(true, jSlider0.isVisible());
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle1, rectangle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = 865.81199602931;
      float float0 = (-331.84967F);
      Line2D.Double line2D_Double0 = new Line2D.Double(double0, (double) float0, double0, double0);
      assertEquals(865.81199602931, line2D_Double0.y2, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.x1, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.x2, 0.01D);
      assertEquals((-331.84967041015625), line2D_Double0.y1, 0.01D);
      assertNotNull(line2D_Double0);
      
      Rectangle rectangle0 = line2D_Double0.getBounds();
      assertEquals(1, rectangle0.width);
      assertEquals(865, rectangle0.x);
      assertEquals((-332), rectangle0.y);
      assertEquals(1198, rectangle0.height);
      assertEquals(865.81199602931, line2D_Double0.y2, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.x1, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.x2, 0.01D);
      assertEquals((-331.84967041015625), line2D_Double0.y1, 0.01D);
      assertEquals(267.0, rectangle0.getCenterY(), 0.01D);
      assertEquals((-332.0), rectangle0.getY(), 0.01D);
      assertEquals(866.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(865.0, rectangle0.getMinX(), 0.01D);
      assertEquals((-332.0), rectangle0.getMinY(), 0.01D);
      assertEquals(866.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(865.0, rectangle0.getX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=865,y=-332,width=1,height=1198]", rectangle0.toString());
      assertEquals(1198.0, rectangle0.getHeight(), 0.01D);
      assertEquals(1.0, rectangle0.getWidth(), 0.01D);
      assertEquals(false, rectangle0.isEmpty());
      assertEquals(865.5, rectangle0.getCenterX(), 0.01D);
      assertNotNull(rectangle0);
      
      JSlider jSlider0 = new JSlider();
      assertEquals(false, jSlider0.isMaximumSizeSet());
      assertEquals(0, jSlider0.countComponents());
      assertEquals(true, jSlider0.isVisible());
      assertEquals(false, jSlider0.isCursorSet());
      assertEquals(0, jSlider0.getComponentCount());
      assertEquals(false, jSlider0.isLightweight());
      assertEquals(true, jSlider0.isForegroundSet());
      assertEquals(true, jSlider0.isEnabled());
      assertEquals(false, jSlider0.isPreferredSizeSet());
      assertEquals(false, jSlider0.isFocusCycleRoot());
      assertEquals(false, jSlider0.isValid());
      assertEquals(false, jSlider0.isDisplayable());
      assertEquals(false, jSlider0.isFocusTraversalPolicySet());
      assertEquals(true, jSlider0.isFontSet());
      assertEquals(false, jSlider0.isShowing());
      assertEquals(true, jSlider0.isBackgroundSet());
      assertEquals(true, jSlider0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSlider0.getIgnoreRepaint());
      assertEquals(false, jSlider0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSlider0.isMinimumSizeSet());
      assertNotNull(jSlider0);
      
      Rectangle rectangle1 = jSlider0.getBounds();
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.x);
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertEquals(false, jSlider0.isMaximumSizeSet());
      assertEquals(0, jSlider0.countComponents());
      assertEquals(true, jSlider0.isVisible());
      assertEquals(false, jSlider0.isCursorSet());
      assertEquals(0, jSlider0.getComponentCount());
      assertEquals(false, jSlider0.isLightweight());
      assertEquals(true, jSlider0.isForegroundSet());
      assertEquals(true, jSlider0.isEnabled());
      assertEquals(false, jSlider0.isPreferredSizeSet());
      assertEquals(false, jSlider0.isFocusCycleRoot());
      assertEquals(false, jSlider0.isValid());
      assertEquals(false, jSlider0.isDisplayable());
      assertEquals(false, jSlider0.isFocusTraversalPolicySet());
      assertEquals(true, jSlider0.isFontSet());
      assertEquals(false, jSlider0.isShowing());
      assertEquals(true, jSlider0.isBackgroundSet());
      assertEquals(true, jSlider0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSlider0.getIgnoreRepaint());
      assertEquals(false, jSlider0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSlider0.isMinimumSizeSet());
      assertEquals(true, rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getWidth(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle1.getMinX(), 0.01D);
      assertEquals(0.0, rectangle1.getHeight(), 0.01D);
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertEquals(0.0, rectangle1.getX(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle1.toString());
      assertNotNull(rectangle1);
      assertNotSame(rectangle1, rectangle0);
      
      boolean boolean0 = ShapeUtilities.contains((Rectangle2D) rectangle1, (Rectangle2D) rectangle0);
      assertEquals(1, rectangle0.width);
      assertEquals(865, rectangle0.x);
      assertEquals((-332), rectangle0.y);
      assertEquals(1198, rectangle0.height);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.x);
      assertEquals(865.81199602931, line2D_Double0.y2, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.x1, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.x2, 0.01D);
      assertEquals((-331.84967041015625), line2D_Double0.y1, 0.01D);
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertEquals(267.0, rectangle0.getCenterY(), 0.01D);
      assertEquals((-332.0), rectangle0.getY(), 0.01D);
      assertEquals(866.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(865.0, rectangle0.getMinX(), 0.01D);
      assertEquals((-332.0), rectangle0.getMinY(), 0.01D);
      assertEquals(866.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(865.0, rectangle0.getX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=865,y=-332,width=1,height=1198]", rectangle0.toString());
      assertEquals(1198.0, rectangle0.getHeight(), 0.01D);
      assertEquals(1.0, rectangle0.getWidth(), 0.01D);
      assertEquals(false, rectangle0.isEmpty());
      assertEquals(865.5, rectangle0.getCenterX(), 0.01D);
      assertEquals(false, jSlider0.isMaximumSizeSet());
      assertEquals(0, jSlider0.countComponents());
      assertEquals(true, jSlider0.isVisible());
      assertEquals(false, jSlider0.isCursorSet());
      assertEquals(0, jSlider0.getComponentCount());
      assertEquals(false, jSlider0.isLightweight());
      assertEquals(true, jSlider0.isForegroundSet());
      assertEquals(true, jSlider0.isEnabled());
      assertEquals(false, jSlider0.isPreferredSizeSet());
      assertEquals(false, jSlider0.isFocusCycleRoot());
      assertEquals(false, jSlider0.isValid());
      assertEquals(false, jSlider0.isDisplayable());
      assertEquals(false, jSlider0.isFocusTraversalPolicySet());
      assertEquals(true, jSlider0.isFontSet());
      assertEquals(false, jSlider0.isShowing());
      assertEquals(true, jSlider0.isBackgroundSet());
      assertEquals(true, jSlider0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSlider0.getIgnoreRepaint());
      assertEquals(false, jSlider0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSlider0.isMinimumSizeSet());
      assertEquals(true, rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getWidth(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle1.getMinX(), 0.01D);
      assertEquals(0.0, rectangle1.getHeight(), 0.01D);
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertEquals(0.0, rectangle1.getX(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle1.toString());
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle1, rectangle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = 865.81199602931;
      float float0 = (-331.84967F);
      Line2D.Double line2D_Double0 = new Line2D.Double(double0, (double) float0, double0, double0);
      assertEquals(865.81199602931, line2D_Double0.x1, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.x2, 0.01D);
      assertEquals((-331.84967041015625), line2D_Double0.y1, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.y2, 0.01D);
      assertNotNull(line2D_Double0);
      
      Rectangle rectangle0 = line2D_Double0.getBounds();
      assertEquals(865.81199602931, line2D_Double0.x1, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.x2, 0.01D);
      assertEquals((-331.84967041015625), line2D_Double0.y1, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.y2, 0.01D);
      assertEquals(865, rectangle0.x);
      assertEquals(1198, rectangle0.height);
      assertEquals((-332), rectangle0.y);
      assertEquals(1, rectangle0.width);
      assertEquals(866.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(866.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(865.0, rectangle0.getX(), 0.01D);
      assertEquals(267.0, rectangle0.getCenterY(), 0.01D);
      assertEquals((-332.0), rectangle0.getMinY(), 0.01D);
      assertEquals(865.5, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=865,y=-332,width=1,height=1198]", rectangle0.toString());
      assertEquals(false, rectangle0.isEmpty());
      assertEquals((-332.0), rectangle0.getY(), 0.01D);
      assertEquals(1.0, rectangle0.getWidth(), 0.01D);
      assertEquals(865.0, rectangle0.getMinX(), 0.01D);
      assertEquals(1198.0, rectangle0.getHeight(), 0.01D);
      assertNotNull(rectangle0);
      
      boolean boolean0 = ShapeUtilities.contains((Rectangle2D) rectangle0, (Rectangle2D) rectangle0);
      assertEquals(865.81199602931, line2D_Double0.x1, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.x2, 0.01D);
      assertEquals((-331.84967041015625), line2D_Double0.y1, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.y2, 0.01D);
      assertEquals(865, rectangle0.x);
      assertEquals(1198, rectangle0.height);
      assertEquals((-332), rectangle0.y);
      assertEquals(1, rectangle0.width);
      assertEquals(866.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(866.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(865.0, rectangle0.getX(), 0.01D);
      assertEquals(267.0, rectangle0.getCenterY(), 0.01D);
      assertEquals((-332.0), rectangle0.getMinY(), 0.01D);
      assertEquals(865.5, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=865,y=-332,width=1,height=1198]", rectangle0.toString());
      assertEquals(false, rectangle0.isEmpty());
      assertEquals((-332.0), rectangle0.getY(), 0.01D);
      assertEquals(1.0, rectangle0.getWidth(), 0.01D);
      assertEquals(865.0, rectangle0.getMinX(), 0.01D);
      assertEquals(1198.0, rectangle0.getHeight(), 0.01D);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = 0.0;
      float float0 = (-331.5736F);
      Line2D.Double line2D_Double0 = new Line2D.Double((double) float0, (double) float0, double0, (double) float0);
      assertEquals((-331.5736083984375), line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals((-331.5736083984375), line2D_Double0.y2, 0.01D);
      assertEquals((-331.5736083984375), line2D_Double0.x1, 0.01D);
      assertNotNull(line2D_Double0);
      
      Rectangle rectangle0 = line2D_Double0.getBounds();
      assertEquals(332, rectangle0.width);
      assertEquals(1, rectangle0.height);
      assertEquals((-332), rectangle0.x);
      assertEquals((-332), rectangle0.y);
      assertEquals((-331.5736083984375), line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals((-331.5736083984375), line2D_Double0.y2, 0.01D);
      assertEquals((-331.5736083984375), line2D_Double0.x1, 0.01D);
      assertEquals((-332.0), rectangle0.getMinX(), 0.01D);
      assertEquals((-166.0), rectangle0.getCenterX(), 0.01D);
      assertEquals((-332.0), rectangle0.getMinY(), 0.01D);
      assertEquals(332.0, rectangle0.getWidth(), 0.01D);
      assertEquals((-331.5), rectangle0.getCenterY(), 0.01D);
      assertEquals(false, rectangle0.isEmpty());
      assertEquals(1.0, rectangle0.getHeight(), 0.01D);
      assertEquals((-331.0), rectangle0.getMaxY(), 0.01D);
      assertEquals((-332.0), rectangle0.getY(), 0.01D);
      assertEquals((-332.0), rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=-332,y=-332,width=332,height=1]", rectangle0.toString());
      assertNotNull(rectangle0);
      
      JSlider jSlider0 = new JSlider();
      assertEquals(false, jSlider0.isMaximumSizeSet());
      assertEquals(true, jSlider0.isForegroundSet());
      assertEquals(false, jSlider0.isMinimumSizeSet());
      assertEquals(0, jSlider0.countComponents());
      assertEquals(false, jSlider0.isDisplayable());
      assertEquals(0, jSlider0.getComponentCount());
      assertEquals(false, jSlider0.isFocusCycleRoot());
      assertEquals(true, jSlider0.isVisible());
      assertEquals(true, jSlider0.isFontSet());
      assertEquals(false, jSlider0.isValid());
      assertEquals(true, jSlider0.isBackgroundSet());
      assertEquals(false, jSlider0.isCursorSet());
      assertEquals(false, jSlider0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSlider0.isShowing());
      assertEquals(false, jSlider0.isLightweight());
      assertEquals(false, jSlider0.isPreferredSizeSet());
      assertEquals(false, jSlider0.isFocusTraversalPolicySet());
      assertEquals(true, jSlider0.getFocusTraversalKeysEnabled());
      assertEquals(true, jSlider0.isEnabled());
      assertEquals(false, jSlider0.getIgnoreRepaint());
      assertNotNull(jSlider0);
      
      Rectangle rectangle1 = jSlider0.getBounds();
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.height);
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertEquals(0.0, rectangle1.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle1.toString());
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals(0.0, rectangle1.getHeight(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle1.getX(), 0.01D);
      assertEquals(true, rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getMinX(), 0.01D);
      assertEquals(0.0, rectangle1.getWidth(), 0.01D);
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01D);
      assertEquals(false, jSlider0.isMaximumSizeSet());
      assertEquals(true, jSlider0.isForegroundSet());
      assertEquals(false, jSlider0.isMinimumSizeSet());
      assertEquals(0, jSlider0.countComponents());
      assertEquals(false, jSlider0.isDisplayable());
      assertEquals(0, jSlider0.getComponentCount());
      assertEquals(false, jSlider0.isFocusCycleRoot());
      assertEquals(true, jSlider0.isVisible());
      assertEquals(true, jSlider0.isFontSet());
      assertEquals(false, jSlider0.isValid());
      assertEquals(true, jSlider0.isBackgroundSet());
      assertEquals(false, jSlider0.isCursorSet());
      assertEquals(false, jSlider0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSlider0.isShowing());
      assertEquals(false, jSlider0.isLightweight());
      assertEquals(false, jSlider0.isPreferredSizeSet());
      assertEquals(false, jSlider0.isFocusTraversalPolicySet());
      assertEquals(true, jSlider0.getFocusTraversalKeysEnabled());
      assertEquals(true, jSlider0.isEnabled());
      assertEquals(false, jSlider0.getIgnoreRepaint());
      assertNotNull(rectangle1);
      assertNotSame(rectangle1, rectangle0);
      
      boolean boolean0 = ShapeUtilities.contains((Rectangle2D) rectangle1, (Rectangle2D) rectangle0);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.height);
      assertEquals(332, rectangle0.width);
      assertEquals(1, rectangle0.height);
      assertEquals((-332), rectangle0.x);
      assertEquals((-332), rectangle0.y);
      assertEquals((-331.5736083984375), line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals((-331.5736083984375), line2D_Double0.y2, 0.01D);
      assertEquals((-331.5736083984375), line2D_Double0.x1, 0.01D);
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertEquals(0.0, rectangle1.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle1.toString());
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals(0.0, rectangle1.getHeight(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle1.getX(), 0.01D);
      assertEquals(true, rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getMinX(), 0.01D);
      assertEquals(0.0, rectangle1.getWidth(), 0.01D);
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01D);
      assertEquals(false, jSlider0.isMaximumSizeSet());
      assertEquals(true, jSlider0.isForegroundSet());
      assertEquals(false, jSlider0.isMinimumSizeSet());
      assertEquals(0, jSlider0.countComponents());
      assertEquals(false, jSlider0.isDisplayable());
      assertEquals(0, jSlider0.getComponentCount());
      assertEquals(false, jSlider0.isFocusCycleRoot());
      assertEquals(true, jSlider0.isVisible());
      assertEquals(true, jSlider0.isFontSet());
      assertEquals(false, jSlider0.isValid());
      assertEquals(true, jSlider0.isBackgroundSet());
      assertEquals(false, jSlider0.isCursorSet());
      assertEquals(false, jSlider0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSlider0.isShowing());
      assertEquals(false, jSlider0.isLightweight());
      assertEquals(false, jSlider0.isPreferredSizeSet());
      assertEquals(false, jSlider0.isFocusTraversalPolicySet());
      assertEquals(true, jSlider0.getFocusTraversalKeysEnabled());
      assertEquals(true, jSlider0.isEnabled());
      assertEquals(false, jSlider0.getIgnoreRepaint());
      assertEquals((-332.0), rectangle0.getMinX(), 0.01D);
      assertEquals((-166.0), rectangle0.getCenterX(), 0.01D);
      assertEquals((-332.0), rectangle0.getMinY(), 0.01D);
      assertEquals(332.0, rectangle0.getWidth(), 0.01D);
      assertEquals((-331.5), rectangle0.getCenterY(), 0.01D);
      assertEquals(false, rectangle0.isEmpty());
      assertEquals(1.0, rectangle0.getHeight(), 0.01D);
      assertEquals((-331.0), rectangle0.getMaxY(), 0.01D);
      assertEquals((-332.0), rectangle0.getY(), 0.01D);
      assertEquals((-332.0), rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=-332,y=-332,width=332,height=1]", rectangle0.toString());
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle0, rectangle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = 0.0;
      float float0 = (-331.5736F);
      Line2D.Double line2D_Double0 = new Line2D.Double((double) float0, double0, double0, double0);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals((-331.5736083984375), line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertNotNull(line2D_Double0);
      
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createLineRegion((Line2D) line2D_Double0, float0);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals((-331.5736083984375), line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = 865.81199602931;
      float float0 = (-331.84967F);
      Line2D.Double line2D_Double0 = new Line2D.Double(double0, (double) float0, double0, double0);
      assertEquals(865.81199602931, line2D_Double0.x1, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.x2, 0.01D);
      assertEquals((-331.84967041015625), line2D_Double0.y1, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.y2, 0.01D);
      assertNotNull(line2D_Double0);
      
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createLineRegion((Line2D) line2D_Double0, float0);
      assertEquals(865.81199602931, line2D_Double0.x1, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.x2, 0.01D);
      assertEquals((-331.84967041015625), line2D_Double0.y1, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.y2, 0.01D);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = 0.0;
      Point2D.Double point2D_Double0 = new Point2D.Double(double0, double0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertNotNull(point2D_Double0);
      
      Arc2D arc2D0 = null;
      float float0 = 0.0F;
      Shape shape0 = ShapeUtilities.rotateShape((Shape) arc2D0, point2D_Double0.x, float0, float0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertNull(shape0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      float float0 = 58.0F;
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float(float0, float0, float0, float0);
      assertEquals(58.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(58.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(58.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(58.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(87.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(87.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(58.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(58.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(116.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(116.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertNotNull(ellipse2D_Float0);
      
      RectangleAnchor rectangleAnchor0 = null;
      // Undeclared exception!
      try {
        Shape shape0 = ShapeUtilities.createTranslatedShape((Shape) ellipse2D_Float0, rectangleAnchor0, (double) ellipse2D_Float0.y, (double) float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertNotNull(ellipse2D_Float0);
      
      Shape shape0 = null;
      Shape shape1 = ShapeUtilities.clone(shape0);
      assertNull(shape1);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      assertEquals("RectangleAnchor.BOTTOM_RIGHT", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      // Undeclared exception!
      try {
        Shape shape2 = ShapeUtilities.createTranslatedShape(shape1, rectangleAnchor0, (double) ellipse2D_Float0.x, (double) ellipse2D_Float0.width);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertNotNull(arc2D_Float0);
      
      Line2D.Float line2D_Float0 = new Line2D.Float(arc2D_Float0.extent, arc2D_Float0.y, arc2D_Float0.y, arc2D_Float0.y);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertNotNull(line2D_Float0);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      assertEquals("RectangleAnchor.RIGHT", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      Path2D.Double path2D_Double0 = (Path2D.Double)ShapeUtilities.createTranslatedShape((Shape) line2D_Float0, rectangleAnchor0, (double) arc2D_Float0.extent, (double) line2D_Float0.x2);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(1, path2D_Double0.getWindingRule());
      assertEquals("RectangleAnchor.RIGHT", rectangleAnchor0.toString());
      assertNotNull(path2D_Double0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Ellipse2D ellipse2D0 = null;
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertNotNull(ellipse2D_Double0);
      
      // Undeclared exception!
      try {
        Shape shape0 = ShapeUtilities.createTranslatedShape((Shape) ellipse2D0, ellipse2D_Double0.width, ellipse2D_Double0.x);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      float float0 = 3010.4436F;
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createDownTriangle(float0);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      Path2D.Double path2D_Double0 = (Path2D.Double)ShapeUtilities.createTranslatedShape((Shape) generalPath0, (double) float0, (double) float0);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(1, path2D_Double0.getWindingRule());
      assertNotNull(path2D_Double0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      float float0 = 1377.8F;
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createUpTriangle(float0);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      GeneralPath generalPath1 = (GeneralPath)ShapeUtilities.createDiagonalCross(float0, float0);
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertEquals(1, generalPath1.getWindingRule());
      assertNotNull(generalPath1);
      assertNotSame(generalPath1, generalPath0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath1, (Shape) generalPath0);
      assertFalse(generalPath0.equals((Object)generalPath1));
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(1, generalPath1.getWindingRule());
      assertNotSame(generalPath0, generalPath1);
      assertNotSame(generalPath1, generalPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 1;
      DefaultCaret defaultCaret0 = new DefaultCaret();
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.width);
      assertEquals(true, defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01D);
      assertNotNull(defaultCaret0);
      
      GeneralPath generalPath0 = new GeneralPath(defaultCaret0.height, int0);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, generalPath0.getWindingRule());
      assertEquals(true, defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01D);
      assertNotNull(generalPath0);
      
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath0);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, generalPath0.getWindingRule());
      assertEquals(true, defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01D);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertNotNull(ellipse2D_Float0);
      
      GeneralPath generalPath0 = new GeneralPath((Shape) ellipse2D_Float0);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      GeneralPath generalPath1 = new GeneralPath();
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertEquals(1, generalPath1.getWindingRule());
      assertNotNull(generalPath1);
      assertNotSame(generalPath1, generalPath0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath1, (Shape) generalPath0);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertFalse(generalPath0.equals((Object)generalPath1));
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(1, generalPath1.getWindingRule());
      assertNotSame(generalPath0, generalPath1);
      assertNotSame(generalPath1, generalPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertNotNull(ellipse2D_Float0);
      
      GeneralPath generalPath0 = new GeneralPath((Shape) ellipse2D_Float0);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertNotNull(generalPath0);
      
      DefaultCaret defaultCaret0 = new DefaultCaret();
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01D);
      assertEquals(true, defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01D);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getX(), 0.01D);
      assertNotNull(defaultCaret0);
      
      GeneralPath generalPath1 = new GeneralPath(defaultCaret0.width, defaultCaret0.x);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.x);
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertEquals(0, generalPath1.getWindingRule());
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01D);
      assertEquals(true, defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01D);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getX(), 0.01D);
      assertNotNull(generalPath1);
      assertNotSame(generalPath1, generalPath0);
      
      boolean boolean0 = ShapeUtilities.equal(generalPath1, generalPath0);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertFalse(generalPath0.equals((Object)generalPath1));
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0, generalPath1.getWindingRule());
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01D);
      assertEquals(true, defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01D);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertNotSame(generalPath0, generalPath1);
      assertNotSame(generalPath1, generalPath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GeneralPath generalPath0 = null;
      int int0 = 0;
      GeneralPath generalPath1 = new GeneralPath(int0, int0);
      assertEquals(0, generalPath1.getWindingRule());
      assertNotNull(generalPath1);
      
      boolean boolean0 = ShapeUtilities.equal(generalPath1, generalPath0);
      assertEquals(0, generalPath1.getWindingRule());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GeneralPath generalPath0 = null;
      int int0 = 0;
      GeneralPath generalPath1 = new GeneralPath(int0, int0);
      assertEquals(0, generalPath1.getWindingRule());
      assertNotNull(generalPath1);
      
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath1);
      assertEquals(0, generalPath1.getWindingRule());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GeneralPath generalPath0 = null;
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      Polygon polygon0 = new Polygon(intArray0, intArray0, int0);
      assertEquals(0, polygon0.npoints);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(polygon0);
      
      Polygon polygon1 = new Polygon();
      assertEquals(0, polygon1.npoints);
      assertFalse(polygon1.equals((Object)polygon0));
      assertNotNull(polygon1);
      assertNotSame(polygon1, polygon0);
      
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon1);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, polygon1.npoints);
      assertFalse(polygon0.equals((Object)polygon1));
      assertFalse(polygon1.equals((Object)polygon0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotSame(polygon0, polygon1);
      assertNotSame(polygon1, polygon0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 6;
      Polygon polygon0 = new Polygon(intArray0, intArray0, int0);
      assertEquals(6, polygon0.npoints);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(polygon0);
      
      Polygon polygon1 = new Polygon();
      assertEquals(0, polygon1.npoints);
      assertFalse(polygon1.equals((Object)polygon0));
      assertNotNull(polygon1);
      assertNotSame(polygon1, polygon0);
      
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon1);
      assertEquals(0, polygon1.npoints);
      assertEquals(6, polygon0.npoints);
      assertFalse(polygon1.equals((Object)polygon0));
      assertFalse(polygon0.equals((Object)polygon1));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotSame(polygon1, polygon0);
      assertNotSame(polygon0, polygon1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 0;
      Polygon polygon0 = new Polygon(intArray0, intArray0, int0);
      assertEquals(0, polygon0.npoints);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(polygon0);
      
      Polygon polygon1 = null;
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon1);
      assertEquals(0, polygon0.npoints);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Polygon polygon0 = null;
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Polygon polygon0 = null;
      Polygon polygon1 = new Polygon();
      assertEquals(0, polygon1.npoints);
      assertNotNull(polygon1);
      
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon1);
      assertEquals(0, polygon1.npoints);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertNotNull(line2D_Double0);
      
      float float0 = 0.0F;
      int int0 = 0;
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(line2D_Double0.y2, line2D_Double0.y1, line2D_Double0.y2, (double) float0, line2D_Double0.y1, line2D_Double0.x2, int0);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertNotNull(arc2D_Double0);
      
      int int1 = 1;
      Arc2D.Float arc2D_Float0 = new Arc2D.Float(int1);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertFalse(int1 == int0);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(1, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertNotNull(arc2D_Float0);
      
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Double0, (Arc2D) arc2D_Float0);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(1, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 0;
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertNotNull(ellipse2D_Double0);
      
      Arc2D.Float arc2D_Float0 = new Arc2D.Float(int0);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertNotNull(arc2D_Float0);
      
      float float0 = (-795.7955F);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertNotNull(defaultTreeCellRenderer0);
      
      Rectangle rectangle0 = defaultTreeCellRenderer0.getBounds();
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertNotNull(rectangle0);
      
      arc2D_Float0.setArc((Rectangle2D) rectangle0, ellipse2D_Double0.width, (double) float0, rectangle0.x);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals((-795.7955F), arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      
      Arc2D.Double arc2D_Double0 = new Arc2D.Double((Rectangle2D) rectangle0, (double) arc2D_Float0.y, (double) arc2D_Float0.start, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals((-795.7955F), arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertNotNull(arc2D_Double0);
      
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Double0, (Arc2D) arc2D_Float0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals((-795.7955F), arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 0;
      Arc2D.Float arc2D_Float0 = new Arc2D.Float(int0);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertNotNull(arc2D_Float0);
      
      double double0 = (-2815.489778);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double((double) arc2D_Float0.extent, double0, (double) arc2D_Float0.width, (double) arc2D_Float0.extent, (double) arc2D_Float0.x, (double) arc2D_Float0.y, int0);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals((-2815.489778), arc2D_Double0.y, 0.01D);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals((-2815.489778), arc2D_Double0.getMaxY(), 0.01D);
      assertEquals((-2815.489778), arc2D_Double0.getMinY(), 0.01D);
      assertEquals((-2815.489778), arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertNotNull(arc2D_Double0);
      
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Float0, (Arc2D) arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals((-2815.489778), arc2D_Double0.y, 0.01D);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals((-2815.489778), arc2D_Double0.getMaxY(), 0.01D);
      assertEquals((-2815.489778), arc2D_Double0.getMinY(), 0.01D);
      assertEquals((-2815.489778), arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertNotNull(arc2D_Float0);
      
      Arc2D.Float arc2D_Float1 = null;
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Float0, (Arc2D) arc2D_Float1);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Arc2D arc2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(arc2D0, arc2D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      float float0 = 7.454195F;
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float(float0, float0, float0, float0);
      assertEquals(7.454195F, ellipse2D_Float0.y, 0.01F);
      assertEquals(7.454195F, ellipse2D_Float0.x, 0.01F);
      assertEquals(7.454195F, ellipse2D_Float0.width, 0.01F);
      assertEquals(7.454195F, ellipse2D_Float0.height, 0.01F);
      assertEquals(7.454195022583008, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(7.454195022583008, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(14.908390045166016, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(14.908390045166016, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(11.181292533874512, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(11.181292533874512, ellipse2D_Float0.getCenterY(), 0.01D);
      assertNotNull(ellipse2D_Float0);
      
      double double0 = Double.NaN;
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double((double) ellipse2D_Float0.height, double0, (double) ellipse2D_Float0.y, (double) float0);
      assertEquals(7.454195F, ellipse2D_Float0.y, 0.01F);
      assertEquals(7.454195F, ellipse2D_Float0.x, 0.01F);
      assertEquals(7.454195F, ellipse2D_Float0.width, 0.01F);
      assertEquals(7.454195F, ellipse2D_Float0.height, 0.01F);
      assertEquals(7.454195022583008, ellipse2D_Double0.x, 0.01D);
      assertEquals(7.454195022583008, ellipse2D_Double0.width, 0.01D);
      assertEquals(7.454195022583008, ellipse2D_Double0.height, 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.y, 0.01D);
      assertEquals(7.454195022583008, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(7.454195022583008, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(14.908390045166016, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(14.908390045166016, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(11.181292533874512, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(11.181292533874512, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(7.454195022583008, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(11.181292533874512, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(14.908390045166016, ellipse2D_Double0.getMaxX(), 0.01D);
      assertNotNull(ellipse2D_Double0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) ellipse2D_Double0, (Shape) ellipse2D_Float0);
      assertEquals(7.454195F, ellipse2D_Float0.y, 0.01F);
      assertEquals(7.454195F, ellipse2D_Float0.x, 0.01F);
      assertEquals(7.454195F, ellipse2D_Float0.width, 0.01F);
      assertEquals(7.454195F, ellipse2D_Float0.height, 0.01F);
      assertEquals(7.454195022583008, ellipse2D_Double0.x, 0.01D);
      assertEquals(7.454195022583008, ellipse2D_Double0.width, 0.01D);
      assertEquals(7.454195022583008, ellipse2D_Double0.height, 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.y, 0.01D);
      assertEquals(7.454195022583008, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(7.454195022583008, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(14.908390045166016, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(14.908390045166016, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(11.181292533874512, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(11.181292533874512, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(7.454195022583008, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(11.181292533874512, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(14.908390045166016, ellipse2D_Double0.getMaxX(), 0.01D);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertNotNull(ellipse2D_Double0);
      
      Ellipse2D ellipse2D0 = null;
      boolean boolean0 = ShapeUtilities.equal((Ellipse2D) ellipse2D_Double0, ellipse2D0);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      float float0 = 58.0F;
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float(float0, float0, float0, float0);
      assertEquals(58.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(58.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(58.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(58.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(87.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(116.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(116.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(87.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(58.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(58.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertNotNull(ellipse2D_Float0);
      
      Ellipse2D.Float ellipse2D_Float1 = null;
      boolean boolean0 = ShapeUtilities.equal((Ellipse2D) ellipse2D_Float1, (Ellipse2D) ellipse2D_Float0);
      assertEquals(58.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(58.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(58.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(58.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(87.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(116.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(116.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(87.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(58.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(58.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Ellipse2D ellipse2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(ellipse2D0, ellipse2D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertNotNull(line2D_Double0);
      
      double double0 = Double.NaN;
      line2D_Double0.x2 = double0;
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(Double.NaN, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) line2D_Double0, (Shape) line2D_Double0);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(Double.NaN, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertNotNull(line2D_Double0);
      
      double double0 = Double.NaN;
      line2D_Double0.y1 = double0;
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(Double.NaN, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) line2D_Double0, (Shape) line2D_Double0);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(Double.NaN, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Line2D line2D0 = null;
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertNotNull(line2D_Double0);
      
      boolean boolean0 = ShapeUtilities.equal((Line2D) line2D_Double0, line2D0);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Line2D line2D0 = null;
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertNotNull(line2D_Double0);
      
      boolean boolean0 = ShapeUtilities.equal(line2D0, (Line2D) line2D_Double0);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Line2D line2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(line2D0, line2D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertNotNull(ellipse2D_Float0);
      
      GeneralPath generalPath0 = new GeneralPath((Shape) ellipse2D_Float0);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertNotNull(generalPath0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath0, (Shape) generalPath0);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) polygon0, (Shape) polygon0);
      assertEquals(0, polygon0.npoints);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      String string0 = "[<j=x^(0Gxj$";
      ImageIcon imageIcon0 = new ImageIcon(string0, string0);
      assertNotNull(imageIcon0);
      
      JToggleButton jToggleButton0 = new JToggleButton(string0, (Icon) imageIcon0);
      assertEquals(true, jToggleButton0.isEnabled());
      assertEquals(false, jToggleButton0.isDisplayable());
      assertEquals(false, jToggleButton0.isValid());
      assertEquals(false, jToggleButton0.isFocusTraversalPolicySet());
      assertEquals(false, jToggleButton0.isMaximumSizeSet());
      assertEquals(true, jToggleButton0.isBackgroundSet());
      assertEquals(true, jToggleButton0.isFontSet());
      assertEquals(false, jToggleButton0.isCursorSet());
      assertEquals(false, jToggleButton0.isShowing());
      assertEquals(false, jToggleButton0.isFocusCycleRoot());
      assertEquals(true, jToggleButton0.isVisible());
      assertEquals(false, jToggleButton0.isPreferredSizeSet());
      assertEquals(0, jToggleButton0.countComponents());
      assertEquals(true, jToggleButton0.isForegroundSet());
      assertEquals(0, jToggleButton0.getComponentCount());
      assertEquals(false, jToggleButton0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToggleButton0.isLightweight());
      assertEquals(false, jToggleButton0.isMinimumSizeSet());
      assertEquals(true, jToggleButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToggleButton0.getIgnoreRepaint());
      assertNotNull(jToggleButton0);
      
      Rectangle rectangle0 = jToggleButton0.getVisibleRect();
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, jToggleButton0.isEnabled());
      assertEquals(false, jToggleButton0.isDisplayable());
      assertEquals(false, jToggleButton0.isValid());
      assertEquals(false, jToggleButton0.isFocusTraversalPolicySet());
      assertEquals(false, jToggleButton0.isMaximumSizeSet());
      assertEquals(true, jToggleButton0.isBackgroundSet());
      assertEquals(true, jToggleButton0.isFontSet());
      assertEquals(false, jToggleButton0.isCursorSet());
      assertEquals(false, jToggleButton0.isShowing());
      assertEquals(false, jToggleButton0.isFocusCycleRoot());
      assertEquals(true, jToggleButton0.isVisible());
      assertEquals(false, jToggleButton0.isPreferredSizeSet());
      assertEquals(0, jToggleButton0.countComponents());
      assertEquals(true, jToggleButton0.isForegroundSet());
      assertEquals(0, jToggleButton0.getComponentCount());
      assertEquals(false, jToggleButton0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToggleButton0.isLightweight());
      assertEquals(false, jToggleButton0.isMinimumSizeSet());
      assertEquals(true, jToggleButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToggleButton0.getIgnoreRepaint());
      assertNotNull(rectangle0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) polygon0, (Shape) rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, polygon0.npoints);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, jToggleButton0.isEnabled());
      assertEquals(false, jToggleButton0.isDisplayable());
      assertEquals(false, jToggleButton0.isValid());
      assertEquals(false, jToggleButton0.isFocusTraversalPolicySet());
      assertEquals(false, jToggleButton0.isMaximumSizeSet());
      assertEquals(true, jToggleButton0.isBackgroundSet());
      assertEquals(true, jToggleButton0.isFontSet());
      assertEquals(false, jToggleButton0.isCursorSet());
      assertEquals(false, jToggleButton0.isShowing());
      assertEquals(false, jToggleButton0.isFocusCycleRoot());
      assertEquals(true, jToggleButton0.isVisible());
      assertEquals(false, jToggleButton0.isPreferredSizeSet());
      assertEquals(0, jToggleButton0.countComponents());
      assertEquals(true, jToggleButton0.isForegroundSet());
      assertEquals(0, jToggleButton0.getComponentCount());
      assertEquals(false, jToggleButton0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToggleButton0.isLightweight());
      assertEquals(false, jToggleButton0.isMinimumSizeSet());
      assertEquals(true, jToggleButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToggleButton0.getIgnoreRepaint());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertNotNull(line2D_Double0);
      
      float float0 = 0.0F;
      int int0 = 0;
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(line2D_Double0.y2, line2D_Double0.x2, line2D_Double0.y2, (double) float0, line2D_Double0.x2, line2D_Double0.x2, int0);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertNotNull(arc2D_Double0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) arc2D_Double0, (Shape) line2D_Double0);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertNotNull(arc2D_Float0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) arc2D_Float0, (Shape) arc2D_Float0);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertNotNull(ellipse2D_Float0);
      
      Path2D.Double path2D_Double0 = (Path2D.Double)ShapeUtilities.rotateShape((Shape) ellipse2D_Float0, (double) ellipse2D_Float0.height, ellipse2D_Float0.y, ellipse2D_Float0.y);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(1, path2D_Double0.getWindingRule());
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertNotNull(path2D_Double0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) ellipse2D_Float0, (Shape) path2D_Double0);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(1, path2D_Double0.getWindingRule());
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertNotNull(ellipse2D_Float0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) ellipse2D_Float0, (Shape) ellipse2D_Float0);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertNotNull(line2D_Double0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) line2D_Double0, (Shape) line2D_Double0);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double double0 = 865.81199602931;
      float float0 = (-331.84967F);
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createRegularCross(float0, float0);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      Line2D.Double line2D_Double0 = new Line2D.Double(double0, (double) float0, double0, double0);
      assertEquals((-331.84967041015625), line2D_Double0.y1, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.y2, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.x2, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.x1, 0.01D);
      assertNotNull(line2D_Double0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) line2D_Double0, (Shape) generalPath0);
      assertEquals((-331.84967041015625), line2D_Double0.y1, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.y2, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.x2, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.x1, 0.01D);
      assertEquals(1, generalPath0.getWindingRule());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double double0 = 865.81199602931;
      float float0 = (-331.84967F);
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createRegularCross(float0, float0);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      Line2D.Double line2D_Double0 = new Line2D.Double(double0, (double) float0, double0, double0);
      assertEquals(865.81199602931, line2D_Double0.y2, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.x1, 0.01D);
      assertEquals((-331.84967041015625), line2D_Double0.y1, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.x2, 0.01D);
      assertNotNull(line2D_Double0);
      
      Rectangle rectangle0 = line2D_Double0.getBounds();
      assertEquals(865.81199602931, line2D_Double0.y2, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.x1, 0.01D);
      assertEquals((-331.84967041015625), line2D_Double0.y1, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.x2, 0.01D);
      assertEquals(1198, rectangle0.height);
      assertEquals(865, rectangle0.x);
      assertEquals(1, rectangle0.width);
      assertEquals((-332), rectangle0.y);
      assertEquals(866.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(866.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(1.0, rectangle0.getWidth(), 0.01D);
      assertEquals(865.0, rectangle0.getX(), 0.01D);
      assertEquals((-332.0), rectangle0.getY(), 0.01D);
      assertEquals(865.5, rectangle0.getCenterX(), 0.01D);
      assertEquals(1198.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=865,y=-332,width=1,height=1198]", rectangle0.toString());
      assertEquals(267.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(false, rectangle0.isEmpty());
      assertEquals(865.0, rectangle0.getMinX(), 0.01D);
      assertEquals((-332.0), rectangle0.getMinY(), 0.01D);
      assertNotNull(rectangle0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath0, (Shape) rectangle0);
      assertEquals(865.81199602931, line2D_Double0.y2, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.x1, 0.01D);
      assertEquals((-331.84967041015625), line2D_Double0.y1, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.x2, 0.01D);
      assertEquals(1198, rectangle0.height);
      assertEquals(865, rectangle0.x);
      assertEquals(1, rectangle0.width);
      assertEquals((-332), rectangle0.y);
      assertEquals(866.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(866.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(1.0, rectangle0.getWidth(), 0.01D);
      assertEquals(865.0, rectangle0.getX(), 0.01D);
      assertEquals((-332.0), rectangle0.getY(), 0.01D);
      assertEquals(865.5, rectangle0.getCenterX(), 0.01D);
      assertEquals(1198.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=865,y=-332,width=1,height=1198]", rectangle0.toString());
      assertEquals(267.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(false, rectangle0.isEmpty());
      assertEquals(865.0, rectangle0.getMinX(), 0.01D);
      assertEquals((-332.0), rectangle0.getMinY(), 0.01D);
      assertEquals(1, generalPath0.getWindingRule());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertNotNull(ellipse2D_Double0);
      
      Ellipse2D.Double ellipse2D_Double1 = (Ellipse2D.Double)ShapeUtilities.clone((Shape) ellipse2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double1.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double1.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double1.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double1.y, 0.01D);
      assertTrue(ellipse2D_Double0.equals((Object)ellipse2D_Double1));
      assertTrue(ellipse2D_Double1.equals((Object)ellipse2D_Double0));
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double1.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double1.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double1.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double1.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double1.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double1.getMaxY(), 0.01D);
      assertNotNull(ellipse2D_Double1);
      assertNotSame(ellipse2D_Double0, ellipse2D_Double1);
      assertNotSame(ellipse2D_Double1, ellipse2D_Double0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertNotNull(point2D_Double0);
      
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      String string0 = "[<j=x^(0Gxj$";
      ImageIcon imageIcon0 = new ImageIcon(string0, string0);
      assertNotNull(imageIcon0);
      
      JToggleButton jToggleButton0 = new JToggleButton(string0, (Icon) imageIcon0);
      assertEquals(false, jToggleButton0.isFocusCycleRoot());
      assertEquals(true, jToggleButton0.isFontSet());
      assertEquals(true, jToggleButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToggleButton0.isCursorSet());
      assertEquals(false, jToggleButton0.isMinimumSizeSet());
      assertEquals(false, jToggleButton0.isFocusTraversalPolicyProvider());
      assertEquals(0, jToggleButton0.countComponents());
      assertEquals(true, jToggleButton0.isVisible());
      assertEquals(false, jToggleButton0.isValid());
      assertEquals(false, jToggleButton0.isDisplayable());
      assertEquals(true, jToggleButton0.isForegroundSet());
      assertEquals(false, jToggleButton0.isLightweight());
      assertEquals(true, jToggleButton0.isBackgroundSet());
      assertEquals(false, jToggleButton0.isFocusTraversalPolicySet());
      assertEquals(false, jToggleButton0.isPreferredSizeSet());
      assertEquals(false, jToggleButton0.getIgnoreRepaint());
      assertEquals(false, jToggleButton0.isShowing());
      assertEquals(true, jToggleButton0.isEnabled());
      assertEquals(false, jToggleButton0.isMaximumSizeSet());
      assertEquals(0, jToggleButton0.getComponentCount());
      assertNotNull(jToggleButton0);
      
      Rectangle rectangle0 = jToggleButton0.getVisibleRect();
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(false, jToggleButton0.isFocusCycleRoot());
      assertEquals(true, jToggleButton0.isFontSet());
      assertEquals(true, jToggleButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToggleButton0.isCursorSet());
      assertEquals(false, jToggleButton0.isMinimumSizeSet());
      assertEquals(false, jToggleButton0.isFocusTraversalPolicyProvider());
      assertEquals(0, jToggleButton0.countComponents());
      assertEquals(true, jToggleButton0.isVisible());
      assertEquals(false, jToggleButton0.isValid());
      assertEquals(false, jToggleButton0.isDisplayable());
      assertEquals(true, jToggleButton0.isForegroundSet());
      assertEquals(false, jToggleButton0.isLightweight());
      assertEquals(true, jToggleButton0.isBackgroundSet());
      assertEquals(false, jToggleButton0.isFocusTraversalPolicySet());
      assertEquals(false, jToggleButton0.isPreferredSizeSet());
      assertEquals(false, jToggleButton0.getIgnoreRepaint());
      assertEquals(false, jToggleButton0.isShowing());
      assertEquals(true, jToggleButton0.isEnabled());
      assertEquals(false, jToggleButton0.isMaximumSizeSet());
      assertEquals(0, jToggleButton0.getComponentCount());
      assertNotNull(rectangle0);
      
      Point2D.Double point2D_Double1 = (Point2D.Double)ShapeUtilities.getPointInRectangle((double) polygon0.npoints, point2D_Double0.x, (Rectangle2D) rectangle0);
      assertEquals(0.0, point2D_Double1.y, 0.01D);
      assertEquals(0.0, point2D_Double1.x, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, polygon0.npoints);
      assertTrue(point2D_Double1.equals((Object)point2D_Double0));
      assertTrue(point2D_Double0.equals((Object)point2D_Double1));
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(false, jToggleButton0.isFocusCycleRoot());
      assertEquals(true, jToggleButton0.isFontSet());
      assertEquals(true, jToggleButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToggleButton0.isCursorSet());
      assertEquals(false, jToggleButton0.isMinimumSizeSet());
      assertEquals(false, jToggleButton0.isFocusTraversalPolicyProvider());
      assertEquals(0, jToggleButton0.countComponents());
      assertEquals(true, jToggleButton0.isVisible());
      assertEquals(false, jToggleButton0.isValid());
      assertEquals(false, jToggleButton0.isDisplayable());
      assertEquals(true, jToggleButton0.isForegroundSet());
      assertEquals(false, jToggleButton0.isLightweight());
      assertEquals(true, jToggleButton0.isBackgroundSet());
      assertEquals(false, jToggleButton0.isFocusTraversalPolicySet());
      assertEquals(false, jToggleButton0.isPreferredSizeSet());
      assertEquals(false, jToggleButton0.getIgnoreRepaint());
      assertEquals(false, jToggleButton0.isShowing());
      assertEquals(true, jToggleButton0.isEnabled());
      assertEquals(false, jToggleButton0.isMaximumSizeSet());
      assertEquals(0, jToggleButton0.getComponentCount());
      assertNotNull(point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertNotSame(point2D_Double0, point2D_Double1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 0;
      Arc2D.Float arc2D_Float0 = new Arc2D.Float(int0);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertNotNull(arc2D_Float0);
      
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createDiamond(arc2D_Float0.y);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertNotNull(generalPath0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double double0 = 865.81199602931;
      float float0 = (-331.84967F);
      Line2D.Double line2D_Double0 = new Line2D.Double(double0, (double) float0, double0, double0);
      assertEquals(865.81199602931, line2D_Double0.x2, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.x1, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.y2, 0.01D);
      assertEquals((-331.84967041015625), line2D_Double0.y1, 0.01D);
      assertNotNull(line2D_Double0);
      
      Rectangle rectangle0 = line2D_Double0.getBounds();
      assertEquals(865.81199602931, line2D_Double0.x2, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.x1, 0.01D);
      assertEquals(865.81199602931, line2D_Double0.y2, 0.01D);
      assertEquals((-331.84967041015625), line2D_Double0.y1, 0.01D);
      assertEquals((-332), rectangle0.y);
      assertEquals(1198, rectangle0.height);
      assertEquals(865, rectangle0.x);
      assertEquals(1, rectangle0.width);
      assertEquals("java.awt.Rectangle[x=865,y=-332,width=1,height=1198]", rectangle0.toString());
      assertEquals((-332.0), rectangle0.getY(), 0.01D);
      assertEquals(267.0, rectangle0.getCenterY(), 0.01D);
      assertEquals((-332.0), rectangle0.getMinY(), 0.01D);
      assertEquals(1.0, rectangle0.getWidth(), 0.01D);
      assertEquals(865.5, rectangle0.getCenterX(), 0.01D);
      assertEquals(false, rectangle0.isEmpty());
      assertEquals(865.0, rectangle0.getMinX(), 0.01D);
      assertEquals(1198.0, rectangle0.getHeight(), 0.01D);
      assertEquals(866.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(866.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(865.0, rectangle0.getX(), 0.01D);
      assertNotNull(rectangle0);
      
      Graphics2D graphics2D0 = null;
      // Undeclared exception!
      try {
        ShapeUtilities.drawRotatedShape(graphics2D0, (Shape) rectangle0, (double) float0, (float) rectangle0.height, (float) rectangle0.height);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
