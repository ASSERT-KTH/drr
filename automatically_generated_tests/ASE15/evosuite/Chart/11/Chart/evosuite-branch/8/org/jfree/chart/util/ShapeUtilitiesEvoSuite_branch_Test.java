/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:25:57 GMT 2014
 */

package org.jfree.chart.util;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Arc2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Path2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import javax.swing.JColorChooser;
import javax.swing.JSlider;
import javax.swing.JTable;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.ShapeUtilities;
import org.junit.runner.RunWith;

 
public class ShapeUtilitiesEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JTable jTable0 = new JTable();
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isShowing());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(true, jTable0.isEnabled());
      assertNotNull(jTable0);
      
      int int0 = (-4676);
      boolean boolean0 = true;
      float float0 = 0.0F;
      Line2D.Float line2D_Float0 = new Line2D.Float(float0, float0, (float) int0, (float) int0);
      assertNotNull(line2D_Float0);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.x2, 0.01F);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)line2D_Float0.getBounds2D();
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals((-4676.0), rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals((-2338.0), rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals((-4676.0), rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals((-2338.0), rectangle2D_Float0.getCenterY(), 0.01D);
      assertNotNull(rectangle2D_Float0);
      assertEquals(4676.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(4676.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-4676.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals((-4676.0F), rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.x2, 0.01F);
      
      Rectangle rectangle0 = jTable0.getCellRect(int0, int0, boolean0);
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isShowing());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      
      int int1 = 1296;
      rectangle0.y = int1;
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isShowing());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(1296.0, rectangle0.getMinY(), 0.01D);
      assertEquals(1296.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(1296.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(1296.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=1296,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(1296, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      
      boolean boolean1 = ShapeUtilities.intersects((Rectangle2D) rectangle0, (Rectangle2D) rectangle2D_Float0);
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isShowing());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(1296.0, rectangle0.getMinY(), 0.01D);
      assertEquals(1296.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(1296.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(1296.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=1296,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals((-4676.0), rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals((-2338.0), rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals((-4676.0), rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals((-2338.0), rectangle2D_Float0.getCenterY(), 0.01D);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(int0 == int1);
      assertFalse(boolean1);
      assertEquals(1296, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(4676.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(4676.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-4676.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals((-4676.0F), rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.x2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)arc2D_Double0.getBounds2D();
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      
      boolean boolean0 = ShapeUtilities.intersects((Rectangle2D) rectangle2D_Double0, (Rectangle2D) rectangle2D_Double0);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertTrue(boolean0);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JTable jTable0 = new JTable();
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(1, jTable0.countComponents());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(false, jTable0.isShowing());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(true, jTable0.isVisible());
      assertNotNull(jTable0);
      
      int int0 = (-4676);
      boolean boolean0 = true;
      Rectangle rectangle0 = jTable0.getCellRect(int0, int0, boolean0);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(1, jTable0.countComponents());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(false, jTable0.isShowing());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(true, jTable0.isVisible());
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      
      Rectangle rectangle1 = new Rectangle(rectangle0.y, rectangle0.height, int0, rectangle0.x);
      assertEquals(0.0, rectangle1.getHeight(), 0.01D);
      assertEquals(0.0, rectangle1.getX(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals(true, rectangle1.isEmpty());
      assertEquals((-4676.0), rectangle1.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=-4676,height=0]", rectangle1.toString());
      assertEquals((-4676.0), rectangle1.getWidth(), 0.01D);
      assertEquals(0.0, rectangle1.getMinX(), 0.01D);
      assertEquals((-2338.0), rectangle1.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(1, jTable0.countComponents());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(false, jTable0.isShowing());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(true, jTable0.isVisible());
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertNotNull(rectangle1);
      assertEquals((-4676), rectangle1.width);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle0, rectangle1);
      
      boolean boolean1 = ShapeUtilities.intersects((Rectangle2D) rectangle0, (Rectangle2D) rectangle1);
      assertEquals(0.0, rectangle1.getHeight(), 0.01D);
      assertEquals(0.0, rectangle1.getX(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals(true, rectangle1.isEmpty());
      assertEquals((-4676.0), rectangle1.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=-4676,height=0]", rectangle1.toString());
      assertEquals((-4676.0), rectangle1.getWidth(), 0.01D);
      assertEquals(0.0, rectangle1.getMinX(), 0.01D);
      assertEquals((-2338.0), rectangle1.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(1, jTable0.countComponents());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(false, jTable0.isShowing());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(true, jTable0.isVisible());
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals((-4676), rectangle1.width);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle0, rectangle1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = 1998.127870479078;
      Point2D.Double point2D_Double0 = new Point2D.Double(double0, double0);
      assertNotNull(point2D_Double0);
      assertEquals(1998.127870479078, point2D_Double0.y, 0.01D);
      assertEquals(1998.127870479078, point2D_Double0.x, 0.01D);
      
      JColorChooser jColorChooser0 = new JColorChooser();
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertNotNull(jColorChooser0);
      
      Rectangle rectangle0 = jColorChooser0.bounds();
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(point2D_Double0.x, (double) rectangle0.y, point2D_Double0.y, point2D_Double0.y);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(1998.127870479078, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(2997.1918057186167, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(3996.255740958156, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(1998.127870479078, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(999.063935239539, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertNotNull(rectangle2D_Double0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(1998.127870479078, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(1998.127870479078, rectangle2D_Double0.height, 0.01D);
      assertEquals(1998.127870479078, rectangle2D_Double0.width, 0.01D);
      assertEquals(1998.127870479078, point2D_Double0.y, 0.01D);
      assertEquals(1998.127870479078, point2D_Double0.x, 0.01D);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangle2D_Double0.getBounds2D();
      assertEquals(3996.255740958156, rectangle2D_Double1.getMaxX(), 0.01D);
      assertEquals(2997.1918057186167, rectangle2D_Double1.getCenterX(), 0.01D);
      assertEquals(999.063935239539, rectangle2D_Double1.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01D);
      assertEquals(1998.127870479078, rectangle2D_Double1.getMaxY(), 0.01D);
      assertEquals(1998.127870479078, rectangle2D_Double1.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(1998.127870479078, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(2997.1918057186167, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(3996.255740958156, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(1998.127870479078, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(999.063935239539, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertNotNull(rectangle2D_Double1);
      assertEquals(1998.127870479078, rectangle2D_Double1.height, 0.01D);
      assertEquals(1998.127870479078, rectangle2D_Double1.width, 0.01D);
      assertEquals(1998.127870479078, rectangle2D_Double1.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01D);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(1998.127870479078, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(1998.127870479078, rectangle2D_Double0.height, 0.01D);
      assertEquals(1998.127870479078, rectangle2D_Double0.width, 0.01D);
      assertEquals(1998.127870479078, point2D_Double0.y, 0.01D);
      assertEquals(1998.127870479078, point2D_Double0.x, 0.01D);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      
      boolean boolean0 = ShapeUtilities.contains((Rectangle2D) rectangle0, (Rectangle2D) rectangle2D_Double1);
      assertEquals(3996.255740958156, rectangle2D_Double1.getMaxX(), 0.01D);
      assertEquals(2997.1918057186167, rectangle2D_Double1.getCenterX(), 0.01D);
      assertEquals(999.063935239539, rectangle2D_Double1.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01D);
      assertEquals(1998.127870479078, rectangle2D_Double1.getMaxY(), 0.01D);
      assertEquals(1998.127870479078, rectangle2D_Double1.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(1998.127870479078, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(2997.1918057186167, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(3996.255740958156, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(1998.127870479078, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(999.063935239539, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertFalse(boolean0);
      assertEquals(1998.127870479078, rectangle2D_Double1.height, 0.01D);
      assertEquals(1998.127870479078, rectangle2D_Double1.width, 0.01D);
      assertEquals(1998.127870479078, rectangle2D_Double1.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01D);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(1998.127870479078, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(1998.127870479078, rectangle2D_Double0.height, 0.01D);
      assertEquals(1998.127870479078, rectangle2D_Double0.width, 0.01D);
      assertEquals(1998.127870479078, point2D_Double0.y, 0.01D);
      assertEquals(1998.127870479078, point2D_Double0.x, 0.01D);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JTable jTable0 = new JTable();
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isShowing());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(true, jTable0.isForegroundSet());
      assertNotNull(jTable0);
      
      int int0 = (-4676);
      boolean boolean0 = true;
      Rectangle rectangle0 = jTable0.getCellRect(int0, int0, boolean0);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isShowing());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(true, jTable0.isForegroundSet());
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      
      DefaultCaret defaultCaret0 = new DefaultCaret();
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getX(), 0.01D);
      assertEquals(true, defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01D);
      assertNotNull(defaultCaret0);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.y);
      
      int int1 = 1296;
      rectangle0.y = int1;
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(1296.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(1296.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=1296,width=0,height=0]", rectangle0.toString());
      assertEquals(1296.0, rectangle0.getY(), 0.01D);
      assertEquals(1296.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isShowing());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(1296, rectangle0.y);
      assertEquals(0, rectangle0.width);
      
      boolean boolean1 = ShapeUtilities.contains((Rectangle2D) rectangle0, (Rectangle2D) defaultCaret0);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(1296.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(1296.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=1296,width=0,height=0]", rectangle0.toString());
      assertEquals(1296.0, rectangle0.getY(), 0.01D);
      assertEquals(1296.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getX(), 0.01D);
      assertEquals(true, defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01D);
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isShowing());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(true, jTable0.isForegroundSet());
      assertFalse(boolean0 == boolean1);
      assertFalse(int0 == int1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(1296, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.y);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JTable jTable0 = new JTable();
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isShowing());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertNotNull(jTable0);
      
      int int0 = (-4676);
      boolean boolean0 = true;
      Rectangle rectangle0 = jTable0.getCellRect(int0, int0, boolean0);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isShowing());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      
      DefaultCaret defaultCaret0 = new DefaultCaret();
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01D);
      assertEquals(true, defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01D);
      assertNotNull(defaultCaret0);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.x);
      
      boolean boolean1 = ShapeUtilities.contains((Rectangle2D) rectangle0, (Rectangle2D) defaultCaret0);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isShowing());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01D);
      assertEquals(true, defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01D);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.x);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JTable jTable0 = new JTable();
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(false, jTable0.isValid());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isShowing());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertNotNull(jTable0);
      
      int int0 = (-4676);
      boolean boolean0 = true;
      Line2D.Float line2D_Float0 = new Line2D.Float((float) int0, (float) int0, (float) int0, (float) int0);
      assertNotNull(line2D_Float0);
      assertEquals((-4676.0F), line2D_Float0.y2, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.x2, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.x1, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.y1, 0.01F);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)line2D_Float0.getBounds2D();
      assertEquals((-4676.0), rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals((-4676.0), rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals((-4676.0), rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals((-4676.0), rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals((-4676.0), rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals((-4676.0), rectangle2D_Float0.getMaxX(), 0.01D);
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-4676.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals((-4676.0F), rectangle2D_Float0.y, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.y2, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.x2, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.x1, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.y1, 0.01F);
      
      Rectangle rectangle0 = jTable0.getCellRect(int0, int0, boolean0);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(false, jTable0.isValid());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isShowing());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      
      boolean boolean1 = ShapeUtilities.contains((Rectangle2D) rectangle0, (Rectangle2D) rectangle2D_Float0);
      assertEquals((-4676.0), rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals((-4676.0), rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals((-4676.0), rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals((-4676.0), rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals((-4676.0), rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals((-4676.0), rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(false, jTable0.isValid());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isShowing());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-4676.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals((-4676.0F), rectangle2D_Float0.y, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.y2, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.x2, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.x1, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.y1, 0.01F);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JTable jTable0 = new JTable();
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(false, jTable0.isValid());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isShowing());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(true, jTable0.isVisible());
      assertNotNull(jTable0);
      
      int int0 = (-4676);
      boolean boolean0 = true;
      float float0 = 0.0F;
      Line2D.Float line2D_Float0 = new Line2D.Float(float0, float0, (float) int0, (float) int0);
      assertNotNull(line2D_Float0);
      assertEquals((-4676.0F), line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.y2, 0.01F);
      
      Rectangle rectangle0 = jTable0.getCellRect(int0, int0, boolean0);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(false, jTable0.isValid());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isShowing());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(true, jTable0.isVisible());
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createLineRegion((Line2D) line2D_Float0, (float) rectangle0.x);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(false, jTable0.isValid());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isShowing());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(true, jTable0.isVisible());
      assertNotNull(generalPath0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals((-4676.0F), line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.y2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertNotNull(arc2D_Float0);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createLineRegion((Line2D) line2D_Double0, arc2D_Float0.x);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertNotNull(arc2D_Float0);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      
      Line2D.Double line2D_Double1 = null;
      Shape shape0 = ShapeUtilities.rotateShape((Shape) line2D_Double1, line2D_Double0.x2, arc2D_Float0.extent, arc2D_Float0.extent);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertNull(shape0);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = (-4676);
      Line2D.Float line2D_Float0 = new Line2D.Float((float) int0, (float) int0, (float) int0, (float) int0);
      assertNotNull(line2D_Float0);
      assertEquals((-4676.0F), line2D_Float0.x1, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.x2, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.y2, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.y1, 0.01F);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)line2D_Float0.getBounds2D();
      assertEquals((-4676.0), rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals((-4676.0), rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals((-4676.0), rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals((-4676.0), rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals((-4676.0), rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals((-4676.0), rectangle2D_Float0.getMinY(), 0.01D);
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals((-4676.0F), rectangle2D_Float0.y, 0.01F);
      assertEquals((-4676.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.x1, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.x2, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.y2, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.y1, 0.01F);
      
      Path2D.Double path2D_Double0 = (Path2D.Double)ShapeUtilities.rotateShape((Shape) rectangle2D_Float0, (double) int0, (float) int0, (float) int0);
      assertEquals((-4676.0), rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals((-4676.0), rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals((-4676.0), rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals((-4676.0), rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals((-4676.0), rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals((-4676.0), rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(1, path2D_Double0.getWindingRule());
      assertNotNull(path2D_Double0);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals((-4676.0F), rectangle2D_Float0.y, 0.01F);
      assertEquals((-4676.0F), rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.x1, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.x2, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.y2, 0.01F);
      assertEquals((-4676.0F), line2D_Float0.y1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01D);
      assertEquals(true, defaultCaret0.isEmpty());
      assertNotNull(defaultCaret0);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.x);
      
      RectangleAnchor rectangleAnchor0 = null;
      // Undeclared exception!
      try {
        Shape shape0 = ShapeUtilities.createTranslatedShape((Shape) defaultCaret0, rectangleAnchor0, (double) defaultCaret0.height, (double) defaultCaret0.height);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = 443.45066;
      Point2D.Double point2D_Double0 = new Point2D.Double(double0, double0);
      assertNotNull(point2D_Double0);
      assertEquals(443.45066, point2D_Double0.x, 0.01D);
      assertEquals(443.45066, point2D_Double0.y, 0.01D);
      
      Ellipse2D ellipse2D0 = null;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP;
      assertEquals("RectangleAnchor.TOP", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      // Undeclared exception!
      try {
        Shape shape0 = ShapeUtilities.createTranslatedShape((Shape) ellipse2D0, rectangleAnchor0, double0, point2D_Double0.y);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertNotNull(arc2D_Float0);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      assertEquals("RectangleAnchor.BOTTOM_RIGHT", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      Path2D.Double path2D_Double0 = (Path2D.Double)ShapeUtilities.createTranslatedShape((Shape) line2D_Double0, rectangleAnchor0, line2D_Double0.x2, (double) arc2D_Float0.width);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(1, path2D_Double0.getWindingRule());
      assertEquals("RectangleAnchor.BOTTOM_RIGHT", rectangleAnchor0.toString());
      assertNotNull(path2D_Double0);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertNotNull(ellipse2D_Float0);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      
      Ellipse2D.Float ellipse2D_Float1 = null;
      // Undeclared exception!
      try {
        Shape shape0 = ShapeUtilities.createTranslatedShape((Shape) ellipse2D_Float1, (double) ellipse2D_Float0.x, (double) ellipse2D_Float0.x);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 0;
      Polygon polygon0 = new Polygon(intArray0, intArray0, int0);
      assertNotNull(polygon0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, polygon0.npoints);
      
      Path2D.Double path2D_Double0 = (Path2D.Double)ShapeUtilities.createTranslatedShape((Shape) polygon0, (double) intArray0[6], (double) intArray0[2]);
      assertEquals(0, path2D_Double0.getWindingRule());
      assertNotNull(path2D_Double0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, polygon0.npoints);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      float float0 = (-2818.2378F);
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createDiamond(float0);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      GeneralPath generalPath1 = (GeneralPath)ShapeUtilities.createDiagonalCross(float0, float0);
      assertEquals(1, generalPath1.getWindingRule());
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertNotNull(generalPath1);
      assertNotSame(generalPath1, generalPath0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath1, (Shape) generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(1, generalPath1.getWindingRule());
      assertFalse(generalPath0.equals((Object)generalPath1));
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertFalse(boolean0);
      assertNotSame(generalPath0, generalPath1);
      assertNotSame(generalPath1, generalPath0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      float float0 = (-1.3488322F);
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createUpTriangle(float0);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      GeneralPath generalPath1 = new GeneralPath();
      assertEquals(1, generalPath1.getWindingRule());
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertNotNull(generalPath1);
      assertNotSame(generalPath1, generalPath0);
      
      GeneralPath generalPath2 = new GeneralPath((Shape) generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(1, generalPath2.getWindingRule());
      assertFalse(generalPath0.equals((Object)generalPath1));
      assertFalse(generalPath0.equals((Object)generalPath2));
      assertFalse(generalPath2.equals((Object)generalPath0));
      assertFalse(generalPath2.equals((Object)generalPath1));
      assertNotNull(generalPath2);
      assertNotSame(generalPath0, generalPath1);
      assertNotSame(generalPath0, generalPath2);
      assertNotSame(generalPath2, generalPath0);
      assertNotSame(generalPath2, generalPath1);
      
      boolean boolean0 = ShapeUtilities.equal(generalPath1, generalPath2);
      assertEquals(1, generalPath1.getWindingRule());
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(1, generalPath2.getWindingRule());
      assertFalse(generalPath1.equals((Object)generalPath2));
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertFalse(generalPath0.equals((Object)generalPath1));
      assertFalse(generalPath0.equals((Object)generalPath2));
      assertFalse(generalPath2.equals((Object)generalPath0));
      assertFalse(generalPath2.equals((Object)generalPath1));
      assertFalse(boolean0);
      assertNotSame(generalPath1, generalPath2);
      assertNotSame(generalPath1, generalPath0);
      assertNotSame(generalPath0, generalPath1);
      assertNotSame(generalPath0, generalPath2);
      assertNotSame(generalPath2, generalPath0);
      assertNotSame(generalPath2, generalPath1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GeneralPath generalPath0 = new GeneralPath();
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AffineTransform affineTransform0 = null;
      boolean boolean0 = false;
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, boolean0, boolean0);
      assertEquals(false, fontRenderContext0.isTransformed());
      assertEquals(false, fontRenderContext0.isAntiAliased());
      assertEquals(false, fontRenderContext0.usesFractionalMetrics());
      assertNotNull(fontRenderContext0);
      
      int int0 = fontRenderContext0.getTransformType();
      assertEquals(false, fontRenderContext0.isTransformed());
      assertEquals(false, fontRenderContext0.isAntiAliased());
      assertEquals(false, fontRenderContext0.usesFractionalMetrics());
      assertEquals(0, int0);
      
      GeneralPath generalPath0 = new GeneralPath();
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      GeneralPath generalPath1 = new GeneralPath(int0, int0);
      assertEquals(0, generalPath1.getWindingRule());
      assertEquals(false, fontRenderContext0.isTransformed());
      assertEquals(false, fontRenderContext0.isAntiAliased());
      assertEquals(false, fontRenderContext0.usesFractionalMetrics());
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertNotNull(generalPath1);
      assertNotSame(generalPath1, generalPath0);
      
      boolean boolean1 = ShapeUtilities.equal(generalPath0, generalPath1);
      assertEquals(0, generalPath1.getWindingRule());
      assertEquals(false, fontRenderContext0.isTransformed());
      assertEquals(false, fontRenderContext0.isAntiAliased());
      assertEquals(false, fontRenderContext0.usesFractionalMetrics());
      assertEquals(1, generalPath0.getWindingRule());
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(generalPath0.equals((Object)generalPath1));
      assertFalse(boolean1);
      assertNotSame(generalPath1, generalPath0);
      assertNotSame(generalPath0, generalPath1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 0;
      GeneralPath generalPath0 = new GeneralPath(int0);
      assertEquals(0, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      GeneralPath generalPath1 = null;
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath1);
      assertEquals(0, generalPath0.getWindingRule());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      float float0 = 0.0F;
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createUpTriangle(float0);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      GeneralPath generalPath1 = null;
      GeneralPath generalPath2 = new GeneralPath((Shape) generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(1, generalPath2.getWindingRule());
      assertFalse(generalPath0.equals((Object)generalPath2));
      assertFalse(generalPath2.equals((Object)generalPath0));
      assertNotNull(generalPath2);
      assertNotSame(generalPath0, generalPath2);
      assertNotSame(generalPath2, generalPath0);
      
      boolean boolean0 = ShapeUtilities.equal(generalPath1, generalPath2);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(1, generalPath2.getWindingRule());
      assertFalse(generalPath0.equals((Object)generalPath2));
      assertFalse(generalPath2.equals((Object)generalPath0));
      assertFalse(boolean0);
      assertNotSame(generalPath0, generalPath2);
      assertNotSame(generalPath2, generalPath0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GeneralPath generalPath0 = null;
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertNotNull(polygon0);
      assertEquals(0, polygon0.npoints);
      
      int[] intArray0 = new int[7];
      polygon0.ypoints = intArray0;
      assertNotNull(polygon0.ypoints);
      assertEquals(0, polygon0.npoints);
      
      Polygon polygon1 = new Polygon();
      assertFalse(polygon1.equals((Object)polygon0));
      assertNotNull(polygon1);
      assertEquals(0, polygon1.npoints);
      assertNotSame(polygon1, polygon0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) polygon1, (Shape) polygon0);
      assertFalse(polygon1.equals((Object)polygon0));
      assertFalse(polygon0.equals((Object)polygon1));
      assertFalse(boolean0);
      assertEquals(0, polygon1.npoints);
      assertEquals(0, polygon0.npoints);
      assertNotSame(polygon1, polygon0);
      assertNotSame(polygon0, polygon1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 0;
      Polygon polygon0 = new Polygon(intArray0, intArray0, int0);
      assertNotNull(polygon0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, polygon0.npoints);
      
      Polygon polygon1 = new Polygon();
      assertFalse(polygon1.equals((Object)polygon0));
      assertNotNull(polygon1);
      assertEquals(0, polygon1.npoints);
      assertNotSame(polygon1, polygon0);
      
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon1);
      assertFalse(polygon0.equals((Object)polygon1));
      assertFalse(polygon1.equals((Object)polygon0));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, polygon1.npoints);
      assertNotSame(polygon0, polygon1);
      assertNotSame(polygon1, polygon0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertNotNull(polygon0);
      assertEquals(0, polygon0.npoints);
      
      Polygon polygon1 = new Polygon();
      assertFalse(polygon1.equals((Object)polygon0));
      assertNotNull(polygon1);
      assertEquals(0, polygon1.npoints);
      assertNotSame(polygon1, polygon0);
      
      polygon1.addPoint(polygon0.npoints, polygon0.npoints);
      assertFalse(polygon0.equals((Object)polygon1));
      assertFalse(polygon1.equals((Object)polygon0));
      assertEquals(0, polygon0.npoints);
      assertEquals(1, polygon1.npoints);
      assertNotSame(polygon0, polygon1);
      assertNotSame(polygon1, polygon0);
      
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon1);
      assertFalse(polygon0.equals((Object)polygon1));
      assertFalse(polygon1.equals((Object)polygon0));
      assertFalse(boolean0);
      assertEquals(0, polygon0.npoints);
      assertEquals(1, polygon1.npoints);
      assertNotSame(polygon0, polygon1);
      assertNotSame(polygon1, polygon0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertNotNull(polygon0);
      assertEquals(0, polygon0.npoints);
      
      Polygon polygon1 = null;
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon1);
      assertFalse(boolean0);
      assertEquals(0, polygon0.npoints);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Polygon polygon0 = null;
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Polygon polygon0 = null;
      Polygon polygon1 = new Polygon();
      assertNotNull(polygon1);
      assertEquals(0, polygon1.npoints);
      
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon1);
      assertFalse(boolean0);
      assertEquals(0, polygon1.npoints);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      
      int int0 = 0;
      double double0 = (-1151.90435741368);
      arc2D_Double0.setAngleStart(double0);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals((-1151.90435741368), arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      
      Arc2D.Float arc2D_Float0 = new Arc2D.Float(int0);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertNotNull(arc2D_Float0);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Double0, (Arc2D) arc2D_Float0);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertFalse(boolean0);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals((-1151.90435741368), arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      
      double double0 = 324.9129365;
      int int0 = 1;
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(double0, point2D_Double0.x, double0, double0, point2D_Double0.y, double0, int0);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(324.9129365, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(324.9129365, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(162.45646825, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(487.36940475, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(1, arc2D_Double0.getArcType());
      assertEquals(649.825873, arc2D_Double0.getMaxX(), 0.01D);
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(324.9129365, arc2D_Double0.extent, 0.01D);
      assertEquals(324.9129365, arc2D_Double0.height, 0.01D);
      assertEquals(324.9129365, arc2D_Double0.width, 0.01D);
      assertEquals(324.9129365, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)arc2D_Double0.getFrame();
      assertEquals(649.825873, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(324.9129365, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(162.45646825, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(487.36940475, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(324.9129365, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(324.9129365, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(324.9129365, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(162.45646825, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(487.36940475, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(1, arc2D_Double0.getArcType());
      assertEquals(649.825873, arc2D_Double0.getMaxX(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(324.9129365, rectangle2D_Double0.width, 0.01D);
      assertEquals(324.9129365, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(324.9129365, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(324.9129365, arc2D_Double0.extent, 0.01D);
      assertEquals(324.9129365, arc2D_Double0.height, 0.01D);
      assertEquals(324.9129365, arc2D_Double0.width, 0.01D);
      assertEquals(324.9129365, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      
      Arc2D.Float arc2D_Float0 = new Arc2D.Float((Rectangle2D) rectangle2D_Double0, (float) int0, (float) int0, int0);
      assertEquals(649.825873, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(324.9129365, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(162.45646825, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(487.36940475, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(324.9129365, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(324.9129365, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(324.9129365, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(162.45646825, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(487.36940475, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(1, arc2D_Double0.getArcType());
      assertEquals(649.825873, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(324.9129333496094, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(487.36940002441406, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(162.4564666748047, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(324.9129333496094, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(1, arc2D_Float0.getArcType());
      assertEquals(649.8258666992188, arc2D_Float0.getMaxX(), 0.01D);
      assertNotNull(arc2D_Float0);
      assertEquals(324.9129365, rectangle2D_Double0.width, 0.01D);
      assertEquals(324.9129365, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(324.9129365, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(324.9129365, arc2D_Double0.extent, 0.01D);
      assertEquals(324.9129365, arc2D_Double0.height, 0.01D);
      assertEquals(324.9129365, arc2D_Double0.width, 0.01D);
      assertEquals(324.9129365, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(1.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(1.0F, arc2D_Float0.start, 0.01F);
      assertEquals(324.91293F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(324.91293F, arc2D_Float0.height, 0.01F);
      assertEquals(324.91293F, arc2D_Float0.width, 0.01F);
      
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Float0, (Arc2D) arc2D_Double0);
      assertEquals(649.825873, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(324.9129365, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(162.45646825, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(487.36940475, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(324.9129365, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(324.9129365, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(324.9129365, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(162.45646825, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(487.36940475, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(1, arc2D_Double0.getArcType());
      assertEquals(649.825873, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(324.9129333496094, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(487.36940002441406, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(162.4564666748047, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(324.9129333496094, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(1, arc2D_Float0.getArcType());
      assertEquals(649.8258666992188, arc2D_Float0.getMaxX(), 0.01D);
      assertFalse(boolean0);
      assertEquals(324.9129365, rectangle2D_Double0.width, 0.01D);
      assertEquals(324.9129365, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(324.9129365, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(324.9129365, arc2D_Double0.extent, 0.01D);
      assertEquals(324.9129365, arc2D_Double0.height, 0.01D);
      assertEquals(324.9129365, arc2D_Double0.width, 0.01D);
      assertEquals(324.9129365, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(1.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(1.0F, arc2D_Float0.start, 0.01F);
      assertEquals(324.91293F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(324.91293F, arc2D_Float0.height, 0.01F);
      assertEquals(324.91293F, arc2D_Float0.width, 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertNotNull(arc2D_Float0);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      
      Arc2D.Float arc2D_Float1 = null;
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Float0, (Arc2D) arc2D_Float1);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertFalse(boolean0);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Arc2D arc2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(arc2D0, arc2D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertNotNull(arc2D_Float0);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      
      Arc2D.Float arc2D_Float1 = null;
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Float1, (Arc2D) arc2D_Float0);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertFalse(boolean0);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      
      float float0 = 3642.86F;
      double double0 = Double.NaN;
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double((double) float0, double0, double0, line2D_Double0.x1);
      assertEquals(Double.NaN, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(3642.860107421875, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.getMaxY(), 0.01D);
      assertNotNull(ellipse2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.y, 0.01D);
      assertEquals(3642.860107421875, ellipse2D_Double0.x, 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      
      boolean boolean0 = ShapeUtilities.equal((Ellipse2D) ellipse2D_Double0, (Ellipse2D) ellipse2D_Double0);
      assertEquals(Double.NaN, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(3642.860107421875, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.getMaxY(), 0.01D);
      assertFalse(boolean0);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.y, 0.01D);
      assertEquals(3642.860107421875, ellipse2D_Double0.x, 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertNotNull(ellipse2D_Float0);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      
      Ellipse2D.Float ellipse2D_Float1 = null;
      boolean boolean0 = ShapeUtilities.equal((Ellipse2D) ellipse2D_Float0, (Ellipse2D) ellipse2D_Float1);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertFalse(boolean0);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      float float0 = (-1.3488322F);
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double((double) float0, (double) float0, (double) float0, (double) float0);
      assertEquals((-2.0232483744621277), ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals((-2.697664499282837), ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals((-1.3488322496414185), ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals((-2.0232483744621277), ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals((-2.697664499282837), ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals((-1.3488322496414185), ellipse2D_Double0.getMinY(), 0.01D);
      assertNotNull(ellipse2D_Double0);
      assertEquals((-1.3488322496414185), ellipse2D_Double0.height, 0.01D);
      assertEquals((-1.3488322496414185), ellipse2D_Double0.width, 0.01D);
      assertEquals((-1.3488322496414185), ellipse2D_Double0.y, 0.01D);
      assertEquals((-1.3488322496414185), ellipse2D_Double0.x, 0.01D);
      
      Ellipse2D.Double ellipse2D_Double1 = null;
      boolean boolean0 = ShapeUtilities.equal((Ellipse2D) ellipse2D_Double1, (Ellipse2D) ellipse2D_Double0);
      assertEquals((-2.0232483744621277), ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals((-2.697664499282837), ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals((-1.3488322496414185), ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals((-2.0232483744621277), ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals((-2.697664499282837), ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals((-1.3488322496414185), ellipse2D_Double0.getMinY(), 0.01D);
      assertFalse(boolean0);
      assertEquals((-1.3488322496414185), ellipse2D_Double0.height, 0.01D);
      assertEquals((-1.3488322496414185), ellipse2D_Double0.width, 0.01D);
      assertEquals((-1.3488322496414185), ellipse2D_Double0.y, 0.01D);
      assertEquals((-1.3488322496414185), ellipse2D_Double0.x, 0.01D);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Ellipse2D ellipse2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(ellipse2D0, ellipse2D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      
      AffineTransform affineTransform0 = null;
      boolean boolean0 = false;
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, boolean0, boolean0);
      assertEquals(false, fontRenderContext0.isTransformed());
      assertEquals(false, fontRenderContext0.isAntiAliased());
      assertEquals(false, fontRenderContext0.usesFractionalMetrics());
      assertNotNull(fontRenderContext0);
      
      int int0 = fontRenderContext0.getTransformType();
      assertEquals(false, fontRenderContext0.isTransformed());
      assertEquals(false, fontRenderContext0.isAntiAliased());
      assertEquals(false, fontRenderContext0.usesFractionalMetrics());
      assertEquals(0, int0);
      
      double double0 = 671.632252;
      Line2D.Double line2D_Double1 = new Line2D.Double(line2D_Double0.x1, (double) int0, double0, line2D_Double0.x2);
      assertEquals(false, fontRenderContext0.isTransformed());
      assertEquals(false, fontRenderContext0.isAntiAliased());
      assertEquals(false, fontRenderContext0.usesFractionalMetrics());
      assertFalse(line2D_Double0.equals((Object)line2D_Double1));
      assertFalse(line2D_Double1.equals((Object)line2D_Double0));
      assertNotNull(line2D_Double1);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double1.y1, 0.01D);
      assertEquals(671.632252, line2D_Double1.x2, 0.01D);
      assertEquals(0.0, line2D_Double1.x1, 0.01D);
      assertEquals(0.0, line2D_Double1.y2, 0.01D);
      assertNotSame(line2D_Double0, line2D_Double1);
      assertNotSame(line2D_Double1, line2D_Double0);
      
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertNotNull(line2D_Float0);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      
      boolean boolean1 = ShapeUtilities.equal((Line2D) line2D_Double1, (Line2D) line2D_Float0);
      assertEquals(false, fontRenderContext0.isTransformed());
      assertEquals(false, fontRenderContext0.isAntiAliased());
      assertEquals(false, fontRenderContext0.usesFractionalMetrics());
      assertFalse(line2D_Double0.equals((Object)line2D_Double1));
      assertTrue(boolean1 == boolean0);
      assertFalse(line2D_Double1.equals((Object)line2D_Double0));
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double1.y1, 0.01D);
      assertEquals(671.632252, line2D_Double1.x2, 0.01D);
      assertEquals(0.0, line2D_Double1.x1, 0.01D);
      assertEquals(0.0, line2D_Double1.y2, 0.01D);
      assertNotSame(line2D_Double0, line2D_Double1);
      assertNotSame(line2D_Double1, line2D_Double0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      
      double double0 = (-33.0);
      Line2D.Double line2D_Double1 = new Line2D.Double(line2D_Double0.y1, double0, double0, line2D_Double0.x2);
      assertFalse(line2D_Double0.equals((Object)line2D_Double1));
      assertFalse(line2D_Double1.equals((Object)line2D_Double0));
      assertNotNull(line2D_Double1);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals((-33.0), line2D_Double1.y1, 0.01D);
      assertEquals(0.0, line2D_Double1.x1, 0.01D);
      assertEquals((-33.0), line2D_Double1.x2, 0.01D);
      assertEquals(0.0, line2D_Double1.y2, 0.01D);
      assertNotSame(line2D_Double0, line2D_Double1);
      assertNotSame(line2D_Double1, line2D_Double0);
      
      boolean boolean0 = ShapeUtilities.equal((Line2D) line2D_Double0, (Line2D) line2D_Double1);
      assertFalse(line2D_Double0.equals((Object)line2D_Double1));
      assertFalse(line2D_Double1.equals((Object)line2D_Double0));
      assertFalse(boolean0);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals((-33.0), line2D_Double1.y1, 0.01D);
      assertEquals(0.0, line2D_Double1.x1, 0.01D);
      assertEquals((-33.0), line2D_Double1.x2, 0.01D);
      assertEquals(0.0, line2D_Double1.y2, 0.01D);
      assertNotSame(line2D_Double0, line2D_Double1);
      assertNotSame(line2D_Double1, line2D_Double0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 1853;
      Line2D.Float line2D_Float0 = new Line2D.Float((float) int0, (float) int0, (float) int0, (float) int0);
      assertNotNull(line2D_Float0);
      assertEquals(1853.0F, line2D_Float0.y2, 0.01F);
      assertEquals(1853.0F, line2D_Float0.y1, 0.01F);
      assertEquals(1853.0F, line2D_Float0.x1, 0.01F);
      assertEquals(1853.0F, line2D_Float0.x2, 0.01F);
      
      Line2D.Float line2D_Float1 = null;
      boolean boolean0 = ShapeUtilities.equal((Line2D) line2D_Float0, (Line2D) line2D_Float1);
      assertFalse(boolean0);
      assertEquals(1853.0F, line2D_Float0.y2, 0.01F);
      assertEquals(1853.0F, line2D_Float0.y1, 0.01F);
      assertEquals(1853.0F, line2D_Float0.x1, 0.01F);
      assertEquals(1853.0F, line2D_Float0.x2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Line2D line2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(line2D0, line2D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertNotNull(line2D_Float0);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      
      Line2D.Float line2D_Float1 = null;
      boolean boolean0 = ShapeUtilities.equal((Line2D) line2D_Float1, (Line2D) line2D_Float0);
      assertFalse(boolean0);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      float float0 = (-1.3488322F);
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createUpTriangle(float0);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath0, (Shape) generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertNotNull(arc2D_Float0);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createRegularCross(arc2D_Float0.width, arc2D_Float0.width);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertNotNull(generalPath0);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath0, (Shape) line2D_Double0);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertFalse(boolean0);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Polygon polygon0 = null;
      Polygon polygon1 = new Polygon();
      assertNotNull(polygon1);
      assertEquals(0, polygon1.npoints);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) polygon1, (Shape) polygon0);
      assertFalse(boolean0);
      assertEquals(0, polygon1.npoints);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertNotNull(polygon0);
      assertEquals(0, polygon0.npoints);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) polygon0, (Shape) polygon0);
      assertTrue(boolean0);
      assertEquals(0, polygon0.npoints);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = 0;
      Arc2D.Float arc2D_Float0 = new Arc2D.Float(float0, float0, float0, float0, float0, float0, int0);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertNotNull(arc2D_Float0);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) arc2D_Float0, (Shape) arc2D_Float0);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertTrue(boolean0);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      
      JSlider jSlider0 = new JSlider();
      assertEquals(false, jSlider0.isFocusTraversalPolicySet());
      assertEquals(false, jSlider0.isFocusTraversalPolicyProvider());
      assertEquals(true, jSlider0.isBackgroundSet());
      assertEquals(true, jSlider0.isVisible());
      assertEquals(false, jSlider0.isFocusCycleRoot());
      assertEquals(false, jSlider0.isPreferredSizeSet());
      assertEquals(true, jSlider0.getFocusTraversalKeysEnabled());
      assertEquals(true, jSlider0.isFontSet());
      assertEquals(false, jSlider0.isMinimumSizeSet());
      assertEquals(false, jSlider0.isDisplayable());
      assertEquals(0, jSlider0.getComponentCount());
      assertEquals(true, jSlider0.isEnabled());
      assertEquals(0, jSlider0.countComponents());
      assertEquals(false, jSlider0.isShowing());
      assertEquals(false, jSlider0.isMaximumSizeSet());
      assertEquals(false, jSlider0.isValid());
      assertEquals(false, jSlider0.isLightweight());
      assertEquals(true, jSlider0.isForegroundSet());
      assertEquals(false, jSlider0.isCursorSet());
      assertEquals(false, jSlider0.getIgnoreRepaint());
      assertNotNull(jSlider0);
      
      Rectangle rectangle0 = jSlider0.getVisibleRect();
      assertEquals(false, jSlider0.isFocusTraversalPolicySet());
      assertEquals(false, jSlider0.isFocusTraversalPolicyProvider());
      assertEquals(true, jSlider0.isBackgroundSet());
      assertEquals(true, jSlider0.isVisible());
      assertEquals(false, jSlider0.isFocusCycleRoot());
      assertEquals(false, jSlider0.isPreferredSizeSet());
      assertEquals(true, jSlider0.getFocusTraversalKeysEnabled());
      assertEquals(true, jSlider0.isFontSet());
      assertEquals(false, jSlider0.isMinimumSizeSet());
      assertEquals(false, jSlider0.isDisplayable());
      assertEquals(0, jSlider0.getComponentCount());
      assertEquals(true, jSlider0.isEnabled());
      assertEquals(0, jSlider0.countComponents());
      assertEquals(false, jSlider0.isShowing());
      assertEquals(false, jSlider0.isMaximumSizeSet());
      assertEquals(false, jSlider0.isValid());
      assertEquals(false, jSlider0.isLightweight());
      assertEquals(true, jSlider0.isForegroundSet());
      assertEquals(false, jSlider0.isCursorSet());
      assertEquals(false, jSlider0.getIgnoreRepaint());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) arc2D_Double0, (Shape) rectangle0);
      assertEquals(false, jSlider0.isFocusTraversalPolicySet());
      assertEquals(false, jSlider0.isFocusTraversalPolicyProvider());
      assertEquals(true, jSlider0.isBackgroundSet());
      assertEquals(true, jSlider0.isVisible());
      assertEquals(false, jSlider0.isFocusCycleRoot());
      assertEquals(false, jSlider0.isPreferredSizeSet());
      assertEquals(true, jSlider0.getFocusTraversalKeysEnabled());
      assertEquals(true, jSlider0.isFontSet());
      assertEquals(false, jSlider0.isMinimumSizeSet());
      assertEquals(false, jSlider0.isDisplayable());
      assertEquals(0, jSlider0.getComponentCount());
      assertEquals(true, jSlider0.isEnabled());
      assertEquals(0, jSlider0.countComponents());
      assertEquals(false, jSlider0.isShowing());
      assertEquals(false, jSlider0.isMaximumSizeSet());
      assertEquals(false, jSlider0.isValid());
      assertEquals(false, jSlider0.isLightweight());
      assertEquals(true, jSlider0.isForegroundSet());
      assertEquals(false, jSlider0.isCursorSet());
      assertEquals(false, jSlider0.getIgnoreRepaint());
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertFalse(boolean0);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JTable jTable0 = new JTable();
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isShowing());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(true, jTable0.isEnabled());
      assertNotNull(jTable0);
      
      int int0 = (-4693);
      boolean boolean0 = true;
      Rectangle rectangle0 = jTable0.getCellRect(int0, int0, boolean0);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isShowing());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(true, jTable0.isEnabled());
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float((float) int0, (float) int0, (float) rectangle0.x, (float) int0);
      assertEquals((-9386.0), ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals((-4693.0), ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals((-4693.0), ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals((-7039.5), ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals((-4693.0), ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals((-4693.0), ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isShowing());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(true, jTable0.isEnabled());
      assertNotNull(ellipse2D_Float0);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals((-4693.0F), ellipse2D_Float0.height, 0.01F);
      assertEquals((-4693.0F), ellipse2D_Float0.x, 0.01F);
      assertEquals((-4693.0F), ellipse2D_Float0.y, 0.01F);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      
      boolean boolean1 = ShapeUtilities.equal((Shape) ellipse2D_Float0, (Shape) rectangle0);
      assertEquals((-9386.0), ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals((-4693.0), ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals((-4693.0), ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals((-7039.5), ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals((-4693.0), ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals((-4693.0), ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isShowing());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(true, jTable0.isEnabled());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals((-4693.0F), ellipse2D_Float0.height, 0.01F);
      assertEquals((-4693.0F), ellipse2D_Float0.x, 0.01F);
      assertEquals((-4693.0F), ellipse2D_Float0.y, 0.01F);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertNotNull(line2D_Float0);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) line2D_Float0, (Shape) line2D_Float0);
      assertTrue(boolean0);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertNotNull(line2D_Float0);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      
      DefaultCaret defaultCaret0 = new DefaultCaret();
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01D);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01D);
      assertEquals(0.0, defaultCaret0.getX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01D);
      assertEquals(true, defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01D);
      assertNotNull(defaultCaret0);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.height);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) line2D_Float0, (Shape) defaultCaret0);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01D);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01D);
      assertEquals(0.0, defaultCaret0.getX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01D);
      assertEquals(true, defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01D);
      assertFalse(boolean0);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertNotNull(ellipse2D_Float0);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) ellipse2D_Float0, (Shape) ellipse2D_Float0);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertTrue(boolean0);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      
      float float0 = 3642.86F;
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double((double) float0, line2D_Double0.y1, line2D_Double0.y1, line2D_Double0.x1);
      assertEquals(3642.860107421875, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(3642.860107421875, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(3642.860107421875, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertNotNull(ellipse2D_Double0);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(3642.860107421875, ellipse2D_Double0.x, 0.01D);
      
      Ellipse2D.Double ellipse2D_Double1 = (Ellipse2D.Double)ShapeUtilities.clone((Shape) ellipse2D_Double0);
      assertEquals(3642.860107421875, ellipse2D_Double1.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double1.getCenterY(), 0.01D);
      assertEquals(3642.860107421875, ellipse2D_Double1.getMaxX(), 0.01D);
      assertEquals(3642.860107421875, ellipse2D_Double1.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double1.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double1.getMinY(), 0.01D);
      assertEquals(3642.860107421875, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(3642.860107421875, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(3642.860107421875, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertTrue(ellipse2D_Double1.equals((Object)ellipse2D_Double0));
      assertTrue(ellipse2D_Double0.equals((Object)ellipse2D_Double1));
      assertNotNull(ellipse2D_Double1);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, ellipse2D_Double1.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double1.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double1.height, 0.01D);
      assertEquals(3642.860107421875, ellipse2D_Double1.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(3642.860107421875, ellipse2D_Double0.x, 0.01D);
      assertNotSame(ellipse2D_Double1, ellipse2D_Double0);
      assertNotSame(ellipse2D_Double0, ellipse2D_Double1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Arc2D arc2D0 = null;
      Shape shape0 = ShapeUtilities.clone((Shape) arc2D0);
      assertNull(shape0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte byte0 = (byte)0;
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createDownTriangle((float) byte0);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double double0 = 0.0;
      Rectangle2D rectangle2D0 = null;
      // Undeclared exception!
      try {
        Point2D point2D0 = ShapeUtilities.getPointInRectangle(double0, double0, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 0;
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      
      GeneralPath generalPath0 = new GeneralPath(int0);
      assertEquals(0, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      Graphics2D graphics2D0 = null;
      // Undeclared exception!
      try {
        ShapeUtilities.drawRotatedShape(graphics2D0, (Shape) generalPath0, point2D_Double0.x, (float) int0, (float) int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
