/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:02:14 GMT 2014
 */

package org.jfree.chart.axis;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.util.EventListener;
import java.util.TimeZone;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.filechooser.FileSystemView;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.javax.swing.MockJFileChooser;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.AxisChangeListener;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.PolarItemRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.DefaultXYItemRenderer;
import org.jfree.chart.renderer.xy.HighLowRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer2;
import org.jfree.chart.renderer.xy.XYAreaRenderer2;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.renderer.xy.XYBubbleRenderer;
import org.jfree.chart.title.Title;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class AxisEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "[ Fl8\"U79c7LpQ@[>";
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertNotNull(categoryAxis3D0);
      
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(string0);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals("[ Fl8\"U79c7LpQ@[>", subCategoryAxis0.getLabel());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertNotNull(subCategoryAxis0);
      
      boolean boolean0 = categoryAxis3D0.equals((Object) subCategoryAxis0);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals("[ Fl8\"U79c7LpQ@[>", subCategoryAxis0.getLabel());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertFalse(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "Null 'paint' argument.";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals("Null 'paint' argument.", extendedCategoryAxis0.getLabel());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertNotNull(extendedCategoryAxis0);
      
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(string0);
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals("Null 'paint' argument.", subCategoryAxis0.getLabel());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, subCategoryAxis0.isVisible());
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNotNull(subCategoryAxis0);
      
      float float0 = extendedCategoryAxis0.getTickMarkOutsideLength();
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals("Null 'paint' argument.", extendedCategoryAxis0.getLabel());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, float0, 0.01F);
      
      Graphics2D graphics2D0 = null;
      JScrollPane jScrollPane0 = new JScrollPane();
      assertEquals(3, jScrollPane0.countComponents());
      assertEquals(3, jScrollPane0.getComponentCount());
      assertEquals(false, jScrollPane0.isPreferredSizeSet());
      assertEquals(false, jScrollPane0.isValid());
      assertEquals(true, jScrollPane0.isVisible());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jScrollPane0.isEnabled());
      assertEquals(true, jScrollPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jScrollPane0.isDisplayable());
      assertEquals(false, jScrollPane0.isLightweight());
      assertEquals(true, jScrollPane0.isBackgroundSet());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicySet());
      assertEquals(false, jScrollPane0.isMinimumSizeSet());
      assertEquals(false, jScrollPane0.isShowing());
      assertEquals(true, jScrollPane0.isFontSet());
      assertEquals(false, jScrollPane0.isFocusCycleRoot());
      assertEquals(false, jScrollPane0.isMaximumSizeSet());
      assertEquals(false, jScrollPane0.getIgnoreRepaint());
      assertEquals(false, jScrollPane0.isCursorSet());
      assertEquals(true, jScrollPane0.isForegroundSet());
      assertNotNull(jScrollPane0);
      
      JScrollBar jScrollBar0 = jScrollPane0.getHorizontalScrollBar();
      assertEquals(3, jScrollPane0.countComponents());
      assertEquals(3, jScrollPane0.getComponentCount());
      assertEquals(false, jScrollPane0.isPreferredSizeSet());
      assertEquals(false, jScrollPane0.isValid());
      assertEquals(true, jScrollPane0.isVisible());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jScrollPane0.isEnabled());
      assertEquals(true, jScrollPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jScrollPane0.isDisplayable());
      assertEquals(false, jScrollPane0.isLightweight());
      assertEquals(true, jScrollPane0.isBackgroundSet());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicySet());
      assertEquals(false, jScrollPane0.isMinimumSizeSet());
      assertEquals(false, jScrollPane0.isShowing());
      assertEquals(true, jScrollPane0.isFontSet());
      assertEquals(false, jScrollPane0.isFocusCycleRoot());
      assertEquals(false, jScrollPane0.isMaximumSizeSet());
      assertEquals(false, jScrollPane0.getIgnoreRepaint());
      assertEquals(false, jScrollPane0.isCursorSet());
      assertEquals(true, jScrollPane0.isForegroundSet());
      assertEquals(false, jScrollBar0.getIgnoreRepaint());
      assertEquals(false, jScrollBar0.isShowing());
      assertEquals(false, jScrollBar0.isValid());
      assertEquals(false, jScrollBar0.isMaximumSizeSet());
      assertEquals(false, jScrollBar0.isMinimumSizeSet());
      assertEquals(2, jScrollBar0.getComponentCount());
      assertEquals(true, jScrollBar0.getFocusTraversalKeysEnabled());
      assertEquals(true, jScrollBar0.isForegroundSet());
      assertEquals(true, jScrollBar0.isBackgroundSet());
      assertEquals(true, jScrollBar0.isEnabled());
      assertEquals(false, jScrollBar0.isLightweight());
      assertEquals(false, jScrollBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jScrollBar0.isDisplayable());
      assertEquals(false, jScrollBar0.isFocusCycleRoot());
      assertEquals(false, jScrollBar0.isPreferredSizeSet());
      assertEquals(false, jScrollBar0.isFontSet());
      assertEquals(2, jScrollBar0.countComponents());
      assertEquals(false, jScrollBar0.isFocusTraversalPolicySet());
      assertEquals(false, jScrollBar0.isCursorSet());
      assertEquals(true, jScrollBar0.isVisible());
      assertNotNull(jScrollBar0);
      
      Rectangle rectangle0 = jScrollBar0.getVisibleRect();
      assertEquals(3, jScrollPane0.countComponents());
      assertEquals(3, jScrollPane0.getComponentCount());
      assertEquals(false, jScrollPane0.isPreferredSizeSet());
      assertEquals(false, jScrollPane0.isValid());
      assertEquals(true, jScrollPane0.isVisible());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jScrollPane0.isEnabled());
      assertEquals(true, jScrollPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jScrollPane0.isDisplayable());
      assertEquals(false, jScrollPane0.isLightweight());
      assertEquals(true, jScrollPane0.isBackgroundSet());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicySet());
      assertEquals(false, jScrollPane0.isMinimumSizeSet());
      assertEquals(false, jScrollPane0.isShowing());
      assertEquals(true, jScrollPane0.isFontSet());
      assertEquals(false, jScrollPane0.isFocusCycleRoot());
      assertEquals(false, jScrollPane0.isMaximumSizeSet());
      assertEquals(false, jScrollPane0.getIgnoreRepaint());
      assertEquals(false, jScrollPane0.isCursorSet());
      assertEquals(true, jScrollPane0.isForegroundSet());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(false, jScrollBar0.getIgnoreRepaint());
      assertEquals(false, jScrollBar0.isShowing());
      assertEquals(false, jScrollBar0.isValid());
      assertEquals(false, jScrollBar0.isMaximumSizeSet());
      assertEquals(false, jScrollBar0.isMinimumSizeSet());
      assertEquals(2, jScrollBar0.getComponentCount());
      assertEquals(true, jScrollBar0.getFocusTraversalKeysEnabled());
      assertEquals(true, jScrollBar0.isForegroundSet());
      assertEquals(true, jScrollBar0.isBackgroundSet());
      assertEquals(true, jScrollBar0.isEnabled());
      assertEquals(false, jScrollBar0.isLightweight());
      assertEquals(false, jScrollBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jScrollBar0.isDisplayable());
      assertEquals(false, jScrollBar0.isFocusCycleRoot());
      assertEquals(false, jScrollBar0.isPreferredSizeSet());
      assertEquals(false, jScrollBar0.isFontSet());
      assertEquals(2, jScrollBar0.countComponents());
      assertEquals(false, jScrollBar0.isFocusTraversalPolicySet());
      assertEquals(false, jScrollBar0.isCursorSet());
      assertEquals(true, jScrollBar0.isVisible());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertNotNull(rectangle0);
      
      RectangleEdge rectangleEdge0 = null;
      // Undeclared exception!
      try {
        subCategoryAxis0.drawAxisLine(graphics2D0, float0, rectangle0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "w5uJhZA";
      PeriodAxis periodAxis0 = new PeriodAxis(string0);
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals("w5uJhZA", periodAxis0.getLabel());
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(true, periodAxis0.isVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, periodAxis0.isAutoRange());
      assertNotNull(periodAxis0);
      
      Graphics2D graphics2D0 = null;
      FileSystemView fileSystemView0 = null;
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser(fileSystemView0);
      assertEquals(false, mockJFileChooser0.isBackgroundSet());
      assertEquals(false, mockJFileChooser0.isMaximumSizeSet());
      assertEquals(true, mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, mockJFileChooser0.isCursorSet());
      assertEquals(false, mockJFileChooser0.isFocusCycleRoot());
      assertEquals(false, mockJFileChooser0.isLightweight());
      assertEquals(false, mockJFileChooser0.isFocusTraversalPolicyProvider());
      assertEquals(true, mockJFileChooser0.isVisible());
      assertEquals(false, mockJFileChooser0.isValid());
      assertEquals(false, mockJFileChooser0.isShowing());
      assertEquals(false, mockJFileChooser0.isDisplayable());
      assertEquals(true, mockJFileChooser0.isEnabled());
      assertEquals(false, mockJFileChooser0.isForegroundSet());
      assertEquals(4, mockJFileChooser0.getComponentCount());
      assertEquals(4, mockJFileChooser0.countComponents());
      assertEquals(false, mockJFileChooser0.isFocusTraversalPolicySet());
      assertEquals(false, mockJFileChooser0.getIgnoreRepaint());
      assertEquals(false, mockJFileChooser0.isPreferredSizeSet());
      assertEquals(false, mockJFileChooser0.isMinimumSizeSet());
      assertEquals(false, mockJFileChooser0.isFontSet());
      assertNotNull(mockJFileChooser0);
      
      Rectangle rectangle0 = mockJFileChooser0.bounds();
      assertEquals(false, mockJFileChooser0.isBackgroundSet());
      assertEquals(false, mockJFileChooser0.isMaximumSizeSet());
      assertEquals(true, mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, mockJFileChooser0.isCursorSet());
      assertEquals(false, mockJFileChooser0.isFocusCycleRoot());
      assertEquals(false, mockJFileChooser0.isLightweight());
      assertEquals(false, mockJFileChooser0.isFocusTraversalPolicyProvider());
      assertEquals(true, mockJFileChooser0.isVisible());
      assertEquals(false, mockJFileChooser0.isValid());
      assertEquals(false, mockJFileChooser0.isShowing());
      assertEquals(false, mockJFileChooser0.isDisplayable());
      assertEquals(true, mockJFileChooser0.isEnabled());
      assertEquals(false, mockJFileChooser0.isForegroundSet());
      assertEquals(4, mockJFileChooser0.getComponentCount());
      assertEquals(4, mockJFileChooser0.countComponents());
      assertEquals(false, mockJFileChooser0.isFocusTraversalPolicySet());
      assertEquals(false, mockJFileChooser0.getIgnoreRepaint());
      assertEquals(false, mockJFileChooser0.isPreferredSizeSet());
      assertEquals(false, mockJFileChooser0.isMinimumSizeSet());
      assertEquals(false, mockJFileChooser0.isFontSet());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertNotNull(rectangle0);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      AxisState axisState0 = null;
      ChartRenderingInfo chartRenderingInfo0 = null;
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      // Undeclared exception!
      try {
        AxisState axisState1 = periodAxis0.drawLabel(string0, graphics2D0, rectangle0, rectangle0, rectangleEdge0, axisState0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'state' argument.
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals("", extendedCategoryAxis0.getLabel());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertNotNull(extendedCategoryAxis0);
      
      Graphics2D graphics2D0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = (-3597);
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation(int0);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNotNull(axisLocation0);
      
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNotNull(plotOrientation0);
      
      RectangleEdge rectangleEdge0 = Plot.resolveDomainAxisLocation(axisLocation0, plotOrientation0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNotNull(rectangleEdge0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)extendedCategoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals("", extendedCategoryAxis0.getLabel());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertNotNull(rectangle2D_Double0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "Null 'prefix' argument.";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals("Null 'prefix' argument.", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertNotNull(logarithmicAxis0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((Comparable) string0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(true, simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertEquals(true, defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultPolarItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(defaultPolarItemRenderer0);
      
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) simpleHistogramDataset0, (ValueAxis) logarithmicAxis0, (PolarItemRenderer) defaultPolarItemRenderer0);
      assertEquals(false, polarPlot0.isDomainZoomable());
      assertEquals(true, polarPlot0.isAngleGridlinesVisible());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2.0, polarPlot0.getMaxRadius(), 0.01D);
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isAngleLabelsVisible());
      assertNull(polarPlot0.getNoDataMessage());
      assertEquals(false, polarPlot0.isSubplot());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertEquals(true, polarPlot0.isOutlineVisible());
      assertEquals(true, polarPlot0.isRangeZoomable());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isRadiusGridlinesVisible());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals("Null 'prefix' argument.", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(true, defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultPolarItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(true, simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(polarPlot0);
      
      boolean boolean0 = logarithmicAxis0.hasListener((EventListener) polarPlot0);
      assertEquals(false, polarPlot0.isDomainZoomable());
      assertEquals(true, polarPlot0.isAngleGridlinesVisible());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2.0, polarPlot0.getMaxRadius(), 0.01D);
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isAngleLabelsVisible());
      assertNull(polarPlot0.getNoDataMessage());
      assertEquals(false, polarPlot0.isSubplot());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertEquals(true, polarPlot0.isOutlineVisible());
      assertEquals(true, polarPlot0.isRangeZoomable());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isRadiusGridlinesVisible());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals("Null 'prefix' argument.", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(true, defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultPolarItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(true, simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals("", logarithmicAxis0.getLabel());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertNotNull(logarithmicAxis0);
      
      PeriodAxis periodAxis0 = new PeriodAxis(string0);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(false, periodAxis0.isInverted());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNotNull(periodAxis0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) periodAxis0);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(false, periodAxis0.isInverted());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedRangeCategoryPlot0);
      
      boolean boolean0 = logarithmicAxis0.hasListener((EventListener) combinedRangeCategoryPlot0);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(false, periodAxis0.isInverted());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals("", logarithmicAxis0.getLabel());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "Null 'insets' argument.";
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(string0);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals("Null 'insets' argument.", categoryAxis3D0.getLabel());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNotNull(categoryAxis3D0);
      
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(minMaxCategoryRenderer0);
      
      CategoryPlot categoryPlot0 = minMaxCategoryRenderer0.getPlot();
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertNull(categoryPlot0);
      
      categoryAxis3D0.removeChangeListener((AxisChangeListener) categoryPlot0);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals("Null 'insets' argument.", categoryAxis3D0.getLabel());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "org.jfree.chart.labels.StandardXYZToolTipGenerator";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("org.jfree.chart.labels.StandardXYZToolTipGenerator", extendedCategoryAxis0.getLabel());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertNotNull(extendedCategoryAxis0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertNotNull(thermometerPlot0);
      
      extendedCategoryAxis0.removeChangeListener((AxisChangeListener) thermometerPlot0);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("org.jfree.chart.labels.StandardXYZToolTipGenerator", extendedCategoryAxis0.getLabel());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertNotNull(combinedRangeXYPlot0);
      
      String string0 = "*=9b%m0r;.>_nPJY(";
      PeriodAxis periodAxis0 = new PeriodAxis(string0);
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals("*=9b%m0r;.>_nPJY(", periodAxis0.getLabel());
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isInverted());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(true, periodAxis0.isVisible());
      assertNotNull(periodAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) periodAxis0);
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals("*=9b%m0r;.>_nPJY(", periodAxis0.getLabel());
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isInverted());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedDomainXYPlot0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "Null 'insets' argument.";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(string0);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals("Null 'insets' argument.", subCategoryAxis0.getLabel());
      assertNull(subCategoryAxis0.getLabelURL());
      assertNotNull(subCategoryAxis0);
      
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultXYItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultXYItemRenderer0.getBaseLinesVisible());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertEquals(false, defaultXYItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultXYItemRenderer0.getDrawOutlines());
      assertNotNull(defaultXYItemRenderer0);
      
      int int0 = 0;
      Paint paint0 = defaultXYItemRenderer0.getSeriesOutlinePaint(int0);
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultXYItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultXYItemRenderer0.getBaseLinesVisible());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertEquals(false, defaultXYItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultXYItemRenderer0.getDrawOutlines());
      assertNull(paint0);
      
      // Undeclared exception!
      try {
        subCategoryAxis0.setTickMarkPaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "af#'HcR_cgD";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(string0);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("af#'HcR_cgD", subCategoryAxis0.getLabel());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertNotNull(subCategoryAxis0);
      
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01D);
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYBlockRenderer0.getBaseCreateEntities());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01D);
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYBlockRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(xYBlockRenderer0);
      
      Color color0 = (Color)xYBlockRenderer0.getBaseItemLabelPaint();
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01D);
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYBlockRenderer0.getBaseCreateEntities());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01D);
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYBlockRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(color0);
      
      subCategoryAxis0.setTickMarkPaint((Paint) color0);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("af#'HcR_cgD", subCategoryAxis0.getLabel());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01D);
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYBlockRenderer0.getBaseCreateEntities());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01D);
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYBlockRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "kduzecG`Dq4^\"TY";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals("kduzecG`Dq4^\"TY", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertNotNull(dateAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(combinedRangeXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getRangeCrosshairStroke();
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertNotNull(basicStroke0);
      
      dateAxis0.setTickMarkStroke((Stroke) basicStroke0);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals("kduzecG`Dq4^\"TY", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "V5{az1,~L";
      String[] stringArray0 = new String[10];
      SymbolAxis symbolAxis0 = new SymbolAxis(string0, stringArray0);
      assertEquals(true, symbolAxis0.isVisible());
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals("V5{az1,~L", symbolAxis0.getLabel());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, symbolAxis0.isInverted());
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, symbolAxis0.isAutoRange());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertNotNull(symbolAxis0);
      
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYBubbleRenderer0.getBaseCreateEntities());
      assertEquals(false, xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYBubbleRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertNotNull(xYBubbleRenderer0);
      
      int int0 = 3685;
      Stroke stroke0 = xYBubbleRenderer0.getSeriesOutlineStroke(int0);
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYBubbleRenderer0.getBaseCreateEntities());
      assertEquals(false, xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYBubbleRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertNull(stroke0);
      
      // Undeclared exception!
      try {
        symbolAxis0.setTickMarkStroke(stroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "Null 'paint' argument.";
      NumberAxis3D numberAxis3D0 = new NumberAxis3D(string0);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals("Null 'paint' argument.", numberAxis3D0.getLabel());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertNotNull(numberAxis3D0);
      
      BasicStroke basicStroke0 = (BasicStroke)AbstractRenderer.DEFAULT_STROKE;
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
      
      numberAxis3D0.setTickMarkStroke((Stroke) basicStroke0);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals("Null 'paint' argument.", numberAxis3D0.getLabel());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals("", extendedCategoryAxis0.getLabel());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertNotNull(extendedCategoryAxis0);
      
      boolean boolean0 = false;
      extendedCategoryAxis0.setTickMarksVisible(boolean0);
      assertEquals("", extendedCategoryAxis0.getLabel());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "Null 'paint' argument.";
      NumberAxis3D numberAxis3D0 = new NumberAxis3D(string0);
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals("Null 'paint' argument.", numberAxis3D0.getLabel());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertNotNull(numberAxis3D0);
      
      RectangleInsets rectangleInsets0 = Axis.DEFAULT_TICK_LABEL_INSETS;
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01D);
      assertNotNull(rectangleInsets0);
      
      numberAxis3D0.setTickLabelInsets(rectangleInsets0);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals("Null 'paint' argument.", numberAxis3D0.getLabel());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals("", extendedCategoryAxis0.getLabel());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertNotNull(extendedCategoryAxis0);
      
      RectangleInsets rectangleInsets0 = null;
      // Undeclared exception!
      try {
        extendedCategoryAxis0.setTickLabelInsets(rectangleInsets0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "Null 'insets' argument.";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertEquals("Null 'insets' argument.", dateAxis0.getLabel());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAutoRange());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertNotNull(dateAxis0);
      
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals("Null 'insets' argument.", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertNotNull(logarithmicAxis0);
      
      RectangleInsets rectangleInsets0 = logarithmicAxis0.getLabelInsets();
      assertEquals(3.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals("Null 'insets' argument.", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertNotNull(rectangleInsets0);
      
      dateAxis0.setTickLabelInsets(rectangleInsets0);
      assertEquals("Null 'insets' argument.", dateAxis0.getLabel());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAutoRange());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals("Null 'insets' argument.", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "45";
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      assertEquals(true, xYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(true, xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(false, xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYAreaRenderer2_0.isOutline());
      assertEquals(false, xYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(false, xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertEquals(true, xYAreaRenderer2_0.getBaseSeriesVisible());
      assertNotNull(xYAreaRenderer2_0);
      
      boolean boolean0 = true;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(boolean0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(true, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = xYAreaRenderer2_0.findDomainBounds((XYDataset) defaultTableXYDataset0);
      assertEquals(true, xYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(true, xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(false, xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYAreaRenderer2_0.isOutline());
      assertEquals(false, xYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(false, xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertEquals(true, xYAreaRenderer2_0.getBaseSeriesVisible());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(true, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertNull(range0);
      
      ModuloAxis moduloAxis0 = new ModuloAxis(string0, range0);
      assertEquals(true, xYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(true, xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(false, xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYAreaRenderer2_0.isOutline());
      assertEquals(false, xYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(false, xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertEquals(true, xYAreaRenderer2_0.getBaseSeriesVisible());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(true, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(true, moduloAxis0.isVisible());
      assertEquals(true, moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, moduloAxis0.isPositiveArrowVisible());
      assertEquals(true, moduloAxis0.getAutoRangeStickyZero());
      assertEquals(true, moduloAxis0.isAxisLineVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01D);
      assertEquals(true, moduloAxis0.isAutoRange());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(true, moduloAxis0.getAutoRangeIncludesZero());
      assertNull(moduloAxis0.getLabelURL());
      assertEquals("45", moduloAxis0.getLabel());
      assertEquals(false, moduloAxis0.isInverted());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01D);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01D);
      assertEquals(true, moduloAxis0.isTickLabelsVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01D);
      assertEquals(false, moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, moduloAxis0.isVerticalTickLabels());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, moduloAxis0.isTickMarksVisible());
      assertNotNull(moduloAxis0);
      
      int int0 = (-4406);
      XYToolTipGenerator xYToolTipGenerator0 = null;
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      assertEquals(true, highLowRenderer0.getBaseSeriesVisible());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertEquals(true, highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, highLowRenderer0.getDrawCloseTicks());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, highLowRenderer0.getDrawOpenTicks());
      assertEquals(true, highLowRenderer0.getBaseCreateEntities());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, highLowRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertNotNull(highLowRenderer0);
      
      XYURLGenerator xYURLGenerator0 = highLowRenderer0.getURLGenerator(int0, int0);
      assertEquals(true, highLowRenderer0.getBaseSeriesVisible());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertEquals(true, highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, highLowRenderer0.getDrawCloseTicks());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, highLowRenderer0.getDrawOpenTicks());
      assertEquals(true, highLowRenderer0.getBaseCreateEntities());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, highLowRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertNull(xYURLGenerator0);
      
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2(xYToolTipGenerator0, xYURLGenerator0);
      assertEquals(true, highLowRenderer0.getBaseSeriesVisible());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertEquals(true, highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, highLowRenderer0.getDrawCloseTicks());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, highLowRenderer0.getDrawOpenTicks());
      assertEquals(true, highLowRenderer0.getBaseCreateEntities());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, highLowRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(true, stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedXYAreaRenderer2_0.isOutline());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertNotNull(stackedXYAreaRenderer2_0);
      
      XYToolTipGenerator xYToolTipGenerator1 = stackedXYAreaRenderer2_0.getBaseToolTipGenerator();
      assertEquals(true, highLowRenderer0.getBaseSeriesVisible());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertEquals(true, highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, highLowRenderer0.getDrawCloseTicks());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, highLowRenderer0.getDrawOpenTicks());
      assertEquals(true, highLowRenderer0.getBaseCreateEntities());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, highLowRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(true, stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedXYAreaRenderer2_0.isOutline());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertNull(xYToolTipGenerator1);
      
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(int0, xYToolTipGenerator1);
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, highLowRenderer0.getBaseSeriesVisible());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertEquals(true, highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, highLowRenderer0.getDrawCloseTicks());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, highLowRenderer0.getDrawOpenTicks());
      assertEquals(true, highLowRenderer0.getBaseCreateEntities());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, highLowRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(true, stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedXYAreaRenderer2_0.isOutline());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertNotNull(cyclicXYItemRenderer0);
      
      Paint paint0 = cyclicXYItemRenderer0.getSeriesItemLabelPaint(int0);
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, highLowRenderer0.getBaseSeriesVisible());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertEquals(true, highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, highLowRenderer0.getDrawCloseTicks());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, highLowRenderer0.getDrawOpenTicks());
      assertEquals(true, highLowRenderer0.getBaseCreateEntities());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, highLowRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(true, stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedXYAreaRenderer2_0.isOutline());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertNull(paint0);
      
      // Undeclared exception!
      try {
        moduloAxis0.setTickLabelPaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertNotNull(numberAxis3D0);
      
      AreaRenderer areaRenderer0 = new AreaRenderer();
      assertEquals(0, areaRenderer0.getRowCount());
      assertEquals(true, areaRenderer0.getBaseCreateEntities());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, areaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, areaRenderer0.getColumnCount());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, areaRenderer0.getPassCount());
      assertEquals(true, areaRenderer0.getBaseSeriesVisible());
      assertEquals(false, areaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, areaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertNotNull(areaRenderer0);
      
      int int0 = (-475);
      Color color0 = (Color)areaRenderer0.lookupSeriesFillPaint(int0);
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(-1, color0.getRGB());
      assertEquals(0, areaRenderer0.getRowCount());
      assertEquals(true, areaRenderer0.getBaseCreateEntities());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, areaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, areaRenderer0.getColumnCount());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, areaRenderer0.getPassCount());
      assertEquals(true, areaRenderer0.getBaseSeriesVisible());
      assertEquals(false, areaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, areaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertNotNull(color0);
      
      numberAxis3D0.setTickLabelPaint((Paint) color0);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(-1, color0.getRGB());
      assertEquals(0, areaRenderer0.getRowCount());
      assertEquals(true, areaRenderer0.getBaseCreateEntities());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, areaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, areaRenderer0.getColumnCount());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, areaRenderer0.getPassCount());
      assertEquals(true, areaRenderer0.getBaseSeriesVisible());
      assertEquals(false, areaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, areaRenderer0.getItemLabelAnchorOffset(), 0.01D);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "af#'HcR_cgD";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(string0);
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals("af#'HcR_cgD", subCategoryAxis0.getLabel());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertNull(subCategoryAxis0.getLabelURL());
      assertNotNull(subCategoryAxis0);
      
      boolean boolean0 = false;
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(boolean0, boolean0);
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      Font font0 = statisticalLineAndShapeRenderer0.getBaseItemLabelFont();
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(true, font0.isPlain());
      assertEquals(false, font0.isTransformed());
      assertEquals(false, font0.isBold());
      assertEquals(false, font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(false, font0.hasLayoutAttributes());
      assertNotNull(font0);
      
      subCategoryAxis0.setTickLabelFont(font0);
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(true, font0.isPlain());
      assertEquals(false, font0.isTransformed());
      assertEquals(false, font0.isBold());
      assertEquals(false, font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals("af#'HcR_cgD", subCategoryAxis0.getLabel());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertNull(subCategoryAxis0.getLabelURL());
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = ",bottom=";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(",bottom=", extendedCategoryAxis0.getLabel());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertNotNull(extendedCategoryAxis0);
      
      double double0 = 3340.93491996;
      boolean boolean0 = false;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(double0, double0, boolean0);
      assertEquals(true, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(3340.93491996, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(3340.93491996, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(0.0, stackedBarRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertNotNull(stackedBarRenderer3D0);
      
      int int0 = 1419;
      Font font0 = stackedBarRenderer3D0.getSeriesItemLabelFont(int0);
      assertEquals(true, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(3340.93491996, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(3340.93491996, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(0.0, stackedBarRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertNull(font0);
      
      // Undeclared exception!
      try {
        extendedCategoryAxis0.setTickLabelFont(font0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "*=9b%m0r;.>_nPJY(";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals("*=9b%m0r;.>_nPJY(", extendedCategoryAxis0.getLabel());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertNotNull(extendedCategoryAxis0);
      
      PeriodAxis periodAxis0 = new PeriodAxis(string0);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals("*=9b%m0r;.>_nPJY(", periodAxis0.getLabel());
      assertNotNull(periodAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) periodAxis0);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals("*=9b%m0r;.>_nPJY(", periodAxis0.getLabel());
      assertNotNull(combinedDomainXYPlot0);
      
      Font font0 = combinedDomainXYPlot0.getNoDataMessageFont();
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, font0.isTransformed());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals(12, font0.getSize());
      assertEquals("SansSerif", font0.getName());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=12]", font0.toString());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.isBold());
      assertEquals(true, font0.isPlain());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals("*=9b%m0r;.>_nPJY(", periodAxis0.getLabel());
      assertNotNull(font0);
      
      extendedCategoryAxis0.setTickLabelFont(font0);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals("*=9b%m0r;.>_nPJY(", extendedCategoryAxis0.getLabel());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(false, font0.isTransformed());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals(12, font0.getSize());
      assertEquals("SansSerif", font0.getName());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=12]", font0.toString());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.isBold());
      assertEquals(true, font0.isPlain());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals("*=9b%m0r;.>_nPJY(", periodAxis0.getLabel());
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals("", extendedCategoryAxis0.getLabel());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertNotNull(extendedCategoryAxis0);
      
      boolean boolean0 = false;
      extendedCategoryAxis0.setTickLabelsVisible(boolean0);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals("", extendedCategoryAxis0.getLabel());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(false, extendedCategoryAxis0.isTickLabelsVisible());
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = " \"*j3++-|=B$y!r";
      NumberAxis3D numberAxis3D0 = new NumberAxis3D(string0);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(" \"*j3++-|=B$y!r", numberAxis3D0.getLabel());
      assertNotNull(numberAxis3D0);
      
      boolean boolean0 = true;
      numberAxis3D0.setTickLabelsVisible(boolean0);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(" \"*j3++-|=B$y!r", numberAxis3D0.getLabel());
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "'CNbL/5-H=?q";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals("'CNbL/5-H=?q", extendedCategoryAxis0.getLabel());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertNotNull(extendedCategoryAxis0);
      
      Stroke stroke0 = null;
      // Undeclared exception!
      try {
        extendedCategoryAxis0.setAxisLineStroke(stroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "*=9b%m0r;.>_nPJY(";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals("*=9b%m0r;.>_nPJY(", extendedCategoryAxis0.getLabel());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertNotNull(extendedCategoryAxis0);
      
      BasicStroke basicStroke0 = (BasicStroke)Axis.DEFAULT_TICK_MARK_STROKE;
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
      
      extendedCategoryAxis0.setAxisLineStroke((Stroke) basicStroke0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals("*=9b%m0r;.>_nPJY(", extendedCategoryAxis0.getLabel());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isVisible());
  }

  @Test
  public void test27()  throws Throwable  {
      double double0 = (-86.3372364);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals((-86.3372364), cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals((-86.3372364), cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertNotNull(cyclicNumberAxis0);
      
      Paint paint0 = null;
      // Undeclared exception!
      try {
        cyclicNumberAxis0.setAxisLinePaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals("", extendedCategoryAxis0.getLabel());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNotNull(extendedCategoryAxis0);
      
      Color color0 = (Color)extendedCategoryAxis0.getTickLabelPaint();
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals("", extendedCategoryAxis0.getLabel());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNotNull(color0);
      
      extendedCategoryAxis0.setAxisLinePaint((Paint) color0);
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals("", extendedCategoryAxis0.getLabel());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "af#'HcR_cgD";
      NumberAxis3D numberAxis3D0 = new NumberAxis3D(string0);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals("af#'HcR_cgD", numberAxis3D0.getLabel());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertNotNull(numberAxis3D0);
      
      RectangleInsets rectangleInsets0 = Title.DEFAULT_PADDING;
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01D);
      assertNotNull(rectangleInsets0);
      
      numberAxis3D0.setLabelInsets(rectangleInsets0);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals("af#'HcR_cgD", numberAxis3D0.getLabel());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      
      numberAxis3D0.setLabelInsets(rectangleInsets0);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals("af#'HcR_cgD", numberAxis3D0.getLabel());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
  }

  @Test
  public void test30()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertNotNull(numberAxis3D0);
      
      RectangleInsets rectangleInsets0 = null;
      // Undeclared exception!
      try {
        numberAxis3D0.setLabelInsets(rectangleInsets0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "[ Fl8\"U79c7LpQ@[>";
      AreaRenderer areaRenderer0 = new AreaRenderer();
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, areaRenderer0.getRowCount());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, areaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, areaRenderer0.getPassCount());
      assertEquals(false, areaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, areaRenderer0.getColumnCount());
      assertEquals(true, areaRenderer0.getBaseCreateEntities());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, areaRenderer0.getBaseSeriesVisible());
      assertEquals(true, areaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(areaRenderer0);
      
      int int0 = (-475);
      Color color0 = (Color)areaRenderer0.lookupSeriesFillPaint(int0);
      assertEquals(255, color0.getBlue());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getGreen());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, areaRenderer0.getRowCount());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, areaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, areaRenderer0.getPassCount());
      assertEquals(false, areaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, areaRenderer0.getColumnCount());
      assertEquals(true, areaRenderer0.getBaseCreateEntities());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, areaRenderer0.getBaseSeriesVisible());
      assertEquals(true, areaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(color0);
      
      PeriodAxis periodAxis0 = new PeriodAxis(string0);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals("[ Fl8\"U79c7LpQ@[>", periodAxis0.getLabel());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNotNull(periodAxis0);
      
      periodAxis0.setLabelPaint((Paint) color0);
      assertEquals(255, color0.getBlue());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getGreen());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, areaRenderer0.getRowCount());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, areaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, areaRenderer0.getPassCount());
      assertEquals(false, areaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, areaRenderer0.getColumnCount());
      assertEquals(true, areaRenderer0.getBaseCreateEntities());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, areaRenderer0.getBaseSeriesVisible());
      assertEquals(true, areaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals("[ Fl8\"U79c7LpQ@[>", periodAxis0.getLabel());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "Z:+";
      String[] stringArray0 = new String[1];
      SymbolAxis symbolAxis0 = new SymbolAxis(string0, stringArray0);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, symbolAxis0.isVisible());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      assertEquals(true, symbolAxis0.isAutoRange());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals("Z:+", symbolAxis0.getLabel());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, symbolAxis0.isInverted());
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertNotNull(symbolAxis0);
      
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, statisticalBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertNotNull(statisticalBarRenderer0);
      
      Font font0 = statisticalBarRenderer0.getBaseItemLabelFont();
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, statisticalBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(false, font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.isTransformed());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(true, font0.isPlain());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(false, font0.isItalic());
      assertNotNull(font0);
      
      symbolAxis0.setLabelFont(font0);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, symbolAxis0.isVisible());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      assertEquals(true, symbolAxis0.isAutoRange());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals("Z:+", symbolAxis0.getLabel());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, symbolAxis0.isInverted());
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, statisticalBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(false, font0.isBold());
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.isTransformed());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(true, font0.isPlain());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(false, font0.isItalic());
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "6Vu{5::+!DNQ&";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals("6Vu{5::+!DNQ&", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertNotNull(logarithmicAxis0);
      
      Font font0 = null;
      // Undeclared exception!
      try {
        logarithmicAxis0.setLabelFont(font0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "Null 'prefix' argument.";
      NumberAxis3D numberAxis3D0 = new NumberAxis3D(string0);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals("Null 'prefix' argument.", numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertNotNull(numberAxis3D0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) numberAxis3D0);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals("Null 'prefix' argument.", numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      Font font0 = combinedRangeXYPlot0.getNoDataMessageFont();
      assertEquals(false, font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.isBold());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(true, font0.isPlain());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=12]", font0.toString());
      assertEquals(12, font0.getSize());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals("Null 'prefix' argument.", numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNotNull(font0);
      
      numberAxis3D0.setLabelFont(font0);
      assertEquals(false, font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.isBold());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(true, font0.isPlain());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=12]", font0.toString());
      assertEquals(12, font0.getSize());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals("Null 'prefix' argument.", numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
  }

  @Test
  public void test35()  throws Throwable  {
      double double0 = (-86.3372364);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals((-86.3372364), cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals((-86.3372364), cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNotNull(cyclicNumberAxis0);
      
      String string0 = null;
      cyclicNumberAxis0.setLabel(string0);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals((-86.3372364), cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals((-86.3372364), cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = "";
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertEquals("fL*,DZA", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      DateAxis dateAxis0 = new DateAxis(string0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals("", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals("fL*,DZA", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(dateAxis0);
      
      String string1 = "f5,hZA";
      //  // Unstable assertion: assertNotSame(string1, string0);
      
      dateAxis0.setLabel(string1);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals("f5,hZA", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals("fL*,DZA", zoneInfo0.getID());
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "";
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertEquals("fL*,DZA", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      DateAxis dateAxis0 = new DateAxis(string0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals("", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals("fL*,DZA", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(dateAxis0);
      
      dateAxis0.setLabel(string0);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals("", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals("fL*,DZA", zoneInfo0.getID());
  }

  @Test
  public void test38()  throws Throwable  {
      double double0 = (-86.3372364);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals((-86.3372364), cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals((-86.3372364), cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertNotNull(cyclicNumberAxis0);
      
      String string0 = ")'Dr!G+n~Q(5hiezJ'/";
      cyclicNumberAxis0.setLabel(string0);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals((-86.3372364), cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(")'Dr!G+n~Q(5hiezJ'/", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals((-86.3372364), cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = "Null 'paint' argument.";
      NumberAxis3D numberAxis3D0 = new NumberAxis3D(string0);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals("Null 'paint' argument.", numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNotNull(numberAxis3D0);
      
      boolean boolean0 = false;
      numberAxis3D0.setVisible(boolean0);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals("Null 'paint' argument.", numberAxis3D0.getLabel());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test
  public void test40()  throws Throwable  {
      String string0 = "Null 'insets' argument.";
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(string0);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals("Null 'insets' argument.", categoryAxis3D0.getLabel());
      assertNotNull(categoryAxis3D0);
      
      boolean boolean0 = true;
      categoryAxis3D0.setVisible(boolean0);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals("Null 'insets' argument.", categoryAxis3D0.getLabel());
  }

  @Test
  public void test41()  throws Throwable  {
      String string0 = "Null 'paint' argument.";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals("Null 'paint' argument.", extendedCategoryAxis0.getLabel());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertNotNull(extendedCategoryAxis0);
      
      float float0 = 2725.7495F;
      extendedCategoryAxis0.setTickMarkInsideLength(float0);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(2725.7495F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals("Null 'paint' argument.", extendedCategoryAxis0.getLabel());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
  }

  @Test
  public void test42()  throws Throwable  {
      String string0 = "Null 'insets' argument.";
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(string0);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals("Null 'insets' argument.", categoryAxis3D0.getLabel());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNotNull(categoryAxis3D0);
      
      Color color0 = (Color)categoryAxis3D0.getLabelPaint();
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals("Null 'insets' argument.", categoryAxis3D0.getLabel());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(255, color0.getAlpha());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getRed());
      assertNotNull(color0);
  }

  @Test
  public void test43()  throws Throwable  {
      String string0 = " \"*j3++-|=B$y!r";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(" \"*j3++-|=B$y!r", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertNotNull(dateAxis0);
      
      String string1 = dateAxis0.getLabelToolTip();
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(" \"*j3++-|=B$y!r", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertNull(string1);
  }

  @Test
  public void test44()  throws Throwable  {
      String string0 = "[ Fl8\"U79c7LpQ@[>";
      String[] stringArray0 = new String[7];
      SymbolAxis symbolAxis0 = new SymbolAxis(string0, stringArray0);
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, symbolAxis0.isVisible());
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, symbolAxis0.isInverted());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertEquals("[ Fl8\"U79c7LpQ@[>", symbolAxis0.getLabel());
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      assertEquals(true, symbolAxis0.isAutoRange());
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertNotNull(symbolAxis0);
      
      SymbolAxis symbolAxis1 = (SymbolAxis)symbolAxis0.clone();
      assertNotSame(symbolAxis1, symbolAxis0);
      assertNotSame(symbolAxis0, symbolAxis1);
      assertTrue(symbolAxis1.equals((Object)symbolAxis0));
      assertTrue(symbolAxis0.equals((Object)symbolAxis1));
      assertEquals(true, symbolAxis1.isTickMarksVisible());
      assertEquals(false, symbolAxis1.isPositiveArrowVisible());
      assertEquals(true, symbolAxis1.isGridBandsVisible());
      assertEquals(true, symbolAxis1.isVisible());
      assertEquals("[ Fl8\"U79c7LpQ@[>", symbolAxis1.getLabel());
      assertEquals(0.0, symbolAxis1.getFixedDimension(), 0.01D);
      assertEquals(0.0, symbolAxis1.getLabelAngle(), 0.01D);
      assertEquals(2.0F, symbolAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, symbolAxis1.getLowerMargin(), 0.01D);
      assertEquals(1.0, symbolAxis1.getUpperBound(), 0.01D);
      assertEquals(false, symbolAxis1.isAutoTickUnitSelection());
      assertEquals(0.05, symbolAxis1.getUpperMargin(), 0.01D);
      assertEquals(0.0, symbolAxis1.getLowerBound(), 0.01D);
      assertEquals(true, symbolAxis1.isTickLabelsVisible());
      assertEquals(true, symbolAxis1.isAutoRange());
      assertEquals(false, symbolAxis1.isNegativeArrowVisible());
      assertEquals(1.0E-8, symbolAxis1.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, symbolAxis1.isAxisLineVisible());
      assertEquals(0.0, symbolAxis1.getFixedAutoRange(), 0.01D);
      assertEquals(false, symbolAxis1.isVerticalTickLabels());
      assertEquals(false, symbolAxis1.isInverted());
      assertNull(symbolAxis1.getLabelURL());
      assertEquals(false, symbolAxis1.getAutoRangeStickyZero());
      assertNull(symbolAxis1.getLabelToolTip());
      assertEquals(true, symbolAxis1.getAutoRangeIncludesZero());
      assertEquals(0.0F, symbolAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, symbolAxis0.isVisible());
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, symbolAxis0.isInverted());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertEquals("[ Fl8\"U79c7LpQ@[>", symbolAxis0.getLabel());
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      assertEquals(true, symbolAxis0.isAutoRange());
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertNotNull(symbolAxis1);
  }

  @Test
  public void test45()  throws Throwable  {
      Graphics2D graphics2D0 = null;
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      String string0 = "Uy !7;JVkMpJ";
      String[] stringArray0 = new String[2];
      SymbolAxis symbolAxis0 = new SymbolAxis(string0, stringArray0);
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertEquals("Uy !7;JVkMpJ", symbolAxis0.getLabel());
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(true, symbolAxis0.isAutoRange());
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, symbolAxis0.isInverted());
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertEquals(true, symbolAxis0.isVisible());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertNotNull(symbolAxis0);
      
      // Undeclared exception!
      try {
        Rectangle2D rectangle2D0 = symbolAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertNotNull(categoryAxis3D0);
      
      String string0 = "";
      categoryAxis3D0.setLabelToolTip(string0);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("", categoryAxis3D0.getLabelToolTip());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
  }

  @Test
  public void test47()  throws Throwable  {
      String string0 = "*=9b%m0r;.>_nPJY(";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals("*=9b%m0r;.>_nPJY(", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertNotNull(logarithmicAxis0);
      
      Color color0 = (Color)logarithmicAxis0.getAxisLinePaint();
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals("*=9b%m0r;.>_nPJY(", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertNotNull(color0);
  }

  @Test
  public void test48()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertNotNull(numberAxis3D0);
      
      double double0 = numberAxis3D0.getLabelAngle();
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test49()  throws Throwable  {
      String string0 = "Null 'paint' argument.";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(string0);
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals("Null 'paint' argument.", subCategoryAxis0.getLabel());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNotNull(subCategoryAxis0);
      
      boolean boolean0 = subCategoryAxis0.isTickLabelsVisible();
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals("Null 'paint' argument.", subCategoryAxis0.getLabel());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(boolean0);
  }

  @Test
  public void test50()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertNull(categoryAxis0.getLabel());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNotNull(categoryAxis0);
      
      Graphics2D graphics2D0 = null;
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNull(categoryAxis0.getLabel());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertNotNull(rectangle2D_Double0);
  }

  @Test
  public void test51()  throws Throwable  {
      String string0 = "Null 'insets' argument.";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals("Null 'insets' argument.", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelToolTip());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isVisible());
      assertNotNull(dateAxis0);
      
      boolean boolean0 = dateAxis0.isAxisLineVisible();
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals("Null 'insets' argument.", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelToolTip());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isVisible());
      assertTrue(boolean0);
  }

  @Test
  public void test52()  throws Throwable  {
      String string0 = "";
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertEquals("fL*,DZA", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      DateAxis dateAxis0 = new DateAxis(string0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals("", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals("fL*,DZA", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(dateAxis0);
      
      Graphics2D graphics2D0 = null;
      Rectangle2D rectangle2D0 = null;
      RectangleEdge rectangleEdge0 = null;
      // Undeclared exception!
      try {
        dateAxis0.selectHorizontalAutoTickUnit(graphics2D0, rectangle2D0, rectangleEdge0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test53()  throws Throwable  {
      String string0 = "";
      float float0 = 0.0F;
      PeriodAxis periodAxis0 = new PeriodAxis(string0);
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertNotNull(periodAxis0);
      
      periodAxis0.setFixedDimension((double) float0);
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
  }

  @Test
  public void test54()  throws Throwable  {
      String string0 = "";
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertEquals("fL*,DZA", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      DateAxis dateAxis0 = new DateAxis(string0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertEquals("", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals("fL*,DZA", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(dateAxis0);
      
      float float0 = dateAxis0.getTickMarkInsideLength();
      //  // Unstable assertion: assertEquals("", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals("fL*,DZA", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test55()  throws Throwable  {
      String string0 = "*=9b%m0r;.>_nPJY(";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("*=9b%m0r;.>_nPJY(", extendedCategoryAxis0.getLabel());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNotNull(extendedCategoryAxis0);
      
      BasicStroke basicStroke0 = (BasicStroke)extendedCategoryAxis0.getAxisLineStroke();
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("*=9b%m0r;.>_nPJY(", extendedCategoryAxis0.getLabel());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertNotNull(basicStroke0);
  }

  @Test
  public void test56()  throws Throwable  {
      String string0 = "TFUfI$\".#Q2TrI";
      String[] stringArray0 = new String[7];
      SymbolAxis symbolAxis0 = new SymbolAxis(string0, stringArray0);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, symbolAxis0.isInverted());
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertEquals(true, symbolAxis0.isAutoRange());
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(true, symbolAxis0.isVisible());
      assertEquals("TFUfI$\".#Q2TrI", symbolAxis0.getLabel());
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      assertNotNull(symbolAxis0);
      
      boolean boolean0 = symbolAxis0.isVisible();
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, symbolAxis0.isInverted());
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertEquals(true, symbolAxis0.isAutoRange());
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(true, symbolAxis0.isVisible());
      assertEquals("TFUfI$\".#Q2TrI", symbolAxis0.getLabel());
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      assertTrue(boolean0);
  }

  @Test
  public void test57()  throws Throwable  {
      String string0 = "Z:+";
      int int0 = 221;
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals("Z:+", extendedCategoryAxis0.getLabel());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertNotNull(extendedCategoryAxis0);
      
      extendedCategoryAxis0.setLabelAngle((double) int0);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals("Z:+", extendedCategoryAxis0.getLabel());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(221.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
  }

  @Test
  public void test58()  throws Throwable  {
      String string0 = "Null 'paint' argument.";
      NumberAxis3D numberAxis3D0 = new NumberAxis3D(string0);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals("Null 'paint' argument.", numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertNotNull(numberAxis3D0);
      
      String string1 = numberAxis3D0.getLabelURL();
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals("Null 'paint' argument.", numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertNull(string1);
  }

  @Test
  public void test59()  throws Throwable  {
      String string0 = "org.jfree.chart.labels.IntervalCategoryToolTipGenerator";
      PeriodAxis periodAxis0 = new PeriodAxis(string0);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals("org.jfree.chart.labels.IntervalCategoryToolTipGenerator", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertNotNull(periodAxis0);
      
      Color color0 = (Color)periodAxis0.getTickMarkPaint();
      assertEquals(128, color0.getRed());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals("org.jfree.chart.labels.IntervalCategoryToolTipGenerator", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertNotNull(color0);
  }

  @Test
  public void test60()  throws Throwable  {
      String string0 = "Null 'paint' argument.";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals("Null 'paint' argument.", extendedCategoryAxis0.getLabel());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertNotNull(extendedCategoryAxis0);
      
      extendedCategoryAxis0.setLabelURL(string0);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals("Null 'paint' argument.", extendedCategoryAxis0.getLabelURL());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals("Null 'paint' argument.", extendedCategoryAxis0.getLabel());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
  }

  @Test
  public void test61()  throws Throwable  {
      String string0 = "af#'HcR_cgD";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(string0);
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals("af#'HcR_cgD", subCategoryAxis0.getLabel());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertNotNull(subCategoryAxis0);
      
      boolean boolean0 = subCategoryAxis0.isTickMarksVisible();
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals("af#'HcR_cgD", subCategoryAxis0.getLabel());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertFalse(boolean0);
  }

  @Test
  public void test62()  throws Throwable  {
      String string0 = "Null 'paint' argument.";
      PeriodAxis periodAxis0 = new PeriodAxis(string0);
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals("Null 'paint' argument.", periodAxis0.getLabel());
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNotNull(periodAxis0);
      
      BasicStroke basicStroke0 = (BasicStroke)periodAxis0.getTickMarkStroke();
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals("Null 'paint' argument.", periodAxis0.getLabel());
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
  }

  @Test
  public void test63()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNotNull(categoryAxis3D0);
      
      float float0 = 0.0F;
      categoryAxis3D0.setTickMarkOutsideLength(float0);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
  }

  @Test
  public void test64()  throws Throwable  {
      float float0 = 2725.7495F;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) float0, (double) float0);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(2725.74951171875, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2725.74951171875, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(2725.74951171875, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNotNull(cyclicNumberAxis0);
      
      double double0 = cyclicNumberAxis0.getFixedDimension();
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(2725.74951171875, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2725.74951171875, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(2725.74951171875, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, double0, 0.01D);
  }
}
