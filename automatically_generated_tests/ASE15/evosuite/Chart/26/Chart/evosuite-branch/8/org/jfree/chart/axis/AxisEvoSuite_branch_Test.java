/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:09:19 GMT 2014
 */

package org.jfree.chart.axis;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.EventListener;
import java.util.TimeZone;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.plaf.FontUIResource;
import javax.swing.plaf.basic.BasicToolBarUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.AxisChangeListener;
import org.jfree.chart.event.MarkerChangeEvent;
import org.jfree.chart.needle.LineNeedle;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.RegularTimePeriod;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class AxisEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = null;
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertNotNull(logarithmicAxis0);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertNull(logarithmicAxis0.getLabel());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      
      NumberAxis numberAxis0 = new NumberAxis();
      assertNotNull(numberAxis0);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      
      boolean boolean0 = logarithmicAxis0.equals((Object) numberAxis0);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertNull(logarithmicAxis0.getLabel());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "AoQ7";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertNotNull(logarithmicAxis0);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals("AoQ7", logarithmicAxis0.getLabel());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      
      NumberAxis numberAxis0 = new NumberAxis();
      assertNotNull(numberAxis0);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      
      boolean boolean0 = logarithmicAxis0.equals((Object) numberAxis0);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals("AoQ7", logarithmicAxis0.getLabel());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = (-1285.034127);
      Graphics2D graphics2D0 = null;
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      
      CategoryAxis categoryAxis0 = combinedDomainCategoryPlot0.getDomainAxis();
      assertNotNull(categoryAxis0);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis0.getLabel());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      
      Rectangle2D rectangle2D0 = null;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals((-1285.034127), cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals((-1285.034127), cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) cyclicNumberAxis0);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals((-1285.034127), cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      
      int int0 = (-1751);
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation(int0);
      assertNotNull(axisLocation0);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals((-1285.034127), cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      
      PolarPlot polarPlot0 = new PolarPlot();
      assertNotNull(polarPlot0);
      assertEquals(false, polarPlot0.isSubplot());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertEquals(true, polarPlot0.isRangeZoomable());
      assertEquals(true, polarPlot0.isAngleLabelsVisible());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, polarPlot0.isDomainZoomable());
      assertNull(polarPlot0.getNoDataMessage());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isAngleGridlinesVisible());
      assertEquals(true, polarPlot0.isRadiusGridlinesVisible());
      assertEquals(true, polarPlot0.isOutlineVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      assertNotNull(plotOrientation0);
      assertEquals("PlotOrientation.HORIZONTAL", plotOrientation0.toString());
      assertEquals(false, polarPlot0.isSubplot());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertEquals(true, polarPlot0.isRangeZoomable());
      assertEquals(true, polarPlot0.isAngleLabelsVisible());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, polarPlot0.isDomainZoomable());
      assertNull(polarPlot0.getNoDataMessage());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isAngleGridlinesVisible());
      assertEquals(true, polarPlot0.isRadiusGridlinesVisible());
      assertEquals(true, polarPlot0.isOutlineVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      
      RectangleEdge rectangleEdge0 = Plot.resolveRangeAxisLocation(axisLocation0, plotOrientation0);
      assertNotNull(rectangleEdge0);
      assertEquals("PlotOrientation.HORIZONTAL", plotOrientation0.toString());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals((-1285.034127), cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals(false, polarPlot0.isSubplot());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertEquals(true, polarPlot0.isRangeZoomable());
      assertEquals(true, polarPlot0.isAngleLabelsVisible());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, polarPlot0.isDomainZoomable());
      assertNull(polarPlot0.getNoDataMessage());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isAngleGridlinesVisible());
      assertEquals(true, polarPlot0.isRadiusGridlinesVisible());
      assertEquals(true, polarPlot0.isOutlineVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      
      // Undeclared exception!
      try {
        categoryAxis0.drawAxisLine(graphics2D0, double0, rectangle2D0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = null;
      PeriodAxis periodAxis0 = new PeriodAxis(string0);
      assertNotNull(periodAxis0);
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabel());
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertNull(periodAxis0.getLabelURL());
      assertNull(periodAxis0.getLabelToolTip());
      
      Graphics2D graphics2D0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) periodAxis0);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabel());
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertNull(periodAxis0.getLabelURL());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge();
      assertNotNull(rectangleEdge0);
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabel());
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertNull(periodAxis0.getLabelURL());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)periodAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabel());
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertNull(periodAxis0.getLabelURL());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "AoQ7";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertNotNull(logarithmicAxis0);
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals("AoQ7", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) logarithmicAxis0);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals("AoQ7", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      
      double double0 = (-31.012970868058485);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals((-31.012970868058485), cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-31.012970868058485), cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      
      NumberTickUnit numberTickUnit0 = cyclicNumberAxis0.getTickUnit();
      assertNotNull(numberTickUnit0);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals((-31.012970868058485), cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-31.012970868058485), cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0, numberTickUnit0.getSize(), 0.01D);
      
      logarithmicAxis0.setTickUnit(numberTickUnit0);
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals("AoQ7", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(false, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals((-31.012970868058485), cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-31.012970868058485), cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0, numberTickUnit0.getSize(), 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      
      NumberAxis numberAxis0 = (NumberAxis)combinedDomainXYPlot0.getDomainAxis();
      assertNotNull(numberAxis0);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertNull(numberAxis0.getLabelURL());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      
      boolean boolean0 = numberAxis0.hasListener((EventListener) combinedDomainXYPlot0);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertNull(numberAxis0.getLabelURL());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertTrue(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "$'dJS'SXYZ";
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("A", zoneInfo0.getID());
      
      DateAxis dateAxis0 = new DateAxis(string0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(dateAxis0);
      //  // Unstable assertion: assertEquals("A", zoneInfo0.getID());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals("$'dJS'SXYZ", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      
      double double0 = 0.0;
      ValueMarker valueMarker0 = new ValueMarker(double0);
      //  // Unstable assertion: assertNotNull(valueMarker0);
      //  // Unstable assertion: assertNull(valueMarker0.getLabel());
      //  // Unstable assertion: assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      
      MarkerChangeEvent markerChangeEvent0 = new MarkerChangeEvent((Marker) valueMarker0);
      //  // Unstable assertion: assertNotNull(markerChangeEvent0);
      //  // Unstable assertion: assertNull(valueMarker0.getLabel());
      //  // Unstable assertion: assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      
      JFreeChart jFreeChart0 = markerChangeEvent0.getChart();
      //  // Unstable assertion: assertNull(jFreeChart0);
      //  // Unstable assertion: assertNull(valueMarker0.getLabel());
      //  // Unstable assertion: assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      
      boolean boolean0 = dateAxis0.hasListener((EventListener) jFreeChart0);
      //  // Unstable assertion: assertEquals("A", zoneInfo0.getID());
      //  // Unstable assertion: assertNull(valueMarker0.getLabel());
      //  // Unstable assertion: assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals("$'dJS'SXYZ", dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "AoQ7";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertNotNull(logarithmicAxis0);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals("AoQ7", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      
      boolean boolean0 = false;
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(boolean0, boolean0);
      assertNotNull(deviationRenderer0);
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, deviationRenderer0.getUseFillPaint());
      assertEquals(true, deviationRenderer0.getBaseShapesFilled());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisible());
      assertEquals(false, deviationRenderer0.getBaseLinesVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, deviationRenderer0.getDefaultEntityRadius());
      assertEquals(false, deviationRenderer0.getUseOutlinePaint());
      assertEquals(true, deviationRenderer0.getDrawOutlines());
      assertEquals(false, deviationRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, deviationRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertEquals(true, deviationRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, deviationRenderer0.getBaseShapesVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, deviationRenderer0.getBaseCreateEntities());
      assertEquals(3, deviationRenderer0.getPassCount());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      XYPlot xYPlot0 = deviationRenderer0.getPlot();
      assertNull(xYPlot0);
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, deviationRenderer0.getUseFillPaint());
      assertEquals(true, deviationRenderer0.getBaseShapesFilled());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisible());
      assertEquals(false, deviationRenderer0.getBaseLinesVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, deviationRenderer0.getDefaultEntityRadius());
      assertEquals(false, deviationRenderer0.getUseOutlinePaint());
      assertEquals(true, deviationRenderer0.getDrawOutlines());
      assertEquals(false, deviationRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, deviationRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertEquals(true, deviationRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, deviationRenderer0.getBaseShapesVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, deviationRenderer0.getBaseCreateEntities());
      assertEquals(3, deviationRenderer0.getPassCount());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      logarithmicAxis0.removeChangeListener((AxisChangeListener) xYPlot0);
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, deviationRenderer0.getUseFillPaint());
      assertEquals(true, deviationRenderer0.getBaseShapesFilled());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisible());
      assertEquals(false, deviationRenderer0.getBaseLinesVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, deviationRenderer0.getDefaultEntityRadius());
      assertEquals(false, deviationRenderer0.getUseOutlinePaint());
      assertEquals(true, deviationRenderer0.getDrawOutlines());
      assertEquals(false, deviationRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, deviationRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertEquals(true, deviationRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, deviationRenderer0.getBaseShapesVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, deviationRenderer0.getBaseCreateEntities());
      assertEquals(3, deviationRenderer0.getPassCount());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals("AoQ7", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      
      logarithmicAxis0.removeChangeListener((AxisChangeListener) xYPlot0);
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, deviationRenderer0.getUseFillPaint());
      assertEquals(true, deviationRenderer0.getBaseShapesFilled());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisible());
      assertEquals(false, deviationRenderer0.getBaseLinesVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, deviationRenderer0.getDefaultEntityRadius());
      assertEquals(false, deviationRenderer0.getUseOutlinePaint());
      assertEquals(true, deviationRenderer0.getDrawOutlines());
      assertEquals(false, deviationRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, deviationRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertEquals(true, deviationRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, deviationRenderer0.getBaseShapesVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, deviationRenderer0.getBaseCreateEntities());
      assertEquals(3, deviationRenderer0.getPassCount());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals("AoQ7", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "$'dJS'SXYZ";
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(string0);
      assertNotNull(categoryAxis3D0);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals("$'dJS'SXYZ", categoryAxis3D0.getLabel());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      
      Paint paint0 = null;
      // Undeclared exception!
      try {
        categoryAxis3D0.setTickMarkPaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "6ZCG Z@r61{ct";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertNotNull(logarithmicAxis0);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals("6ZCG Z@r61{ct", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      assertNotNull(clusteredXYBarRenderer0);
      assertEquals(false, clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01D);
      assertEquals(true, clusteredXYBarRenderer0.getBaseCreateEntities());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, clusteredXYBarRenderer0.getPassCount());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, clusteredXYBarRenderer0.isDrawBarOutline());
      
      Color color0 = (Color)clusteredXYBarRenderer0.getBaseItemLabelPaint();
      assertNotNull(color0);
      assertEquals(false, clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01D);
      assertEquals(true, clusteredXYBarRenderer0.getBaseCreateEntities());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, clusteredXYBarRenderer0.getPassCount());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, clusteredXYBarRenderer0.isDrawBarOutline());
      assertEquals(255, color0.getAlpha());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      
      logarithmicAxis0.setTickMarkPaint((Paint) color0);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals("6ZCG Z@r61{ct", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01D);
      assertEquals(true, clusteredXYBarRenderer0.getBaseCreateEntities());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, clusteredXYBarRenderer0.getPassCount());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, clusteredXYBarRenderer0.isDrawBarOutline());
      assertEquals(255, color0.getAlpha());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "Null 'state' argument.";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertNotNull(extendedCategoryAxis0);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals("Null 'state' argument.", extendedCategoryAxis0.getLabel());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      
      LineNeedle lineNeedle0 = new LineNeedle();
      assertNotNull(lineNeedle0);
      assertEquals(5, lineNeedle0.getSize());
      assertEquals(0.5, lineNeedle0.getRotateX(), 0.01D);
      assertEquals(0.5, lineNeedle0.getRotateY(), 0.01D);
      
      BasicStroke basicStroke0 = (BasicStroke)lineNeedle0.getOutlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(5, lineNeedle0.getSize());
      assertEquals(0.5, lineNeedle0.getRotateX(), 0.01D);
      assertEquals(0.5, lineNeedle0.getRotateY(), 0.01D);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      
      extendedCategoryAxis0.setTickMarkStroke((Stroke) basicStroke0);
      assertEquals(5, lineNeedle0.getSize());
      assertEquals(0.5, lineNeedle0.getRotateX(), 0.01D);
      assertEquals(0.5, lineNeedle0.getRotateY(), 0.01D);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals("Null 'state' argument.", extendedCategoryAxis0.getLabel());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
  }

  @Test
  public void test11()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertNotNull(categoryAxis3D0);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      
      Stroke stroke0 = null;
      // Undeclared exception!
      try {
        categoryAxis3D0.setTickMarkStroke(stroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "MfE4^*9";
      String[] stringArray0 = new String[18];
      SymbolAxis symbolAxis0 = new SymbolAxis(string0, stringArray0);
      assertNotNull(symbolAxis0);
      assertEquals("MfE4^*9", symbolAxis0.getLabel());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertEquals(true, symbolAxis0.isVisible());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, symbolAxis0.isAutoRange());
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(false, symbolAxis0.isInverted());
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      
      double double0 = symbolAxis0.getLabelAngle();
      assertEquals("MfE4^*9", symbolAxis0.getLabel());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertEquals(true, symbolAxis0.isVisible());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, symbolAxis0.isAutoRange());
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(false, symbolAxis0.isInverted());
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.0, double0, 0.01D);
      
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(string0);
      assertNotNull(subCategoryAxis0);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals("MfE4^*9", subCategoryAxis0.getLabel());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0, double0, stringArray0[1]);
      assertNotNull(cyclicNumberAxis0);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals("MfE4^*9", symbolAxis0.getLabel());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertEquals(true, symbolAxis0.isVisible());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, symbolAxis0.isAutoRange());
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(false, symbolAxis0.isInverted());
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      
      subCategoryAxis0.setTickMarkStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals("MfE4^*9", subCategoryAxis0.getLabel());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals("MfE4^*9", symbolAxis0.getLabel());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertEquals(true, symbolAxis0.isVisible());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, symbolAxis0.isAutoRange());
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(false, symbolAxis0.isInverted());
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "9# ,WunRN]Uw}M\\R9v";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(string0);
      assertNotNull(subCategoryAxis0);
      assertEquals("9# ,WunRN]Uw}M\\R9v", subCategoryAxis0.getLabel());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(subCategoryAxis0.getLabelToolTip());
      
      boolean boolean0 = false;
      subCategoryAxis0.setTickMarksVisible(boolean0);
      assertEquals("9# ,WunRN]Uw}M\\R9v", subCategoryAxis0.getLabel());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(subCategoryAxis0.getLabelToolTip());
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "]Rn";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertNotNull(logarithmicAxis0);
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals("]Rn", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      
      RectangleInsets rectangleInsets0 = Axis.DEFAULT_AXIS_LABEL_INSETS;
      assertNotNull(rectangleInsets0);
      assertEquals(3.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getBottom(), 0.01D);
      
      logarithmicAxis0.setTickLabelInsets(rectangleInsets0);
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals("]Rn", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(3.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getBottom(), 0.01D);
  }

  //@Test
  public void test15()  throws Throwable  {
      String string0 = null;
      int int0 = 762;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=762,MONTH=762,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=762,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=762,HOUR_OF_DAY=762,MINUTE=762,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      assertNotNull(zoneInfo0);
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=762,MONTH=762,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=762,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=762,HOUR_OF_DAY=762,MINUTE=762,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      
      DateAxis dateAxis0 = new DateAxis(string0, (TimeZone) zoneInfo0);
      assertNotNull(dateAxis0);
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=762,MONTH=762,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=762,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=762,HOUR_OF_DAY=762,MINUTE=762,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals("GMT", zoneInfo0.getID());
      
      RectangleInsets rectangleInsets0 = null;
      // Undeclared exception!
      try {
        dateAxis0.setTickLabelInsets(rectangleInsets0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "-ki;kvX]";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertNotNull(logarithmicAxis0);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals("-ki;kvX]", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(string0);
      assertNotNull(subCategoryAxis0);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("-ki;kvX]", subCategoryAxis0.getLabel());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      
      RectangleInsets rectangleInsets0 = logarithmicAxis0.getTickLabelInsets();
      assertNotNull(rectangleInsets0);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals("-ki;kvX]", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01D);
      
      subCategoryAxis0.setTickLabelInsets(rectangleInsets0);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals("-ki;kvX]", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("-ki;kvX]", subCategoryAxis0.getLabel());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = (-1245);
      DateAxis dateAxis0 = new DateAxis();
      assertNotNull(dateAxis0);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertNotNull(boxAndWhiskerRenderer0);
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      
      Paint paint0 = boxAndWhiskerRenderer0.getSeriesPaint(int0);
      assertNull(paint0);
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      
      // Undeclared exception!
      try {
        dateAxis0.setTickLabelPaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "1i-NkZ:wi[\"*t";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(string0);
      assertNotNull(subCategoryAxis0);
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals("1i-NkZ:wi[\"*t", subCategoryAxis0.getLabel());
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      
      Color color0 = (Color)AbstractRenderer.DEFAULT_PAINT;
      assertNotNull(color0);
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16776961, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(255, color0.getAlpha());
      
      subCategoryAxis0.setTickLabelPaint((Paint) color0);
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16776961, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals("1i-NkZ:wi[\"*t", subCategoryAxis0.getLabel());
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "]Rn";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertNotNull(dateAxis0);
      assertEquals("]Rn", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isInverted());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      
      JOptionPane jOptionPane0 = new JOptionPane();
      assertNotNull(jOptionPane0);
      assertEquals(false, jOptionPane0.isMinimumSizeSet());
      assertEquals(true, jOptionPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jOptionPane0.isCursorSet());
      assertEquals(false, jOptionPane0.isFocusTraversalPolicySet());
      assertEquals(false, jOptionPane0.isFocusCycleRoot());
      assertEquals(true, jOptionPane0.isBackgroundSet());
      assertEquals(true, jOptionPane0.isFontSet());
      assertEquals(true, jOptionPane0.isForegroundSet());
      assertEquals(true, jOptionPane0.isVisible());
      assertEquals(2, jOptionPane0.getComponentCount());
      assertEquals(false, jOptionPane0.isPreferredSizeSet());
      assertEquals(true, jOptionPane0.isEnabled());
      assertEquals(false, jOptionPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jOptionPane0.isShowing());
      assertEquals(false, jOptionPane0.getIgnoreRepaint());
      assertEquals(false, jOptionPane0.isMaximumSizeSet());
      assertEquals(false, jOptionPane0.isLightweight());
      assertEquals(false, jOptionPane0.isValid());
      assertEquals(false, jOptionPane0.isDisplayable());
      assertEquals(2, jOptionPane0.countComponents());
      
      FontUIResource fontUIResource0 = (FontUIResource)jOptionPane0.getFont();
      assertNotNull(fontUIResource0);
      assertEquals(12, fontUIResource0.getSize());
      assertEquals(0, fontUIResource0.getStyle());
      assertEquals(false, fontUIResource0.isItalic());
      assertEquals(false, fontUIResource0.isTransformed());
      assertEquals(false, fontUIResource0.isBold());
      assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
      assertEquals(false, fontUIResource0.hasLayoutAttributes());
      assertEquals("Dialog", fontUIResource0.getName());
      assertEquals(false, fontUIResource0.hasUniformLineMetrics());
      assertEquals("javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=plain,size=12]", fontUIResource0.toString());
      assertEquals(true, fontUIResource0.isPlain());
      assertEquals(false, jOptionPane0.isMinimumSizeSet());
      assertEquals(true, jOptionPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jOptionPane0.isCursorSet());
      assertEquals(false, jOptionPane0.isFocusTraversalPolicySet());
      assertEquals(false, jOptionPane0.isFocusCycleRoot());
      assertEquals(true, jOptionPane0.isBackgroundSet());
      assertEquals(true, jOptionPane0.isFontSet());
      assertEquals(true, jOptionPane0.isForegroundSet());
      assertEquals(true, jOptionPane0.isVisible());
      assertEquals(2, jOptionPane0.getComponentCount());
      assertEquals(false, jOptionPane0.isPreferredSizeSet());
      assertEquals(true, jOptionPane0.isEnabled());
      assertEquals(false, jOptionPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jOptionPane0.isShowing());
      assertEquals(false, jOptionPane0.getIgnoreRepaint());
      assertEquals(false, jOptionPane0.isMaximumSizeSet());
      assertEquals(false, jOptionPane0.isLightweight());
      assertEquals(false, jOptionPane0.isValid());
      assertEquals(false, jOptionPane0.isDisplayable());
      assertEquals(2, jOptionPane0.countComponents());
      
      dateAxis0.setTickLabelFont((Font) fontUIResource0);
      assertEquals("]Rn", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isInverted());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(12, fontUIResource0.getSize());
      assertEquals(0, fontUIResource0.getStyle());
      assertEquals(false, fontUIResource0.isItalic());
      assertEquals(false, fontUIResource0.isTransformed());
      assertEquals(false, fontUIResource0.isBold());
      assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
      assertEquals(false, fontUIResource0.hasLayoutAttributes());
      assertEquals("Dialog", fontUIResource0.getName());
      assertEquals(false, fontUIResource0.hasUniformLineMetrics());
      assertEquals("javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=plain,size=12]", fontUIResource0.toString());
      assertEquals(true, fontUIResource0.isPlain());
      assertEquals(false, jOptionPane0.isMinimumSizeSet());
      assertEquals(true, jOptionPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jOptionPane0.isCursorSet());
      assertEquals(false, jOptionPane0.isFocusTraversalPolicySet());
      assertEquals(false, jOptionPane0.isFocusCycleRoot());
      assertEquals(true, jOptionPane0.isBackgroundSet());
      assertEquals(true, jOptionPane0.isFontSet());
      assertEquals(true, jOptionPane0.isForegroundSet());
      assertEquals(true, jOptionPane0.isVisible());
      assertEquals(2, jOptionPane0.getComponentCount());
      assertEquals(false, jOptionPane0.isPreferredSizeSet());
      assertEquals(true, jOptionPane0.isEnabled());
      assertEquals(false, jOptionPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jOptionPane0.isShowing());
      assertEquals(false, jOptionPane0.getIgnoreRepaint());
      assertEquals(false, jOptionPane0.isMaximumSizeSet());
      assertEquals(false, jOptionPane0.isLightweight());
      assertEquals(false, jOptionPane0.isValid());
      assertEquals(false, jOptionPane0.isDisplayable());
      assertEquals(2, jOptionPane0.countComponents());
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "1i-NkZ:wi[\"*t";
      double double0 = 0.0;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0, string0);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals("1i-NkZ:wi[\"*t", cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      
      Font font0 = null;
      // Undeclared exception!
      try {
        cyclicNumberAxis0.setTickLabelFont(font0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      
      String string0 = "6ZCG Z@r61{ct";
      boolean boolean0 = true;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(rectangle2D_Double0.width, rectangle2D_Double0.y, string0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals("6ZCG Z@r61{ct", cyclicNumberAxis0.getLabel());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(boolean0, boolean0);
      assertNotNull(lineAndShapeRenderer0);
      assertEquals(true, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      
      Font font0 = lineAndShapeRenderer0.getBaseItemLabelFont();
      assertNotNull(font0);
      assertEquals(10, font0.getSize());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(0, font0.getStyle());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.isBold());
      assertEquals(false, font0.isItalic());
      assertEquals(true, font0.isPlain());
      assertEquals(false, font0.isTransformed());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(true, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      
      cyclicNumberAxis0.setTickLabelFont(font0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(10, font0.getSize());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(0, font0.getStyle());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.isBold());
      assertEquals(false, font0.isItalic());
      assertEquals(true, font0.isPlain());
      assertEquals(false, font0.isTransformed());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(true, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals("6ZCG Z@r61{ct", cyclicNumberAxis0.getLabel());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
  }

  @Test
  public void test22()  throws Throwable  {
      double double0 = (-120.4211263848);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0, double0);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals((-120.4211263848), cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals((-120.4211263848), cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals((-120.4211263848), cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      
      boolean boolean0 = false;
      cyclicNumberAxis0.setTickLabelsVisible(boolean0);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals((-120.4211263848), cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals((-120.4211263848), cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals((-120.4211263848), cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
  }

  @Test
  public void test23()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertNotNull(dateAxis0);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabel());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      
      boolean boolean0 = true;
      dateAxis0.setTickLabelsVisible(boolean0);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabel());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
  }

  @Test
  public void test24()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertNotNull(categoryAxis3D0);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      
      Stroke stroke0 = null;
      // Undeclared exception!
      try {
        categoryAxis3D0.setAxisLineStroke(stroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "MfE4^*9";
      String[] stringArray0 = new String[18];
      SymbolAxis symbolAxis0 = new SymbolAxis(string0, stringArray0);
      assertNotNull(symbolAxis0);
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertEquals(true, symbolAxis0.isVisible());
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      assertEquals(false, symbolAxis0.isInverted());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertEquals("MfE4^*9", symbolAxis0.getLabel());
      assertEquals(true, symbolAxis0.isAutoRange());
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      
      double double0 = symbolAxis0.getLabelAngle();
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertEquals(true, symbolAxis0.isVisible());
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      assertEquals(false, symbolAxis0.isInverted());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertEquals("MfE4^*9", symbolAxis0.getLabel());
      assertEquals(true, symbolAxis0.isAutoRange());
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertEquals(0.0, double0, 0.01D);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0, double0, stringArray0[1]);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertEquals(true, symbolAxis0.isVisible());
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      assertEquals(false, symbolAxis0.isInverted());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertEquals("MfE4^*9", symbolAxis0.getLabel());
      assertEquals(true, symbolAxis0.isAutoRange());
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      
      cyclicNumberAxis0.setAxisLineStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertEquals(true, symbolAxis0.isVisible());
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      assertEquals(false, symbolAxis0.isInverted());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertEquals("MfE4^*9", symbolAxis0.getLabel());
      assertEquals(true, symbolAxis0.isAutoRange());
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
  }

  @Test
  public void test26()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertNotNull(numberAxis3D0);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabel());
      
      BasicToolBarUI basicToolBarUI0 = new BasicToolBarUI();
      assertNotNull(basicToolBarUI0);
      
      Color color0 = basicToolBarUI0.getDockingColor();
      assertNull(color0);
      
      // Undeclared exception!
      try {
        numberAxis3D0.setAxisLinePaint((Paint) color0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[7];
      int int0 = 0;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) int0, stringArray0[4]);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      
      Color color0 = (Color)Axis.DEFAULT_TICK_LABEL_PAINT;
      assertNotNull(color0);
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      
      cyclicNumberAxis0.setAxisLinePaint((Paint) color0);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = null;
      Day day0 = new Day();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(1392336001784L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422401783L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      
      long long0 = 1892L;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
      //  // Unstable assertion: assertNotNull(fixedMillisecond0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("A", zoneInfo0.getID());
      
      PeriodAxis periodAxis0 = new PeriodAxis(string0, (RegularTimePeriod) day0, (RegularTimePeriod) fixedMillisecond0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(periodAxis0);
      //  // Unstable assertion: assertEquals(1392336001784L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422401783L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(true, periodAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, periodAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertNull(periodAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, periodAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(false, periodAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertNull(periodAxis0.getLabel());
      //  // Unstable assertion: assertEquals(false, periodAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      //  // Unstable assertion: assertEquals(false, periodAxis0.isInverted());
      //  // Unstable assertion: assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertNull(periodAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(false, periodAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(true, periodAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(true, periodAxis0.isVisible());
      //  // Unstable assertion: assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals("A", zoneInfo0.getID());
      
      RectangleInsets rectangleInsets0 = Axis.DEFAULT_AXIS_LABEL_INSETS;
      //  // Unstable assertion: assertNotNull(rectangleInsets0);
      //  // Unstable assertion: assertEquals(3.0, rectangleInsets0.getTop(), 0.01D);
      //  // Unstable assertion: assertEquals(3.0, rectangleInsets0.getLeft(), 0.01D);
      //  // Unstable assertion: assertEquals(3.0, rectangleInsets0.getBottom(), 0.01D);
      //  // Unstable assertion: assertEquals(3.0, rectangleInsets0.getRight(), 0.01D);
      
      periodAxis0.setLabelInsets(rectangleInsets0);
      //  // Unstable assertion: assertEquals(1392336001784L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422401783L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(3.0, rectangleInsets0.getTop(), 0.01D);
      //  // Unstable assertion: assertEquals(3.0, rectangleInsets0.getLeft(), 0.01D);
      //  // Unstable assertion: assertEquals(3.0, rectangleInsets0.getBottom(), 0.01D);
      //  // Unstable assertion: assertEquals(3.0, rectangleInsets0.getRight(), 0.01D);
      //  // Unstable assertion: assertEquals(true, periodAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, periodAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertNull(periodAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, periodAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(false, periodAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertNull(periodAxis0.getLabel());
      //  // Unstable assertion: assertEquals(false, periodAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      //  // Unstable assertion: assertEquals(false, periodAxis0.isInverted());
      //  // Unstable assertion: assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertNull(periodAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(false, periodAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(true, periodAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(true, periodAxis0.isVisible());
      //  // Unstable assertion: assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals("A", zoneInfo0.getID());
  }

  @Test
  public void test29()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertNotNull(dateAxis0);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertNull(dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      
      RectangleInsets rectangleInsets0 = null;
      // Undeclared exception!
      try {
        dateAxis0.setLabelInsets(rectangleInsets0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "Null 'insets' argument.";
      Range range0 = null;
      ModuloAxis moduloAxis0 = new ModuloAxis(string0, range0);
      assertNotNull(moduloAxis0);
      assertEquals(true, moduloAxis0.isVisible());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01D);
      assertEquals(true, moduloAxis0.getAutoRangeStickyZero());
      assertEquals(true, moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(false, moduloAxis0.isInverted());
      assertEquals(true, moduloAxis0.isAxisLineVisible());
      assertEquals(true, moduloAxis0.isTickLabelsVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, moduloAxis0.isTickMarksVisible());
      assertEquals("Null 'insets' argument.", moduloAxis0.getLabel());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01D);
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, moduloAxis0.isPositiveArrowVisible());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01D);
      assertEquals(true, moduloAxis0.isAutoRange());
      assertEquals(true, moduloAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, moduloAxis0.isNegativeArrowVisible());
      assertEquals(false, moduloAxis0.isVerticalTickLabels());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01D);
      assertNull(moduloAxis0.getLabelURL());
      
      DateAxis dateAxis0 = new DateAxis();
      assertNotNull(dateAxis0);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertNull(dateAxis0.getLabelToolTip());
      
      RectangleInsets rectangleInsets0 = dateAxis0.getTickLabelInsets();
      assertNotNull(rectangleInsets0);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertNull(dateAxis0.getLabelToolTip());
      
      moduloAxis0.setLabelInsets(rectangleInsets0);
      assertEquals(true, moduloAxis0.isVisible());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01D);
      assertEquals(true, moduloAxis0.getAutoRangeStickyZero());
      assertEquals(true, moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(false, moduloAxis0.isInverted());
      assertEquals(true, moduloAxis0.isAxisLineVisible());
      assertEquals(true, moduloAxis0.isTickLabelsVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, moduloAxis0.isTickMarksVisible());
      assertEquals("Null 'insets' argument.", moduloAxis0.getLabel());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01D);
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, moduloAxis0.isPositiveArrowVisible());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01D);
      assertEquals(true, moduloAxis0.isAutoRange());
      assertEquals(true, moduloAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, moduloAxis0.isNegativeArrowVisible());
      assertEquals(false, moduloAxis0.isVerticalTickLabels());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01D);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertNull(dateAxis0.getLabelToolTip());
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "Null 'lineStroke' argument.";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertNotNull(dateAxis0);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals("Null 'lineStroke' argument.", dateAxis0.getLabel());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      assertNotNull(stackedBarRenderer3D0);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      
      int int0 = 1632;
      Paint paint0 = stackedBarRenderer3D0.getSeriesOutlinePaint(int0);
      assertNull(paint0);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      
      // Undeclared exception!
      try {
        dateAxis0.setLabelPaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      assertNotNull(clusteredXYBarRenderer0);
      assertEquals(1, clusteredXYBarRenderer0.getPassCount());
      assertEquals(false, clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01D);
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, clusteredXYBarRenderer0.isDrawBarOutline());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, clusteredXYBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01D);
      
      Color color0 = (Color)clusteredXYBarRenderer0.getBaseItemLabelPaint();
      assertNotNull(color0);
      assertEquals(1, clusteredXYBarRenderer0.getPassCount());
      assertEquals(false, clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01D);
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, clusteredXYBarRenderer0.isDrawBarOutline());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, clusteredXYBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      
      DateAxis dateAxis0 = new DateAxis();
      assertNotNull(dateAxis0);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      
      dateAxis0.setLabelPaint((Paint) color0);
      assertEquals(1, clusteredXYBarRenderer0.getPassCount());
      assertEquals(false, clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01D);
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, clusteredXYBarRenderer0.isDrawBarOutline());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, clusteredXYBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "9# ,WunRN]Uw}M\\R9v";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(string0);
      assertNotNull(subCategoryAxis0);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals("9# ,WunRN]Uw}M\\R9v", subCategoryAxis0.getLabel());
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      
      String[] stringArray0 = new String[1];
      SymbolAxis symbolAxis0 = new SymbolAxis(string0, stringArray0);
      assertNotNull(symbolAxis0);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertEquals(false, symbolAxis0.isInverted());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, symbolAxis0.isAutoRange());
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertEquals("9# ,WunRN]Uw}M\\R9v", symbolAxis0.getLabel());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertEquals(true, symbolAxis0.isVisible());
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      
      Font font0 = subCategoryAxis0.getTickLabelFont();
      assertNotNull(font0);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals("9# ,WunRN]Uw}M\\R9v", subCategoryAxis0.getLabel());
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.isTransformed());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(false, font0.isBold());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals("SansSerif", font0.getName());
      
      symbolAxis0.setLabelFont(font0);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertEquals(false, symbolAxis0.isInverted());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, symbolAxis0.isAutoRange());
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertEquals("9# ,WunRN]Uw}M\\R9v", symbolAxis0.getLabel());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertEquals(true, symbolAxis0.isVisible());
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals("9# ,WunRN]Uw}M\\R9v", subCategoryAxis0.getLabel());
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertEquals(10, font0.getSize());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.isTransformed());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(false, font0.isBold());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals("SansSerif", font0.getName());
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "Null 'insets' argument.";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertNotNull(logarithmicAxis0);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals("Null 'insets' argument.", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      assertNotNull(jInternalFrame0);
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      
      Font font0 = jInternalFrame0.getFont();
      assertNull(font0);
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      
      // Undeclared exception!
      try {
        logarithmicAxis0.setLabelFont(font0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertNotNull(numberAxis3D0);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      
      Font font0 = numberAxis3D0.getLabelFont();
      assertNotNull(font0);
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertEquals(false, font0.isBold());
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(true, font0.isPlain());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=12]", font0.toString());
      assertEquals(false, font0.isTransformed());
      assertEquals(false, font0.isItalic());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      
      String string0 = ".png";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(string0);
      assertNotNull(subCategoryAxis0);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(".png", subCategoryAxis0.getLabel());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      
      subCategoryAxis0.setLabelFont(font0);
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(12, font0.getSize());
      assertEquals(false, font0.isBold());
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(true, font0.isPlain());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=12]", font0.toString());
      assertEquals(false, font0.isTransformed());
      assertEquals(false, font0.isItalic());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(".png", subCategoryAxis0.getLabel());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = null;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertNotNull(numberAxis3D0);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoRange());
      
      numberAxis3D0.setLabel(string0);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoRange());
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "]Rn";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertNotNull(logarithmicAxis0);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals("]Rn", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      
      String string1 = null;
      logarithmicAxis0.setLabel(string1);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertNull(logarithmicAxis0.getLabel());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = "-ki;kvX]";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertNotNull(logarithmicAxis0);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals("-ki;kvX]", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      
      logarithmicAxis0.setLabel(string0);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals("-ki;kvX]", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = "]Rn";
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertNotNull(numberAxis3D0);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      
      numberAxis3D0.setLabel(string0);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals("]Rn", numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
  }

  @Test
  public void test40()  throws Throwable  {
      String string0 = "MfE4^*9";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertNotNull(extendedCategoryAxis0);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals("MfE4^*9", extendedCategoryAxis0.getLabel());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      
      boolean boolean0 = false;
      extendedCategoryAxis0.setVisible(boolean0);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(false, extendedCategoryAxis0.isVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals("MfE4^*9", extendedCategoryAxis0.getLabel());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
  }

  @Test
  public void test41()  throws Throwable  {
      String string0 = "#,##0";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(string0);
      assertNotNull(subCategoryAxis0);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals("#,##0", subCategoryAxis0.getLabel());
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertNull(subCategoryAxis0.getLabelToolTip());
      
      boolean boolean0 = true;
      subCategoryAxis0.setVisible(boolean0);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals("#,##0", subCategoryAxis0.getLabel());
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertNull(subCategoryAxis0.getLabelToolTip());
  }

  @Test
  public void test42()  throws Throwable  {
      float float0 = 0.0F;
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(float0, float0, float0, float0);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertNotNull(numberAxis3D0);
      assertEquals(false, numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      
      numberAxis3D0.setTickMarkInsideLength(rectangle2D_Float0.width);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(false, numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
  }

  @Test
  public void test43()  throws Throwable  {
      String string0 = "Null 'insets' argument.";
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(string0);
      assertNotNull(categoryAxis3D0);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals("Null 'insets' argument.", categoryAxis3D0.getLabel());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      
      String string1 = categoryAxis3D0.getLabelToolTip();
      assertNull(string1);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals("Null 'insets' argument.", categoryAxis3D0.getLabel());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
  }

  @Test
  public void test44()  throws Throwable  {
      String string0 = "#,##0";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertNotNull(dateAxis0);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals("#,##0", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isVisible());
      
      DateAxis dateAxis1 = (DateAxis)dateAxis0.clone();
      assertNotNull(dateAxis1);
      assertTrue(dateAxis1.equals((Object)dateAxis0));
      assertTrue(dateAxis0.equals((Object)dateAxis1));
      assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis1.isTickMarksVisible());
      assertEquals(false, dateAxis1.isInverted());
      assertEquals(true, dateAxis1.isAutoTickUnitSelection());
      assertEquals(true, dateAxis1.isAxisLineVisible());
      assertEquals(false, dateAxis1.isPositiveArrowVisible());
      assertEquals(true, dateAxis1.isAutoRange());
      assertNull(dateAxis1.getLabelURL());
      assertEquals(false, dateAxis1.isVerticalTickLabels());
      assertEquals(false, dateAxis1.isNegativeArrowVisible());
      assertEquals(1.0, dateAxis1.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis1.getLowerBound(), 0.01D);
      assertEquals(2.0, dateAxis1.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis1.isVisible());
      assertNull(dateAxis1.getLabelToolTip());
      assertEquals(0.0, dateAxis1.getFixedDimension(), 0.01D);
      assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01D);
      assertEquals(0.05, dateAxis1.getLowerMargin(), 0.01D);
      assertEquals(0.05, dateAxis1.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis1.isTickLabelsVisible());
      assertEquals("#,##0", dateAxis1.getLabel());
      assertEquals(0.0, dateAxis1.getFixedAutoRange(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals("#,##0", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isVisible());
      assertNotSame(dateAxis1, dateAxis0);
      assertNotSame(dateAxis0, dateAxis1);
  }

  @Test
  public void test45()  throws Throwable  {
      String string0 = "9# ,WunRN]Uw}M\\R9v";
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertNotNull(categoryAxis3D0);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      
      categoryAxis3D0.setLabelToolTip(string0);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals("9# ,WunRN]Uw}M\\R9v", categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
  }

  @Test
  public void test46()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      
      DateAxis dateAxis0 = new DateAxis();
      assertNotNull(dateAxis0);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      
      dateAxis0.setFixedDimension(rectangle2D_Double0.x);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
  }

  @Test
  public void test47()  throws Throwable  {
      String string0 = "AoQ7";
      NumberAxis3D numberAxis3D0 = new NumberAxis3D(string0);
      assertNotNull(numberAxis3D0);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals("AoQ7", numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      
      double double0 = (-31.012970868058485);
      numberAxis3D0.setLabelAngle(double0);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals((-31.012970868058485), numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals("AoQ7", numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
  }

  @Test
  public void test48()  throws Throwable  {
      String string0 = "AoQ7";
      NumberAxis3D numberAxis3D0 = new NumberAxis3D(string0);
      assertNotNull(numberAxis3D0);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals("AoQ7", numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      
      String string1 = numberAxis3D0.getLabelURL();
      assertNull(string1);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals("AoQ7", numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
  }

  @Test
  public void test49()  throws Throwable  {
      String string0 = null;
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertNotNull(extendedCategoryAxis0);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabel());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertNull(extendedCategoryAxis0.getLabelURL());
      
      extendedCategoryAxis0.setLabelURL(string0);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabel());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertNull(extendedCategoryAxis0.getLabelURL());
  }

  @Test
  public void test50()  throws Throwable  {
      String string0 = "Null 'insets' argument.";
      PeriodAxis periodAxis0 = new PeriodAxis(string0);
      assertNotNull(periodAxis0);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("Null 'insets' argument.", periodAxis0.getLabel());
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      
      float float0 = (-2.0F);
      periodAxis0.setTickMarkOutsideLength(float0);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals((-2.0F), periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("Null 'insets' argument.", periodAxis0.getLabel());
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
  }

  @Test
  public void test51()  throws Throwable  {
      String string0 = "yk,i;kvX]";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertNotNull(logarithmicAxis0);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals("yk,i;kvX]", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) logarithmicAxis0);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals("yk,i;kvX]", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      
      int int0 = 1350;
      JFreeChart jFreeChart0 = new JFreeChart(string0, (Plot) combinedDomainXYPlot0);
      assertNotNull(jFreeChart0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals("yk,i;kvX]", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0);
      assertNotNull(bufferedImage0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals("yk,i;kvX]", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(1350, bufferedImage0.getTileHeight());
      assertEquals(1350, bufferedImage0.getWidth());
      assertEquals(1350, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(1350, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
  }
}
