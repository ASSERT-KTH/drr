/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:57:17 GMT 2014
 */

package org.apache.commons.lang.math;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class NumberUtilsEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "0e";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "7";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "--La,K#N6kd<Qf[S5<";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "+AE[ZX<Ts30D";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "EW`_D,)r=[(kb";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "0xf;h ./2xF6%Y26hxN:8|";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "0x-0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "-0x1F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "0x0xepn";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "0e#";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "zg'CgXm}jx/MoY37(";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "-0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "0";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = 441.274F;
      int int0 = NumberUtils.compare(float0, floatArray0[6]);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(1, int0);
  }

  @Test
  public void test020()  throws Throwable  {
      short short0 = (short)586;
      short short1 = (short)13;
      int int0 = NumberUtils.compare((double) short0, (double) short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals(1, int0);
  }

  @Test
  public void test021()  throws Throwable  {
      byte byte0 = (byte) (-127);
      byte byte1 = (byte)0;
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertEquals((byte)0, byte2);
  }

  @Test
  public void test022()  throws Throwable  {
      byte byte0 = (byte)36;
      byte byte1 = (byte) (-93);
      byte byte2 = NumberUtils.max(byte1, byte0, byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte0 == byte2);
      assertFalse(byte2 == byte1);
      assertTrue(byte2 == byte0);
      assertEquals((byte)36, byte2);
  }

  @Test
  public void test023()  throws Throwable  {
      byte byte0 = (byte)36;
      byte byte1 = (byte) (-93);
      short short0 = NumberUtils.max((short) byte1, (short) byte1, (short) byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals((short)36, short0);
  }

  @Test
  public void test024()  throws Throwable  {
      short short0 = (short)100;
      short short1 = (short)2265;
      short short2 = NumberUtils.max(short0, short1, short1);
      assertTrue(short1 == short2);
      assertFalse(short1 == short0);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
      assertEquals((short)2265, short2);
  }

  @Test
  public void test025()  throws Throwable  {
      int int0 = (-822);
      int int1 = 13;
      int int2 = NumberUtils.max(int0, int0, int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(13, int2);
  }

  @Test
  public void test026()  throws Throwable  {
      short short0 = (short)100;
      byte byte0 = (byte)9;
      int int0 = NumberUtils.max((int) byte0, (int) short0, (int) short0);
      assertEquals(100, int0);
  }

  @Test
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)36;
      byte byte1 = NumberUtils.max(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(byte1 == byte0);
      assertEquals((byte)0, byte1);
      
      byteArray0[0] = byte0;
      long long0 = NumberUtils.max((long) byte1, (long) byte1, (long) byteArray0[0]);
      assertArrayEquals(new byte[] {(byte)36}, byteArray0);
      assertFalse(byte1 == byte0);
      assertEquals(36L, long0);
  }

  @Test
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.max(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((byte)0, byte0);
      
      byte byte1 = (byte) (-93);
      assertFalse(byte1 == byte0);
      
      long long0 = NumberUtils.max((long) byte1, (long) byte0, (long) byteArray0[0]);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals(0L, long0);
  }

  @Test
  public void test029()  throws Throwable  {
      byte byte0 = (byte)79;
      byte byte1 = (byte) (-106);
      byte byte2 = NumberUtils.min(byte1, byte1, byte1);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertEquals((byte) (-106), byte2);
      
      byte byte3 = (byte)39;
      assertFalse(byte3 == byte2);
      
      byte byte4 = NumberUtils.min(byte0, byte3, byte2);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertTrue(byte2 == byte4);
      assertFalse(byte2 == byte3);
      assertFalse(byte3 == byte0);
      assertFalse(byte3 == byte4);
      assertFalse(byte3 == byte2);
      assertFalse(byte3 == byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte4);
      assertFalse(byte1 == byte3);
      assertFalse(byte0 == byte3);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte4);
      assertFalse(byte0 == byte2);
      assertTrue(byte4 == byte1);
      assertFalse(byte4 == byte3);
      assertTrue(byte4 == byte2);
      assertFalse(byte4 == byte0);
      assertEquals((byte) (-106), byte4);
  }

  @Test
  public void test030()  throws Throwable  {
      short short0 = (short)100;
      byte byte0 = (byte)9;
      short short1 = NumberUtils.max(short0, short0, short0);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      assertEquals((short)100, short1);
      
      short short2 = NumberUtils.min(short0, short1, (short) byte0);
      assertFalse(short2 == short0);
      assertFalse(short2 == short1);
      assertFalse(short1 == short2);
      assertTrue(short1 == short0);
      assertFalse(short0 == short2);
      assertTrue(short0 == short1);
      assertEquals((short)9, short2);
  }

  @Test
  public void test031()  throws Throwable  {
      short short0 = (short)45;
      short short1 = (short)0;
      short short2 = NumberUtils.min(short0, short1, short0);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertEquals((short)0, short2);
  }

  @Test
  public void test032()  throws Throwable  {
      int int0 = 1;
      byte byte0 = (byte) (-127);
      byte byte1 = NumberUtils.max(byte0, byte0, byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte) (-127), byte1);
      
      int int1 = (-3354);
      int int2 = NumberUtils.min((int) byte1, int0, int1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals((-3354), int2);
  }

  @Test
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)36;
      byte byte1 = NumberUtils.max(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(byte1 == byte0);
      assertEquals((byte)0, byte1);
      
      byteArray0[0] = byte0;
      int int0 = NumberUtils.min((int) byteArray0[0], (int) byte1, (int) byteArray0[0]);
      assertArrayEquals(new byte[] {(byte)36}, byteArray0);
      assertFalse(byte1 == byte0);
      assertEquals(0, int0);
  }

  @Test
  public void test034()  throws Throwable  {
      byte byte0 = (byte)0;
      long long0 = (-2177L);
      long long1 = NumberUtils.min((long) byte0, (long) byte0, long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals((-2177L), long1);
  }

  @Test
  public void test035()  throws Throwable  {
      long long0 = (-1964L);
      long long1 = (-2534L);
      long long2 = NumberUtils.min(long0, long1, long0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals((-2534L), long2);
  }

  @Test
  public void test036()  throws Throwable  {
      short[] shortArray0 = new short[1];
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)10;
      byteArray0[0] = byte0;
      shortArray0[0] = (short) byteArray0[0];
      float[] floatArray0 = new float[5];
      floatArray0[1] = (float) shortArray0[0];
      float float0 = NumberUtils.max(floatArray0);
      assertArrayEquals(new float[] {0.0F, 10.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(10.0F, float0, 0.01F);
  }

  @Test
  public void test037()  throws Throwable  {
      byte byte0 = (byte)79;
      double[] doubleArray0 = new double[10];
      doubleArray0[5] = (double) byte0;
      double double0 = NumberUtils.max(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 79.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(79.0, double0, 0.01D);
  }

  @Test
  public void test038()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)93;
      byteArray0[2] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)93, (byte)0}, byteArray0);
      assertTrue(byte1 == byte0);
      assertEquals((byte)93, byte1);
  }

  @Test
  public void test040()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test041()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = (short) (-3092);
      shortArray0[0] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertArrayEquals(new short[] {(short) (-3092), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(short1 == short0);
      assertEquals((short)0, short1);
  }

  @Test
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 1538;
      intArray0[2] = int0;
      int int1 = NumberUtils.max(intArray0);
      assertArrayEquals(new int[] {0, 0, 1538, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(int1 == int0);
      assertEquals(1538, int1);
  }

  @Test
  public void test043()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test044()  throws Throwable  {
      short short0 = (short) (-976);
      long[] longArray0 = new long[15];
      longArray0[0] = (long) short0;
      long long0 = NumberUtils.max(longArray0);
      assertArrayEquals(new long[] {(-976L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(0L, long0);
  }

  @Test
  public void test045()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test046()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = (-2084.942F);
      floatArray0[5] = float0;
      float float1 = NumberUtils.min(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-2084.942F), 0.0F}, floatArray0, 0.01F);
      assertTrue(float1 == float0);
      assertEquals((-2084.942F), float1, 0.01F);
  }

  @Test
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-4817.0254);
      doubleArray0[1] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-4817.0254), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(double1 == double0);
      assertEquals((-4817.0254), double1, 0.01D);
  }

  @Test
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-127);
      byteArray0[3] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-127), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byte1 == byte0);
      assertEquals((byte) (-127), byte1);
  }

  @Test
  public void test049()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test050()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)630;
      shortArray0[0] = short0;
      short short1 = NumberUtils.min(shortArray0);
      assertArrayEquals(new short[] {(short)630, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(short1 == short0);
      assertEquals((short)0, short1);
  }

  @Test
  public void test051()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test052()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 45;
      intArray0[0] = int0;
      int int1 = NumberUtils.min(intArray0);
      assertArrayEquals(new int[] {45, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test053()  throws Throwable  {
      short short0 = (short) (-2402);
      long[] longArray0 = new long[9];
      longArray0[5] = (long) short0;
      long long0 = NumberUtils.min(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, (-2402L), 0L, 0L, 0L}, longArray0);
      assertEquals((-2402L), long0);
  }

  @Test
  public void test054()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test055()  throws Throwable  {
      byte byte0 = (byte)31;
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[1];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) byte0;
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {31.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean0);
  }

  @Test
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[1];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
  }

  @Test
  public void test057()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[9];
      boolean boolean0 = NumberUtils.equals(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
  }

  @Test
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = null;
      boolean boolean0 = NumberUtils.equals(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      double[] doubleArray1 = new double[3];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
  }

  @Test
  public void test061()  throws Throwable  {
      short short0 = (short)2412;
      float[] floatArray0 = new float[1];
      float[] floatArray1 = new float[1];
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) short0;
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2412.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
  }

  @Test
  public void test062()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = new float[1];
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertTrue(boolean0);
  }

  @Test
  public void test063()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = new float[10];
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean0);
  }

  @Test
  public void test064()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = null;
      boolean boolean0 = NumberUtils.equals(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test
  public void test065()  throws Throwable  {
      float[] floatArray0 = new float[7];
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test
  public void test066()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float[] floatArray1 = null;
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test
  public void test067()  throws Throwable  {
      long[] longArray0 = new long[6];
      long[] longArray1 = new long[6];
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      long long0 = 1L;
      longArray1[5] = long0;
      boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 1L}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean0);
  }

  @Test
  public void test068()  throws Throwable  {
      long[] longArray0 = new long[6];
      long[] longArray1 = new long[6];
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(boolean0);
  }

  @Test
  public void test069()  throws Throwable  {
      long[] longArray0 = new long[6];
      boolean boolean0 = NumberUtils.equals(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test070()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = new long[7];
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean0);
  }

  @Test
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = (-1838);
      intArray0[3] = int0;
      int[] intArray1 = new int[4];
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, (-1838)}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean0);
  }

  @Test
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[8];
      int[] intArray1 = new int[6];
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(boolean0);
  }

  @Test
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[9];
      boolean boolean0 = NumberUtils.equals(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test074()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = new int[4];
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(boolean0);
  }

  @Test
  public void test075()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = (short) (-976);
      shortArray0[1] = short0;
      short[] shortArray1 = new short[6];
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-976), (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(boolean0);
  }

  @Test
  public void test076()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short[] shortArray1 = new short[7];
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean0);
  }

  @Test
  public void test077()  throws Throwable  {
      short[] shortArray0 = new short[8];
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test078()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short[] shortArray1 = new short[6];
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean0);
  }

  @Test
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)1;
      byteArray0[2] = byte0;
      byte[] byteArray1 = new byte[3];
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
  }

  @Test
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[1];
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
  }

  @Test
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = null;
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[3];
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean0);
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = "m/W+u7";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
      }
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = "-'M9W-O@KCK !oN;Ol";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -'M9W-O@KCK !oN;Ol is not a valid number.
         //
      }
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = "9h]649bVXKMnhW-H:d";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 9h]649bVXKMnhW-H:d is not a valid number.
         //
      }
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = "&GNL";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // &GNL is not a valid number.
         //
      }
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = "1F";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(1.0F, (float)float0, 0.01F);
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = "'R\\hfwSSSC3DJitD";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 'R\\hfwSSSC3DJitD is not a valid number.
         //
      }
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = "0e n#n";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0e n#n is not a valid number.
         //
      }
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = "K3 #4WL!~NEg_O5Ob$l";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // K3 #4WL!~NEg_O5Ob$l is not a valid number.
         //
      }
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = "0e";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0e is not a valid number.
         //
      }
  }

  @Test
  public void test100()  throws Throwable  {
      String string0 = "HK'EP;vvl<Y=8x]jGi2";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = "Array cannot be empty.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array cannot be empty. is not a valid number.
         //
      }
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = "f;h .2xF6%Y26hxN:8j";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // f;h .2xF6%Y26hxN:8j is not a valid number.
         //
      }
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = ".evi'E'8";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test104()  throws Throwable  {
      String string0 = "-0x";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
      }
  }

  @Test
  public void test105()  throws Throwable  {
      String string0 = "0x0xepn";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0xepn\"
         //
      }
  }

  @Test
  public void test106()  throws Throwable  {
      String string0 = "--";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test107()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test108()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test109()  throws Throwable  {
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test110()  throws Throwable  {
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test111()  throws Throwable  {
      String string0 = "";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test112()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test113()  throws Throwable  {
      long long0 = (-4612L);
      long long1 = NumberUtils.max(long0, long0, long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals((-4612L), long1);
      
      int[] intArray0 = new int[3];
      int int0 = 68;
      double double0 = NumberUtils.min((double) long1, (double) int0, (double) intArray0[0]);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals((-4612.0), double0, 0.01D);
  }

  @Test
  public void test114()  throws Throwable  {
      long long0 = 234L;
      float float0 = NumberUtils.max((float) long0, (float) long0, (float) long0);
      assertEquals(234.0F, float0, 0.01F);
  }

  @Test
  public void test115()  throws Throwable  {
      String string0 = null;
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test116()  throws Throwable  {
      String string0 = "-0xjdl?4_";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test117()  throws Throwable  {
      String string0 = null;
      int int0 = NumberUtils.stringToInt(string0);
      assertEquals(0, int0);
  }

  @Test
  public void test118()  throws Throwable  {
      String string0 = "-0xjdl?4_";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test119()  throws Throwable  {
      short short0 = (short)100;
      float float0 = NumberUtils.min((float) short0, (float) short0, (float) short0);
      assertEquals(100.0F, float0, 0.01F);
  }

  @Test
  public void test120()  throws Throwable  {
      double double0 = 0.0;
      double double1 = NumberUtils.max(double0, double0, double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test121()  throws Throwable  {
      String string0 = "I";
      int int0 = 0;
      int int1 = NumberUtils.stringToInt(string0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
  }
}
