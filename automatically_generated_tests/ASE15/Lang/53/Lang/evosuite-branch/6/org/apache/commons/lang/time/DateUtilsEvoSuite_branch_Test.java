/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:24:22 GMT 2014
 */

package org.apache.commons.lang.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.TimeZone;
import org.apache.commons.lang.time.DateUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class DateUtilsEvoSuite_branch_Test   {

  @Test
  public void test00() {}
//   @Test
//   public void test00()  throws Throwable  {
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
//       assertNotNull(dateUtils_DateIterator0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392322881320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       // Undeclared exception!
//       try {
//         Object object0 = dateUtils_DateIterator0.next();
//         fail("Expecting exception: NoSuchElementException");
//       
//       } catch(NoSuchElementException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test01()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)DateUtils.UTC_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("S/j\"04V8$Ek", zoneInfo0.getID());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      //  // Unstable assertion: assertEquals("S/j\"04V8$Ek", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"S/j\"04V8$Ek\",offset=13,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=333,ZONE_OFFSET=13,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      int int0 = 13;
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
      //  // Unstable assertion: assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      //  // Unstable assertion: assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar1);
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar1.isLenient());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=13,MONTH=13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=1,HOUR_OF_DAY=13,MINUTE=13,SECOND=13,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      
      DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar1);
      //  // Unstable assertion: assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      //  // Unstable assertion: assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      //  // Unstable assertion: assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      //  // Unstable assertion: assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      //  // Unstable assertion: assertNotNull(dateUtils_DateIterator0);
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar1.isLenient());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=13,MONTH=13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=1,HOUR_OF_DAY=13,MINUTE=13,SECOND=13,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("S/j\"04V8$Ek", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392322881320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"S/j\"04V8$Ek\",offset=13,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=333,ZONE_OFFSET=13,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      MockGregorianCalendar mockGregorianCalendar2 = (MockGregorianCalendar)dateUtils_DateIterator0.next();
      //  // Unstable assertion: assertNotSame(mockGregorianCalendar1, mockGregorianCalendar2);
      //  // Unstable assertion: assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      //  // Unstable assertion: assertNotSame(mockGregorianCalendar2, mockGregorianCalendar0);
      //  // Unstable assertion: assertNotSame(mockGregorianCalendar2, mockGregorianCalendar1);
      //  // Unstable assertion: assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      //  // Unstable assertion: assertNotSame(mockGregorianCalendar0, mockGregorianCalendar2);
      //  // Unstable assertion: assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar2));
      //  // Unstable assertion: assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      //  // Unstable assertion: assertTrue(mockGregorianCalendar2.equals((Object)mockGregorianCalendar0));
      //  // Unstable assertion: assertFalse(mockGregorianCalendar2.equals((Object)mockGregorianCalendar1));
      //  // Unstable assertion: assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar2));
      //  // Unstable assertion: assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar2);
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar1.isLenient());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=13,MONTH=13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=1,HOUR_OF_DAY=13,MINUTE=13,SECOND=13,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar2.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"S/j\"04V8$Ek\",offset=13,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=333,ZONE_OFFSET=13,DST_OFFSET=0]", mockGregorianCalendar2.toString());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar2.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar2.isLenient());
      //  // Unstable assertion: assertEquals("S/j\"04V8$Ek", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"S/j\"04V8$Ek\",offset=13,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=333,ZONE_OFFSET=13,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = (-116);
      String string0 = "";
      // Undeclared exception!
      try {
        Iterator iterator0 = DateUtils.iterator((Object) string0, int0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Could not iterate based on 
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      Object object0 = null;
      int int0 = (-5326);
      // Undeclared exception!
      try {
        Iterator iterator0 = DateUtils.iterator(object0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      int int0 = 4;
      Iterator iterator0 = DateUtils.iterator((Calendar) mockGregorianCalendar0, int0);
      assertNotNull(iterator0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test
  public void test05() {}
//   @Test
//   public void test05()  throws Throwable  {
//       int int0 = 695;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=695,MONTH=695,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=695,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       int int1 = 6;
//       Iterator iterator0 = DateUtils.iterator((Calendar) mockGregorianCalendar0, int1);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertNotNull(iterator0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=695,MONTH=695,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=695,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//   }

  @Test
  public void test06() {}
//   @Test
//   public void test06()  throws Throwable  {
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       
//       int int0 = 5;
//       Iterator iterator0 = DateUtils.iterator((Object) mockGregorianCalendar0, int0);
//       assertNotNull(iterator0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//   }

  @Test
  public void test07() {}
//   @Test
//   public void test07()  throws Throwable  {
//       int int0 = (-1679);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1679,MONTH=-1679,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1679,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       int int1 = 4;
//       Iterator iterator0 = DateUtils.iterator((Object) mockGregorianCalendar0, int1);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertNotNull(iterator0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-119713075200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1825,MONTH=5,WEEK_OF_YEAR=27,WEEK_OF_MONTH=5,DAY_OF_MONTH=27,DAY_OF_YEAR=179,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//   }

  @Test
  public void test08() {}
//   @Test
//   public void test08()  throws Throwable  {
//       int int0 = 867;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=867,MONTH=867,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=867,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=867,HOUR_OF_DAY=867,MINUTE=867,SECOND=867,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       int int1 = 3;
//       Iterator iterator0 = DateUtils.iterator((Calendar) mockGregorianCalendar0, int1);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertNotNull(iterator0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-32449011513000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=941,MONTH=8,WEEK_OF_YEAR=39,WEEK_OF_MONTH=4,DAY_OF_MONTH=19,DAY_OF_YEAR=262,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=41,SECOND=27,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//   }

  @Test
  public void test09() {}
//   @Test
//   public void test09()  throws Throwable  {
//       int int0 = 677;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=677,MONTH=677,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=677,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       int int1 = 2;
//       Iterator iterator0 = DateUtils.iterator((Calendar) mockGregorianCalendar0, int1);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertNotNull(iterator0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=677,MONTH=677,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=677,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//   }

  @Test
  public void test10() {}
//   @Test
//   public void test10()  throws Throwable  {
//       int int0 = (-2099);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2099,MONTH=-2099,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2099,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-2099,HOUR_OF_DAY=-2099,MINUTE=-2099,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       int int1 = 1;
//       Iterator iterator0 = DateUtils.iterator((Object) mockGregorianCalendar0, int1);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertNotNull(iterator0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2099,MONTH=-2099,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2099,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-2099,HOUR_OF_DAY=-2099,MINUTE=-2099,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//   }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      Calendar calendar0 = null;
      // Undeclared exception!
      try {
        Iterator iterator0 = DateUtils.iterator(calendar0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 1047;
      Date date0 = null;
      // Undeclared exception!
      try {
        Iterator iterator0 = DateUtils.iterator(date0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      long long0 = (-1320L);
      MockDate mockDate0 = new MockDate(long0);
      assertNotNull(mockDate0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      
      int int0 = 12;
      // Undeclared exception!
      try {
        Iterator iterator0 = DateUtils.iterator((Object) mockDate0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The range style 12 is not valid.
         //
      }
  }

  @Test
  public void test14() {}
//   @Test
//   public void test14()  throws Throwable  {
//       int int0 = 0;
//       int int1 = 2246;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int1, int0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2246,HOUR_OF_DAY=2246,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       int int2 = 9;
//       Date date0 = DateUtils.truncate((Object) mockGregorianCalendar0, int2);
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int2);
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int0);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int0);
//       assertNotNull(date0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2246,HOUR_OF_DAY=2246,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("Fri Apr 02 12:00:00 GMT 1", date0.toString());
//   }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 1001;
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)DateUtils.round((Calendar) mockGregorianCalendar0, int0);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertNotNull(mockGregorianCalendar1);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals(true, mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392508800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=16,DAY_OF_YEAR=47,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      
      MockGregorianCalendar mockGregorianCalendar2 = (MockGregorianCalendar)DateUtils.truncate((Calendar) mockGregorianCalendar1, int0);
      assertNotSame(mockGregorianCalendar2, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar2, mockGregorianCalendar0);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar2);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar2);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar2.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar2.equals((Object)mockGregorianCalendar0));
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar2));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar2));
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertNotNull(mockGregorianCalendar2);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals(1, mockGregorianCalendar2.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar2.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392508800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=16,DAY_OF_YEAR=47,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar2.toString());
      assertEquals(true, mockGregorianCalendar2.isLenient());
      assertEquals(true, mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392508800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=16,DAY_OF_YEAR=47,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
  }

  @Test
  public void test16() {}
//   @Test
//   public void test16()  throws Throwable  {
//       int int0 = 1001;
//       int int1 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int1, int1, int0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1001,MONTH=1001,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1001,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       Date date0 = DateUtils.round((Object) mockGregorianCalendar0, int0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertNotNull(date0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1001,MONTH=1001,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1001,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("Sat Jun 01 00:00:00 GMT 1084", date0.toString());
//   }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 9;
      MockDate mockDate0 = new MockDate(int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Sat Oct 09 00:00:00 GMT 1909", mockDate0.toString());
      
      Date date0 = DateUtils.addHours((Date) mockDate0, int0);
      assertNotNull(date0);
      assertEquals("Sat Oct 09 00:00:00 GMT 1909", mockDate0.toString());
      assertEquals("Sat Oct 09 09:00:00 GMT 1909", date0.toString());
      
      Date date1 = DateUtils.round(date0, int0);
      assertNotSame(date1, date0);
      assertNotSame(date0, date1);
      assertFalse(date1.equals((Object)date0));
      assertFalse(date0.equals((Object)date1));
      assertNotNull(date1);
      assertEquals("Sun Oct 10 00:00:00 GMT 1909", date1.toString());
      assertEquals("Sat Oct 09 00:00:00 GMT 1909", mockDate0.toString());
      assertEquals("Sat Oct 09 09:00:00 GMT 1909", date0.toString());
  }

  @Test
  public void test18()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      int int0 = 13;
      Date date0 = DateUtils.truncate((Date) mockDate0, int0);
      assertNotNull(date0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test
  public void test19() {}
//   @Test
//   public void test19()  throws Throwable  {
//       int int0 = (-116);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-116,MONTH=-116,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-116,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-116,HOUR_OF_DAY=-116,MINUTE=-116,SECOND=-116,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       
//       int int1 = 14;
//       MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)DateUtils.round((Calendar) mockGregorianCalendar0, int1);
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
//       assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertFalse(int0 == int1);
//       assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
//       assertFalse(int1 == int0);
//       assertNotNull(mockGregorianCalendar1);
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-66143771876000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=128,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=364,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=2,SECOND=4,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-116,MONTH=-116,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-116,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-116,HOUR_OF_DAY=-116,MINUTE=-116,SECOND=-116,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//   }

  @Test
  public void test20() {}
//   @Test
//   public void test20()  throws Throwable  {
//       int int0 = 280000000;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=280000000,MONTH=280000000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=280000000,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       
//       // Undeclared exception!
//       try {
//         Date date0 = DateUtils.round((Object) mockGregorianCalendar0, int0);
//         fail("Expecting exception: ArithmeticException");
//       
//       } catch(ArithmeticException e) {
//          //
//          // Calendar value too large for accurate calculations
//          //
//       }
//   }

  @Test
  public void test21()  throws Throwable  {
      long long0 = (-1320L);
      MockDate mockDate0 = new MockDate(long0);
      assertNotNull(mockDate0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      
      int int0 = 12;
      Date date0 = DateUtils.truncate((Object) mockDate0, int0);
      assertNotNull(date0);
      assertEquals("Wed Dec 31 23:59:00 GMT 1969", date0.toString());
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = null;
      int int0 = (-1);
      // Undeclared exception!
      try {
        Date date0 = DateUtils.truncate((Object) string0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 11;
      // Undeclared exception!
      try {
        Date date0 = DateUtils.truncate(object0, int0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Could not truncate java.lang.Object@46b8a02a
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      Calendar calendar0 = null;
      int int0 = 1;
      // Undeclared exception!
      try {
        Calendar calendar1 = DateUtils.truncate(calendar0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = (-8);
      Date date0 = null;
      // Undeclared exception!
      try {
        Date date1 = DateUtils.truncate(date0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 0;
      // Undeclared exception!
      try {
        Date date0 = DateUtils.round(object0, int0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Could not round java.lang.Object@23edef42
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      long long0 = (-1098L);
      MockDate mockDate0 = new MockDate(long0);
      assertNotNull(mockDate0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      
      int int0 = 18;
      // Undeclared exception!
      try {
        Date date0 = DateUtils.round((Object) mockDate0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field 18 is not supported
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      Date date0 = null;
      int int0 = 10;
      // Undeclared exception!
      try {
        Date date1 = DateUtils.round((Object) date0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 677;
      Calendar calendar0 = null;
      // Undeclared exception!
      try {
        Calendar calendar1 = DateUtils.round(calendar0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      Date date0 = null;
      int int0 = (-1679);
      // Undeclared exception!
      try {
        Date date1 = DateUtils.round(date0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = 9;
      MockDate mockDate0 = new MockDate(int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Sat Oct 09 00:00:00 GMT 1909", mockDate0.toString());
      
      Date date0 = DateUtils.round((Date) mockDate0, int0);
      assertNotNull(date0);
      assertEquals("Sat Oct 09 00:00:00 GMT 1909", mockDate0.toString());
      assertEquals("Sat Oct 09 00:00:00 GMT 1909", date0.toString());
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = 9;
      Date date0 = null;
      // Undeclared exception!
      try {
        Date date1 = DateUtils.addMonths(date0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[14];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      Date date0 = DateUtils.parseDate(string0, stringArray0);
      assertNotNull(date0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "";
      String string1 = "'Ih<e;&lY\\r(O'";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string1;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string1;
      assertNotNull(stringArray0[6]);
      
      try {
        Date date0 = DateUtils.parseDate(string1, stringArray0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unable to parse the date: 'Ih<e;&lY\\r(O'
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try {
        Date date0 = DateUtils.parseDate(string0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Date and Patterns must not be null
         //
      }
  }

  @Test
  public void test36() {}
//   @Test
//   public void test36()  throws Throwable  {
//       int int0 = (-1833);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1833,MONTH=-1833,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1833,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1833,HOUR_OF_DAY=-1833,MINUTE=-1833,SECOND=-1833,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       int int1 = 276;
//       MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(int0, int1, int0, int0, int0, int0);
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertNotNull(mockGregorianCalendar1);
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1833,MONTH=276,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1833,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1833,HOUR_OF_DAY=-1833,MINUTE=-1833,SECOND=-1833,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
//       
//       boolean boolean0 = DateUtils.isSameLocalTime((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
//       assertFalse(boolean0);
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-119451773013000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1817,MONTH=9,WEEK_OF_YEAR=41,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=281,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=56,SECOND=27,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-124998134613000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1992,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=5,DAY_OF_YEAR=5,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=56,SECOND=27,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//   }

  @Test
  public void test37() {}
//   @Test
//   public void test37()  throws Throwable  {
//       int int0 = (-650);
//       int int1 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int1, int0, int1, int1);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-650,MONTH=-650,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-650,HOUR_OF_DAY=-650,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)DateUtils.round((Calendar) mockGregorianCalendar0, int1);
//       assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertNotNull(mockGregorianCalendar1);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-650,MONTH=-650,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-650,HOUR_OF_DAY=-650,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       
//       boolean boolean0 = DateUtils.isSameLocalTime((Calendar) mockGregorianCalendar1, (Calendar) mockGregorianCalendar0);
//       assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertFalse(boolean0);
//       assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-84391639200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=706,MONTH=9,WEEK_OF_YEAR=41,WEEK_OF_MONTH=2,DAY_OF_MONTH=3,DAY_OF_YEAR=276,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167392000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
//   }

  @Test
  public void test38() {}
//   @Test
//   public void test38()  throws Throwable  {
//       int int0 = 0;
//       int int1 = 2246;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int1, int0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2246,HOUR_OF_DAY=2246,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       
//       MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(int0, int0, int0, int1, int1);
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertNotNull(mockGregorianCalendar1);
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2246,HOUR_OF_DAY=2246,MINUTE=2246,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
//       
//       boolean boolean0 = DateUtils.isSameLocalTime((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
//       assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertFalse(boolean0);
//       assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62159392800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=3,WEEK_OF_YEAR=14,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=93,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62159258040000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=4,DAY_OF_YEAR=95,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=26,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//   }

  @Test
  public void test39() {}
//   @Test
//   public void test39()  throws Throwable  {
//       int int0 = (-116);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-116,MONTH=-116,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-116,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-116,HOUR_OF_DAY=-116,MINUTE=-116,SECOND=-116,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       int int1 = 0;
//       MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)DateUtils.truncate((Calendar) mockGregorianCalendar0, int1);
//       assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
//       assertFalse(int1 == int0);
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertFalse(int0 == int1);
//       assertNotNull(mockGregorianCalendar1);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-116,MONTH=-116,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-116,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-116,HOUR_OF_DAY=-116,MINUTE=-116,SECOND=-116,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       
//       boolean boolean0 = DateUtils.isSameLocalTime((Calendar) mockGregorianCalendar1, (Calendar) mockGregorianCalendar0);
//       assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertFalse(boolean0);
//       assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
//       assertFalse(int1 == int0);
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertFalse(int0 == int1);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-66143771876000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=128,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=364,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=2,SECOND=4,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167392000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
//   }

  @Test
  public void test40()  throws Throwable  {
      int int0 = 677;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=677,MONTH=677,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=677,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)DateUtils.UTC_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("S/j\"04V8$Ek", zoneInfo0.getID());
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      //  // Unstable assertion: assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar1);
      //  // Unstable assertion: assertEquals("S/j\"04V8$Ek", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"S/j\"04V8$Ek\",offset=13,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=333,ZONE_OFFSET=13,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar1.isLenient());
      
      boolean boolean0 = DateUtils.isSameLocalTime((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
      //  // Unstable assertion: assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      //  // Unstable assertion: assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      //  // Unstable assertion: assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-38964153600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=735,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=98,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("S/j\"04V8$Ek", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"S/j\"04V8$Ek\",offset=13,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=333,ZONE_OFFSET=13,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar1.isLenient());
  }

  @Test
  public void test41() {}
//   @Test
//   public void test41()  throws Throwable  {
//       int int0 = 1001;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1001,MONTH=1001,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1001,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1001,HOUR_OF_DAY=1001,MINUTE=1001,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       Calendar calendar0 = null;
//       // Undeclared exception!
//       try {
//         boolean boolean0 = DateUtils.isSameLocalTime((Calendar) mockGregorianCalendar0, calendar0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // The date must not be null
//          //
//       }
//   }

  @Test
  public void test42() {}
//   @Test
//   public void test42()  throws Throwable  {
//       int int0 = (-650);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-650,MONTH=-650,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-650,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-650,HOUR_OF_DAY=-650,MINUTE=-650,SECOND=-650,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       boolean boolean0 = DateUtils.isSameLocalTime((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0);
//       assertTrue(boolean0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-84447838850000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=708,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=356,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=59,SECOND=10,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//   }

  @Test
  public void test43()  throws Throwable  {
      Calendar calendar0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = DateUtils.isSameLocalTime(calendar0, calendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)DateUtils.UTC_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("S/j\"04V8$Ek", zoneInfo0.getID());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"S/j\"04V8$Ek\",offset=13,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=333,ZONE_OFFSET=13,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("S/j\"04V8$Ek", zoneInfo0.getID());
      
      int int0 = 13;
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
      //  // Unstable assertion: assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      //  // Unstable assertion: assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar1);
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar1.isLenient());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=13,MONTH=13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=1,HOUR_OF_DAY=13,MINUTE=13,SECOND=13,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      
      boolean boolean0 = DateUtils.isSameInstant((Calendar) mockGregorianCalendar1, (Calendar) mockGregorianCalendar0);
      //  // Unstable assertion: assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      //  // Unstable assertion: assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      //  // Unstable assertion: assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61721779607000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=14,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=1,HOUR_OF_DAY=13,MINUTE=13,SECOND=13,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar1.isLenient());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"S/j\"04V8$Ek\",offset=13,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=333,ZONE_OFFSET=13,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("S/j\"04V8$Ek", zoneInfo0.getID());
  }

  @Test
  public void test45()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      Calendar calendar0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, calendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      
      boolean boolean0 = DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0);
      assertTrue(boolean0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
  }

  @Test
  public void test47()  throws Throwable  {
      Calendar calendar0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = DateUtils.isSameInstant(calendar0, calendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test
  public void test48()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      int int0 = 0;
      Date date0 = DateUtils.round((Object) mockGregorianCalendar0, int0);
      assertNotNull(date0);
      assertEquals("Sat Jan 01 00:00:00 GMT 1", date0.toString());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      int int1 = (-1);
      Date date1 = DateUtils.add(date0, int0, int1);
      assertNotSame(date1, date0);
      assertNotSame(date0, date1);
      assertFalse(date1.equals((Object)date0));
      assertFalse(date0.equals((Object)date1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(date1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1", date1.toString());
      assertEquals("Sat Jan 01 00:00:00 GMT 1", date0.toString());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      boolean boolean0 = DateUtils.isSameInstant(date1, date0);
      assertNotSame(date1, date0);
      assertNotSame(date0, date1);
      assertFalse(boolean0);
      assertFalse(date1.equals((Object)date0));
      assertFalse(date0.equals((Object)date1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1", date1.toString());
      assertEquals("Sat Jan 01 00:00:00 GMT 1", date0.toString());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
  }

  @Test
  public void test49()  throws Throwable  {
      int int0 = (-791);
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Tue Oct 28 11:35:49 GMT 1040", mockDate0.toString());
      
      Date date0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = DateUtils.isSameInstant((Date) mockDate0, date0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test
  public void test50()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      boolean boolean0 = DateUtils.isSameInstant((Date) mockDate0, (Date) mockDate0);
      assertTrue(boolean0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
  }

  @Test
  public void test51()  throws Throwable  {
      Date date0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = DateUtils.isSameInstant(date0, date0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test
  public void test52()  throws Throwable  {
      int int0 = 1001;
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Date date0 = DateUtils.addMinutes((Date) mockDate0, int0);
      assertNotNull(date0);
      assertEquals("Sat Feb 15 13:02:21 GMT 2014", date0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      boolean boolean0 = DateUtils.isSameDay(date0, (Date) mockDate0);
      assertFalse(boolean0);
      assertEquals("Sat Feb 15 13:02:21 GMT 2014", date0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
  }

  @Test
  public void test53()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      int int0 = 0;
      Date date0 = DateUtils.truncate((Date) mockDate0, int0);
      assertNotNull(date0);
      assertEquals("Sat Jan 01 00:00:00 GMT 1", date0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      boolean boolean0 = DateUtils.isSameDay((Date) mockDate0, date0);
      assertFalse(boolean0);
      assertEquals("Sat Jan 01 00:00:00 GMT 1", date0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
  }

  @Test
  public void test54() {}
//   @Test
//   public void test54()  throws Throwable  {
//       int int0 = (-1);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1,HOUR_OF_DAY=-1,MINUTE=-1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Locale locale0 = Locale.ITALIAN;
//       assertNotNull(locale0);
//       assertEquals("", locale0.getVariant());
//       assertEquals("it", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       
//       MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((TimeZone) zoneInfo0, locale0);
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertNotNull(mockGregorianCalendar1);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("", locale0.getVariant());
//       assertEquals("it", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
//       assertEquals(2, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals(4, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       
//       boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
//       assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertFalse(boolean0);
//       assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("", locale0.getVariant());
//       assertEquals("it", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62201782860000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=3,MONTH=10,WEEK_OF_YEAR=48,WEEK_OF_MONTH=5,DAY_OF_MONTH=28,DAY_OF_YEAR=332,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=59,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
//       assertEquals(2, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals(4, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//   }

  @Test
  public void test55() {}
//   @Test
//   public void test55()  throws Throwable  {
//       String string0 = "r\\c&4KgeW[0'";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Calendar calendar0 = null;
//       // Undeclared exception!
//       try {
//         boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar0, calendar0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // The date must not be null
//          //
//       }
//   }

  @Test
  public void test56()  throws Throwable  {
      Calendar calendar0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = DateUtils.isSameDay(calendar0, calendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test
  public void test57()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Date date0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = DateUtils.isSameDay((Date) mockDate0, date0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test
  public void test58()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      boolean boolean0 = DateUtils.isSameDay((Date) mockDate0, (Date) mockDate0);
      assertTrue(boolean0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
  }

  @Test
  public void test59()  throws Throwable  {
      int int0 = 845;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Fri Oct 27 19:05:00 GMT 2817", mockDate0.toString());
      
      Date date0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = DateUtils.isSameDay(date0, (Date) mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test
  public void test60() {}
//   @Test
//   public void test60()  throws Throwable  {
//       int int0 = (-1);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1,HOUR_OF_DAY=-1,MINUTE=-1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
//       assertNotNull(dateUtils_DateIterator0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62201869260000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=3,MONTH=10,WEEK_OF_YEAR=48,WEEK_OF_MONTH=5,DAY_OF_MONTH=27,DAY_OF_YEAR=331,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=59,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       // Undeclared exception!
//       try {
//         dateUtils_DateIterator0.remove();
//         fail("Expecting exception: UnsupportedOperationException");
//       
//       } catch(UnsupportedOperationException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test61() {}
//   @Test
//   public void test61()  throws Throwable  {
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar0, mockGregorianCalendar0);
//       assertNotNull(dateUtils_DateIterator0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392322881320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       
//       boolean boolean0 = dateUtils_DateIterator0.hasNext();
//       assertFalse(boolean0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392322881320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//   }

  @Test
  public void test62()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      int int0 = (-650);
      Date date0 = DateUtils.addDays((Date) mockDate0, int0);
      assertNotNull(date0);
      assertEquals("Sat May 05 20:21:21 GMT 2012", date0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
  }

  @Test
  public void test63()  throws Throwable  {
      int int0 = 845;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Fri Oct 27 19:05:00 GMT 2817", mockDate0.toString());
      
      Date date0 = DateUtils.addSeconds((Date) mockDate0, int0);
      assertNotNull(date0);
      assertEquals("Fri Oct 27 19:05:00 GMT 2817", mockDate0.toString());
      assertEquals("Fri Oct 27 19:19:05 GMT 2817", date0.toString());
  }

  @Test
  public void test64()  throws Throwable  {
      long long0 = (-1098L);
      MockDate mockDate0 = new MockDate(long0);
      assertNotNull(mockDate0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      
      int int0 = 18;
      Date date0 = DateUtils.addMilliseconds((Date) mockDate0, int0);
      assertNotNull(date0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", date0.toString());
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
  }

  @Test
  public void test65()  throws Throwable  {
      DateUtils dateUtils0 = new DateUtils();
      assertNotNull(dateUtils0);
  }

  @Test
  public void test66()  throws Throwable  {
      long long0 = (-1098L);
      MockDate mockDate0 = new MockDate(long0);
      assertNotNull(mockDate0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      
      int int0 = 18;
      Date date0 = DateUtils.addYears((Date) mockDate0, int0);
      assertNotNull(date0);
      assertEquals("Thu Dec 31 23:59:58 GMT 1987", date0.toString());
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
  }

  @Test
  public void test67()  throws Throwable  {
      int int0 = 1001;
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Date date0 = DateUtils.addWeeks((Date) mockDate0, int0);
      assertNotNull(date0);
      assertEquals("Fri Apr 22 20:21:21 GMT 2033", date0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
  }
}
