/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:10:51 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.File;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Writer;
import org.apache.commons.lang.Entities;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

 
public class EntitiesEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "V`A]^i&#U;";
      String string1 = entities0.unescape(string0);
      assertEquals("V`A]^i&#U;", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test
  public void test01()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "rp";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((File) mockFile0);
      assertNotNull(mockPrintWriter0);
      
      entities0.unescape((Writer) mockPrintWriter0, string0);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 28;
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      PipedReader pipedReader0 = new PipedReader(int0);
      assertEquals(false, pipedReader0.markSupported());
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertEquals(false, pipedReader0.markSupported());
      assertEquals(false, pipedReader0.ready());
      assertNotNull(pipedWriter0);
      
      String string0 = "Gf\"x/PU[I-gQ&'`8'B";
      entities0.unescape((Writer) pipedWriter0, string0);
      assertEquals(true, pipedReader0.ready());
      assertEquals(false, pipedReader0.markSupported());
  }

  @Test
  public void test03()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      String string0 = "";
      String string1 = entities0.unescape(string0);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 2355;
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(int0);
      assertNotNull(entities_BinaryEntityMap0);
      
      String string0 = entities_BinaryEntityMap0.name(int0);
      assertNull(string0);
  }

  @Test
  public void test05()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      String string0 = "k";
      int int0 = 2355;
      String string1 = entities0.escape(string0);
      assertEquals("k", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(int0);
      assertNotNull(entities_BinaryEntityMap0);
      
      int int1 = entities_BinaryEntityMap0.value(string1);
      assertEquals((-1), int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(int1 == int0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertFalse(int0 == int1);
  }

  @Test
  public void test06()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
      
      int int0 = entities_BinaryEntityMap0.size;
      assertEquals(0, int0);
      
      String string0 = "e~N5Zt{ FY$\"S";
      entities_BinaryEntityMap0.add(string0, int0);
  }

  @Test
  public void test07()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      int int0 = 0;
      String string0 = entities0.entityName(int0);
      assertNull(string0);
  }

  @Test
  public void test08()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      int int0 = 1271;
      String string0 = entities0.entityName(int0);
      assertNull(string0);
  }

  @Test
  public void test09()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      assertNotNull(entities_HashEntityMap0);
      
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      String string0 = "k";
      String string1 = entities0.escape(string0);
      assertEquals("k", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      
      int int0 = entities_HashEntityMap0.value(string1);
      assertEquals((-1), int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
  }

  @Test
  public void test10()  throws Throwable  {
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      String string0 = "";
      int int0 = entities_LookupEntityMap0.value(string0);
      assertEquals((-1), int0);
  }

  @Test
  public void test11()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      String string0 = "k";
      int int0 = 2355;
      String string1 = entities0.escape(string0);
      assertEquals("k", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap0);
      
      entities_TreeEntityMap0.add(string1, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
  }

  @Test
  public void test12()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      int int0 = 0;
      String string0 = entities0.entityName(int0);
      assertNull(string0);
  }

  @Test
  public void test13()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      String string0 = "{a>Sw#CD|~p";
      String string1 = entities0.escape(string0);
      assertEquals("{a&gt;Sw#CD|~p", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      
      String string2 = entities0.unescape(string1);
      assertEquals("{a>Sw#CD|~p", string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test
  public void test14()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      Entities.fillWithHtml40Entities(entities0);
  }
}
