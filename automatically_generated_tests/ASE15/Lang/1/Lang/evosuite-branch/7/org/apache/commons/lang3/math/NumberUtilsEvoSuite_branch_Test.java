/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:51:20 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class NumberUtilsEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "6C";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "..";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "92";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "EEqVYv0v?";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "8eS=";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "0Ez";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "0xEe##b$\\";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "0x1jPzo8aM2bA";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "0.";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "D";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "--q<~G]_=r5^5;~>q%Jp";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "+J]2uKYh";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "92";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)97;
      byteArray0[2] = byte0;
      byteArray0[3] = byteArray0[2];
      byte byte1 = NumberUtils.max(byteArray0[7], byteArray0[7], byteArray0[3]);
      assertTrue(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)97, (byte)97, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)97, byte1);
  }

  @Test
  public void test020()  throws Throwable  {
      byte byte0 = (byte)115;
      byte byte1 = (byte)32;
      byte byte2 = NumberUtils.max(byte1, byte0, byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertFalse(byte2 == byte1);
      assertTrue(byte2 == byte0);
      assertFalse(byte0 == byte1);
      assertTrue(byte0 == byte2);
      assertEquals((byte)115, byte2);
  }

  @Test
  public void test021()  throws Throwable  {
      short short0 = (short) (-2864);
      short short1 = (short) (-1234);
      short short2 = NumberUtils.max(short0, short0, short1);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertEquals((short) (-1234), short2);
  }

  @Test
  public void test022()  throws Throwable  {
      short short0 = (short)24;
      String string0 = null;
      short short1 = (short) (-302);
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
      
      short short2 = NumberUtils.min(short0, short1, short0);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertEquals((short) (-302), short2);
      
      short short3 = NumberUtils.max(short2, (short) byte0, short1);
      assertFalse(short2 == short0);
      assertFalse(short2 == short3);
      assertTrue(short2 == short1);
      assertFalse(short1 == short3);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertFalse(short0 == short3);
      assertFalse(short3 == short2);
      assertFalse(short3 == short1);
      assertFalse(short3 == short0);
      assertEquals((short)0, short3);
  }

  @Test
  public void test023()  throws Throwable  {
      int int0 = 0;
      int int1 = 64;
      int int2 = NumberUtils.max(int0, int0, int1);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertEquals(64, int2);
  }

  @Test
  public void test024()  throws Throwable  {
      byte byte0 = (byte) (-112);
      byte byte1 = (byte)1;
      int int0 = NumberUtils.max((int) byte0, (int) byte1, (int) byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals(1, int0);
  }

  @Test
  public void test025()  throws Throwable  {
      byte byte0 = (byte)115;
      byte byte1 = (byte) (-54);
      long long0 = NumberUtils.max((long) byte1, (long) byte1, (long) byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals(115L, long0);
  }

  @Test
  public void test026()  throws Throwable  {
      byte byte0 = (byte) (-128);
      byte byte1 = (byte)13;
      long long0 = NumberUtils.max((long) byte0, (long) byte1, (long) byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals(13L, long0);
  }

  @Test
  public void test027()  throws Throwable  {
      byte byte0 = (byte)115;
      byte byte1 = (byte)50;
      byte byte2 = NumberUtils.min(byte0, byte0, byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertEquals((byte)50, byte2);
  }

  @Test
  public void test028()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte) (-76);
      byte byte2 = NumberUtils.min(byte0, byte1, byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertEquals((byte) (-76), byte2);
  }

  @Test
  public void test029()  throws Throwable  {
      short short0 = (short) (-509);
      short short1 = (short) (-1626);
      short short2 = NumberUtils.min(short0, short0, short1);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertEquals((short) (-1626), short2);
  }

  @Test
  public void test030()  throws Throwable  {
      short short0 = (short)24;
      short[] shortArray0 = new short[1];
      short short1 = NumberUtils.max(shortArray0);
      assertFalse(short1 == short0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals((short)0, short1);
      
      short short2 = NumberUtils.min(short0, short1, short0);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals((short)0, short2);
  }

  @Test
  public void test031()  throws Throwable  {
      byte byte0 = (byte)66;
      String string0 = "*i\\_xGF7~na$zU=";
      byte byte1 = NumberUtils.toByte(string0);
      assertFalse(byte1 == byte0);
      assertEquals((byte)0, byte1);
      
      int int0 = (-6);
      int int1 = NumberUtils.min((int) byte0, int0, (int) byte0);
      assertTrue(int0 == int1);
      assertFalse(byte0 == byte1);
      assertTrue(int1 == int0);
      assertEquals((-6), int1);
      
      int int2 = NumberUtils.min((int) byte1, (int) byte0, int1);
      assertTrue(int0 == int1);
      assertTrue(int0 == int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(byte0 == byte1);
      assertTrue(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(byte1 == byte0);
      assertEquals((-6), int2);
  }

  @Test
  public void test032()  throws Throwable  {
      long long0 = (-1L);
      int int0 = 1125;
      long long1 = (-442L);
      long long2 = NumberUtils.min(long0, (long) int0, long1);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertEquals((-442L), long2);
  }

  @Test
  public void test033()  throws Throwable  {
      int int0 = 1125;
      int int1 = 70;
      long long0 = NumberUtils.min((long) int0, (long) int1, (long) int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(70L, long0);
  }

  @Test
  public void test034()  throws Throwable  {
      short short0 = (short)69;
      float[] floatArray0 = new float[9];
      floatArray0[5] = (float) short0;
      float float0 = NumberUtils.max(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 69.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(69.0F, float0, 0.01F);
  }

  @Test
  public void test035()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float float0 = Float.NaN;
      floatArray0[3] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, Float.NaN}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test036()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 999.24216;
      doubleArray0[5] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      assertTrue(double1 == double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 999.24216, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(999.24216, double1, 0.01D);
  }

  @Test
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = Double.NaN;
      doubleArray0[6] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)97;
      byteArray0[2] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertTrue(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)97, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)97, byte1);
  }

  @Test
  public void test040()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)24;
      shortArray0[1] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertTrue(short1 == short0);
      assertArrayEquals(new short[] {(short)0, (short)24, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((short)24, short1);
  }

  @Test
  public void test041()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[21];
      int int0 = (-338);
      intArray0[0] = int0;
      int int1 = NumberUtils.max(intArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {(-338), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int1);
  }

  @Test
  public void test043()  throws Throwable  {
      short short0 = (short) (-2163);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) short0;
      long long0 = NumberUtils.max(longArray0);
      assertArrayEquals(new long[] {(-2163L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(0L, long0);
  }

  @Test
  public void test044()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = (-71.0F);
      floatArray0[1] = float0;
      float float1 = NumberUtils.min(floatArray0);
      assertTrue(float1 == float0);
      assertArrayEquals(new float[] {0.0F, (-71.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-71.0F), float1, 0.01F);
  }

  @Test
  public void test045()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float float0 = Float.NaN;
      floatArray0[1] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test046()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 1499.0;
      doubleArray0[0] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      assertFalse(double1 == double0);
      assertArrayEquals(new double[] {1499.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = Double.NaN;
      doubleArray0[3] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test049()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test050()  throws Throwable  {
      byte byte0 = (byte)1;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertFalse(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)0, byte1);
  }

  @Test
  public void test051()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test052()  throws Throwable  {
      short short0 = (short) (-117);
      short[] shortArray0 = new short[8];
      shortArray0[4] = short0;
      short short1 = NumberUtils.min(shortArray0);
      assertTrue(short1 == short0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short) (-117), (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((short) (-117), short1);
  }

  @Test
  public void test053()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test054()  throws Throwable  {
      int int0 = 1125;
      int[] intArray0 = new int[4];
      intArray0[0] = int0;
      int int1 = NumberUtils.min(intArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {1125, 0, 0, 0}, intArray0);
      assertEquals(0, int1);
  }

  @Test
  public void test055()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[21];
      int int0 = (-338);
      intArray0[0] = int0;
      long[] longArray0 = new long[5];
      longArray0[4] = (long) intArray0[0];
      long long0 = NumberUtils.min(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-338L)}, longArray0);
      assertEquals((-338L), long0);
  }

  @Test
  public void test057()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test058()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test059()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test060()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test061()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test062()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test063()  throws Throwable  {
      String string0 = ".E1";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = "0Ebi3";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = "The Array must not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
      }
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = "#*>af";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // #*>af is not a valid number.
         //
      }
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = "InvocationTargetException occurred";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // InvocationTargetException occurred is not a valid number.
         //
      }
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = "F";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // F is not a valid number.
         //
      }
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = "vNR7Q\\Pu@D";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // vNR7Q\\Pu@D is not a valid number.
         //
      }
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = "()XH!E";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ()XH!E is not a valid number.
         //
      }
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = "0.";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "Zni5";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Zni5\"
         //
      }
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "0EY,,buK}$i+^";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0EY,,buK}$i+^ is not a valid number.
         //
      }
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "org.apache.commns.lang3StingUtil";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apache.commns.lang3StingUtil is not a valid number.
         //
      }
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "Array cannot be empty.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array cannot be empty. is not a valid number.
         //
      }
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "0.c 43G'G05.HX";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.c 43G'G05.HX is not a valid number.
         //
      }
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "or.apache.com.s.lang3SEngtil";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // or.apache.com.s.lang3SEngtil is not a valid number.
         //
      }
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "-0XZG;&O=rX@Q[+l);rn~";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-ZG;&O=rX@Q[+l);rn~\"
         //
      }
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "0XArray cannot be empty.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Array cannot be empty.\"
         //
      }
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = "-0xZni5";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-Zni5\"
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "0xEe##b$\\";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ee##b$\\\"
         //
      }
  }

  @Test
  public void test082() {}
//   @Test
//   public void test082()  throws Throwable  {
//       String string0 = "--q<~G]_=r5^5;~>q%Jp";
//       Number number0 = NumberUtils.createNumber(string0);
//       assertNull(number0);
//   }

  @Test
  public void test083()  throws Throwable  {
      String string0 = "+1a_,JL";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // +1a_,JL is not a valid number.
         //
      }
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = null;
      short short0 = (short) (-117);
      short short1 = NumberUtils.toShort(string0, short0);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      assertEquals((short) (-117), short1);
  }

  @Test
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.max(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((byte)0, byte0);
      
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0, (double) byte0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = null;
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.max(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals((short)0, short0);
      
      float float0 = NumberUtils.toFloat(string0, (float) short0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = "g";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test090()  throws Throwable  {
      byte byte0 = (byte)115;
      String string0 = "sE";
      int int0 = NumberUtils.toInt(string0, (int) byte0);
      assertEquals(115, int0);
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = "+J]2uKYh";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test092()  throws Throwable  {
      byte byte0 = (byte) (-86);
      float float0 = NumberUtils.max((float) byte0, (float) byte0, (float) byte0);
      assertEquals((-86.0F), float0, 0.01F);
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = null;
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test094()  throws Throwable  {
      long[] longArray0 = new long[1];
      byte byte0 = (byte)115;
      String string0 = null;
      int int0 = NumberUtils.toInt(string0, (int) byte0);
      assertEquals(115, int0);
      
      float float0 = NumberUtils.min((float) int0, (float) longArray0[0], (float) byte0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test095()  throws Throwable  {
      float float0 = 1.0F;
      int int0 = 0;
      double double0 = NumberUtils.min((double) float0, (double) int0, (double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test096()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = "CdCaF^}";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test098()  throws Throwable  {
      byte byte0 = (byte) (-112);
      double double0 = NumberUtils.max((double) byte0, (double) byte0, (double) byte0);
      assertEquals((-112.0), double0, 0.01D);
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = "0xvNR7Q\\Pu@D";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test100()  throws Throwable  {
      String string0 = null;
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }
}
