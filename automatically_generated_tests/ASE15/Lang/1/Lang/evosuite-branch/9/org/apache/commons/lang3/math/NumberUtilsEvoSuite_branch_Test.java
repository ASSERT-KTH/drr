/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:12:24 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class NumberUtilsEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "d";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "E";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "C";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "63";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "--Minimum abbreviation width is 4";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "eVuZ%Twz$Q%xWm\\&";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "6D %+>4P";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "-0xAuCmj7]x)~";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "-0xc3";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "-0xA blank string is not a valid number";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "-0.";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "+0lt{2G04+e6*";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = "9";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test021()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte)109;
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertEquals((byte)109, byte2);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
  }

  @Test
  public void test022()  throws Throwable  {
      byte byte0 = (byte)45;
      byte byte1 = NumberUtils.max(byte0, byte0, byte0);
      assertEquals((byte)45, byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      
      byte byte2 = (byte)3;
      assertFalse(byte2 == byte1);
      
      byte byte3 = NumberUtils.max(byte2, byte1, byte1);
      assertEquals((byte)45, byte3);
      assertFalse(byte3 == byte2);
      assertTrue(byte3 == byte0);
      assertTrue(byte3 == byte1);
      assertFalse(byte2 == byte3);
      assertFalse(byte2 == byte0);
      assertFalse(byte2 == byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte1 == byte3);
      assertFalse(byte1 == byte2);
      assertFalse(byte0 == byte2);
      assertTrue(byte0 == byte1);
      assertTrue(byte0 == byte3);
  }

  @Test
  public void test023()  throws Throwable  {
      short short0 = (short)0;
      short short1 = (short)10;
      short short2 = NumberUtils.max(short0, short0, short1);
      assertEquals((short)10, short2);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
  }

  @Test
  public void test024()  throws Throwable  {
      byte byte0 = (byte)45;
      byte byte1 = NumberUtils.max(byte0, byte0, byte0);
      assertEquals((byte)45, byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      
      short short0 = (short) (-966);
      short short1 = NumberUtils.max(short0, (short) byte1, (short) byte1);
      assertEquals((short)45, short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
  }

  @Test
  public void test025()  throws Throwable  {
      byte byte0 = (byte) (-46);
      int int0 = 0;
      int int1 = NumberUtils.max((int) byte0, (int) byte0, int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test026()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte) (-93);
      int int0 = NumberUtils.max((int) byte1, (int) byte0, (int) byte1);
      assertEquals(0, int0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
  }

  @Test
  public void test027()  throws Throwable  {
      String string0 = "";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
      
      long long1 = (-159L);
      assertFalse(long1 == long0);
      
      long long2 = NumberUtils.max(long1, long0, long0);
      assertEquals(0L, long2);
      assertFalse(long0 == long1);
      assertTrue(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
  }

  @Test
  public void test028()  throws Throwable  {
      String string0 = null;
      byte byte0 = (byte)100;
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      long long0 = NumberUtils.max((long) short0, (long) short0, (long) byte0);
      assertEquals(100L, long0);
  }

  @Test
  public void test029()  throws Throwable  {
      byte byte0 = (byte)97;
      byte byte1 = NumberUtils.max(byte0, byte0, byte0);
      assertEquals((byte)97, byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      
      byte byte2 = (byte) (-126);
      assertFalse(byte2 == byte1);
      
      byte byte3 = NumberUtils.min(byte1, byte1, byte2);
      assertEquals((byte) (-126), byte3);
      assertFalse(byte3 == byte0);
      assertTrue(byte3 == byte2);
      assertFalse(byte3 == byte1);
      assertFalse(byte1 == byte3);
      assertTrue(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertFalse(byte2 == byte0);
      assertFalse(byte2 == byte1);
      assertTrue(byte2 == byte3);
      assertFalse(byte0 == byte2);
      assertTrue(byte0 == byte1);
      assertFalse(byte0 == byte3);
  }

  @Test
  public void test030()  throws Throwable  {
      byte byte0 = (byte)97;
      byte byte1 = NumberUtils.max(byte0, byte0, byte0);
      assertEquals((byte)97, byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      
      byte byte2 = (byte)10;
      assertFalse(byte2 == byte1);
      
      byte byte3 = NumberUtils.min(byte1, byte2, byte2);
      assertEquals((byte)10, byte3);
      assertTrue(byte3 == byte2);
      assertFalse(byte3 == byte1);
      assertFalse(byte3 == byte0);
      assertFalse(byte1 == byte3);
      assertTrue(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertFalse(byte0 == byte2);
      assertTrue(byte0 == byte1);
      assertFalse(byte0 == byte3);
      assertTrue(byte2 == byte3);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte0);
  }

  @Test
  public void test031()  throws Throwable  {
      String string0 = "xv)";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
      
      short short0 = (short)1936;
      short short1 = NumberUtils.min(short0, short0, (short) byte0);
      assertEquals((short)0, short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
  }

  @Test
  public void test032()  throws Throwable  {
      byte byte0 = (byte)45;
      short short0 = (short)135;
      short short1 = NumberUtils.min(short0, (short) byte0, (short) byte0);
      assertEquals((short)45, short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
  }

  @Test
  public void test033()  throws Throwable  {
      byte byte0 = (byte) (-46);
      int int0 = 0;
      int int1 = NumberUtils.min(int0, int0, (int) byte0);
      assertEquals((-46), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test034()  throws Throwable  {
      int int0 = 8210;
      int int1 = 742;
      int int2 = NumberUtils.min(int0, int1, int1);
      assertEquals(742, int2);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
  }

  @Test
  public void test035()  throws Throwable  {
      long long0 = (-1L);
      byte byte0 = (byte) (-97);
      long long1 = NumberUtils.min(long0, long0, (long) byte0);
      assertEquals((-97L), long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test036()  throws Throwable  {
      int int0 = 2662;
      byte byte0 = (byte)0;
      byte byte1 = (byte)109;
      long long0 = NumberUtils.min((long) byte1, (long) byte0, (long) int0);
      assertEquals(0L, long0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test037()  throws Throwable  {
      float[] floatArray0 = new float[6];
      short short0 = (short)706;
      floatArray0[2] = (float) short0;
      float float0 = NumberUtils.max(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 706.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(706.0F, float0, 0.01F);
  }

  @Test
  public void test038()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = Float.NaN;
      floatArray0[2] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test039()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 1.0;
      doubleArray0[6] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, double1, 0.01D);
      assertTrue(double1 == double0);
  }

  @Test
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = Double.NaN;
      doubleArray0[9] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test
  public void test042()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-97);
      byteArray0[0] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-97), (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)0, byte1);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test044()  throws Throwable  {
      short short0 = (short) (-1);
      short[] shortArray0 = new short[2];
      shortArray0[0] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)0}, shortArray0);
      assertEquals((short)0, short1);
      assertFalse(short1 == short0);
  }

  @Test
  public void test045()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test046()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = NumberUtils.max(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test047()  throws Throwable  {
      int[] intArray0 = new int[17];
      int int0 = 99;
      intArray0[2] = int0;
      int int1 = NumberUtils.max(intArray0);
      assertArrayEquals(new int[] {0, 0, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(99, int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test048()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test049()  throws Throwable  {
      short short0 = (short) (-1125);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) short0;
      long long0 = NumberUtils.max(longArray0);
      assertArrayEquals(new long[] {(-1125L), 0L, 0L, 0L}, longArray0);
      assertEquals(0L, long0);
  }

  @Test
  public void test050()  throws Throwable  {
      byte byte0 = (byte)45;
      byte byte1 = NumberUtils.max(byte0, byte0, byte0);
      assertEquals((byte)45, byte1);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) byte1;
      float float0 = NumberUtils.min(floatArray0);
      assertArrayEquals(new float[] {45.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = Float.NaN;
      floatArray0[1] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test052()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = NumberUtils.min(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test053()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 3770.199;
      doubleArray0[0] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      assertArrayEquals(new double[] {3770.199, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
  }

  @Test
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = Double.NaN;
      doubleArray0[3] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test
  public void test056()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)79;
      byteArray0[0] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertArrayEquals(new byte[] {(byte)79, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)0, byte1);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test058()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test059()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = (short)706;
      shortArray0[0] = short0;
      short short1 = NumberUtils.min(shortArray0);
      assertArrayEquals(new short[] {(short)706, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((short)0, short1);
      assertFalse(short1 == short0);
  }

  @Test
  public void test060()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = (-14);
      intArray0[1] = int0;
      int int1 = NumberUtils.min(intArray0);
      assertArrayEquals(new int[] {0, (-14), 0, 0, 0, 0}, intArray0);
      assertEquals((-14), int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test062()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test063()  throws Throwable  {
      long[] longArray0 = new long[6];
      long long0 = 1685L;
      longArray0[0] = long0;
      long long1 = NumberUtils.min(longArray0);
      assertArrayEquals(new long[] {1685L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = "e\\~eq)7qCIrOPO?b";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // e\\~eq)7qCIrOPO?b is not a valid number.
         //
      }
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = "0.";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "c3";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"c3\"
         //
      }
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "Minimum abbrevation width is 4";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "8d";
      Double double0 = (Double)NumberUtils.createNumber(string0);
      assertEquals(8.0, (double)double0, 0.01D);
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "C>/l";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // C>/l is not a valid number.
         //
      }
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "sun.text.Normalizeris not availa`l";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // sun.text.Normalizeris not availa`l is not a valid number.
         //
      }
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "bK_T{BFbQf";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // bK_T{BFbQf is not a valid number.
         //
      }
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "-0d";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertNotNull(bigDecimal0);
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "-9kO>\"b6ru?PL";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -9kO>\"b6ru?PL is not a valid number.
         //
      }
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = "The Arsa1 must ot e null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Arsa1 must ot e null is not a valid number.
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = ")r$-QEWn7~#B%v\"%e@D";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // )r$-QEWn7~#B%v\"%e@D is not a valid number.
         //
      }
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = "'qq[E";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 'qq[E is not a valid number.
         //
      }
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = " is not a valid number.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid number. is not a valid number.
         //
      }
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "-0.";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertNotNull(bigDecimal0);
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "i8md^xD";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // i8md^xD is not a valid number.
         //
      }
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "-0X";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
      }
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = "0XThe Array must not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"The Array must not be null\"
         //
      }
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "-0x0XThe Array must not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-0XThe Array must not be null\"
         //
      }
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = "0x";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
      }
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = "i4E!E-`0.>=9zJ#eo3";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test093() {}
//   @Test
//   public void test093()  throws Throwable  {
//       String string0 = "--;kX}h;s]C4#/)U:;mRk";
//       Number number0 = NumberUtils.createNumber(string0);
//       assertNull(number0);
//   }

  @Test
  public void test094()  throws Throwable  {
      String string0 = null;
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test096()  throws Throwable  {
      short[] shortArray0 = new short[9];
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0, (float) shortArray0[0]);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = null;
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = null;
      short short0 = (short)191;
      int int0 = NumberUtils.toInt(string0, (int) short0);
      assertEquals(191, int0);
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = "i4E!E-`0.>=9zJ#eo3";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test100()  throws Throwable  {
      long long0 = 0L;
      byte byte0 = (byte)45;
      byte byte1 = NumberUtils.max(byte0, byte0, byte0);
      assertEquals((byte)45, byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      
      float float0 = NumberUtils.max((float) long0, (float) byte1, (float) byte1);
      assertEquals(45.0F, float0, 0.01F);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
  }

  @Test
  public void test101()  throws Throwable  {
      float float0 = 1.0F;
      float float1 = NumberUtils.min(float0, float0, float0);
      assertEquals(1.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test
  public void test102()  throws Throwable  {
      int int0 = 5;
      double double0 = NumberUtils.min((double) int0, (double) int0, (double) int0);
      assertEquals(5.0, double0, 0.01D);
  }

  @Test
  public void test103()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test104()  throws Throwable  {
      String string0 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test105()  throws Throwable  {
      byte byte0 = (byte)0;
      String string0 = "wn:d<Lhg]\"d";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
      
      int int0 = NumberUtils.max((int) byte0, (int) byte0, (int) byte0);
      assertEquals(0, int0);
      
      double double0 = NumberUtils.max((double) long0, (double) long0, (double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test106()  throws Throwable  {
      String string0 = "-9kO>\"b6ru?PL";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test107()  throws Throwable  {
      String string0 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }
}
