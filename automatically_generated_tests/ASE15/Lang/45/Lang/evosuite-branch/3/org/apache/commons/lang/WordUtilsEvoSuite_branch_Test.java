/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:51:13 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.lang.WordUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class WordUtilsEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      char char0 = '@';
      String string0 = "7wh13 oI%gThLl1M";
      int int0 = (-3792);
      String string1 = WordUtils.abbreviate(string0, int0, (int) char0, string0);
      assertEquals("7wh137wh13 oI%gThLl1M", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "7Kg3OFllR{>";
      int int0 = 0;
      String string1 = WordUtils.abbreviate(string0, int0, int0, string0);
      assertEquals("7Kg3OFllR{>", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "J?RF:w~DT{o/+[D";
      char[] charArray0 = new char[8];
      char char0 = '@';
      String string1 = WordUtils.capitalize(string0, charArray0);
      assertEquals("J?RF:w~DT{o/+[D", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string2 = WordUtils.abbreviate(string1, (int) charArray0[1], (int) char0, string1);
      assertEquals("J?RF:w~DT{o/+[D", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "[";
      int int0 = (-1);
      boolean boolean0 = true;
      String string1 = WordUtils.wrap(string0, int0, string0, boolean0);
      assertEquals("[", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      String string2 = WordUtils.abbreviate(string1, int0, int0, string0);
      assertEquals("[", string2);
      assertTrue(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "J?RF:w~DT{o/+[D";
      char[] charArray0 = new char[8];
      char char0 = '@';
      String string1 = WordUtils.capitalize(string0, charArray0);
      assertEquals("J?RF:w~DT{o/+[D", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      charArray0[1] = char0;
      String string2 = WordUtils.abbreviate(string1, (int) charArray0[1], (int) charArray0[3], string1);
      assertEquals("J?RF:w~DT{o/+[D", string2);
      assertTrue(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'\u0000', '@', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[8];
      String string1 = WordUtils.capitalize(string0, charArray0);
      assertNull(string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string2 = "";
      String string3 = WordUtils.abbreviate(string2, (int) charArray0[7], (int) charArray0[7], string1);
      assertEquals("", string3);
      assertSame(string2, string3);
      assertSame(string3, string2);
      assertNotNull(string3);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = null;
      char char0 = '2';
      String string1 = WordUtils.abbreviate(string0, (int) char0, (int) char0, string0);
      assertNull(string1);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "[";
      char[] charArray0 = new char[6];
      String string1 = WordUtils.initials(string0, charArray0);
      assertEquals("[", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "";
      String string1 = WordUtils.initials(string0);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[8];
      String string1 = WordUtils.initials(string0, charArray0);
      assertNull(string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "rgapache.commos.lag.SystemUtils";
      String string1 = WordUtils.swapCase(string0);
      assertEquals("RGAPACHE.COMMOS.LAG.sYSTEMuTILS", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "";
      String string1 = WordUtils.swapCase(string0);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = null;
      String string1 = WordUtils.swapCase(string0);
      assertNull(string1);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "J?RF:w~DT{o/+[D";
      char[] charArray0 = new char[8];
      char char0 = '[';
      charArray0[1] = char0;
      String string1 = WordUtils.uncapitalize(string0, charArray0);
      assertEquals("j?RF:w~DT{o/+[d", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[9];
      String string0 = "";
      String string1 = WordUtils.uncapitalize(string0, charArray0);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[1];
      String string1 = WordUtils.uncapitalize(string0, charArray0);
      assertNull(string1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "";
      String string1 = WordUtils.capitalize(string0);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      
      String string2 = WordUtils.capitalizeFully(string1);
      assertEquals("", string2);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertNotNull(string2);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = null;
      String string1 = WordUtils.capitalizeFully(string0);
      assertNull(string1);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "J?RF:w~DT{o/+[D";
      char[] charArray0 = new char[8];
      String string1 = WordUtils.capitalize(string0, charArray0);
      assertEquals("J?RF:w~DT{o/+[D", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string2 = WordUtils.capitalizeFully(string1, charArray0);
      assertEquals("J?rf:w~dt{o/+[d", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = (-1);
      String string0 = "`avaR.m.info";
      boolean boolean0 = true;
      String string1 = WordUtils.wrap(string0, int0, string0, boolean0);
      assertEquals("``avaR.m.infoa`avaR.m.infov`avaR.m.infoa`avaR.m.infoR`avaR.m.info.`avaR.m.infom`avaR.m.info.`avaR.m.infoi`avaR.m.infon`avaR.m.infof`avaR.m.infoo", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "Cannot p a negtiveaZo~nt: ";
      int int0 = 0;
      String string1 = WordUtils.wrap(string0, int0);
      assertEquals("Cannot\np\na\nnegtiveaZo~nt:\n", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "J?RF:w~DT{o/+[D";
      char[] charArray0 = new char[8];
      char char0 = '@';
      String string1 = WordUtils.capitalize(string0, charArray0);
      assertEquals("J?RF:w~DT{o/+[D", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = true;
      String string2 = WordUtils.wrap(string1, (int) char0, string0, boolean0);
      assertEquals("J?RF:w~DT{o/+[D", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[8];
      boolean boolean0 = true;
      String string1 = WordUtils.wrap(string0, (int) charArray0[0], string0, boolean0);
      assertNull(string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "rgapache.commos.lag.SystemUtils";
      String string1 = WordUtils.uncapitalize(string0);
      assertEquals("rgapache.commos.lag.SystemUtils", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = " &3y^";
      String string1 = WordUtils.initials(string0);
      assertEquals("&", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "Cannot p a negtiveaZo~nt: ";
      int int0 = 0;
      String string1 = WordUtils.abbreviate(string0, int0, int0, string0);
      assertEquals("Cannot p a negtiveaZo~nt: ", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = WordUtils.capitalizeFully(string1);
      assertEquals("Cannot P A Negtiveazo~nt: ", string2);
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotNull(string2);
  }

  @Test
  public void test26()  throws Throwable  {
      WordUtils wordUtils0 = new WordUtils();
      assertNotNull(wordUtils0);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = " &3y^";
      char[] charArray0 = new char[3];
      String string1 = WordUtils.wrap(string0, (int) charArray0[2]);
      assertEquals("&3y^", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }
}
