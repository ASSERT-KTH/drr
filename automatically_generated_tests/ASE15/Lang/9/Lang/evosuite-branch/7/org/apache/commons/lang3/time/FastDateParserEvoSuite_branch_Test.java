/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:35:23 GMT 2014
 */

package org.apache.commons.lang3.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class FastDateParserEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "FH@z4i^ib";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      String string1 = "^Mk`";
      assertNotSame(string1, string0);
      
      Locale locale0 = new Locale(string0, string0);
      assertNotSame(string0, string1);
      assertEquals("fh@z4i^ib", locale0.getLanguage());
      assertEquals("fh@z4i^ib_FH@Z4I^IB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FH@Z4I^IB", locale0.getCountry());
      assertFalse(string0.equals((Object)string1));
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string1, zoneInfo0, locale0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("^Mk`", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("fh@z4i^ib", locale0.getLanguage());
      assertEquals("fh@z4i^ib_FH@Z4I^IB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FH@Z4I^IB", locale0.getCountry());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "GMTPacific/Funafuti";
      String string1 = ">wLyF=";
      assertNotSame(string1, string0);
      
      int int0 = (-265);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotSame(string0, string1);
      assertEquals("GMTPacific/Funafuti", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=GMTPacific/Funafuti,offset=-265,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(-265, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertFalse(string0.equals((Object)string1));
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.US;
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string1, simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \">wLyF=\" ; gave up at index 2
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "8|I(";
      int int0 = (-1466);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals("8|I(", simpleTimeZone0.getID());
      assertEquals(-1466, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=8|I(,offset=-1466,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"8|I(\" ; gave up at index 2
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "7>37>H9";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      String string1 = "68S9Nj&t2";
      assertNotSame(string1, string0);
      
      Locale locale0 = new Locale(string0, string1, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("68S9NJ&T2", locale0.getCountry());
      assertEquals("7>37>h9", locale0.getLanguage());
      assertEquals("7>37>h9_68S9NJ&T2_7>37>H9", locale0.toString());
      assertEquals("7>37>H9", locale0.getVariant());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string1, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"68S9Nj&t2\" ; gave up at index 4
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "D5*P6;ImU/@y|@79";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"D5*P6;ImU/@y|@79\" ; gave up at index 3
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "FH@z4i^ib";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = new Locale(string0, string0);
      assertEquals("fh@z4i^ib", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fh@z4i^ib_FH@Z4I^IB", locale0.toString());
      assertEquals("FH@Z4I^IB", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"FH@z4i^ib\" ; gave up at index 5
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "h3)c";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"h3)c\" ; gave up at index 4
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 2833;
      Integer integer0 = new Integer(int0);
      assertEquals(2833, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      String string0 = " locale does not support dates before 1868 AD)\n";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((int) integer0, string0);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(2833, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(" locale does not support dates before 1868 AD)\n", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id= locale does not support dates before 1868 AD)\n,offset=2833,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(simpleTimeZone0);
      
      String string1 = "0`*FR";
      assertNotSame(string1, string0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string1, simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"0`*FR\" ; gave up at index 4
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "/gF3yDYwB9K/>z";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"/gF3yDYwB9K/>z\" ; gave up at index 1
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "[F)xMk";
      int int0 = (-8);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(-8, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=[F)xMk,offset=-8,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("[F)xMk", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"[F)xMk\" ; gave up at index 3
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "&";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.forLanguageTag(string0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      String string1 = "(\\p{I_:(sN|}++)";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string1, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"(\\p{I_:(sN|}++)\" ; gave up at index 2
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-1805);
      String string0 = "&";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.forLanguageTag(string0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("&", fastDateParser0.getPattern());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(fastDateParser0);
      
      int int1 = fastDateParser0.adjustYear(int0);
      assertEquals(195, int1);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("&", fastDateParser0.getPattern());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      int int2 = fastDateParser0.adjustYear(int1);
      assertEquals(2095, int2);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("&", fastDateParser0.getPattern());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "^hW{W~5[c5xX8w'";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.UK;
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"^hW{W~5[c5xX8w'\" ; gave up at index 8
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "S$4((a2`4Ws";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("S$4((a2`4Ws", fastDateParser0.getPattern());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "\\F=;";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("\\F=;", fastDateParser0.getPattern());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateParser0);
      
      try {
        Object object0 = fastDateParser0.parseObject(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"\\F=;\" does not match \\\\(\\p{IsNd}++)=;
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "<<";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("<<", fastDateParser0.getPattern());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(fastDateParser0);
      
      Date date0 = fastDateParser0.parse(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("<<", fastDateParser0.getPattern());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(date0);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = ":<[";
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=:<[,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(":<[", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals(":<[", locale0.getISO3Language());
      assertEquals(":<[", locale0.getLanguage());
      assertEquals(":<[", locale0.getCountry());
      assertEquals(":<[", locale0.getVariant());
      assertEquals(":<[_:<[_:<[", locale0.toString());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertEquals(":<[", locale0.getISO3Language());
      assertEquals(":<[", locale0.getLanguage());
      assertEquals(":<[", locale0.getCountry());
      assertEquals(":<[", locale0.getVariant());
      assertEquals(":<[_:<[_:<[", locale0.toString());
      assertEquals(":<[", fastDateParser0.getPattern());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=:<[,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(":<[", simpleTimeZone0.getID());
      assertNotNull(fastDateParser0);
      
      String string1 = ",";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser1 = new FastDateParser(string1, simpleTimeZone0, locale0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertEquals(":<[", locale0.getISO3Language());
      assertEquals(":<[", locale0.getLanguage());
      assertEquals(":<[", locale0.getCountry());
      assertEquals(":<[", locale0.getVariant());
      assertEquals(":<[_:<[_:<[", locale0.toString());
      assertEquals(",", fastDateParser1.getPattern());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=:<[,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(":<[", simpleTimeZone0.getID());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotNull(fastDateParser1);
      
      boolean boolean0 = fastDateParser0.equals((Object) fastDateParser1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertFalse(boolean0);
      assertEquals(":<[", locale0.getISO3Language());
      assertEquals(":<[", locale0.getLanguage());
      assertEquals(":<[", locale0.getCountry());
      assertEquals(":<[", locale0.getVariant());
      assertEquals(":<[_:<[_:<[", locale0.toString());
      assertEquals(",", fastDateParser1.getPattern());
      assertEquals(":<[", fastDateParser0.getPattern());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=:<[,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(":<[", simpleTimeZone0.getID());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "<<";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("<<", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
      
      int int0 = (-2068);
      Integer integer0 = new Integer(int0);
      assertEquals((-2068), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      boolean boolean0 = fastDateParser0.equals((Object) integer0);
      assertFalse(boolean0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("<<", fastDateParser0.getPattern());
      assertTrue(integer0.equals((Object)int0));
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = ":<[";
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals("java.util.SimpleTimeZone[id=:<[,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(":<[", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals(":<[", locale0.getVariant());
      assertEquals(":<[", locale0.getISO3Language());
      assertEquals(":<[", locale0.getLanguage());
      assertEquals(":<[", locale0.getCountry());
      assertEquals(":<[_:<[_:<[", locale0.toString());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertEquals(":<[", locale0.getVariant());
      assertEquals(":<[", locale0.getISO3Language());
      assertEquals(":<[", locale0.getLanguage());
      assertEquals(":<[", locale0.getCountry());
      assertEquals(":<[_:<[_:<[", locale0.toString());
      assertEquals("java.util.SimpleTimeZone[id=:<[,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(":<[", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(":<[", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
      
      boolean boolean0 = fastDateParser0.equals((Object) fastDateParser0);
      assertTrue(boolean0);
      assertEquals(":<[", locale0.getVariant());
      assertEquals(":<[", locale0.getISO3Language());
      assertEquals(":<[", locale0.getLanguage());
      assertEquals(":<[", locale0.getCountry());
      assertEquals(":<[_:<[_:<[", locale0.toString());
      assertEquals("java.util.SimpleTimeZone[id=:<[,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(":<[", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(":<[", fastDateParser0.getPattern());
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "SZw;";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string1 = "";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string1, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "_";
      Locale locale0 = Locale.UK;
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("_", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertNotNull(fastDateParser0);
      
      Locale locale1 = fastDateParser0.getLocale();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("_", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_GB", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("GB", locale1.getCountry());
      assertNotNull(locale1);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "SZw;";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("SZw;", fastDateParser0.getPattern());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateParser0);
      
      int int0 = 0;
      ParsePosition parsePosition0 = new ParsePosition(int0);
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertNotNull(parsePosition0);
      
      Object object0 = fastDateParser0.parseObject(string0, parsePosition0);
      assertEquals("SZw;", fastDateParser0.getPattern());
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("GMT", zoneInfo0.getID());
      assertNull(object0);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "&";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.forLanguageTag(string0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("&", fastDateParser0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateParser0);
      
      String string1 = fastDateParser0.toString();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("FastDateParser[&,,GMT]", string1);
      assertEquals("&", fastDateParser0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "*:S.,";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("*:S.,", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
      
      String string1 = fastDateParser0.getPattern();
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("*:S.,", string1);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("*:S.,", fastDateParser0.getPattern());
      assertNotNull(string1);
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "<<";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("<<", fastDateParser0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertNotNull(fastDateParser0);
      
      ZoneInfo zoneInfo1 = (ZoneInfo)fastDateParser0.getTimeZone();
      assertSame(zoneInfo0, zoneInfo1);
      assertSame(zoneInfo1, zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("<<", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo1.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertNotNull(zoneInfo1);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "7>37>H9";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals("7>37>h9", locale0.getLanguage());
      assertEquals("7>37>H9", locale0.getVariant());
      assertEquals("7>37>h9_7>37>H9_7>37>H9", locale0.toString());
      assertEquals("7>37>H9", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("7>37>h9", locale0.getLanguage());
      assertEquals("7>37>H9", locale0.getVariant());
      assertEquals("7>37>h9_7>37>H9_7>37>H9", locale0.toString());
      assertEquals("7>37>H9", locale0.getCountry());
      assertEquals("7>37>H9", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
      
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("7>37>h9", locale0.getLanguage());
      assertEquals("7>37>H9", locale0.getVariant());
      assertEquals("7>37>h9_7>37>H9_7>37>H9", locale0.toString());
      assertEquals("7>37>H9", locale0.getCountry());
      assertEquals("7>37>(\\p{IsNd}{1}+)9", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("7>37>(\\p{IsNd}{1}+)9", pattern0.toString());
      assertEquals("7>37>H9", fastDateParser0.getPattern());
      assertNotNull(pattern0);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "@Z";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.KOREA;
      //  // Unstable assertion: assertEquals("KR", locale0.getCountry());
      //  // Unstable assertion: assertEquals("ko_KR", locale0.toString());
      //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("KOR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      //  // Unstable assertion: assertEquals("@Z", fastDateParser0.getPattern());
      //  // Unstable assertion: assertEquals("KR", locale0.getCountry());
      //  // Unstable assertion: assertEquals("ko_KR", locale0.toString());
      //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("KOR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(fastDateParser0);
      
      int int0 = fastDateParser0.hashCode();
      //  // Unstable assertion: assertEquals(91622814, int0);
      //  // Unstable assertion: assertEquals("@Z", fastDateParser0.getPattern());
      //  // Unstable assertion: assertEquals("KR", locale0.getCountry());
      //  // Unstable assertion: assertEquals("ko_KR", locale0.toString());
      //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("KOR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "*:S.,";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("*:S.,", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(fastDateParser0);
      
      try {
        Object object0 = fastDateParser0.parseObject(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"*:S.,\" does not match \\*:(\\p{IsNd}++)\\.,
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "=hT3Uc![s";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      String string1 = "13s?6KhXN&;1,2";
      assertNotSame(string1, string0);
      
      Locale locale0 = Locale.forLanguageTag(string0);
      assertNotSame(string0, string1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertFalse(string0.equals((Object)string1));
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string1, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"13s?6KhXN&;1,2\" ; gave up at index 8
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "7>37>H9";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      String string1 = "h";
      assertNotSame(string1, string0);
      
      Locale locale0 = new Locale(string0, string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("7>37>H9", locale0.getVariant());
      assertEquals("H", locale0.getCountry());
      assertEquals("7>37>h9_H_7>37>H9", locale0.toString());
      assertEquals("7>37>h9", locale0.getLanguage());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string1, zoneInfo0, locale0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("h", fastDateParser0.getPattern());
      assertEquals("7>37>H9", locale0.getVariant());
      assertEquals("H", locale0.getCountry());
      assertEquals("7>37>h9_H_7>37>H9", locale0.toString());
      assertEquals("7>37>h9", locale0.getLanguage());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(fastDateParser0);
      
      int int0 = 2;
      ParsePosition parsePosition0 = new ParsePosition(int0);
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
      assertEquals(2, parsePosition0.getIndex());
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertNotNull(parsePosition0);
      
      Date date0 = fastDateParser0.parse(string0, parsePosition0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Thu Jan 01 01:00:00 GMT 1970", date0.toString());
      assertEquals("h", fastDateParser0.getPattern());
      assertEquals("7>37>H9", locale0.getVariant());
      assertEquals("H", locale0.getCountry());
      assertEquals("7>37>h9_H_7>37>H9", locale0.toString());
      assertEquals("7>37>h9", locale0.getLanguage());
      assertEquals(4, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=4,errorIndex=-1]", parsePosition0.toString());
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(date0);
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = ":<[";
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals("java.util.SimpleTimeZone[id=:<[,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(":<[", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals(":<[", locale0.getISO3Language());
      assertEquals(":<[", locale0.getCountry());
      assertEquals(":<[", locale0.getLanguage());
      assertEquals(":<[", locale0.getVariant());
      assertEquals(":<[_:<[_:<[", locale0.toString());
      assertNotNull(locale0);
      
      String string1 = "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|}+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-ze++";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string1, simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|}+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-ze++\" ; gave up at index 83
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "- KGHg";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"- KGHg\" ; gave up at index 5
         //
      }
  }
}
