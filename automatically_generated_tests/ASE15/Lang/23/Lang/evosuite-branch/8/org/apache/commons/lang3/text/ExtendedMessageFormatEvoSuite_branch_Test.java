/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:00:03 GMT 2014
 */

package org.apache.commons.lang3.text;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.Format;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import org.apache.commons.lang3.text.ExtendedMessageFormat;
import org.apache.commons.lang3.text.FormatFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class ExtendedMessageFormatEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "^WO{}if";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat0 = null;
      try {
        extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format argument index at position 4: }
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = "{ ";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat0 = null;
      try {
        extendedMessageFormat0 = new ExtendedMessageFormat(string0, locale0, (Map<String, ? extends FormatFactory>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unterminated format element at position 1
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "Y0^Z{ mY4i;<S{";
      Locale locale0 = Locale.JAPAN;
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat0 = null;
      try {
        extendedMessageFormat0 = new ExtendedMessageFormat(string0, locale0, (Map<String, ? extends FormatFactory>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format argument index at position 5:  m
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "UtermUnatdquoted strng atjposition ";
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0);
      assertEquals("UtermUnatdquoted strng atjposition ", extendedMessageFormat0.toPattern());
      assertNotNull(extendedMessageFormat0);
      
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat1 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
      assertEquals("UtermUnatdquoted strng atjposition ", extendedMessageFormat1.toPattern());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertFalse(extendedMessageFormat1.equals((Object)extendedMessageFormat0));
      assertNotSame(extendedMessageFormat1, extendedMessageFormat0);
      assertNotNull(extendedMessageFormat1);
      
      boolean boolean0 = extendedMessageFormat0.equals((Object) extendedMessageFormat1);
      assertEquals("UtermUnatdquoted strng atjposition ", extendedMessageFormat1.toPattern());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("UtermUnatdquoted strng atjposition ", extendedMessageFormat0.toPattern());
      assertFalse(extendedMessageFormat1.equals((Object)extendedMessageFormat0));
      assertFalse(extendedMessageFormat0.equals((Object)extendedMessageFormat1));
      assertNotSame(extendedMessageFormat1, extendedMessageFormat0);
      assertNotSame(extendedMessageFormat0, extendedMessageFormat1);
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = " m ?qQKulcu";
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0);
      assertEquals(" m ?qQKulcu", extendedMessageFormat0.toPattern());
      assertNotNull(extendedMessageFormat0);
      
      HashMap<String, FormatFactory> hashMap0 = null;
      ExtendedMessageFormat extendedMessageFormat1 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
      assertEquals(" m ?qQKulcu", extendedMessageFormat1.toPattern());
      assertTrue(extendedMessageFormat1.equals((Object)extendedMessageFormat0));
      assertNotSame(extendedMessageFormat1, extendedMessageFormat0);
      assertNotNull(extendedMessageFormat1);
      
      boolean boolean0 = extendedMessageFormat0.equals((Object) extendedMessageFormat1);
      assertEquals(" m ?qQKulcu", extendedMessageFormat0.toPattern());
      assertEquals(" m ?qQKulcu", extendedMessageFormat1.toPattern());
      assertTrue(extendedMessageFormat0.equals((Object)extendedMessageFormat1));
      assertTrue(extendedMessageFormat1.equals((Object)extendedMessageFormat0));
      assertNotSame(extendedMessageFormat0, extendedMessageFormat1);
      assertNotSame(extendedMessageFormat1, extendedMessageFormat0);
      assertTrue(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "z";
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0);
      assertEquals("z", extendedMessageFormat0.toPattern());
      assertNotNull(extendedMessageFormat0);
      
      Object object0 = null;
      boolean boolean0 = extendedMessageFormat0.equals(object0);
      assertEquals("z", extendedMessageFormat0.toPattern());
      assertFalse(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = ": ";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(": ", extendedMessageFormat0.toPattern());
      assertNotNull(extendedMessageFormat0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertNotNull(locale0);
      
      boolean boolean0 = extendedMessageFormat0.equals((Object) locale0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals(": ", extendedMessageFormat0.toPattern());
      assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "{1,}4";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
      assertEquals("{1}4", extendedMessageFormat0.toPattern());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(extendedMessageFormat0);
      
      int int0 = 11;
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance(locale0);
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertEquals("$)", decimalFormat0.getNegativeSuffix());
      assertEquals("(", decimalFormat0.getNegativePrefix());
      assertEquals(" $", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0.00 \u00A4;(#,##0.00\u00A4)", decimalFormat0.toPattern());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#\u00A0##0,00 \u00A4;(#\u00A0##0,00\u00A4)", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals(false, decimalFormat0.isParseIntegerOnly());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(decimalFormat0);
      
      // Undeclared exception!
      try {
        extendedMessageFormat0.setFormat(int0, (Format) decimalFormat0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = " m ?qQKulcu";
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0);
      assertEquals(" m ?qQKulcu", extendedMessageFormat0.toPattern());
      assertNotNull(extendedMessageFormat0);
      
      int int0 = extendedMessageFormat0.hashCode();
      assertEquals(" m ?qQKulcu", extendedMessageFormat0.toPattern());
      assertEquals(1868339562, int0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "\\6 yRTa6353U%.]1jb";
      Map<String, FormatFactory> map0 = null;
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) map0);
      assertEquals("\\6 yRTa6353U%.]1jb", extendedMessageFormat0.toPattern());
      assertNotNull(extendedMessageFormat0);
      
      int int0 = 7;
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance();
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals(true, decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertNotNull(decimalFormat0);
      
      // Undeclared exception!
      try {
        extendedMessageFormat0.setFormatByArgumentIndex(int0, (Format) decimalFormat0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = ": ";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
      assertEquals(": ", extendedMessageFormat0.toPattern());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(extendedMessageFormat0);
      
      Format[] formatArray0 = new Format[4];
      // Undeclared exception!
      try {
        extendedMessageFormat0.setFormatsByArgumentIndex(formatArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = "'*'";
      int int0 = 1;
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>(int0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, locale0, (Map<String, ? extends FormatFactory>) hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("*", extendedMessageFormat0.toPattern());
      assertNotNull(extendedMessageFormat0);
      
      Format[] formatArray0 = new Format[10];
      // Undeclared exception!
      try {
        extendedMessageFormat0.setFormats(formatArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "\\6 yRTa6353U%.]1jb";
      Map<String, FormatFactory> map0 = null;
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) map0);
      assertEquals("\\6 yRTa6353U%.]1jb", extendedMessageFormat0.toPattern());
      assertNotNull(extendedMessageFormat0);
      
      String string1 = extendedMessageFormat0.toPattern();
      assertEquals("\\6 yRTa6353U%.]1jb", extendedMessageFormat0.toPattern());
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("\\6 yRTa6353U%.]1jb", string1);
      assertNotNull(string1);
  }
}
