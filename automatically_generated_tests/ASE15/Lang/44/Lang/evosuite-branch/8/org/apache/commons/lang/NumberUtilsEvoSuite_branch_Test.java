/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:42:42 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class NumberUtilsEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "0D";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "1d";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "E";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "0e";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "-0";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "----";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = ".x\\";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "E,&NRp{`Z>Amd!";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = ".20..";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "+Ov~u";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "2e$";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "0xCannot pad a neative mount: ";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "-0x4";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "-0x...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "-0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "0L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "7F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = 0;
      int int1 = NumberUtils.compare((float) int0, (float) int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test23()  throws Throwable  {
      long long0 = 0L;
      long long1 = (-3254L);
      int int0 = NumberUtils.compare((float) long0, (float) long1);
      assertEquals(1, int0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = (-2256);
      int int1 = 1256;
      int int2 = NumberUtils.compare((float) int0, (float) int1);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "-0";
      Float float0 = NumberUtils.createFloat(string0);
      assertEquals(-0.0F, (float)float0, 0.01F);
      
      int int0 = NumberUtils.stringToInt(string0);
      assertEquals(0, int0);
      
      int int1 = NumberUtils.compare((float) float0, (float) int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 0;
      double double0 = (-1662.1322101);
      int int1 = NumberUtils.compare((double) int0, double0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test27()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = 0.0;
      int int0 = NumberUtils.compare(double0, double1);
      assertEquals((-1), int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "-0";
      Double double0 = NumberUtils.createDouble(string0);
      assertEquals(-0.0, (double)double0, 0.01D);
      
      double double1 = 0.0;
      int int0 = NumberUtils.compare((double) double0, double1);
      assertEquals((-1), int0);
      assertFalse(double0.equals((Object)double1));
      
      int int1 = NumberUtils.stringToInt(string0, int0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(double0.equals((Object)double1));
      
      int int2 = NumberUtils.maximum(int0, int0, int1);
      assertEquals(0, int2);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(double0.equals((Object)double1));
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "-0";
      Double double0 = NumberUtils.createDouble(string0);
      assertEquals(-0.0, (double)double0, 0.01D);
      
      int int0 = NumberUtils.compare((double) double0, (double) double0);
      assertEquals(0, int0);
      
      int int1 = NumberUtils.maximum(int0, int0, int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "-0";
      Double double0 = NumberUtils.createDouble(string0);
      assertEquals(-0.0, (double)double0, 0.01D);
      
      int int0 = NumberUtils.compare((double) double0, (double) double0);
      assertEquals(0, int0);
      
      long long0 = (-2673L);
      long long1 = NumberUtils.maximum(long0, long0, (long) int0);
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "-0";
      Double double0 = NumberUtils.createDouble(string0);
      assertEquals(-0.0, (double)double0, 0.01D);
      
      long long0 = 2307L;
      long long1 = NumberUtils.minimum(long0, long0, long0);
      assertEquals(2307L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      int int0 = NumberUtils.compare((double) double0, (double) double0);
      assertEquals(0, int0);
      
      long long2 = NumberUtils.maximum((long) int0, long1, (long) int0);
      assertEquals(2307L, long2);
      assertTrue(long1 == long0);
      assertTrue(long1 == long2);
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      assertTrue(long0 == long2);
      assertTrue(long0 == long1);
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = (-2256);
      int int1 = 1256;
      int int2 = NumberUtils.minimum(int1, int1, int0);
      assertEquals((-2256), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = (-3);
      int int1 = 274;
      int int2 = NumberUtils.maximum(int0, int1, int0);
      assertEquals(274, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      
      int int3 = NumberUtils.minimum(int1, int0, int2);
      assertEquals((-3), int3);
      assertTrue(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int0 == int3);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
  }

  @Test
  public void test34()  throws Throwable  {
      long long0 = 2307L;
      long long1 = 402L;
      long long2 = NumberUtils.minimum(long0, long0, long1);
      assertEquals(402L, long2);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
  }

  @Test
  public void test35()  throws Throwable  {
      long long0 = 2314L;
      long long1 = 0L;
      long long2 = NumberUtils.minimum(long0, long1, long1);
      assertEquals(0L, long2);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = "0.)[_Lnc1Tw_0";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "mn~hn<~Uld\\MSm)E1";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = "0F";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = "0L";
      Long long0 = (Long)NumberUtils.createNumber(string0);
      assertEquals(0L, (long)long0);
  }

  @Test
  public void test40()  throws Throwable  {
      String string0 = "org.aachecomoGs.langString^l";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.aachecomoGs.langString^l is not a valid number.
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      String string0 = "String must nt be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // String must nt be null is not a valid number.
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      String string0 = "1d";
      Double double0 = (Double)NumberUtils.createNumber(string0);
      assertEquals(1.0, (double)double0, 0.01D);
  }

  @Test
  public void test43()  throws Throwable  {
      String string0 = "-L";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -L is not a valid number.
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      String string0 = "Idc(ue6~L-1QN+*D";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Idc(ue6~L-1QN+*D is not a valid number.
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      String string0 = "0.)[`nc1TwE_!";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.)[`nc1TwE_! is not a valid number.
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      String string0 = "0.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0. is not a valid number.
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      String string0 = "f0&9#Yb):i/_^-n_'we";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // f0&9#Yb):i/_^-n_'we is not a valid number.
         //
      }
  }

  @Test
  public void test48()  throws Throwable  {
      String string0 = "7F";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(7.0F, (float)float0, 0.01F);
  }

  @Test
  public void test49()  throws Throwable  {
      String string0 = "W{%(elf";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // W{%(elf is not a valid number.
         //
      }
  }

  @Test
  public void test50()  throws Throwable  {
      String string0 = "dmeAe.>";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // dmeAe.> is not a valid number.
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      String string0 = ".3";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(0.3F, (float)float0, 0.01F);
  }

  @Test
  public void test52()  throws Throwable  {
      String string0 = "-0x...";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-...\"
         //
      }
  }

  @Test
  public void test53()  throws Throwable  {
      String string0 = "0xCannot pad a neative mount: ";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Cannot pad a neative mount: \"
         //
      }
  }

  @Test
  public void test54()  throws Throwable  {
      String string0 = "--Minimumabbreviation width is 4";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test55()  throws Throwable  {
      String string0 = "E";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // E is not a valid number.
         //
      }
  }

  @Test
  public void test56()  throws Throwable  {
      String string0 = "4";
      Integer integer0 = (Integer)NumberUtils.createNumber(string0);
      assertEquals(4, (int)integer0);
  }

  @Test
  public void test57()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // \"\" is not a valid number.
         //
      }
  }

  @Test
  public void test58()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test59()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test60()  throws Throwable  {
      String string0 = "-0";
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
  }

  @Test
  public void test61()  throws Throwable  {
      String string0 = "0.)[_Lnc1TwE_0";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
