/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:20:00 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class NumberUtilsEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "-1L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "-1F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "D";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "-1d";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "E";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "e";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "6";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = " is less thn 0: ";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "+:qN,3tDr-<5g_s";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "..";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "2e:";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "0x0g  `2pC 88";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "-0xEf";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "-0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "0g";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "-0x-0xwgxn$Tw2p71zwA=-l}q7\"k";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "EfgOJ&{i,.K1,e5";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "--n$Tw2p71zwA=^l}q7\"k";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "l";
      int int0 = NumberUtils.stringToInt(string0);
      assertEquals(0, int0);
      
      long long0 = (-1L);
      int int1 = NumberUtils.compare((float) int0, (float) long0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 49;
      float float0 = 43.011185F;
      int int1 = NumberUtils.compare(float0, (float) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "l";
      int int0 = NumberUtils.stringToInt(string0);
      assertEquals(0, int0);
      
      int int1 = NumberUtils.compare((float) int0, (float) int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 792;
      int int1 = NumberUtils.maximum(int0, int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(792, int1);
      
      double double0 = (-1.85);
      int int2 = NumberUtils.compare((double) int1, double0);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertEquals(1, int2);
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = null;
      int int0 = NumberUtils.stringToInt(string0);
      assertEquals(0, int0);
      
      long long0 = (-2242L);
      int int1 = NumberUtils.compare((double) long0, (double) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = 792;
      int int1 = 83;
      int int2 = NumberUtils.maximum(int1, int1, int0);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals(792, int2);
  }

  @Test
  public void test31()  throws Throwable  {
      long long0 = (-2171L);
      long long1 = 3299L;
      long long2 = NumberUtils.maximum(long0, long0, long1);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertEquals(3299L, long2);
  }

  @Test
  public void test32()  throws Throwable  {
      long long0 = (-26L);
      long long1 = 0L;
      long long2 = NumberUtils.maximum(long0, long1, long1);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertEquals(0L, long2);
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = 4921;
      int int1 = (-1644);
      int int2 = NumberUtils.minimum(int0, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1644), int2);
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = 4921;
      int int1 = (-20);
      int int2 = NumberUtils.minimum(int0, int1, int0);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-20), int2);
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = 792;
      int int1 = 83;
      int int2 = NumberUtils.maximum(int1, int0, int1);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(792, int2);
      
      long long0 = NumberUtils.minimum((long) int0, (long) int2, (long) int1);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(83L, long0);
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = (-409);
      int int1 = NumberUtils.compare((double) int0, (double) int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      long long0 = NumberUtils.minimum((long) int1, (long) int0, (long) int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-409L), long0);
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "0e6";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = "-0e6";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = "0F";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
  }

  @Test
  public void test40()  throws Throwable  {
      String string0 = "-1F";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals((-1.0F), (float)float0, 0.01F);
  }

  @Test
  public void test41()  throws Throwable  {
      String string0 = "-V1L";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -V1L is not a valid number.
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      String string0 = "-1L";
      Long long0 = (Long)NumberUtils.createNumber(string0);
      assertEquals((-1L), (long)long0);
  }

  @Test
  public void test43()  throws Throwable  {
      String string0 = "Strngsut not be nll";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Strngsut not be nll is not a valid number.
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      String string0 = "-1d";
      Double double0 = (Double)NumberUtils.createNumber(string0);
      assertEquals((-1.0), (double)double0, 0.01D);
  }

  @Test
  public void test45()  throws Throwable  {
      String string0 = ">r'$0.6d66&A+AD";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // >r'$0.6d66&A+AD is not a valid number.
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      String string0 = "0.1\\i [<RWeL";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.1\\i [<RWeL is not a valid number.
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      String string0 = "0.F";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test
  public void test48()  throws Throwable  {
      String string0 = "d7l`^,k>+,8cZiQ=E";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // d7l`^,k>+,8cZiQ=E is not a valid number.
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      String string0 = " is not a valid uer.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid uer. is not a valid number.
         //
      }
  }

  @Test
  public void test50()  throws Throwable  {
      String string0 = "EfgOJ&{i,.K1,e5";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      String string0 = "0.1";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(0.1F, (float)float0, 0.01F);
  }

  @Test
  public void test52()  throws Throwable  {
      String string0 = "0x-UrM\"?\\";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Sign character in wrong position
         //
      }
  }

  @Test
  public void test53()  throws Throwable  {
      String string0 = "--n$Tw2p71zwA=^l}q7\"k";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test54()  throws Throwable  {
      String string0 = "6";
      Integer integer0 = (Integer)NumberUtils.createNumber(string0);
      assertEquals(6, (int)integer0);
  }

  @Test
  public void test55()  throws Throwable  {
      String string0 = "-";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // - is not a valid number.
         //
      }
  }

  @Test
  public void test56()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // \"\" is not a valid number.
         //
      }
  }

  @Test
  public void test57()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test58()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test59()  throws Throwable  {
      String string0 = "l";
      // Undeclared exception!
      try {
        BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"l\"
         //
      }
  }

  @Test
  public void test60()  throws Throwable  {
      String string0 = "-0x";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
      }
  }

  @Test
  public void test61()  throws Throwable  {
      String string0 = "7l";
      Long long0 = (Long)NumberUtils.createNumber(string0);
      assertEquals(7L, (long)long0);
  }

  @Test
  public void test62()  throws Throwable  {
      String string0 = "Ef";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Ef is not a valid number.
         //
      }
  }
}
