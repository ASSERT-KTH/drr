/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:25:32 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class NumberUtilsEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "0l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "..";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "e";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "-0";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "-Y2-xMd!bY##l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "+>";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "ewH`";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "--org.apache.commons.lang3.math.NumberUtils";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "0Em";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "0xBdRf";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "-0xd|3BWbtg,/F-c<mbu9'";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "-0x0X[~,%w;}^E#@W:2";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "-0x-RuoSm%^o";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "0E";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "0xdf";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = "3.";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test021()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test022()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test023()  throws Throwable  {
      byte byte0 = (byte)1;
      byte byte1 = (byte)10;
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertEquals((byte)10, byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
  }

  @Test
  public void test024()  throws Throwable  {
      byte byte0 = (byte)16;
      byte byte1 = (byte)87;
      byte byte2 = NumberUtils.max(byte0, byte1, byte1);
      assertEquals((byte)87, byte2);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
  }

  @Test
  public void test025()  throws Throwable  {
      short short0 = (short)0;
      short short1 = (short)69;
      short short2 = NumberUtils.max(short0, short0, short1);
      assertEquals((short)69, short2);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertTrue(short1 == short2);
      assertFalse(short1 == short0);
  }

  @Test
  public void test026()  throws Throwable  {
      short short0 = (short)0;
      short short1 = (short)4;
      short short2 = NumberUtils.max(short0, short1, short0);
      assertEquals((short)4, short2);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertTrue(short1 == short2);
      assertFalse(short1 == short0);
  }

  @Test
  public void test027()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.min(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals((short)0, short0);
      
      short short1 = NumberUtils.max(short0, short0, short0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals((short)0, short1);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
  }

  @Test
  public void test028()  throws Throwable  {
      byte byte0 = (byte) (-67);
      int int0 = 1529;
      int int1 = NumberUtils.max((int) byte0, int0, (int) byte0);
      assertEquals(1529, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test029()  throws Throwable  {
      long long0 = 389L;
      long long1 = 2020L;
      long long2 = NumberUtils.max(long0, long0, long1);
      assertEquals(2020L, long2);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
  }

  @Test
  public void test030()  throws Throwable  {
      long long0 = (-5486L);
      long long1 = 13L;
      long long2 = NumberUtils.max(long0, long1, long1);
      assertEquals(13L, long2);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
  }

  @Test
  public void test031()  throws Throwable  {
      byte byte0 = (byte) (-35);
      byte byte1 = (byte)24;
      byte byte2 = NumberUtils.min(byte1, byte1, byte0);
      assertEquals((byte) (-35), byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertTrue(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte2 == byte1);
      assertTrue(byte2 == byte0);
  }

  @Test
  public void test032()  throws Throwable  {
      byte byte0 = (byte)56;
      String string0 = null;
      byte byte1 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte1);
      assertFalse(byte1 == byte0);
      
      byte byte2 = NumberUtils.min(byte0, byte1, byte1);
      assertEquals((byte)0, byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
  }

  @Test
  public void test033()  throws Throwable  {
      String string0 = "-0XxMv!kY##l";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
      
      short short0 = (short) (-1433);
      short short1 = NumberUtils.min((short) byte0, (short) byte0, short0);
      assertEquals((short) (-1433), short1);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
  }

  @Test
  public void test034()  throws Throwable  {
      String string0 = "-0XxMv!kY##l";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
      
      short short0 = (short)101;
      short short1 = NumberUtils.min(short0, (short) byte0, (short) byte0);
      assertEquals((short)0, short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
  }

  @Test
  public void test035()  throws Throwable  {
      String string0 = "ewH`";
      int int0 = (-39);
      int int1 = NumberUtils.toInt(string0, int0);
      assertEquals((-39), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      int int2 = Integer.MAX_VALUE;
      assertFalse(int2 == int1);
      
      int int3 = NumberUtils.max(int0, int0, int2);
      assertEquals(Integer.MAX_VALUE, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int3);
      assertFalse(int0 == int3);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      
      int int4 = NumberUtils.min(int3, int3, int1);
      assertEquals((-39), int4);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      assertTrue(int3 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertFalse(int2 == int1);
      assertTrue(int2 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertTrue(int1 == int4);
      assertFalse(int1 == int3);
      assertFalse(int0 == int3);
      assertTrue(int0 == int1);
      assertTrue(int0 == int4);
      assertFalse(int0 == int2);
  }

  @Test
  public void test036()  throws Throwable  {
      int[] intArray0 = new int[21];
      int int0 = 38;
      int int1 = (-997);
      int int2 = NumberUtils.min(intArray0[3], int1, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals((-997), int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
  }

  @Test
  public void test037()  throws Throwable  {
      long long0 = 2334L;
      long long1 = (-1227L);
      long long2 = NumberUtils.min(long0, long0, long1);
      assertEquals((-1227L), long2);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
  }

  @Test
  public void test038()  throws Throwable  {
      long long0 = (-3346L);
      long long1 = 1473L;
      long long2 = NumberUtils.min(long1, long0, long1);
      assertEquals((-3346L), long2);
      assertFalse(long2 == long1);
      assertTrue(long2 == long0);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertTrue(long0 == long2);
      assertFalse(long0 == long1);
  }

  @Test
  public void test039()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = 1.0F;
      floatArray0[4] = float0;
      float float1 = NumberUtils.max(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(1.0F, float1, 0.01F);
      assertTrue(float1 == float0);
  }

  @Test
  public void test040()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = Float.NaN;
      floatArray0[3] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, Float.NaN, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test041()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = (-813.37);
      doubleArray0[0] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      assertArrayEquals(new double[] {(-813.37), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
  }

  @Test
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = Double.NaN;
      doubleArray0[3] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test
  public void test044()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)108;
      byteArray0[1] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)108, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)108, byte1);
      assertTrue(byte1 == byte0);
  }

  @Test
  public void test046()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = (short)1043;
      shortArray0[3] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)1043, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((short)1043, short1);
      assertTrue(short1 == short0);
  }

  @Test
  public void test047()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test048()  throws Throwable  {
      int int0 = 70;
      int[] intArray0 = new int[10];
      intArray0[5] = int0;
      int int1 = NumberUtils.max(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 70, 0, 0, 0, 0}, intArray0);
      assertEquals(70, int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test049()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test050()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = 1325L;
      longArray0[3] = long0;
      long long1 = NumberUtils.max(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 1325L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(1325L, long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float float0 = 1408.54F;
      floatArray0[0] = float0;
      float float1 = NumberUtils.min(floatArray0);
      assertArrayEquals(new float[] {1408.54F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
  }

  @Test
  public void test052()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float float0 = Float.NaN;
      floatArray0[8] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, Float.NaN, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-2520.72);
      doubleArray0[1] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-2520.72), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-2520.72), double1, 0.01D);
      assertTrue(double1 == double0);
  }

  @Test
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = Double.NaN;
      doubleArray0[4] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test
  public void test055()  throws Throwable  {
      byte byte0 = (byte) (-31);
      byte[] byteArray0 = new byte[15];
      byteArray0[7] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-31), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte) (-31), byte1);
      assertTrue(byte1 == byte0);
  }

  @Test
  public void test056()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test057()  throws Throwable  {
      short[] shortArray0 = new short[24];
      short short0 = (short)122;
      shortArray0[0] = short0;
      short short1 = NumberUtils.min(shortArray0);
      assertArrayEquals(new short[] {(short)122, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((short)0, short1);
      assertFalse(short1 == short0);
  }

  @Test
  public void test058()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test059()  throws Throwable  {
      short short0 = (short) (-957);
      int[] intArray0 = new int[9];
      intArray0[1] = (int) short0;
      int int0 = NumberUtils.min(intArray0);
      assertArrayEquals(new int[] {0, (-957), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals((-957), int0);
  }

  @Test
  public void test060()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test061()  throws Throwable  {
      long[] longArray0 = new long[9];
      long long0 = 417L;
      longArray0[0] = long0;
      long long1 = NumberUtils.min(longArray0);
      assertArrayEquals(new long[] {417L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test062()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test063()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = "X=^5Ok+hH(%$4)G9";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
      }
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = "-Y2-xMd!bY##l";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -Y2-xMd!bY##l is not a valid number.
         //
      }
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "The Aray must nt be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Aray must nt be null is not a valid number.
         //
      }
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "xMd";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // xMd is not a valid number.
         //
      }
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "6L";
      Long long0 = (Long)NumberUtils.createNumber(string0);
      assertEquals(6L, (long)long0);
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "Q[6\\9_zU>6SbF";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Q[6\\9_zU>6SbF is not a valid number.
         //
      }
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "X7NS[#jND";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // X7NS[#jND is not a valid number.
         //
      }
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "0Emm$jzfX-u_rM";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0Emm$jzfX-u_rM is not a valid number.
         //
      }
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "Ww0dE(~W[VRce^bH";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Ww0dE(~W[VRce^bH is not a valid number.
         //
      }
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = "0E";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0E is not a valid number.
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "sun.text.Normalizer is not availabl";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // sun.text.Normalizer is not availabl is not a valid number.
         //
      }
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = "...";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = " is not a valid number.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid number. is not a valid number.
         //
      }
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "-0X";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
      }
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "0Xorg.apache.commons.lang3.math.NumberUtils";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.apache.commons.lang3.math.NumberUtils\"
         //
      }
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "-0x0XAC,i~I3E<l:U*+$";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-0XAC,i~I3E<l:U*+$\"
         //
      }
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = "0xX7NS[#jND";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"X7NS[#jND\"
         //
      }
  }

  @Test
  public void test088() {}
//   @Test
//   public void test088()  throws Throwable  {
//       String string0 = "--org.apache.commons.lang3.math.NumberUtils";
//       Number number0 = NumberUtils.createNumber(string0);
//       assertNull(number0);
//   }

  @Test
  public void test089()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = null;
      byte byte0 = (byte) (-31);
      short short0 = NumberUtils.toShort(string0, (short) byte0);
      assertEquals((short) (-31), short0);
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = "F";
      int int0 = 3361;
      double double0 = NumberUtils.toDouble(string0, (double) int0);
      assertEquals(3361.0, double0, 0.01D);
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = null;
      int int0 = 1188;
      long long0 = NumberUtils.toLong(string0, (long) int0);
      assertEquals(1188L, long0);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = null;
      int int0 = (-39);
      int int1 = NumberUtils.toInt(string0, int0);
      assertEquals((-39), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test097()  throws Throwable  {
      short[] shortArray0 = new short[24];
      float float0 = NumberUtils.max((float) shortArray0[5], (float) shortArray0[5], (float) shortArray0[5]);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = "3.";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test099()  throws Throwable  {
      byte byte0 = (byte) (-67);
      float float0 = NumberUtils.min((float) byte0, (float) byte0, (float) byte0);
      assertEquals((-67.0F), float0, 0.01F);
  }

  @Test
  public void test100()  throws Throwable  {
      long long0 = 2618L;
      double double0 = NumberUtils.min((double) long0, (double) long0, (double) long0);
      assertEquals(2618.0, double0, 0.01D);
  }

  @Test
  public void test101()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = "ewH`";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test103()  throws Throwable  {
      float[] floatArray0 = new float[8];
      double double0 = NumberUtils.max((double) floatArray0[4], (double) floatArray0[4], (double) floatArray0[4]);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test104()  throws Throwable  {
      String string0 = "--0Xn]2Qc~";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test105()  throws Throwable  {
      String string0 = "-";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }
}
