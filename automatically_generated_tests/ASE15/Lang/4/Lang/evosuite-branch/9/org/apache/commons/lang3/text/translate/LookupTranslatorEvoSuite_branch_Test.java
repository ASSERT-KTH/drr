/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:22:02 GMT 2014
 */

package org.apache.commons.lang3.text.translate;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.File;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang3.text.translate.CharSequenceTranslator;
import org.apache.commons.lang3.text.translate.LookupTranslator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

 
public class LookupTranslatorEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      CharSequence[][] charSequenceArray0 = new CharSequence[2][1];
      CharSequence[] charSequenceArray1 = new CharSequence[4];
      int int0 = (-322);
      String string0 = CharSequenceTranslator.hex(int0);
      assertEquals("FFFFFEBE", string0);
      assertNotNull(string0);
      
      charSequenceArray1[0] = (CharSequence) string0;
      assertEquals(8, charSequenceArray1[0].length());
      assertEquals("FFFFFEBE", charSequenceArray1[0].toString());
      assertNotNull(charSequenceArray1[0]);
      
      charSequenceArray1[1] = (CharSequence) string0;
      assertEquals("FFFFFEBE", charSequenceArray1[1].toString());
      assertEquals(8, charSequenceArray1[1].length());
      assertNotNull(charSequenceArray1[1]);
      
      charSequenceArray0[0] = charSequenceArray1;
      assertNotNull(charSequenceArray0[0]);
      
      charSequenceArray0[1] = charSequenceArray0[0];
      assertNotNull(charSequenceArray0[1]);
      
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray0);
      assertNotNull(lookupTranslator0);
      
      String string1 = lookupTranslator0.translate(charSequenceArray1[0]);
      assertNotSame(string1, string0);
      assertEquals("FFFFFEBE", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test
  public void test1()  throws Throwable  {
      CharSequence[][] charSequenceArray0 = new CharSequence[2][1];
      CharSequence[] charSequenceArray1 = new CharSequence[4];
      int int0 = (-322);
      String string0 = CharSequenceTranslator.hex(int0);
      assertEquals("FFFFFEBE", string0);
      assertNotNull(string0);
      
      charSequenceArray1[0] = (CharSequence) string0;
      assertEquals(8, charSequenceArray1[0].length());
      assertEquals("FFFFFEBE", charSequenceArray1[0].toString());
      assertNotNull(charSequenceArray1[0]);
      
      charSequenceArray0[0] = charSequenceArray1;
      assertNotNull(charSequenceArray0[0]);
      
      charSequenceArray0[1] = charSequenceArray0[0];
      assertNotNull(charSequenceArray0[1]);
      
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray0);
      assertNotNull(lookupTranslator0);
      
      String string1 = lookupTranslator0.translate(charSequenceArray1[0]);
      assertNotSame(string1, string0);
      assertEquals("FFFFFEBE", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test
  public void test2()  throws Throwable  {
      String string0 = ";9";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = (MockFile)mockFile0.getCanonicalFile();
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotNull(mockFile1);
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      MockFile mockFile2 = new MockFile((File) mockFile1, string0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, mockFile2);
      assertNotSame(mockFile2, mockFile0);
      assertNotSame(mockFile2, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(mockFile1, mockFile2);
      assertNotNull(mockFile2);
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)mockFile2));
      assertFalse(mockFile2.equals((Object)mockFile0));
      assertFalse(mockFile2.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)mockFile2));
      
      String string1 = mockFile2.getPath();
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, mockFile2);
      assertNotSame(mockFile2, mockFile0);
      assertNotSame(mockFile2, mockFile1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(mockFile1, mockFile2);
      assertEquals("/scratch/ac1gf/Lang/4/9/run_evosuite.pl_9277_1418318450/;9/;9", string1);
      assertNotNull(string1);
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)mockFile2));
      assertFalse(mockFile2.equals((Object)mockFile0));
      assertFalse(mockFile2.equals((Object)mockFile1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)mockFile2));
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      int int0 = 45;
      CharSequence[][] charSequenceArrayArray0 = null;
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArrayArray0);
      assertNotNull(lookupTranslator0);
      
      int int1 = lookupTranslator0.translate((CharSequence) string1, int0, (Writer) stringWriter0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, mockFile2);
      assertNotSame(mockFile2, mockFile0);
      assertNotSame(mockFile2, mockFile1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(mockFile1, mockFile2);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, int1);
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)mockFile2));
      assertFalse(int0 == int1);
      assertFalse(mockFile2.equals((Object)mockFile0));
      assertFalse(mockFile2.equals((Object)mockFile1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)mockFile2));
  }
}
