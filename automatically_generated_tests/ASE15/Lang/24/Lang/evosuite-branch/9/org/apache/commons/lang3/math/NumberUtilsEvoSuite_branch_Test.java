/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:12:27 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class NumberUtilsEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "8d";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = ".";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "0E";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "0";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "--^-E$cUdO\\$DOU$=^U";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = ",yr5y cannot be mpt\\.";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "eEq0";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "..";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "0EL";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "0x0EL!54";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "-0x-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "0x8d";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "-0xlH$$@-@&)7v0206-4";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "-0h";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "+zR,kM";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = "-0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = "0";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test021()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test022()  throws Throwable  {
      byte byte0 = (byte) (-94);
      byte byte1 = (byte)42;
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertEquals((byte)42, byte2);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
  }

  @Test
  public void test023()  throws Throwable  {
      byte byte0 = (byte) (-94);
      byte byte1 = NumberUtils.max(byte0, byte0, byte0);
      assertEquals((byte) (-94), byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
  }

  @Test
  public void test024()  throws Throwable  {
      short short0 = (short) (-1277);
      short short1 = (short)1743;
      short short2 = NumberUtils.max(short0, short1, short1);
      assertEquals((short)1743, short2);
      assertTrue(short1 == short2);
      assertFalse(short1 == short0);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
  }

  @Test
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      int int0 = 2627;
      int int1 = NumberUtils.max((int) byteArray0[0], (int) byte0, int0);
      assertEquals(2627, int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test026()  throws Throwable  {
      int int0 = (-249);
      int int1 = NumberUtils.min(int0, int0, int0);
      assertEquals((-249), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      int int2 = 4058;
      assertFalse(int2 == int1);
      
      int int3 = NumberUtils.max(int1, int2, int1);
      assertEquals(4058, int3);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertTrue(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int3);
  }

  @Test
  public void test027()  throws Throwable  {
      String string0 = ",yr5y cannot be mpt\\.";
      byte byte0 = (byte) (-57);
      byte byte1 = NumberUtils.toByte(string0, byte0);
      assertEquals((byte) (-57), byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = byte1;
      byte byte2 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte2);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-57)}, byteArray0);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte0);
      
      long long0 = NumberUtils.max((long) byteArray0[1], (long) byte1, (long) byte2);
      assertEquals(0L, long0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-57)}, byteArray0);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertTrue(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertFalse(byte0 == byte2);
      assertTrue(byte0 == byte1);
  }

  @Test
  public void test028()  throws Throwable  {
      String string0 = ",yr5y cannot be mpt\\.";
      byte byte0 = (byte) (-57);
      byte byte1 = NumberUtils.toByte(string0, byte0);
      assertEquals((byte) (-57), byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      
      long long0 = (-5934L);
      long long1 = NumberUtils.max(long0, (long) byte1, (long) byte1);
      assertEquals((-57L), long1);
      assertTrue(byte1 == byte0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertTrue(byte0 == byte1);
  }

  @Test
  public void test029()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte) (-99);
      byte byte2 = NumberUtils.min(byte0, byte0, byte1);
      assertEquals((byte) (-99), byte2);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
  }

  @Test
  public void test030()  throws Throwable  {
      byte byte0 = (byte) (-85);
      byte byte1 = (byte) (-128);
      byte byte2 = NumberUtils.min(byte0, byte1, byte1);
      assertEquals((byte) (-128), byte2);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test031()  throws Throwable  {
      short short0 = (short)0;
      short short1 = (short) (-1896);
      short short2 = NumberUtils.min(short0, short0, short1);
      assertEquals((short) (-1896), short2);
      assertTrue(short1 == short2);
      assertFalse(short1 == short0);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
  }

  @Test
  public void test032()  throws Throwable  {
      short short0 = (short)0;
      short short1 = (short) (-10);
      short short2 = NumberUtils.min(short0, short1, short0);
      assertEquals((short) (-10), short2);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertTrue(short1 == short2);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
  }

  @Test
  public void test033()  throws Throwable  {
      String string0 = "-0xlH$$@-@&)7v0206-4";
      short short0 = (short) (-946);
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
      
      int int1 = (-2245);
      assertFalse(int1 == int0);
      
      int int2 = NumberUtils.min(int0, (int) short0, int1);
      assertEquals((-2245), int2);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
  }

  @Test
  public void test034()  throws Throwable  {
      byte byte0 = (byte) (-1);
      byte byte1 = (byte)7;
      String string0 = null;
      byte byte2 = NumberUtils.toByte(string0, byte0);
      assertEquals((byte) (-1), byte2);
      assertTrue(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte2 == byte1);
      assertTrue(byte2 == byte0);
      
      byte byte3 = NumberUtils.max(byte0, byte1, byte0);
      assertEquals((byte)7, byte3);
      assertFalse(byte3 == byte0);
      assertFalse(byte3 == byte2);
      assertTrue(byte3 == byte1);
      assertTrue(byte1 == byte3);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertTrue(byte0 == byte2);
      assertFalse(byte0 == byte3);
      assertFalse(byte0 == byte1);
      
      long long0 = NumberUtils.min((long) byte3, (long) byte1, (long) byte2);
      assertEquals((-1L), long0);
      assertFalse(byte3 == byte0);
      assertFalse(byte3 == byte2);
      assertTrue(byte3 == byte1);
      assertTrue(byte1 == byte3);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertTrue(byte0 == byte2);
      assertFalse(byte0 == byte3);
      assertFalse(byte0 == byte1);
      assertFalse(byte2 == byte3);
      assertFalse(byte2 == byte1);
      assertTrue(byte2 == byte0);
  }

  @Test
  public void test035()  throws Throwable  {
      long[] longArray0 = new long[6];
      long long0 = 1213L;
      long long1 = NumberUtils.min(long0, longArray0[1], long0);
      assertEquals(0L, long1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test036()  throws Throwable  {
      int int0 = (-1);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) int0;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test037()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = Float.NaN;
      floatArray0[5] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, Float.NaN, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 1.0;
      doubleArray0[3] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double1, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(double1 == double0);
  }

  @Test
  public void test039()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float float0 = Float.NaN;
      floatArray0[1] = float0;
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = (double) floatArray0[1];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test040()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)6;
      byteArray0[3] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertEquals((byte)6, byte1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)6, (byte)0, (byte)0}, byteArray0);
      assertTrue(byte1 == byte0);
  }

  @Test
  public void test042()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test043()  throws Throwable  {
      short[] shortArray0 = new short[24];
      short short0 = (short)3132;
      shortArray0[1] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertEquals((short)3132, short1);
      assertArrayEquals(new short[] {(short)0, (short)3132, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(short1 == short0);
  }

  @Test
  public void test044()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test045()  throws Throwable  {
      short short0 = (short)2764;
      int[] intArray0 = new int[23];
      intArray0[3] = (int) short0;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(2764, int0);
      assertArrayEquals(new int[] {0, 0, 0, 2764, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test046()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test047()  throws Throwable  {
      long long0 = 1249L;
      long[] longArray0 = new long[10];
      longArray0[1] = long0;
      long long1 = NumberUtils.max(longArray0);
      assertEquals(1249L, long1);
      assertArrayEquals(new long[] {0L, 1249L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertTrue(long1 == long0);
  }

  @Test
  public void test048()  throws Throwable  {
      long long0 = (-965L);
      float[] floatArray0 = new float[7];
      floatArray0[5] = (float) long0;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-965.0F), float0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-965.0F), 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test049()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float float0 = Float.NaN;
      floatArray0[1] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, Float.NaN, 0.0F, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test050()  throws Throwable  {
      byte byte0 = (byte)46;
      double[] doubleArray0 = new double[24];
      doubleArray0[0] = (double) byte0;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {46.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = Double.NaN;
      doubleArray0[2] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-12);
      byteArray0[2] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-12), byte1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-12), (byte)0, (byte)0}, byteArray0);
      assertTrue(byte1 == byte0);
  }

  @Test
  public void test053()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test054()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = (short) (-1358);
      shortArray0[2] = short0;
      short short1 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1358), short1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-1358), (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(short1 == short0);
  }

  @Test
  public void test055()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = (-292);
      intArray0[2] = int0;
      int int1 = NumberUtils.min(intArray0);
      assertEquals((-292), int1);
      assertArrayEquals(new int[] {0, 0, (-292), 0, 0, 0, 0, 0}, intArray0);
      assertTrue(int1 == int0);
  }

  @Test
  public void test056()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test057()  throws Throwable  {
      short short0 = (short) (-1);
      short short1 = (short)68;
      short short2 = NumberUtils.max(short0, short0, short1);
      assertEquals((short)68, short2);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) short2;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
      assertArrayEquals(new long[] {68L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test
  public void test058()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test059()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test060()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test061()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test062()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test063()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = "-.1";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals((-0.1F), (float)float0, 0.01F);
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = "lH$$@-@&)N$7v0920l-4";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
      }
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = "The Array must not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
      }
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = "]/.l";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ]/.l is not a valid number.
         //
      }
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = "')\"L6<l";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ')\"L6<l is not a valid number.
         //
      }
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = "%E g8K4f";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // %E g8K4f is not a valid number.
         //
      }
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = "/(UZyl<zNazL";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // /(UZyl<zNazL is not a valid number.
         //
      }
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = ",H\\F";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ,H\\F is not a valid number.
         //
      }
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "3pQN|@D";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 3pQN|@D is not a valid number.
         //
      }
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "0EL!5j";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0EL!5j is not a valid number.
         //
      }
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "0E";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0E is not a valid number.
         //
      }
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "0EL!5";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "#s/vg2E-]evN";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // #s/vg2E-]evN is not a valid number.
         //
      }
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "8d";
      Double double0 = (Double)NumberUtils.createNumber(string0);
      assertEquals(8.0, (double)double0, 0.01D);
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.math.NumberUtils";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apache.commons.lang3.math.NumberUtils is not a valid number.
         //
      }
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = "[.r}ef[17\\x3#MqE#u";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // [.r}ef[17\\x3#MqE#u is not a valid number.
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "...";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = " is not a valid number.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid number. is not a valid number.
         //
      }
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = "-0X";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
      }
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "0XL!K5j4";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"L!K5j4\"
         //
      }
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "-0xT3Gj*^|IB6`HQ";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-T3Gj*^|IB6`HQ\"
         //
      }
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "0x0EL!54";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0EL!54\"
         //
      }
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = "--3NCF|5iM~";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = null;
      byte byte0 = (byte)0;
      short short0 = NumberUtils.toShort(string0, (short) byte0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = "-0X...";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = null;
      byte[] byteArray0 = new byte[4];
      double double0 = NumberUtils.toDouble(string0, (double) byteArray0[0]);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = null;
      byte[] byteArray0 = new byte[4];
      long long0 = NumberUtils.toLong(string0, (long) byteArray0[2]);
      assertEquals(0L, long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = null;
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = ",yr5y cannot be mpt\\.";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test097()  throws Throwable  {
      long[] longArray0 = new long[6];
      long long0 = 1213L;
      float float0 = NumberUtils.max((float) longArray0[0], (float) longArray0[1], (float) long0);
      assertEquals(1213.0F, float0, 0.01F);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = "8d7 <MX;FfhrJ)f";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test099()  throws Throwable  {
      float[] floatArray0 = new float[7];
      byte byte0 = (byte)4;
      float float0 = NumberUtils.min(floatArray0[0], (float) byte0, floatArray0[5]);
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test100()  throws Throwable  {
      String string0 = "\\s+";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      double double0 = NumberUtils.min((double) short0, (double) short0, (double) short0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test101()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test102()  throws Throwable  {
      double double0 = (-2389.06177000146);
      double double1 = NumberUtils.max(double0, double0, double0);
      assertEquals((-2389.06177000146), double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = "+zR,kM";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }
}
