/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:07:26 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.OutputStream;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang.Entities;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

 
public class EntitiesEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      String string0 = "1&;Cc\",//{";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      assertNotNull(mockFileOutputStream0);
      
      boolean boolean0 = false;
      MockPrintStream mockPrintStream0 = new MockPrintStream((OutputStream) mockFileOutputStream0, boolean0);
      assertNotNull(mockPrintStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((OutputStream) mockPrintStream0, boolean0);
      assertNotNull(mockPrintWriter0);
      
      entities0.unescape((Writer) mockPrintWriter0, string0);
  }

  @Test
  public void test01()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String string0 = "sbsp&Q";
      entities0.unescape((Writer) stringWriter0, string0);
      assertEquals("sbsp&Q", stringWriter0.toString());
  }

  @Test
  public void test02()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "f0-7}_dL|Z5sWZ<";
      Writer writer0 = null;
      // Undeclared exception!
      try {
        entities0.unescape(writer0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      String string0 = "1&;Cc\",//{";
      String string1 = entities0.unescape(string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("1&;Cc\",//{", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test04()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String[] stringArray0 = new String[4];
      String string0 = "Illegal Load: ";
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      String string1 = entities0.unescape(stringArray0[2]);
      assertNotNull(string1);
      assertEquals("Illegal Load: ", string1);
      assertSame(string1, string0);
  }

  @Test
  public void test05()  throws Throwable  {
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      int int0 = 1457;
      String string0 = entities_LookupEntityMap0.name(int0);
      assertNull(string0);
      
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(int0);
      assertNotNull(entities_BinaryEntityMap0);
      
      int int1 = (-5186);
      entities_BinaryEntityMap0.add(string0, int0);
      assertFalse(int0 == int1);
      
      String string1 = entities_BinaryEntityMap0.name(int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNull(string1);
  }

  @Test
  public void test06()  throws Throwable  {
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      int int0 = 1457;
      String string0 = entities_LookupEntityMap0.name(int0);
      assertNull(string0);
      
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(int0);
      assertNotNull(entities_BinaryEntityMap0);
      
      entities_BinaryEntityMap0.add(string0, int0);
      String string1 = entities_BinaryEntityMap0.name(int0);
      assertNull(string1);
  }

  @Test
  public void test07()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "f0-7}_dL|Z5sWZ<";
      String string1 = entities0.escape(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("f0-7}_dL|Z5sWZ&lt;", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = entities0.unescape(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("f0-7}_dL|Z5sWZ<", string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "eOs1*$[<; =\"<z";
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String string1 = entities0.escape(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("eOs1*$[&lt;; =&quot;&lt;z", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      entities0.unescape((Writer) stringWriter0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("eOs1*$[<; =\"<z", stringWriter0.toString());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "";
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      int int0 = 1;
      entities_LookupEntityMap0.add(string0, int0);
      int int1 = entities_LookupEntityMap0.value(string0);
      assertTrue(int1 == int0);
      assertEquals(1, int1);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 1457;
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap0);
      
      String string0 = entities_TreeEntityMap0.name(int0);
      assertNull(string0);
  }

  @Test
  public void test11()  throws Throwable  {
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      int int0 = 1457;
      String string0 = entities_LookupEntityMap0.name(int0);
      assertNull(string0);
      
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap0);
      
      // Undeclared exception!
      try {
        entities_TreeEntityMap0.add(string0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      assertNotNull(entities_HashEntityMap0);
  }

  @Test
  public void test13()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
  }

  @Test
  public void test14()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      String string0 = "p>p`Gi<djA m>YW";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      entities0.escape((Writer) mockPrintWriter0, string0);
  }

  @Test
  public void test15()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "ZD9&\\{;VE7&>H";
      String string1 = entities0.unescape(string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ZD9&\\{;VE7&>H", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test16()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
  }

  @Test
  public void test17()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      Entities.fillWithHtml40Entities(entities0);
  }
}
