/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:15:11 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.PipedWriter;
import java.io.Writer;
import org.apache.commons.lang.Entities;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

 
public class EntitiesEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      String string0 = "u&;&+A@~~-kv7H]TT";
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((Writer) pipedWriter0);
      assertNotNull(mockPrintWriter0);
      
      entities0.unescape((Writer) mockPrintWriter0, string0);
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 0;
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "]^iG\\9u7/|&)yK;5";
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(int0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      entities0.unescape((Writer) charArrayWriter0, string0);
      assertEquals(18, charArrayWriter0.size());
      assertEquals("]^iG\\9u7/|&)yK;5", charArrayWriter0.toString());
  }

  @Test
  public void test02()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      String string0 = "Igrave";
      int int0 = entities0.entityValue(string0);
      assertEquals(204, int0);
      
      String string1 = entities0.entityName(int0);
      assertNotNull(string1);
      assertEquals("Igrave", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      assertSame(string0, string1);
      
      boolean boolean0 = false;
      MockFileWriter mockFileWriter0 = new MockFileWriter((File) mockFile0, boolean0);
      assertNotNull(mockFileWriter0);
      assertSame(string0, string1);
      
      entities0.unescape((Writer) mockFileWriter0, string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test03()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      String string0 = "&#;<d\"";
      String string1 = entities0.unescape(string0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals("&#;<d\"", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test04()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      String string0 = "u$&!-;W&+H@-{7H]wT";
      String string1 = entities0.unescape(string0);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("u$&!-;W&+H@-{7H]wT", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test05()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      String string0 = "&#7;";
      String string1 = entities0.unescape(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("\u0007", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test06()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      String string0 = "u&;&+A@~~-kv7H]TT";
      String string1 = entities0.unescape(string0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals("u&;&+A@~~-kv7H]TT", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test07()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "oNr[uS7tJoN\"uU~.";
      String string1 = entities0.escape(string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("oNr[uS7tJoN&quot;uU~.", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test08()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
      
      int int0 = (-3082);
      String string0 = "dXdAbI{VPKJ@+";
      entities_BinaryEntityMap0.add(string0, int0);
      String string1 = entities_BinaryEntityMap0.name(int0);
      assertNotNull(string1);
      assertEquals("dXdAbI{VPKJ@+", string1);
      assertSame(string1, string0);
      
      int int1 = entities_BinaryEntityMap0.value(string1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals((-3082), int1);
      assertSame(string1, string0);
  }

  @Test
  public void test09()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "oNr[uS7tJoN\"uU~.";
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      assertNotNull(mockFileWriter0);
      
      entities0.escape((Writer) mockFileWriter0, string0);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 1309;
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      String string0 = entities0.entityName(int0);
      assertNull(string0);
  }

  @Test
  public void test11()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap0);
      
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      String string0 = "";
      String string1 = entities0.unescape(string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      int int0 = entities_TreeEntityMap0.value(string1);
      assertEquals((-1), int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 4349;
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap0);
      
      String string0 = entities_TreeEntityMap0.name(int0);
      assertNull(string0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "u&;&+A@~~-kv7H]TT";
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap0);
      
      int int0 = (-4507);
      entities_TreeEntityMap0.add(string0, int0);
  }

  @Test
  public void test14()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      assertNotNull(entities_HashEntityMap0);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 4349;
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap(int0);
      assertNotNull(entities_ArrayEntityMap0);
      
      String string0 = entities_ArrayEntityMap0.name(int0);
      assertNull(string0);
      
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(int0);
      assertNotNull(entities_BinaryEntityMap0);
      
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      entities_LookupEntityMap0.add(string0, entities_BinaryEntityMap0.size);
  }

  @Test
  public void test16()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      Entities.fillWithHtml40Entities(entities0);
  }
}
