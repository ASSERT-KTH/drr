/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:43:41 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.CharArrayWriter;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang.StringEscapeUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.FileSystemHandling;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;

import org.junit.runner.RunWith;

 
public class StringEscapeUtilsEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeSql(string0);
      assertNull(string1);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeXml(string0);
      assertNull(string1);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "}O";
      String string1 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0, boolean0);
      assertNotNull(mockFileWriter0);
      
      StringEscapeUtils.unescapeXml((Writer) mockFileWriter0, string1);
  }

  @Test
  public void test03()  throws Throwable  {
      Writer writer0 = null;
      String string0 = "V)m2#fZ0 -s;IKQHe,";
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeXml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "}O";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0, boolean0);
      assertNotNull(mockFileWriter0);
      
      StringEscapeUtils.unescapeXml((Writer) mockFileWriter0, string0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeXml(string0);
      assertNull(string1);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "";
      String string1 = StringEscapeUtils.escapeXml(string0);
      assertEquals("", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeHtml(string0);
      assertNull(string1);
      
      byte[] byteArray0 = new byte[22];
      StringWriter stringWriter0 = new StringWriter((int) byteArray0[0]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringEscapeUtils.escapeXml((Writer) stringWriter0, string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test08()  throws Throwable  {
      Writer writer0 = null;
      String string0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeXml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "\\u";
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      assertNotNull(mockFileWriter0);
      
      String string1 = mockFileWriter0.getEncoding();
      assertEquals("UTF8", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((Writer) mockFileWriter0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotNull(mockPrintWriter0);
      
      StringEscapeUtils.escapeXml((Writer) mockPrintWriter0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test10()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      String string0 = null;
      StringEscapeUtils.unescapeHtml((Writer) stringWriter0, string0);
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      Writer writer0 = null;
      String string0 = "yk8(D6mL)35h 0LA";
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeHtml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "=\\7k97;a";
      String string1 = StringEscapeUtils.unescapeHtml(string0);
      assertEquals("=\\7k97;a", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      String string1 = StringEscapeUtils.unescapeXml(string0);
      assertEquals("Minimum abbreviation width with offset is 7", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(mockFileWriter0);
      
      String string2 = null;
      StringEscapeUtils.escapeHtml((Writer) mockFileWriter0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "'D";
      Writer writer0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeHtml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeHtml(string0);
      assertNull(string1);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringEscapeUtils.escapeHtml(string0);
      assertEquals("\\u", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "xjI%\"5L/GZ_?n/\\";
      String string1 = StringEscapeUtils.unescapeJavaScript(string0);
      assertEquals("xjI%\"5L/GZ_?n/\\", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "Ze\\tx\"@eC@KT!";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertEquals("Ze\tx\"@eC@KT!", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test19()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((Writer) charArrayWriter0, boolean0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(mockPrintWriter0);
      
      String string0 = "I%RkfF:EtU\\r";
      StringEscapeUtils.unescapeJava((Writer) mockPrintWriter0, string0);
      assertEquals(11, charArrayWriter0.size());
      assertEquals("I%RkfF:EtU\r", charArrayWriter0.toString());
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "@A{s\\bI=.5$l2";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertEquals("@A{s\bI=.5$l2", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "*'";
      String string1 = StringEscapeUtils.escapeJavaScript(string0);
      assertEquals("*\\'", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = StringEscapeUtils.unescapeJava(string1);
      assertEquals("*'", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotNull(string2);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "xjI%\"5L/GZ_?n/\\";
      String string1 = StringEscapeUtils.escapeJavaScript(string0);
      assertEquals("xjI%\\\"5L\\/GZ_?n\\/\\\\", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = StringEscapeUtils.unescapeJavaScript(string1);
      assertEquals("xjI%\"5L/GZ_?n/\\", string2);
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotNull(string2);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "\\uK70'0";
      String string1 = StringEscapeUtils.escapeSql(string0);
      assertEquals("\\uK70''0", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      // Undeclared exception!
      try {
        String string2 = StringEscapeUtils.unescapeJava(string1);
        fail("Expecting exception: VerifyError");
      
      } catch(VerifyError e) {
         //
         // (class: org/apache/commons/lang/exception/NestableRuntimeException, method: getMessage signature: ()Ljava/lang/String;) Illegal use of nonvirtual function call
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "}O";
      String string1 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0, boolean0);
      assertNotNull(mockFileWriter0);
      
      StringEscapeUtils.unescapeJavaScript((Writer) mockFileWriter0, string1);
  }

  @Test
  public void test25()  throws Throwable  {
      Writer writer0 = null;
      String string0 = "`4v+>TH\"e";
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeJava(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeJavaScript(string0);
      assertNull(string1);
  }

  @Test
  public void test27()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      int int0 = 4;
      stringWriter0.write(int0);
      assertEquals("\u0004", stringWriter0.toString());
      
      String string0 = stringWriter0.toString();
      assertEquals("\u0004", string0);
      assertEquals("\u0004", stringWriter0.toString());
      assertNotNull(string0);
      
      String string1 = StringEscapeUtils.escapeJavaScript(string0);
      assertEquals("\\u0004", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("\u0004", stringWriter0.toString());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test28()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      int int0 = 29;
      stringWriter0.write(int0);
      assertEquals("\u001D", stringWriter0.toString());
      
      String string0 = stringWriter0.toString();
      assertEquals("\u001D", string0);
      assertEquals("\u001D", stringWriter0.toString());
      assertNotNull(string0);
      
      String string1 = StringEscapeUtils.escapeJavaScript(string0);
      assertEquals("\\u001D", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u001D", stringWriter0.toString());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "BgvbM9MFLq6~O\\fSl";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertEquals("BgvbM9MFLq6~O\fSl", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      String string2 = StringEscapeUtils.escapeJava(string1);
      assertEquals("BgvbM9MFLq6~O\\fSl", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = " \t\r\n\b";
      String string1 = StringEscapeUtils.escapeJava(string0);
      assertEquals(" \\t\\r\\n\\b", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test31()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      char char0 = '\u0084';
      stringWriter0.write((int) char0);
      assertEquals("\u0084", stringWriter0.toString());
      
      String string0 = stringWriter0.toString();
      assertEquals("\u0084", string0);
      assertEquals("\u0084", stringWriter0.toString());
      assertNotNull(string0);
      
      String string1 = StringEscapeUtils.escapeJavaScript(string0);
      assertEquals("\\u0084", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("\u0084", stringWriter0.toString());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test32()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      int int0 = 3106;
      stringWriter0.write(int0);
      assertEquals("\u0C22", stringWriter0.toString());
      
      String string0 = stringWriter0.toString();
      assertEquals("\u0C22", string0);
      assertEquals("\u0C22", stringWriter0.toString());
      assertNotNull(string0);
      
      String string1 = StringEscapeUtils.escapeJavaScript(string0);
      assertEquals("\\u0C22", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0C22", stringWriter0.toString());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "\\u";
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      assertNotNull(mockFileWriter0);
      
      String string1 = null;
      StringEscapeUtils.escapeJava((Writer) mockFileWriter0, string1);
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeJavaScript(string0);
      assertNull(string1);
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = "B'veMXrc66~:\\nel";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertEquals("B'veMXrc66~:\nel", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      
      String string2 = StringEscapeUtils.escapeJava(string1);
      assertEquals("B'veMXrc66~:\\nel", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotNull(string2);
  }

  @Test
  public void test36()  throws Throwable  {
      StringEscapeUtils stringEscapeUtils0 = new StringEscapeUtils();
      assertNotNull(stringEscapeUtils0);
  }

  @Test
  public void test37()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      int int0 = (-7);
      stringWriter0.write(int0);
      assertEquals("\uFFF9", stringWriter0.toString());
      
      String string0 = stringWriter0.toString();
      assertEquals("\uFFF9", string0);
      assertEquals("\uFFF9", stringWriter0.toString());
      assertNotNull(string0);
      
      String string1 = StringEscapeUtils.escapeJavaScript(string0);
      assertEquals("\\uFFF9", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\uFFF9", stringWriter0.toString());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
  }

  @Test
  public void test38()  throws Throwable  {
      Writer writer0 = null;
      String string0 = "\\u00";
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeJavaScript(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
      }
  }
}
