/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:33:22 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.OutputStream;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang.StringEscapeUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;

import org.junit.runner.RunWith;

 
public class StringEscapeUtilsEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeHtml(string0);
      assertNull(string1);
      
      String string2 = StringEscapeUtils.escapeSql(string1);
      assertNull(string2);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "192";
      String string1 = StringEscapeUtils.escapeSql(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("192", string1);
      assertNotNull(string1);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeXml(string0);
      assertNull(string1);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "192";
      String string1 = StringEscapeUtils.unescapeXml(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("192", string1);
      assertNotNull(string1);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 892;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(int0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      String string0 = null;
      StringEscapeUtils.unescapeXml((Writer) charArrayWriter0, string0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = " \t\r>\n\b";
      String string1 = StringEscapeUtils.escapeJava(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(" \\t\\r>\\n\\b", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Writer writer0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeXml(writer0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = " \t\r>\n\b";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((OutputStream) mockFileOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      StringEscapeUtils.unescapeXml((Writer) mockPrintWriter0, string0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "ZnU";
      String string1 = StringEscapeUtils.escapeXml(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("ZnU", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "192";
      String string1 = StringEscapeUtils.unescapeHtml(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("192", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(mockFileWriter0);
      
      String string2 = null;
      String string3 = StringEscapeUtils.unescapeHtml(string2);
      assertNull(string3);
      
      StringEscapeUtils.escapeXml((Writer) mockFileWriter0, string3);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "";
      Writer writer0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeXml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "192";
      String string1 = StringEscapeUtils.unescapeHtml(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("192", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(mockFileWriter0);
      
      StringEscapeUtils.escapeXml((Writer) mockFileWriter0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = null;
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringEscapeUtils.unescapeHtml((Writer) stringWriter0, string0);
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      Writer writer0 = null;
      String string0 = "I|>";
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeHtml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = null;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      StringEscapeUtils.escapeHtml((Writer) charArrayWriter0, string0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "The Writer must not be null.";
      Writer writer0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeHtml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "5`\"G48";
      String string1 = StringEscapeUtils.escapeHtml(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("5`&quot;G48", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "192";
      String string1 = StringEscapeUtils.unescapeHtml(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("192", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      
      String string2 = "MSMP6#\\";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(mockFileWriter0);
      
      StringEscapeUtils.unescapeJavaScript((Writer) mockFileWriter0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "%)P/owLi#N]*#\"";
      String string1 = StringEscapeUtils.escapeJavaScript(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("%)P\\/owLi#N]*#\\\"", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringEscapeUtils.unescapeJava(string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("%)P/owLi#N]*#\"", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "192";
      String string1 = StringEscapeUtils.unescapeHtml(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("192", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      
      String string2 = "MSMP6#\\";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(mockFileWriter0);
      
      String string3 = StringEscapeUtils.escapeJavaScript(string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("MSMP6#\\\\", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string3);
      
      StringEscapeUtils.unescapeJavaScript((Writer) mockFileWriter0, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "4e\\uhe0m";
      // Undeclared exception!
      try {
        String string1 = StringEscapeUtils.unescapeJavaScript(string0);
        fail("Expecting exception: VerifyError");
      
      } catch(VerifyError e) {
         //
         // (class: org/apache/commons/lang/exception/NestableRuntimeException, method: getMessage signature: (I)Ljava/lang/String;) Illegal use of nonvirtual function call
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeXml(string0);
      assertNull(string1);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringEscapeUtils.unescapeJava((Writer) stringWriter0, string1);
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test21()  throws Throwable  {
      Writer writer0 = null;
      String string0 = "";
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeJava(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeJavaScript(string0);
      assertNull(string1);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "!=,OmB'";
      String string1 = StringEscapeUtils.escapeJava(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("!=,OmB'", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test
  public void test24()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      int int0 = 1828;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)26;
      byteArray0[3] = byte0;
      byteArrayOutputStream0.write(byteArray0);
      assertEquals(6, byteArrayOutputStream0.size());
      assertEquals("\u0000\u0000\u0000\u001A\u0000\u0000", byteArrayOutputStream0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)26, (byte)0, (byte)0}, byteArray0);
      
      String string0 = byteArrayOutputStream0.toString();
      assertEquals(6, byteArrayOutputStream0.size());
      assertEquals("\u0000\u0000\u0000\u001A\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals("\u0000\u0000\u0000\u001A\u0000\u0000", string0);
      assertNotNull(string0);
      
      StringEscapeUtils.escapeJavaScript((Writer) charArrayWriter0, string0);
      assertEquals(6, byteArrayOutputStream0.size());
      assertEquals("\u0000\u0000\u0000\u001A\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals("\\u0000\\u0000\\u0000\\u001A\\u0000\\u0000", charArrayWriter0.toString());
      assertEquals(36, charArrayWriter0.size());
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "2f@\\fS1hc@";
      String string1 = StringEscapeUtils.unescapeJavaScript(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("2f@\fS1hc@", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      
      String string2 = StringEscapeUtils.escapeJava(string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("2f@\\fS1hc@", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertNotNull(string2);
  }

  @Test
  public void test26()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      int int0 = 1828;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-56);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-85);
      byteArray0[1] = byte1;
      byteArrayOutputStream0.write(byteArray0);
      assertEquals("\u022B\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(5, byteArrayOutputStream0.size());
      assertArrayEquals(new byte[] {(byte) (-56), (byte) (-85), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = byteArrayOutputStream0.toString();
      assertEquals("\u022B\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(5, byteArrayOutputStream0.size());
      assertEquals("\u022B\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      StringEscapeUtils.escapeJavaScript((Writer) charArrayWriter0, string0);
      assertEquals("\\u022B\\u0000\\u0000\\u0000", charArrayWriter0.toString());
      assertEquals(24, charArrayWriter0.size());
      assertEquals("\u022B\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(5, byteArrayOutputStream0.size());
  }

  @Test
  public void test27()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      int int0 = 1828;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-56);
      byteArray0[0] = byte0;
      byteArrayOutputStream0.write(byteArray0);
      assertEquals(5, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertArrayEquals(new byte[] {(byte) (-56), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = byteArrayOutputStream0.toString();
      assertEquals(5, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals("\uFFFD\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      StringEscapeUtils.escapeJavaScript((Writer) charArrayWriter0, string0);
      assertEquals(5, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(30, charArrayWriter0.size());
      assertEquals("\\uFFFD\\u0000\\u0000\\u0000\\u0000", charArrayWriter0.toString());
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeXml(string0);
      assertNull(string1);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringEscapeUtils.escapeJava((Writer) stringWriter0, string1);
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeXml(string0);
      assertNull(string1);
      
      String string2 = StringEscapeUtils.escapeJava(string1);
      assertNull(string2);
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "ZnU";
      Writer writer0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeJava(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      StringEscapeUtils stringEscapeUtils0 = new StringEscapeUtils();
      assertNotNull(stringEscapeUtils0);
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "'";
      String string1 = StringEscapeUtils.escapeJavaScript(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("\\'", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      
      String string2 = StringEscapeUtils.unescapeJavaScript(string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("'", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertNotNull(string2);
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = " \t\r>\n\b";
      String string1 = StringEscapeUtils.escapeJava(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(" \\t\\r>\\n\\b", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((OutputStream) mockFileOutputStream0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(mockPrintWriter0);
      
      StringEscapeUtils.unescapeJavaScript((Writer) mockPrintWriter0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }
}
