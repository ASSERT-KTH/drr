/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:15:48 GMT 2014
 */

package org.jfree.data.xy;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.GridBagConstraints;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.image.ImageObserver;
import java.util.List;
import javax.swing.AbstractButton;
import javax.swing.SwingConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.FileSystemHandling;

import org.jfree.data.general.SeriesException;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;

 
public class XYSeriesEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "$[(Yj4\\";
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      
      int int0 = KeyEvent.VK_END;
      assertEquals(35, int0);
      
      xYSeries0.add((Number) int0, (Number) int0);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      
      double double0 = (-474.3);
      int int1 = ImageObserver.PROPERTIES;
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      
      xYSeries0.add((Number) double0, (Number) int1);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertFalse(int1 == int0);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) int1, (Number) int1);
      assertNull(xYDataItem0);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(3, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertFalse(int1 == int0);
      
      int int2 = xYSeries0.hashCode();
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(3, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals((-124176274), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "$[(Yj4\\";
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      
      int int0 = KeyEvent.VK_END;
      assertEquals(35, int0);
      
      xYSeries0.add((Number) int0, (Number) int0);
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      
      double double0 = (-474.3);
      xYSeries0.add((Number) double0, (Number) int0);
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      
      int int1 = xYSeries0.hashCode();
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(1575813418, int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "$[(Yj4\\";
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      
      int int0 = KeyEvent.VK_END;
      assertEquals(35, int0);
      
      xYSeries0.add((Number) int0, (Number) int0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      
      int int1 = xYSeries0.hashCode();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals((-2061781543), int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = InputEvent.META_DOWN_MASK;
      assertEquals(256, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      
      int int1 = xYSeries0.hashCode();
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals((-2146069897), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = SwingConstants.TRAILING;
      assertEquals(11, int0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      
      XYSeries xYSeries1 = xYSeries0.createCopy(int0, int0);
      assertNotNull(xYSeries1);
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertEquals(false, xYSeries1.getAutoSort());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeries0, xYSeries1);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      
      xYSeries1.add((double) int0, (double) int0, boolean0);
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertEquals(false, xYSeries1.getAutoSort());
      assertEquals(false, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(1, xYSeries1.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeries0, xYSeries1);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      
      boolean boolean1 = xYSeries1.equals((Object) xYSeries0);
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertEquals(false, xYSeries1.getAutoSort());
      assertEquals(false, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(1, xYSeries1.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertFalse(boolean1);
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeries0, xYSeries1);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = SwingConstants.TRAILING;
      assertEquals(11, int0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      
      XYSeries xYSeries1 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries1);
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getAutoSort());
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      
      boolean boolean1 = xYSeries1.equals((Object) xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getAutoSort());
      assertFalse(boolean1);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertTrue(boolean1 == boolean0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = InputEvent.META_DOWN_MASK;
      assertEquals(256, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      
      XYSeries xYSeries1 = xYSeries0.createCopy(int0, int0);
      assertNotNull(xYSeries1);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.isEmpty());
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      xYSeries0.setMaximumItemCount(int0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(256, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNotSame(xYSeries0, xYSeries1);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      
      boolean boolean0 = xYSeries1.equals((Object) xYSeries0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(256, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.isEmpty());
      assertFalse(boolean0);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertFalse(xYSeries1.equals((Object)xYSeries0));
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = InputEvent.META_DOWN_MASK;
      assertEquals(256, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      
      XYSeries xYSeries1 = xYSeries0.createCopy(int0, int0);
      assertNotNull(xYSeries1);
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeries0, xYSeries1);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      
      boolean boolean0 = xYSeries1.equals((Object) xYSeries0);
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertTrue(boolean0);
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeries0, xYSeries1);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = InputEvent.META_DOWN_MASK;
      assertEquals(256, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) int0, (double) int0);
      assertNull(xYDataItem0);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.isEmpty());
      
      boolean boolean0 = xYSeries0.equals((Object) xYDataItem0);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.isEmpty());
      assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      int int0 = 6;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      
      XYSeries xYSeries1 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries1);
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(false, xYSeries1.getAllowDuplicateXValues());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(false, xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      
      boolean boolean1 = xYSeries0.equals((Object) xYSeries1);
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(false, xYSeries1.getAllowDuplicateXValues());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(false, xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertFalse(boolean1);
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeries0, xYSeries1);
      assertTrue(boolean1 == boolean0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = InputEvent.META_DOWN_MASK;
      assertEquals(256, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      xYSeries0.add((double) int0, (double) int0);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(int0 == int1);
      
      XYSeries xYSeries1 = xYSeries0.createCopy(int1, int1);
      assertNotNull(xYSeries1);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(false, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(1, xYSeries1.getItemCount());
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertFalse(int1 == int0);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertFalse(int0 == int1);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = SwingConstants.TRAILING;
      assertEquals(11, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      
      Number number0 = null;
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) int0, number0);
      assertNull(xYDataItem0);
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      
      double[][] doubleArray0 = xYSeries0.toArray();
      assertNotNull(doubleArray0);
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "OHLCDataItem.compareTo().";
      boolean boolean0 = true;
      boolean boolean1 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0, boolean1);
      assertNotNull(xYSeries0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = 0;
      xYSeries0.setMaximumItemCount(int0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int1 = GridBagConstraints.SOUTH;
      assertEquals(15, int1);
      assertFalse(int1 == int0);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) int1, (double) int1);
      assertNull(xYDataItem0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertFalse(boolean0 == boolean1);
      assertFalse(int1 == int0);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "$[(Yj4\\";
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      
      int int0 = KeyEvent.VK_END;
      assertEquals(35, int0);
      
      xYSeries0.add((Number) int0, (Number) int0);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) int0, (Number) int0);
      assertNotNull(xYDataItem0);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(35.0, xYDataItem0.getYValue(), 0.01D);
      assertEquals(35.0, xYDataItem0.getXValue(), 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = SwingConstants.TRAILING;
      assertEquals(11, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      
      Number number0 = null;
      // Undeclared exception!
      try {
        XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(number0, (Number) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = SwingConstants.TRAILING;
      assertEquals(11, int0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      
      // Undeclared exception!
      try {
        xYSeries0.update((Number) int0, (Number) int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 11
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = SwingConstants.TRAILING;
      assertEquals(11, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) int0, (Number) int0);
      assertNull(xYDataItem0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      
      xYSeries0.update((Number) int0, (Number) int0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = InputEvent.META_DOWN_MASK;
      assertEquals(256, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) int0, (double) int0);
      assertNull(xYDataItem0);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      
      xYSeries0.clear();
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = InputEvent.META_DOWN_MASK;
      assertEquals(256, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      xYSeries0.clear();
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = InputEvent.META_DOWN_MASK;
      assertEquals(256, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      
      // Undeclared exception!
      try {
        xYSeries0.delete(int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 256, Size: 0
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "OHLCDataItem.compareTo().";
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      
      int int0 = 0;
      int int1 = GridBagConstraints.SOUTH;
      assertEquals(15, int1);
      assertFalse(int1 == int0);
      
      xYSeries0.delete(int1, int0);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "OHLCDataItem.compareTo().";
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      
      int int0 = 0;
      xYSeries0.setMaximumItemCount(int0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getMaximumItemCount());
      
      int int1 = GridBagConstraints.SOUTH;
      assertEquals(15, int1);
      assertFalse(int1 == int0);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) int1, (Number) int1);
      assertNotNull(xYDataItem0);
      assertEquals(15.0, xYDataItem0.getYValue(), 0.01D);
      assertEquals(15.0, xYDataItem0.getXValue(), 0.01D);
      assertFalse(int1 == int0);
      
      xYSeries0.add(xYDataItem0);
      assertEquals(15.0, xYDataItem0.getYValue(), 0.01D);
      assertEquals(15.0, xYDataItem0.getXValue(), 0.01D);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertFalse(int1 == int0);
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = (-789);
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      
      xYSeries0.add((double) int0, (Number) int0);
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      
      XYDataItem xYDataItem0 = new XYDataItem((double) int0, (double) int0);
      assertNotNull(xYDataItem0);
      assertEquals((-789.0), xYDataItem0.getXValue(), 0.01D);
      assertEquals((-789.0), xYDataItem0.getYValue(), 0.01D);
      
      // Undeclared exception!
      try {
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = InputEvent.META_DOWN_MASK;
      assertEquals(256, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      
      double double0 = 0.0;
      boolean boolean0 = true;
      xYSeries0.add((double) int0, (Number) int0, boolean0);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      
      xYSeries0.add((Number) double0, (Number) int0);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      
      xYSeries0.add(double0, (double) int0, boolean0);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(3, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = AbstractButton.DISABLED_ICON_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("disabledIcon", string0);
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0, boolean1);
      assertNotNull(xYSeries0);
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      double double0 = (-1.0);
      xYSeries0.add(double0, (Number) double0);
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try {
        xYSeries0.add(double0, (Number) double0, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = AbstractButton.DISABLED_ICON_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("disabledIcon", string0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      
      double double0 = (-1.0);
      xYSeries0.add(double0, (Number) double0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.add(double0, (Number) double0, boolean0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = InputEvent.META_DOWN_MASK;
      assertEquals(256, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      xYSeries0.add((double) int0, (double) int0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertFalse(int0 == int1);
      
      xYSeries0.setMaximumItemCount(int1);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = InputEvent.META_DOWN_MASK;
      assertEquals(256, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      
      xYSeries0.add((double) int0, (double) int0);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      
      double[][] doubleArray0 = xYSeries0.toArray();
      assertNotNull(doubleArray0);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = InputEvent.META_DOWN_MASK;
      assertEquals(256, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      
      boolean boolean0 = xYSeries0.getAutoSort();
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertTrue(boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = InputEvent.META_DOWN_MASK;
      assertEquals(256, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertTrue(boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "OHLCDataItem.compareTo().";
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      
      int int0 = GridBagConstraints.SOUTH;
      assertEquals(15, int0);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) int0, (double) int0);
      assertNull(xYDataItem0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      
      // Undeclared exception!
      try {
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = InputEvent.META_DOWN_MASK;
      assertEquals(256, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      
      int int1 = xYSeries0.getMaximumItemCount();
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = InputEvent.META_DOWN_MASK;
      assertEquals(256, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      
      List list0 = xYSeries0.getItems();
      assertNotNull(list0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = InputEvent.META_DOWN_MASK;
      assertEquals(256, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertNotNull(xYSeries1);
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeries0, xYSeries1);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = InputEvent.META_DOWN_MASK;
      assertEquals(256, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      
      // Undeclared exception!
      try {
        XYDataItem xYDataItem0 = xYSeries0.remove((Number) int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = 1566;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      
      byte byte0 = (byte) (-40);
      // Undeclared exception!
      try {
        xYSeries0.updateByIndex((int) byte0, (Number) int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
