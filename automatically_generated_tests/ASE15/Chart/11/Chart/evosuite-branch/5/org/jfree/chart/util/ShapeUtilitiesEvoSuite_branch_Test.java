/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:22:48 GMT 2014
 */

package org.jfree.chart.util;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Canvas;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Arc2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Path2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.Vector;
import javax.swing.Box;
import javax.swing.CellRendererPane;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.border.EtchedBorder;
import javax.swing.text.AbstractDocument;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.LabelView;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.javax.swing.MockJFileChooser;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.ShapeUtilities;
import org.junit.runner.RunWith;

 
public class ShapeUtilitiesEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      float float0 = (-815.72F);
      Line2D.Float line2D_Float0 = new Line2D.Float(float0, float0, float0, float0);
      assertEquals((-815.72F), line2D_Float0.x1, 0.01F);
      assertEquals((-815.72F), line2D_Float0.y1, 0.01F);
      assertEquals((-815.72F), line2D_Float0.y2, 0.01F);
      assertEquals((-815.72F), line2D_Float0.x2, 0.01F);
      assertNotNull(line2D_Float0);
      
      Rectangle rectangle0 = line2D_Float0.getBounds();
      assertEquals((-815.72F), line2D_Float0.x1, 0.01F);
      assertEquals((-815.72F), line2D_Float0.y1, 0.01F);
      assertEquals((-815.72F), line2D_Float0.y2, 0.01F);
      assertEquals((-815.72F), line2D_Float0.x2, 0.01F);
      assertEquals(1, rectangle0.height);
      assertEquals(1, rectangle0.width);
      assertEquals((-816), rectangle0.y);
      assertEquals((-816), rectangle0.x);
      assertEquals((-815.5), rectangle0.getCenterX(), 0.01D);
      assertEquals((-816.0), rectangle0.getMinX(), 0.01D);
      assertEquals((-815.0), rectangle0.getMaxX(), 0.01D);
      assertEquals((-815.5), rectangle0.getCenterY(), 0.01D);
      assertEquals((-815.0), rectangle0.getMaxY(), 0.01D);
      assertEquals((-816.0), rectangle0.getMinY(), 0.01D);
      assertEquals(1.0, rectangle0.getWidth(), 0.01D);
      assertEquals(false, rectangle0.isEmpty());
      assertEquals(1.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=-816,y=-816,width=1,height=1]", rectangle0.toString());
      assertEquals((-816.0), rectangle0.getX(), 0.01D);
      assertEquals((-816.0), rectangle0.getY(), 0.01D);
      assertNotNull(rectangle0);
      
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser();
      assertEquals(true, mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, mockJFileChooser0.isMaximumSizeSet());
      assertEquals(false, mockJFileChooser0.isBackgroundSet());
      assertEquals(false, mockJFileChooser0.isMinimumSizeSet());
      assertEquals(false, mockJFileChooser0.isShowing());
      assertEquals(true, mockJFileChooser0.isVisible());
      assertEquals(4, mockJFileChooser0.getComponentCount());
      assertEquals(false, mockJFileChooser0.isValid());
      assertEquals(false, mockJFileChooser0.isForegroundSet());
      assertEquals(false, mockJFileChooser0.isFontSet());
      assertEquals(false, mockJFileChooser0.isFocusCycleRoot());
      assertEquals(false, mockJFileChooser0.getIgnoreRepaint());
      assertEquals(false, mockJFileChooser0.isPreferredSizeSet());
      assertEquals(false, mockJFileChooser0.isFocusTraversalPolicyProvider());
      assertEquals(4, mockJFileChooser0.countComponents());
      assertEquals(true, mockJFileChooser0.isEnabled());
      assertEquals(false, mockJFileChooser0.isLightweight());
      assertEquals(false, mockJFileChooser0.isDisplayable());
      assertEquals(false, mockJFileChooser0.isFocusTraversalPolicySet());
      assertEquals(false, mockJFileChooser0.isCursorSet());
      assertNotNull(mockJFileChooser0);
      
      Rectangle rectangle1 = mockJFileChooser0.getVisibleRect();
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.width);
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals(true, rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getHeight(), 0.01D);
      assertEquals(0.0, rectangle1.getMinX(), 0.01D);
      assertEquals(0.0, rectangle1.getWidth(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle1.toString());
      assertEquals(0.0, rectangle1.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertEquals(0.0, rectangle1.getX(), 0.01D);
      assertEquals(true, mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, mockJFileChooser0.isMaximumSizeSet());
      assertEquals(false, mockJFileChooser0.isBackgroundSet());
      assertEquals(false, mockJFileChooser0.isMinimumSizeSet());
      assertEquals(false, mockJFileChooser0.isShowing());
      assertEquals(true, mockJFileChooser0.isVisible());
      assertEquals(4, mockJFileChooser0.getComponentCount());
      assertEquals(false, mockJFileChooser0.isValid());
      assertEquals(false, mockJFileChooser0.isForegroundSet());
      assertEquals(false, mockJFileChooser0.isFontSet());
      assertEquals(false, mockJFileChooser0.isFocusCycleRoot());
      assertEquals(false, mockJFileChooser0.getIgnoreRepaint());
      assertEquals(false, mockJFileChooser0.isPreferredSizeSet());
      assertEquals(false, mockJFileChooser0.isFocusTraversalPolicyProvider());
      assertEquals(4, mockJFileChooser0.countComponents());
      assertEquals(true, mockJFileChooser0.isEnabled());
      assertEquals(false, mockJFileChooser0.isLightweight());
      assertEquals(false, mockJFileChooser0.isDisplayable());
      assertEquals(false, mockJFileChooser0.isFocusTraversalPolicySet());
      assertEquals(false, mockJFileChooser0.isCursorSet());
      assertNotSame(rectangle1, rectangle0);
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertNotNull(rectangle1);
      
      boolean boolean0 = ShapeUtilities.intersects((Rectangle2D) rectangle0, (Rectangle2D) rectangle1);
      assertEquals((-815.72F), line2D_Float0.x1, 0.01F);
      assertEquals((-815.72F), line2D_Float0.y1, 0.01F);
      assertEquals((-815.72F), line2D_Float0.y2, 0.01F);
      assertEquals((-815.72F), line2D_Float0.x2, 0.01F);
      assertEquals(1, rectangle0.height);
      assertEquals(1, rectangle0.width);
      assertEquals((-816), rectangle0.y);
      assertEquals((-816), rectangle0.x);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.width);
      assertEquals((-815.5), rectangle0.getCenterX(), 0.01D);
      assertEquals((-816.0), rectangle0.getMinX(), 0.01D);
      assertEquals((-815.0), rectangle0.getMaxX(), 0.01D);
      assertEquals((-815.5), rectangle0.getCenterY(), 0.01D);
      assertEquals((-815.0), rectangle0.getMaxY(), 0.01D);
      assertEquals((-816.0), rectangle0.getMinY(), 0.01D);
      assertEquals(1.0, rectangle0.getWidth(), 0.01D);
      assertEquals(false, rectangle0.isEmpty());
      assertEquals(1.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=-816,y=-816,width=1,height=1]", rectangle0.toString());
      assertEquals((-816.0), rectangle0.getX(), 0.01D);
      assertEquals((-816.0), rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals(true, rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getHeight(), 0.01D);
      assertEquals(0.0, rectangle1.getMinX(), 0.01D);
      assertEquals(0.0, rectangle1.getWidth(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle1.toString());
      assertEquals(0.0, rectangle1.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertEquals(0.0, rectangle1.getX(), 0.01D);
      assertEquals(true, mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, mockJFileChooser0.isMaximumSizeSet());
      assertEquals(false, mockJFileChooser0.isBackgroundSet());
      assertEquals(false, mockJFileChooser0.isMinimumSizeSet());
      assertEquals(false, mockJFileChooser0.isShowing());
      assertEquals(true, mockJFileChooser0.isVisible());
      assertEquals(4, mockJFileChooser0.getComponentCount());
      assertEquals(false, mockJFileChooser0.isValid());
      assertEquals(false, mockJFileChooser0.isForegroundSet());
      assertEquals(false, mockJFileChooser0.isFontSet());
      assertEquals(false, mockJFileChooser0.isFocusCycleRoot());
      assertEquals(false, mockJFileChooser0.getIgnoreRepaint());
      assertEquals(false, mockJFileChooser0.isPreferredSizeSet());
      assertEquals(false, mockJFileChooser0.isFocusTraversalPolicyProvider());
      assertEquals(4, mockJFileChooser0.countComponents());
      assertEquals(true, mockJFileChooser0.isEnabled());
      assertEquals(false, mockJFileChooser0.isLightweight());
      assertEquals(false, mockJFileChooser0.isDisplayable());
      assertEquals(false, mockJFileChooser0.isFocusTraversalPolicySet());
      assertEquals(false, mockJFileChooser0.isCursorSet());
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle1, rectangle0);
      assertFalse(boolean0);
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertFalse(rectangle1.equals((Object)rectangle0));
  }

  @Test
  public void test01()  throws Throwable  {
      Component component0 = null;
      EtchedBorder etchedBorder0 = new EtchedBorder();
      assertNotNull(etchedBorder0);
      
      int int0 = 1283;
      int int1 = (-624);
      Rectangle rectangle0 = AbstractBorder.getInteriorRectangle(component0, (Border) etchedBorder0, int0, int0, int0, int1);
      assertEquals((-628), rectangle0.height);
      assertEquals(1285, rectangle0.y);
      assertEquals(1285, rectangle0.x);
      assertEquals(1279, rectangle0.width);
      assertEquals(1279.0, rectangle0.getWidth(), 0.01D);
      assertEquals(1924.5, rectangle0.getCenterX(), 0.01D);
      assertEquals(1285.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(1285.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=1285,y=1285,width=1279,height=-628]", rectangle0.toString());
      assertEquals(971.0, rectangle0.getCenterY(), 0.01D);
      assertEquals((-628.0), rectangle0.getHeight(), 0.01D);
      assertEquals(1285.0, rectangle0.getY(), 0.01D);
      assertEquals(657.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(1285.0, rectangle0.getX(), 0.01D);
      assertEquals(2564.0, rectangle0.getMaxX(), 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(rectangle0);
      
      boolean boolean0 = ShapeUtilities.intersects((Rectangle2D) rectangle0, (Rectangle2D) rectangle0);
      assertEquals((-628), rectangle0.height);
      assertEquals(1285, rectangle0.y);
      assertEquals(1285, rectangle0.x);
      assertEquals(1279, rectangle0.width);
      assertEquals(1279.0, rectangle0.getWidth(), 0.01D);
      assertEquals(1924.5, rectangle0.getCenterX(), 0.01D);
      assertEquals(1285.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(1285.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=1285,y=1285,width=1279,height=-628]", rectangle0.toString());
      assertEquals(971.0, rectangle0.getCenterY(), 0.01D);
      assertEquals((-628.0), rectangle0.getHeight(), 0.01D);
      assertEquals(1285.0, rectangle0.getY(), 0.01D);
      assertEquals(657.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(1285.0, rectangle0.getX(), 0.01D);
      assertEquals(2564.0, rectangle0.getMaxX(), 0.01D);
      assertFalse(boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test02()  throws Throwable  {
      Component component0 = null;
      EtchedBorder etchedBorder0 = new EtchedBorder();
      assertNotNull(etchedBorder0);
      
      int int0 = 1283;
      Rectangle rectangle0 = AbstractBorder.getInteriorRectangle(component0, (Border) etchedBorder0, int0, int0, int0, int0);
      assertEquals(1279, rectangle0.height);
      assertEquals(1279, rectangle0.width);
      assertEquals(1285, rectangle0.x);
      assertEquals(1285, rectangle0.y);
      assertEquals(1285.0, rectangle0.getY(), 0.01D);
      assertEquals(1924.5, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=1285,y=1285,width=1279,height=1279]", rectangle0.toString());
      assertEquals(1285.0, rectangle0.getX(), 0.01D);
      assertEquals(1924.5, rectangle0.getCenterY(), 0.01D);
      assertEquals(1279.0, rectangle0.getWidth(), 0.01D);
      assertEquals(1285.0, rectangle0.getMinX(), 0.01D);
      assertEquals(1285.0, rectangle0.getMinY(), 0.01D);
      assertEquals(1279.0, rectangle0.getHeight(), 0.01D);
      assertEquals(2564.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(false, rectangle0.isEmpty());
      assertEquals(2564.0, rectangle0.getMaxY(), 0.01D);
      assertNotNull(rectangle0);
      
      boolean boolean0 = ShapeUtilities.intersects((Rectangle2D) rectangle0, (Rectangle2D) rectangle0);
      assertEquals(1279, rectangle0.height);
      assertEquals(1279, rectangle0.width);
      assertEquals(1285, rectangle0.x);
      assertEquals(1285, rectangle0.y);
      assertEquals(1285.0, rectangle0.getY(), 0.01D);
      assertEquals(1924.5, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=1285,y=1285,width=1279,height=1279]", rectangle0.toString());
      assertEquals(1285.0, rectangle0.getX(), 0.01D);
      assertEquals(1924.5, rectangle0.getCenterY(), 0.01D);
      assertEquals(1279.0, rectangle0.getWidth(), 0.01D);
      assertEquals(1285.0, rectangle0.getMinX(), 0.01D);
      assertEquals(1285.0, rectangle0.getMinY(), 0.01D);
      assertEquals(1279.0, rectangle0.getHeight(), 0.01D);
      assertEquals(2564.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(false, rectangle0.isEmpty());
      assertEquals(2564.0, rectangle0.getMaxY(), 0.01D);
      assertTrue(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertEquals(0, jDesktopPane0.getComponentCount());
      assertEquals(true, jDesktopPane0.isEnabled());
      assertEquals(false, jDesktopPane0.isMinimumSizeSet());
      assertEquals(true, jDesktopPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jDesktopPane0.isMaximumSizeSet());
      assertEquals(false, jDesktopPane0.isPreferredSizeSet());
      assertEquals(false, jDesktopPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jDesktopPane0.isForegroundSet());
      assertEquals(true, jDesktopPane0.isVisible());
      assertEquals(false, jDesktopPane0.isValid());
      assertEquals(false, jDesktopPane0.isCursorSet());
      assertEquals(true, jDesktopPane0.isFocusTraversalPolicySet());
      assertEquals(false, jDesktopPane0.isDisplayable());
      assertEquals(false, jDesktopPane0.isFontSet());
      assertEquals(false, jDesktopPane0.getIgnoreRepaint());
      assertEquals(false, jDesktopPane0.isLightweight());
      assertEquals(false, jDesktopPane0.isShowing());
      assertEquals(true, jDesktopPane0.isBackgroundSet());
      assertEquals(true, jDesktopPane0.isFocusCycleRoot());
      assertEquals(0, jDesktopPane0.countComponents());
      assertNotNull(jDesktopPane0);
      
      JRootPane jRootPane0 = jDesktopPane0.getRootPane();
      assertEquals(0, jDesktopPane0.getComponentCount());
      assertEquals(true, jDesktopPane0.isEnabled());
      assertEquals(false, jDesktopPane0.isMinimumSizeSet());
      assertEquals(true, jDesktopPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jDesktopPane0.isMaximumSizeSet());
      assertEquals(false, jDesktopPane0.isPreferredSizeSet());
      assertEquals(false, jDesktopPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jDesktopPane0.isForegroundSet());
      assertEquals(true, jDesktopPane0.isVisible());
      assertEquals(false, jDesktopPane0.isValid());
      assertEquals(false, jDesktopPane0.isCursorSet());
      assertEquals(true, jDesktopPane0.isFocusTraversalPolicySet());
      assertEquals(false, jDesktopPane0.isDisplayable());
      assertEquals(false, jDesktopPane0.isFontSet());
      assertEquals(false, jDesktopPane0.getIgnoreRepaint());
      assertEquals(false, jDesktopPane0.isLightweight());
      assertEquals(false, jDesktopPane0.isShowing());
      assertEquals(true, jDesktopPane0.isBackgroundSet());
      assertEquals(true, jDesktopPane0.isFocusCycleRoot());
      assertEquals(0, jDesktopPane0.countComponents());
      assertNull(jRootPane0);
      
      JScrollPane jScrollPane0 = new JScrollPane((Component) jRootPane0);
      assertEquals(0, jDesktopPane0.getComponentCount());
      assertEquals(true, jDesktopPane0.isEnabled());
      assertEquals(false, jDesktopPane0.isMinimumSizeSet());
      assertEquals(true, jDesktopPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jDesktopPane0.isMaximumSizeSet());
      assertEquals(false, jDesktopPane0.isPreferredSizeSet());
      assertEquals(false, jDesktopPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jDesktopPane0.isForegroundSet());
      assertEquals(true, jDesktopPane0.isVisible());
      assertEquals(false, jDesktopPane0.isValid());
      assertEquals(false, jDesktopPane0.isCursorSet());
      assertEquals(true, jDesktopPane0.isFocusTraversalPolicySet());
      assertEquals(false, jDesktopPane0.isDisplayable());
      assertEquals(false, jDesktopPane0.isFontSet());
      assertEquals(false, jDesktopPane0.getIgnoreRepaint());
      assertEquals(false, jDesktopPane0.isLightweight());
      assertEquals(false, jDesktopPane0.isShowing());
      assertEquals(true, jDesktopPane0.isBackgroundSet());
      assertEquals(true, jDesktopPane0.isFocusCycleRoot());
      assertEquals(0, jDesktopPane0.countComponents());
      assertEquals(true, jScrollPane0.isVisible());
      assertEquals(true, jScrollPane0.isEnabled());
      assertEquals(false, jScrollPane0.isLightweight());
      assertEquals(false, jScrollPane0.isMinimumSizeSet());
      assertEquals(true, jScrollPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jScrollPane0.getIgnoreRepaint());
      assertEquals(false, jScrollPane0.isPreferredSizeSet());
      assertEquals(false, jScrollPane0.isMaximumSizeSet());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicySet());
      assertEquals(false, jScrollPane0.isFocusCycleRoot());
      assertEquals(3, jScrollPane0.getComponentCount());
      assertEquals(true, jScrollPane0.isFontSet());
      assertEquals(false, jScrollPane0.isDisplayable());
      assertEquals(3, jScrollPane0.countComponents());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jScrollPane0.isValid());
      assertEquals(true, jScrollPane0.isForegroundSet());
      assertEquals(false, jScrollPane0.isShowing());
      assertEquals(true, jScrollPane0.isBackgroundSet());
      assertEquals(false, jScrollPane0.isCursorSet());
      assertNotNull(jScrollPane0);
      
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      assertEquals((-3), rectangle0.height);
      assertEquals(1, rectangle0.y);
      assertEquals(1, rectangle0.x);
      assertEquals((-3), rectangle0.width);
      assertEquals(0, jDesktopPane0.getComponentCount());
      assertEquals(true, jDesktopPane0.isEnabled());
      assertEquals(false, jDesktopPane0.isMinimumSizeSet());
      assertEquals(true, jDesktopPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jDesktopPane0.isMaximumSizeSet());
      assertEquals(false, jDesktopPane0.isPreferredSizeSet());
      assertEquals(false, jDesktopPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jDesktopPane0.isForegroundSet());
      assertEquals(true, jDesktopPane0.isVisible());
      assertEquals(false, jDesktopPane0.isValid());
      assertEquals(false, jDesktopPane0.isCursorSet());
      assertEquals(true, jDesktopPane0.isFocusTraversalPolicySet());
      assertEquals(false, jDesktopPane0.isDisplayable());
      assertEquals(false, jDesktopPane0.isFontSet());
      assertEquals(false, jDesktopPane0.getIgnoreRepaint());
      assertEquals(false, jDesktopPane0.isLightweight());
      assertEquals(false, jDesktopPane0.isShowing());
      assertEquals(true, jDesktopPane0.isBackgroundSet());
      assertEquals(true, jDesktopPane0.isFocusCycleRoot());
      assertEquals(0, jDesktopPane0.countComponents());
      assertEquals(true, jScrollPane0.isVisible());
      assertEquals(true, jScrollPane0.isEnabled());
      assertEquals(false, jScrollPane0.isLightweight());
      assertEquals(false, jScrollPane0.isMinimumSizeSet());
      assertEquals(true, jScrollPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jScrollPane0.getIgnoreRepaint());
      assertEquals(false, jScrollPane0.isPreferredSizeSet());
      assertEquals(false, jScrollPane0.isMaximumSizeSet());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicySet());
      assertEquals(false, jScrollPane0.isFocusCycleRoot());
      assertEquals(3, jScrollPane0.getComponentCount());
      assertEquals(true, jScrollPane0.isFontSet());
      assertEquals(false, jScrollPane0.isDisplayable());
      assertEquals(3, jScrollPane0.countComponents());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jScrollPane0.isValid());
      assertEquals(true, jScrollPane0.isForegroundSet());
      assertEquals(false, jScrollPane0.isShowing());
      assertEquals(true, jScrollPane0.isBackgroundSet());
      assertEquals(false, jScrollPane0.isCursorSet());
      assertEquals((-2.0), rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=1,y=1,width=-3,height=-3]", rectangle0.toString());
      assertEquals((-2.0), rectangle0.getMaxY(), 0.01D);
      assertEquals(1.0, rectangle0.getX(), 0.01D);
      assertEquals(1.0, rectangle0.getMinY(), 0.01D);
      assertEquals(1.0, rectangle0.getY(), 0.01D);
      assertEquals(1.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals((-0.5), rectangle0.getCenterX(), 0.01D);
      assertEquals((-3.0), rectangle0.getWidth(), 0.01D);
      assertEquals((-0.5), rectangle0.getCenterY(), 0.01D);
      assertEquals((-3.0), rectangle0.getHeight(), 0.01D);
      assertNotNull(rectangle0);
      
      boolean boolean0 = ShapeUtilities.intersects((Rectangle2D) rectangle0, (Rectangle2D) rectangle0);
      assertEquals((-3), rectangle0.height);
      assertEquals(1, rectangle0.y);
      assertEquals(1, rectangle0.x);
      assertEquals((-3), rectangle0.width);
      assertEquals(0, jDesktopPane0.getComponentCount());
      assertEquals(true, jDesktopPane0.isEnabled());
      assertEquals(false, jDesktopPane0.isMinimumSizeSet());
      assertEquals(true, jDesktopPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jDesktopPane0.isMaximumSizeSet());
      assertEquals(false, jDesktopPane0.isPreferredSizeSet());
      assertEquals(false, jDesktopPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jDesktopPane0.isForegroundSet());
      assertEquals(true, jDesktopPane0.isVisible());
      assertEquals(false, jDesktopPane0.isValid());
      assertEquals(false, jDesktopPane0.isCursorSet());
      assertEquals(true, jDesktopPane0.isFocusTraversalPolicySet());
      assertEquals(false, jDesktopPane0.isDisplayable());
      assertEquals(false, jDesktopPane0.isFontSet());
      assertEquals(false, jDesktopPane0.getIgnoreRepaint());
      assertEquals(false, jDesktopPane0.isLightweight());
      assertEquals(false, jDesktopPane0.isShowing());
      assertEquals(true, jDesktopPane0.isBackgroundSet());
      assertEquals(true, jDesktopPane0.isFocusCycleRoot());
      assertEquals(0, jDesktopPane0.countComponents());
      assertEquals(true, jScrollPane0.isVisible());
      assertEquals(true, jScrollPane0.isEnabled());
      assertEquals(false, jScrollPane0.isLightweight());
      assertEquals(false, jScrollPane0.isMinimumSizeSet());
      assertEquals(true, jScrollPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jScrollPane0.getIgnoreRepaint());
      assertEquals(false, jScrollPane0.isPreferredSizeSet());
      assertEquals(false, jScrollPane0.isMaximumSizeSet());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicySet());
      assertEquals(false, jScrollPane0.isFocusCycleRoot());
      assertEquals(3, jScrollPane0.getComponentCount());
      assertEquals(true, jScrollPane0.isFontSet());
      assertEquals(false, jScrollPane0.isDisplayable());
      assertEquals(3, jScrollPane0.countComponents());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jScrollPane0.isValid());
      assertEquals(true, jScrollPane0.isForegroundSet());
      assertEquals(false, jScrollPane0.isShowing());
      assertEquals(true, jScrollPane0.isBackgroundSet());
      assertEquals(false, jScrollPane0.isCursorSet());
      assertEquals((-2.0), rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=1,y=1,width=-3,height=-3]", rectangle0.toString());
      assertEquals((-2.0), rectangle0.getMaxY(), 0.01D);
      assertEquals(1.0, rectangle0.getX(), 0.01D);
      assertEquals(1.0, rectangle0.getMinY(), 0.01D);
      assertEquals(1.0, rectangle0.getY(), 0.01D);
      assertEquals(1.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals((-0.5), rectangle0.getCenterX(), 0.01D);
      assertEquals((-3.0), rectangle0.getWidth(), 0.01D);
      assertEquals((-0.5), rectangle0.getCenterY(), 0.01D);
      assertEquals((-3.0), rectangle0.getHeight(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertNotNull(defaultListCellRenderer_UIResource0);
      
      Rectangle rectangle0 = defaultListCellRenderer_UIResource0.getVisibleRect();
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertNotNull(rectangle0);
      
      boolean boolean0 = ShapeUtilities.contains((Rectangle2D) rectangle0, (Rectangle2D) rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertTrue(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 1795;
      double double0 = 0.0;
      Line2D.Double line2D_Double0 = new Line2D.Double((double) int0, (double) int0, double0, (double) int0);
      assertEquals(1795.0, line2D_Double0.y2, 0.01D);
      assertEquals(1795.0, line2D_Double0.x1, 0.01D);
      assertEquals(1795.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertNotNull(line2D_Double0);
      
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createLineRegion((Line2D) line2D_Double0, (float) int0);
      assertEquals(1795.0, line2D_Double0.y2, 0.01D);
      assertEquals(1795.0, line2D_Double0.x1, 0.01D);
      assertEquals(1795.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
  }

  @Test
  public void test06()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertNotNull(line2D_Float0);
      
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createLineRegion((Line2D) line2D_Float0, line2D_Float0.y1);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
  }

  @Test
  public void test07()  throws Throwable  {
      Shape shape0 = null;
      double double0 = (-2987.0);
      float float0 = 1.0F;
      Shape shape1 = ShapeUtilities.rotateShape(shape0, double0, float0, float0);
      assertNull(shape1);
  }

  @Test
  public void test08()  throws Throwable  {
      float float0 = 525.21313F;
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Path2D.Double path2D_Double0 = (Path2D.Double)ShapeUtilities.rotateShape((Shape) polygon0, (double) float0, float0, float0);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, path2D_Double0.getWindingRule());
      assertNotNull(path2D_Double0);
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = (-1571.752652019281);
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertNotNull(ellipse2D_Float0);
      
      Line2D.Double line2D_Double0 = new Line2D.Double(double0, double0, (double) ellipse2D_Float0.width, (double) ellipse2D_Float0.height);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals((-1571.752652019281), line2D_Double0.y1, 0.01D);
      assertEquals((-1571.752652019281), line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertNotNull(line2D_Double0);
      
      RectangleAnchor rectangleAnchor0 = null;
      // Undeclared exception!
      try {
        Shape shape0 = ShapeUtilities.createTranslatedShape((Shape) line2D_Double0, rectangleAnchor0, line2D_Double0.x2, (double) ellipse2D_Float0.height);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' argument.
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      assertNotNull(defaultStyledDocument0);
      
      int int0 = (-2033);
      AbstractDocument.BranchElement abstractDocument_BranchElement0 = (AbstractDocument.BranchElement)defaultStyledDocument0.getParagraphElement(int0);
      assertNotNull(abstractDocument_BranchElement0);
      
      LabelView labelView0 = new LabelView((Element) abstractDocument_BranchElement0);
      assertNotNull(labelView0);
      
      Canvas canvas0 = new Canvas();
      assertEquals(false, canvas0.isDoubleBuffered());
      assertEquals(true, canvas0.getFocusTraversalKeysEnabled());
      assertEquals(0.5F, canvas0.getAlignmentY(), 0.01F);
      assertEquals(false, canvas0.getIgnoreRepaint());
      assertEquals(0, canvas0.getY());
      assertEquals(0, canvas0.getHeight());
      assertEquals(0, canvas0.getX());
      assertEquals(false, canvas0.isPreferredSizeSet());
      assertEquals(false, canvas0.isFontSet());
      assertEquals(0.5F, canvas0.getAlignmentX(), 0.01F);
      assertEquals(false, canvas0.isOpaque());
      assertEquals(false, canvas0.isMaximumSizeSet());
      assertEquals(false, canvas0.isDisplayable());
      assertEquals(false, canvas0.isLightweight());
      assertEquals(false, canvas0.isMinimumSizeSet());
      assertEquals(false, canvas0.isShowing());
      assertEquals(true, canvas0.isVisible());
      assertEquals(false, canvas0.isValid());
      assertEquals(false, canvas0.isCursorSet());
      assertEquals(true, canvas0.isEnabled());
      assertEquals(0, canvas0.getWidth());
      assertEquals(false, canvas0.isForegroundSet());
      assertEquals(false, canvas0.isBackgroundSet());
      assertEquals(Component.BaselineResizeBehavior.OTHER, canvas0.getBaselineResizeBehavior());
      assertNotNull(canvas0);
      
      Rectangle rectangle0 = canvas0.bounds();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(false, canvas0.isDoubleBuffered());
      assertEquals(true, canvas0.getFocusTraversalKeysEnabled());
      assertEquals(0.5F, canvas0.getAlignmentY(), 0.01F);
      assertEquals(false, canvas0.getIgnoreRepaint());
      assertEquals(0, canvas0.getY());
      assertEquals(0, canvas0.getHeight());
      assertEquals(0, canvas0.getX());
      assertEquals(false, canvas0.isPreferredSizeSet());
      assertEquals(false, canvas0.isFontSet());
      assertEquals(0.5F, canvas0.getAlignmentX(), 0.01F);
      assertEquals(false, canvas0.isOpaque());
      assertEquals(false, canvas0.isMaximumSizeSet());
      assertEquals(false, canvas0.isDisplayable());
      assertEquals(false, canvas0.isLightweight());
      assertEquals(false, canvas0.isMinimumSizeSet());
      assertEquals(false, canvas0.isShowing());
      assertEquals(true, canvas0.isVisible());
      assertEquals(false, canvas0.isValid());
      assertEquals(false, canvas0.isCursorSet());
      assertEquals(true, canvas0.isEnabled());
      assertEquals(0, canvas0.getWidth());
      assertEquals(false, canvas0.isForegroundSet());
      assertEquals(false, canvas0.isBackgroundSet());
      assertEquals(Component.BaselineResizeBehavior.OTHER, canvas0.getBaselineResizeBehavior());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertNotNull(rectangle0);
      
      Shape shape0 = labelView0.getChildAllocation(int0, (Shape) rectangle0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(false, canvas0.isDoubleBuffered());
      assertEquals(true, canvas0.getFocusTraversalKeysEnabled());
      assertEquals(0.5F, canvas0.getAlignmentY(), 0.01F);
      assertEquals(false, canvas0.getIgnoreRepaint());
      assertEquals(0, canvas0.getY());
      assertEquals(0, canvas0.getHeight());
      assertEquals(0, canvas0.getX());
      assertEquals(false, canvas0.isPreferredSizeSet());
      assertEquals(false, canvas0.isFontSet());
      assertEquals(0.5F, canvas0.getAlignmentX(), 0.01F);
      assertEquals(false, canvas0.isOpaque());
      assertEquals(false, canvas0.isMaximumSizeSet());
      assertEquals(false, canvas0.isDisplayable());
      assertEquals(false, canvas0.isLightweight());
      assertEquals(false, canvas0.isMinimumSizeSet());
      assertEquals(false, canvas0.isShowing());
      assertEquals(true, canvas0.isVisible());
      assertEquals(false, canvas0.isValid());
      assertEquals(false, canvas0.isCursorSet());
      assertEquals(true, canvas0.isEnabled());
      assertEquals(0, canvas0.getWidth());
      assertEquals(false, canvas0.isForegroundSet());
      assertEquals(false, canvas0.isBackgroundSet());
      assertEquals(Component.BaselineResizeBehavior.OTHER, canvas0.getBaselineResizeBehavior());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertNull(shape0);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      assertEquals("RectangleAnchor.RIGHT", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      // Undeclared exception!
      try {
        Shape shape1 = ShapeUtilities.createTranslatedShape(shape0, rectangleAnchor0, (double) rectangle0.height, (double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertNotNull(line2D_Double0);
      
      JSpinner jSpinner0 = new JSpinner();
      assertEquals(false, jSpinner0.isFocusCycleRoot());
      assertEquals(true, jSpinner0.isBackgroundSet());
      assertEquals(true, jSpinner0.isFontSet());
      assertEquals(false, jSpinner0.isPreferredSizeSet());
      assertEquals(false, jSpinner0.isDisplayable());
      assertEquals(false, jSpinner0.isFocusTraversalPolicySet());
      assertEquals(false, jSpinner0.isMaximumSizeSet());
      assertEquals(false, jSpinner0.isMinimumSizeSet());
      assertEquals(true, jSpinner0.isForegroundSet());
      assertEquals(3, jSpinner0.countComponents());
      assertEquals(true, jSpinner0.isEnabled());
      assertEquals(false, jSpinner0.isValid());
      assertEquals(true, jSpinner0.isVisible());
      assertEquals(true, jSpinner0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSpinner0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSpinner0.getIgnoreRepaint());
      assertEquals(3, jSpinner0.getComponentCount());
      assertEquals(false, jSpinner0.isShowing());
      assertEquals(false, jSpinner0.isLightweight());
      assertEquals(false, jSpinner0.isCursorSet());
      assertNotNull(jSpinner0);
      
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      assertEquals(false, jSpinner0.isFocusCycleRoot());
      assertEquals(true, jSpinner0.isBackgroundSet());
      assertEquals(true, jSpinner0.isFontSet());
      assertEquals(false, jSpinner0.isPreferredSizeSet());
      assertEquals(false, jSpinner0.isDisplayable());
      assertEquals(false, jSpinner0.isFocusTraversalPolicySet());
      assertEquals(false, jSpinner0.isMaximumSizeSet());
      assertEquals(false, jSpinner0.isMinimumSizeSet());
      assertEquals(true, jSpinner0.isForegroundSet());
      assertEquals(3, jSpinner0.countComponents());
      assertEquals(true, jSpinner0.isEnabled());
      assertEquals(false, jSpinner0.isValid());
      assertEquals(true, jSpinner0.isVisible());
      assertEquals(true, jSpinner0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSpinner0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSpinner0.getIgnoreRepaint());
      assertEquals(3, jSpinner0.getComponentCount());
      assertEquals(false, jSpinner0.isShowing());
      assertEquals(false, jSpinner0.isLightweight());
      assertEquals(false, jSpinner0.isCursorSet());
      assertEquals(1, jSpinner_NumberEditor0.countComponents());
      assertEquals(false, jSpinner_NumberEditor0.isDisplayable());
      assertEquals(false, jSpinner_NumberEditor0.isMinimumSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.isPreferredSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.getIgnoreRepaint());
      assertEquals(false, jSpinner_NumberEditor0.isCursorSet());
      assertEquals(false, jSpinner_NumberEditor0.isValid());
      assertEquals(false, jSpinner_NumberEditor0.isMaximumSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.isFocusCycleRoot());
      assertEquals(true, jSpinner_NumberEditor0.isEnabled());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicyProvider());
      assertEquals(true, jSpinner_NumberEditor0.isVisible());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicySet());
      assertEquals(true, jSpinner_NumberEditor0.isBackgroundSet());
      assertEquals(true, jSpinner_NumberEditor0.isForegroundSet());
      assertEquals(true, jSpinner_NumberEditor0.getFocusTraversalKeysEnabled());
      assertEquals(1, jSpinner_NumberEditor0.getComponentCount());
      assertEquals(false, jSpinner_NumberEditor0.isShowing());
      assertEquals(true, jSpinner_NumberEditor0.isFontSet());
      assertEquals(false, jSpinner_NumberEditor0.isLightweight());
      assertNotNull(jSpinner_NumberEditor0);
      
      Point point0 = jSpinner_NumberEditor0.location();
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(false, jSpinner0.isFocusCycleRoot());
      assertEquals(true, jSpinner0.isBackgroundSet());
      assertEquals(true, jSpinner0.isFontSet());
      assertEquals(false, jSpinner0.isPreferredSizeSet());
      assertEquals(false, jSpinner0.isDisplayable());
      assertEquals(false, jSpinner0.isFocusTraversalPolicySet());
      assertEquals(false, jSpinner0.isMaximumSizeSet());
      assertEquals(false, jSpinner0.isMinimumSizeSet());
      assertEquals(true, jSpinner0.isForegroundSet());
      assertEquals(3, jSpinner0.countComponents());
      assertEquals(true, jSpinner0.isEnabled());
      assertEquals(false, jSpinner0.isValid());
      assertEquals(true, jSpinner0.isVisible());
      assertEquals(true, jSpinner0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSpinner0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSpinner0.getIgnoreRepaint());
      assertEquals(3, jSpinner0.getComponentCount());
      assertEquals(false, jSpinner0.isShowing());
      assertEquals(false, jSpinner0.isLightweight());
      assertEquals(false, jSpinner0.isCursorSet());
      assertEquals(1, jSpinner_NumberEditor0.countComponents());
      assertEquals(false, jSpinner_NumberEditor0.isDisplayable());
      assertEquals(false, jSpinner_NumberEditor0.isMinimumSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.isPreferredSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.getIgnoreRepaint());
      assertEquals(false, jSpinner_NumberEditor0.isCursorSet());
      assertEquals(false, jSpinner_NumberEditor0.isValid());
      assertEquals(false, jSpinner_NumberEditor0.isMaximumSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.isFocusCycleRoot());
      assertEquals(true, jSpinner_NumberEditor0.isEnabled());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicyProvider());
      assertEquals(true, jSpinner_NumberEditor0.isVisible());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicySet());
      assertEquals(true, jSpinner_NumberEditor0.isBackgroundSet());
      assertEquals(true, jSpinner_NumberEditor0.isForegroundSet());
      assertEquals(true, jSpinner_NumberEditor0.getFocusTraversalKeysEnabled());
      assertEquals(1, jSpinner_NumberEditor0.getComponentCount());
      assertEquals(false, jSpinner_NumberEditor0.isShowing());
      assertEquals(true, jSpinner_NumberEditor0.isFontSet());
      assertEquals(false, jSpinner_NumberEditor0.isLightweight());
      assertNotNull(point0);
      
      Box box0 = Box.createVerticalBox();
      assertEquals(0, box0.getComponentCount());
      assertEquals(false, box0.isPreferredSizeSet());
      assertEquals(false, box0.isMinimumSizeSet());
      assertEquals(false, box0.isCursorSet());
      assertEquals(false, box0.getIgnoreRepaint());
      assertEquals(false, box0.isFocusTraversalPolicyProvider());
      assertEquals(true, box0.isEnabled());
      assertEquals(false, box0.isDisplayable());
      assertEquals(false, box0.isForegroundSet());
      assertEquals(false, box0.isBackgroundSet());
      assertEquals(false, box0.isShowing());
      assertEquals(false, box0.isValid());
      assertEquals(false, box0.isFontSet());
      assertEquals(true, box0.getFocusTraversalKeysEnabled());
      assertEquals(true, box0.isVisible());
      assertEquals(0, box0.countComponents());
      assertEquals(false, box0.isFocusCycleRoot());
      assertEquals(false, box0.isFocusTraversalPolicySet());
      assertEquals(false, box0.isLightweight());
      assertEquals(false, box0.isMaximumSizeSet());
      assertNotNull(box0);
      
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertNotNull(arc2D_Float0);
      
      Rectangle rectangle0 = box0.getVisibleRect();
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0, box0.getComponentCount());
      assertEquals(false, box0.isPreferredSizeSet());
      assertEquals(false, box0.isMinimumSizeSet());
      assertEquals(false, box0.isCursorSet());
      assertEquals(false, box0.getIgnoreRepaint());
      assertEquals(false, box0.isFocusTraversalPolicyProvider());
      assertEquals(true, box0.isEnabled());
      assertEquals(false, box0.isDisplayable());
      assertEquals(false, box0.isForegroundSet());
      assertEquals(false, box0.isBackgroundSet());
      assertEquals(false, box0.isShowing());
      assertEquals(false, box0.isValid());
      assertEquals(false, box0.isFontSet());
      assertEquals(true, box0.getFocusTraversalKeysEnabled());
      assertEquals(true, box0.isVisible());
      assertEquals(0, box0.countComponents());
      assertEquals(false, box0.isFocusCycleRoot());
      assertEquals(false, box0.isFocusTraversalPolicySet());
      assertEquals(false, box0.isLightweight());
      assertEquals(false, box0.isMaximumSizeSet());
      assertNotNull(rectangle0);
      
      Arc2D.Double arc2D_Double0 = new Arc2D.Double((double) rectangle0.y, line2D_Double0.x2, (double) rectangle0.x, (double) point0.y, (double) point0.y, (double) rectangle0.x, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0, box0.getComponentCount());
      assertEquals(false, box0.isPreferredSizeSet());
      assertEquals(false, box0.isMinimumSizeSet());
      assertEquals(false, box0.isCursorSet());
      assertEquals(false, box0.getIgnoreRepaint());
      assertEquals(false, box0.isFocusTraversalPolicyProvider());
      assertEquals(true, box0.isEnabled());
      assertEquals(false, box0.isDisplayable());
      assertEquals(false, box0.isForegroundSet());
      assertEquals(false, box0.isBackgroundSet());
      assertEquals(false, box0.isShowing());
      assertEquals(false, box0.isValid());
      assertEquals(false, box0.isFontSet());
      assertEquals(true, box0.getFocusTraversalKeysEnabled());
      assertEquals(true, box0.isVisible());
      assertEquals(0, box0.countComponents());
      assertEquals(false, box0.isFocusCycleRoot());
      assertEquals(false, box0.isFocusTraversalPolicySet());
      assertEquals(false, box0.isLightweight());
      assertEquals(false, box0.isMaximumSizeSet());
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(false, jSpinner0.isFocusCycleRoot());
      assertEquals(true, jSpinner0.isBackgroundSet());
      assertEquals(true, jSpinner0.isFontSet());
      assertEquals(false, jSpinner0.isPreferredSizeSet());
      assertEquals(false, jSpinner0.isDisplayable());
      assertEquals(false, jSpinner0.isFocusTraversalPolicySet());
      assertEquals(false, jSpinner0.isMaximumSizeSet());
      assertEquals(false, jSpinner0.isMinimumSizeSet());
      assertEquals(true, jSpinner0.isForegroundSet());
      assertEquals(3, jSpinner0.countComponents());
      assertEquals(true, jSpinner0.isEnabled());
      assertEquals(false, jSpinner0.isValid());
      assertEquals(true, jSpinner0.isVisible());
      assertEquals(true, jSpinner0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSpinner0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSpinner0.getIgnoreRepaint());
      assertEquals(3, jSpinner0.getComponentCount());
      assertEquals(false, jSpinner0.isShowing());
      assertEquals(false, jSpinner0.isLightweight());
      assertEquals(false, jSpinner0.isCursorSet());
      assertEquals(1, jSpinner_NumberEditor0.countComponents());
      assertEquals(false, jSpinner_NumberEditor0.isDisplayable());
      assertEquals(false, jSpinner_NumberEditor0.isMinimumSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.isPreferredSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.getIgnoreRepaint());
      assertEquals(false, jSpinner_NumberEditor0.isCursorSet());
      assertEquals(false, jSpinner_NumberEditor0.isValid());
      assertEquals(false, jSpinner_NumberEditor0.isMaximumSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.isFocusCycleRoot());
      assertEquals(true, jSpinner_NumberEditor0.isEnabled());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicyProvider());
      assertEquals(true, jSpinner_NumberEditor0.isVisible());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicySet());
      assertEquals(true, jSpinner_NumberEditor0.isBackgroundSet());
      assertEquals(true, jSpinner_NumberEditor0.isForegroundSet());
      assertEquals(true, jSpinner_NumberEditor0.getFocusTraversalKeysEnabled());
      assertEquals(1, jSpinner_NumberEditor0.getComponentCount());
      assertEquals(false, jSpinner_NumberEditor0.isShowing());
      assertEquals(true, jSpinner_NumberEditor0.isFontSet());
      assertEquals(false, jSpinner_NumberEditor0.isLightweight());
      assertNotNull(arc2D_Double0);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      assertEquals("RectangleAnchor.TOP_LEFT", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      Path2D.Double path2D_Double0 = (Path2D.Double)ShapeUtilities.createTranslatedShape((Shape) arc2D_Double0, rectangleAnchor0, (double) arc2D_Float0.extent, line2D_Double0.x2);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0, box0.getComponentCount());
      assertEquals(false, box0.isPreferredSizeSet());
      assertEquals(false, box0.isMinimumSizeSet());
      assertEquals(false, box0.isCursorSet());
      assertEquals(false, box0.getIgnoreRepaint());
      assertEquals(false, box0.isFocusTraversalPolicyProvider());
      assertEquals(true, box0.isEnabled());
      assertEquals(false, box0.isDisplayable());
      assertEquals(false, box0.isForegroundSet());
      assertEquals(false, box0.isBackgroundSet());
      assertEquals(false, box0.isShowing());
      assertEquals(false, box0.isValid());
      assertEquals(false, box0.isFontSet());
      assertEquals(true, box0.getFocusTraversalKeysEnabled());
      assertEquals(true, box0.isVisible());
      assertEquals(0, box0.countComponents());
      assertEquals(false, box0.isFocusCycleRoot());
      assertEquals(false, box0.isFocusTraversalPolicySet());
      assertEquals(false, box0.isLightweight());
      assertEquals(false, box0.isMaximumSizeSet());
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(1, path2D_Double0.getWindingRule());
      assertEquals("RectangleAnchor.TOP_LEFT", rectangleAnchor0.toString());
      assertEquals(false, jSpinner0.isFocusCycleRoot());
      assertEquals(true, jSpinner0.isBackgroundSet());
      assertEquals(true, jSpinner0.isFontSet());
      assertEquals(false, jSpinner0.isPreferredSizeSet());
      assertEquals(false, jSpinner0.isDisplayable());
      assertEquals(false, jSpinner0.isFocusTraversalPolicySet());
      assertEquals(false, jSpinner0.isMaximumSizeSet());
      assertEquals(false, jSpinner0.isMinimumSizeSet());
      assertEquals(true, jSpinner0.isForegroundSet());
      assertEquals(3, jSpinner0.countComponents());
      assertEquals(true, jSpinner0.isEnabled());
      assertEquals(false, jSpinner0.isValid());
      assertEquals(true, jSpinner0.isVisible());
      assertEquals(true, jSpinner0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSpinner0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSpinner0.getIgnoreRepaint());
      assertEquals(3, jSpinner0.getComponentCount());
      assertEquals(false, jSpinner0.isShowing());
      assertEquals(false, jSpinner0.isLightweight());
      assertEquals(false, jSpinner0.isCursorSet());
      assertEquals(1, jSpinner_NumberEditor0.countComponents());
      assertEquals(false, jSpinner_NumberEditor0.isDisplayable());
      assertEquals(false, jSpinner_NumberEditor0.isMinimumSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.isPreferredSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.getIgnoreRepaint());
      assertEquals(false, jSpinner_NumberEditor0.isCursorSet());
      assertEquals(false, jSpinner_NumberEditor0.isValid());
      assertEquals(false, jSpinner_NumberEditor0.isMaximumSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.isFocusCycleRoot());
      assertEquals(true, jSpinner_NumberEditor0.isEnabled());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicyProvider());
      assertEquals(true, jSpinner_NumberEditor0.isVisible());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicySet());
      assertEquals(true, jSpinner_NumberEditor0.isBackgroundSet());
      assertEquals(true, jSpinner_NumberEditor0.isForegroundSet());
      assertEquals(true, jSpinner_NumberEditor0.getFocusTraversalKeysEnabled());
      assertEquals(1, jSpinner_NumberEditor0.getComponentCount());
      assertEquals(false, jSpinner_NumberEditor0.isShowing());
      assertEquals(true, jSpinner_NumberEditor0.isFontSet());
      assertEquals(false, jSpinner_NumberEditor0.isLightweight());
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertNotNull(path2D_Double0);
  }

  @Test
  public void test12()  throws Throwable  {
      Shape shape0 = null;
      double double0 = (-26.575266674006617);
      // Undeclared exception!
      try {
        Shape shape1 = ShapeUtilities.createTranslatedShape(shape0, double0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Rectangle rectangle0 = new Rectangle(polygon0.npoints, polygon0.npoints, polygon0.npoints, polygon0.npoints);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, polygon0.npoints);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertNotNull(rectangle0);
      
      Path2D.Double path2D_Double0 = (Path2D.Double)ShapeUtilities.createTranslatedShape((Shape) polygon0, (double) rectangle0.y, (double) polygon0.npoints);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, polygon0.npoints);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0, path2D_Double0.getWindingRule());
      assertNotNull(path2D_Double0);
  }

  @Test
  public void test14()  throws Throwable  {
      float float0 = 0.0F;
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createDiagonalCross(float0, float0);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      GeneralPath generalPath1 = new GeneralPath();
      assertEquals(1, generalPath1.getWindingRule());
      assertNotSame(generalPath1, generalPath0);
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertNotNull(generalPath1);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath1, (Shape) generalPath0);
      assertEquals(1, generalPath1.getWindingRule());
      assertEquals(1, generalPath0.getWindingRule());
      assertNotSame(generalPath1, generalPath0);
      assertNotSame(generalPath0, generalPath1);
      assertFalse(boolean0);
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertFalse(generalPath0.equals((Object)generalPath1));
  }

  @Test
  public void test15()  throws Throwable  {
      CellRendererPane cellRendererPane0 = new CellRendererPane();
      assertEquals(0.5F, cellRendererPane0.getAlignmentX(), 0.01F);
      assertEquals(false, cellRendererPane0.isOpaque());
      assertEquals(false, cellRendererPane0.getIgnoreRepaint());
      assertEquals(false, cellRendererPane0.isForegroundSet());
      assertEquals(0.5F, cellRendererPane0.getAlignmentY(), 0.01F);
      assertEquals(false, cellRendererPane0.isPreferredSizeSet());
      assertEquals(false, cellRendererPane0.isMaximumSizeSet());
      assertEquals(false, cellRendererPane0.isMinimumSizeSet());
      assertEquals(0, cellRendererPane0.getComponentCount());
      assertEquals(false, cellRendererPane0.isCursorSet());
      assertEquals(0, cellRendererPane0.getHeight());
      assertEquals(false, cellRendererPane0.isVisible());
      assertEquals(false, cellRendererPane0.isShowing());
      assertEquals(false, cellRendererPane0.isDoubleBuffered());
      assertEquals(false, cellRendererPane0.isFontSet());
      assertEquals(false, cellRendererPane0.isLightweight());
      assertEquals(true, cellRendererPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, cellRendererPane0.isFocusCycleRoot());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicySet());
      assertEquals(true, cellRendererPane0.isEnabled());
      assertEquals(0, cellRendererPane0.getY());
      assertEquals(0, cellRendererPane0.getX());
      assertEquals(Component.BaselineResizeBehavior.OTHER, cellRendererPane0.getBaselineResizeBehavior());
      assertEquals(false, cellRendererPane0.isDisplayable());
      assertEquals(0, cellRendererPane0.getWidth());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, cellRendererPane0.isValid());
      assertEquals(false, cellRendererPane0.isBackgroundSet());
      assertEquals(0, cellRendererPane0.countComponents());
      assertNotNull(cellRendererPane0);
      
      Rectangle rectangle0 = cellRendererPane0.getBounds();
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.5F, cellRendererPane0.getAlignmentX(), 0.01F);
      assertEquals(false, cellRendererPane0.isOpaque());
      assertEquals(false, cellRendererPane0.getIgnoreRepaint());
      assertEquals(false, cellRendererPane0.isForegroundSet());
      assertEquals(0.5F, cellRendererPane0.getAlignmentY(), 0.01F);
      assertEquals(false, cellRendererPane0.isPreferredSizeSet());
      assertEquals(false, cellRendererPane0.isMaximumSizeSet());
      assertEquals(false, cellRendererPane0.isMinimumSizeSet());
      assertEquals(0, cellRendererPane0.getComponentCount());
      assertEquals(false, cellRendererPane0.isCursorSet());
      assertEquals(0, cellRendererPane0.getHeight());
      assertEquals(false, cellRendererPane0.isVisible());
      assertEquals(false, cellRendererPane0.isShowing());
      assertEquals(false, cellRendererPane0.isDoubleBuffered());
      assertEquals(false, cellRendererPane0.isFontSet());
      assertEquals(false, cellRendererPane0.isLightweight());
      assertEquals(true, cellRendererPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, cellRendererPane0.isFocusCycleRoot());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicySet());
      assertEquals(true, cellRendererPane0.isEnabled());
      assertEquals(0, cellRendererPane0.getY());
      assertEquals(0, cellRendererPane0.getX());
      assertEquals(Component.BaselineResizeBehavior.OTHER, cellRendererPane0.getBaselineResizeBehavior());
      assertEquals(false, cellRendererPane0.isDisplayable());
      assertEquals(0, cellRendererPane0.getWidth());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, cellRendererPane0.isValid());
      assertEquals(false, cellRendererPane0.isBackgroundSet());
      assertEquals(0, cellRendererPane0.countComponents());
      assertNotNull(rectangle0);
      
      GeneralPath generalPath0 = new GeneralPath((Shape) rectangle0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.5F, cellRendererPane0.getAlignmentX(), 0.01F);
      assertEquals(false, cellRendererPane0.isOpaque());
      assertEquals(false, cellRendererPane0.getIgnoreRepaint());
      assertEquals(false, cellRendererPane0.isForegroundSet());
      assertEquals(0.5F, cellRendererPane0.getAlignmentY(), 0.01F);
      assertEquals(false, cellRendererPane0.isPreferredSizeSet());
      assertEquals(false, cellRendererPane0.isMaximumSizeSet());
      assertEquals(false, cellRendererPane0.isMinimumSizeSet());
      assertEquals(0, cellRendererPane0.getComponentCount());
      assertEquals(false, cellRendererPane0.isCursorSet());
      assertEquals(0, cellRendererPane0.getHeight());
      assertEquals(false, cellRendererPane0.isVisible());
      assertEquals(false, cellRendererPane0.isShowing());
      assertEquals(false, cellRendererPane0.isDoubleBuffered());
      assertEquals(false, cellRendererPane0.isFontSet());
      assertEquals(false, cellRendererPane0.isLightweight());
      assertEquals(true, cellRendererPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, cellRendererPane0.isFocusCycleRoot());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicySet());
      assertEquals(true, cellRendererPane0.isEnabled());
      assertEquals(0, cellRendererPane0.getY());
      assertEquals(0, cellRendererPane0.getX());
      assertEquals(Component.BaselineResizeBehavior.OTHER, cellRendererPane0.getBaselineResizeBehavior());
      assertEquals(false, cellRendererPane0.isDisplayable());
      assertEquals(0, cellRendererPane0.getWidth());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, cellRendererPane0.isValid());
      assertEquals(false, cellRendererPane0.isBackgroundSet());
      assertEquals(0, cellRendererPane0.countComponents());
      assertNotNull(generalPath0);
      
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.5F, cellRendererPane0.getAlignmentX(), 0.01F);
      assertEquals(false, cellRendererPane0.isOpaque());
      assertEquals(false, cellRendererPane0.getIgnoreRepaint());
      assertEquals(false, cellRendererPane0.isForegroundSet());
      assertEquals(0.5F, cellRendererPane0.getAlignmentY(), 0.01F);
      assertEquals(false, cellRendererPane0.isPreferredSizeSet());
      assertEquals(false, cellRendererPane0.isMaximumSizeSet());
      assertEquals(false, cellRendererPane0.isMinimumSizeSet());
      assertEquals(0, cellRendererPane0.getComponentCount());
      assertEquals(false, cellRendererPane0.isCursorSet());
      assertEquals(0, cellRendererPane0.getHeight());
      assertEquals(false, cellRendererPane0.isVisible());
      assertEquals(false, cellRendererPane0.isShowing());
      assertEquals(false, cellRendererPane0.isDoubleBuffered());
      assertEquals(false, cellRendererPane0.isFontSet());
      assertEquals(false, cellRendererPane0.isLightweight());
      assertEquals(true, cellRendererPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, cellRendererPane0.isFocusCycleRoot());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicySet());
      assertEquals(true, cellRendererPane0.isEnabled());
      assertEquals(0, cellRendererPane0.getY());
      assertEquals(0, cellRendererPane0.getX());
      assertEquals(Component.BaselineResizeBehavior.OTHER, cellRendererPane0.getBaselineResizeBehavior());
      assertEquals(false, cellRendererPane0.isDisplayable());
      assertEquals(0, cellRendererPane0.getWidth());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, cellRendererPane0.isValid());
      assertEquals(false, cellRendererPane0.isBackgroundSet());
      assertEquals(0, cellRendererPane0.countComponents());
      assertTrue(boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertNotNull(defaultListCellRenderer_UIResource0);
      
      Rectangle rectangle0 = defaultListCellRenderer_UIResource0.getVisibleRect();
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertNotNull(rectangle0);
      
      GeneralPath generalPath0 = new GeneralPath();
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      GeneralPath generalPath1 = new GeneralPath(rectangle0.x, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, generalPath1.getWindingRule());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertNotSame(generalPath1, generalPath0);
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertNotNull(generalPath1);
      
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath1);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, generalPath1.getWindingRule());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(1, generalPath0.getWindingRule());
      assertNotSame(generalPath1, generalPath0);
      assertNotSame(generalPath0, generalPath1);
      assertFalse(boolean0);
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertFalse(generalPath0.equals((Object)generalPath1));
  }

  @Test
  public void test17()  throws Throwable  {
      GeneralPath generalPath0 = new GeneralPath();
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      GeneralPath generalPath1 = null;
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath1);
      assertEquals(1, generalPath0.getWindingRule());
      assertFalse(boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      GeneralPath generalPath0 = new GeneralPath();
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      GeneralPath generalPath1 = null;
      boolean boolean0 = ShapeUtilities.equal(generalPath1, generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      assertFalse(boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      GeneralPath generalPath0 = null;
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath0);
      assertTrue(boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Polygon polygon1 = new Polygon(polygon0.ypoints, polygon0.ypoints, polygon0.npoints);
      assertEquals(0, polygon1.npoints);
      assertEquals(0, polygon0.npoints);
      assertNotSame(polygon1, polygon0);
      assertNotSame(polygon0, polygon1);
      assertFalse(polygon1.equals((Object)polygon0));
      assertFalse(polygon0.equals((Object)polygon1));
      assertNotNull(polygon1);
      
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon1);
      assertEquals(0, polygon1.npoints);
      assertEquals(0, polygon0.npoints);
      assertNotSame(polygon1, polygon0);
      assertNotSame(polygon0, polygon1);
      assertFalse(boolean0);
      assertFalse(polygon1.equals((Object)polygon0));
      assertFalse(polygon0.equals((Object)polygon1));
  }

  @Test
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = 1;
      intArray0[0] = int0;
      Polygon polygon0 = new Polygon(intArray0, intArray0, intArray0[0]);
      assertEquals(1, polygon0.npoints);
      assertArrayEquals(new int[] {1, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(polygon0);
      
      Polygon polygon1 = new Polygon();
      assertEquals(0, polygon1.npoints);
      assertNotSame(polygon1, polygon0);
      assertFalse(polygon1.equals((Object)polygon0));
      assertNotNull(polygon1);
      
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon1);
      assertEquals(1, polygon0.npoints);
      assertEquals(0, polygon1.npoints);
      assertNotSame(polygon0, polygon1);
      assertNotSame(polygon1, polygon0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {1, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(polygon0.equals((Object)polygon1));
      assertFalse(polygon1.equals((Object)polygon0));
  }

  @Test
  public void test22()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Polygon polygon1 = null;
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon1);
      assertEquals(0, polygon0.npoints);
      assertFalse(boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertNotNull(defaultListCellRenderer_UIResource0);
      
      Rectangle rectangle0 = defaultListCellRenderer_UIResource0.getVisibleRect();
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertNotNull(rectangle0);
      
      Polygon polygon0 = null;
      int[] intArray0 = new int[3];
      Polygon polygon1 = new Polygon(intArray0, intArray0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, polygon1.npoints);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(polygon1);
      
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon1);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, polygon1.npoints);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test
  public void test24()  throws Throwable  {
      Polygon polygon0 = null;
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon0);
      assertTrue(boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      double double0 = 1.0;
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertNotNull(arc2D_Float0);
      
      Vector<String> vector0 = new Vector<String>();
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      JTree jTree0 = new JTree(vector0);
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(false, jTree0.isPreferredSizeSet());
      assertEquals(false, jTree0.isFocusTraversalPolicySet());
      assertEquals(false, jTree0.isFocusTraversalPolicyProvider());
      assertEquals(1, jTree0.getComponentCount());
      assertEquals(true, jTree0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTree0.isBackgroundSet());
      assertEquals(true, jTree0.isEnabled());
      assertEquals(false, jTree0.isCursorSet());
      assertEquals(true, jTree0.isFontSet());
      assertEquals(1, jTree0.countComponents());
      assertEquals(false, jTree0.isShowing());
      assertEquals(false, jTree0.isValid());
      assertEquals(true, jTree0.isVisible());
      assertEquals(false, jTree0.isForegroundSet());
      assertEquals(false, jTree0.getIgnoreRepaint());
      assertEquals(false, jTree0.isFocusCycleRoot());
      assertEquals(false, jTree0.isLightweight());
      assertEquals(false, jTree0.isMinimumSizeSet());
      assertEquals(false, jTree0.isMaximumSizeSet());
      assertEquals(false, jTree0.isDisplayable());
      assertNotNull(jTree0);
      
      Rectangle rectangle0 = jTree0.bounds();
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(false, jTree0.isPreferredSizeSet());
      assertEquals(false, jTree0.isFocusTraversalPolicySet());
      assertEquals(false, jTree0.isFocusTraversalPolicyProvider());
      assertEquals(1, jTree0.getComponentCount());
      assertEquals(true, jTree0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTree0.isBackgroundSet());
      assertEquals(true, jTree0.isEnabled());
      assertEquals(false, jTree0.isCursorSet());
      assertEquals(true, jTree0.isFontSet());
      assertEquals(1, jTree0.countComponents());
      assertEquals(false, jTree0.isShowing());
      assertEquals(false, jTree0.isValid());
      assertEquals(true, jTree0.isVisible());
      assertEquals(false, jTree0.isForegroundSet());
      assertEquals(false, jTree0.getIgnoreRepaint());
      assertEquals(false, jTree0.isFocusCycleRoot());
      assertEquals(false, jTree0.isLightweight());
      assertEquals(false, jTree0.isMinimumSizeSet());
      assertEquals(false, jTree0.isMaximumSizeSet());
      assertEquals(false, jTree0.isDisplayable());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertNotNull(rectangle0);
      
      Arc2D.Double arc2D_Double0 = new Arc2D.Double((Rectangle2D) rectangle0, double0, (double) arc2D_Float0.height, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(1.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(false, jTree0.isPreferredSizeSet());
      assertEquals(false, jTree0.isFocusTraversalPolicySet());
      assertEquals(false, jTree0.isFocusTraversalPolicyProvider());
      assertEquals(1, jTree0.getComponentCount());
      assertEquals(true, jTree0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTree0.isBackgroundSet());
      assertEquals(true, jTree0.isEnabled());
      assertEquals(false, jTree0.isCursorSet());
      assertEquals(true, jTree0.isFontSet());
      assertEquals(1, jTree0.countComponents());
      assertEquals(false, jTree0.isShowing());
      assertEquals(false, jTree0.isValid());
      assertEquals(true, jTree0.isVisible());
      assertEquals(false, jTree0.isForegroundSet());
      assertEquals(false, jTree0.getIgnoreRepaint());
      assertEquals(false, jTree0.isFocusCycleRoot());
      assertEquals(false, jTree0.isLightweight());
      assertEquals(false, jTree0.isMinimumSizeSet());
      assertEquals(false, jTree0.isMaximumSizeSet());
      assertEquals(false, jTree0.isDisplayable());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertNotNull(arc2D_Double0);
      
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Float0, (Arc2D) arc2D_Double0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(1.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(false, jTree0.isPreferredSizeSet());
      assertEquals(false, jTree0.isFocusTraversalPolicySet());
      assertEquals(false, jTree0.isFocusTraversalPolicyProvider());
      assertEquals(1, jTree0.getComponentCount());
      assertEquals(true, jTree0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTree0.isBackgroundSet());
      assertEquals(true, jTree0.isEnabled());
      assertEquals(false, jTree0.isCursorSet());
      assertEquals(true, jTree0.isFontSet());
      assertEquals(1, jTree0.countComponents());
      assertEquals(false, jTree0.isShowing());
      assertEquals(false, jTree0.isValid());
      assertEquals(true, jTree0.isVisible());
      assertEquals(false, jTree0.isForegroundSet());
      assertEquals(false, jTree0.getIgnoreRepaint());
      assertEquals(false, jTree0.isFocusCycleRoot());
      assertEquals(false, jTree0.isLightweight());
      assertEquals(false, jTree0.isMinimumSizeSet());
      assertEquals(false, jTree0.isMaximumSizeSet());
      assertEquals(false, jTree0.isDisplayable());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertFalse(boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      assertEquals(true, jSpinner0.isEnabled());
      assertEquals(false, jSpinner0.getIgnoreRepaint());
      assertEquals(false, jSpinner0.isFocusCycleRoot());
      assertEquals(3, jSpinner0.countComponents());
      assertEquals(false, jSpinner0.isMinimumSizeSet());
      assertEquals(true, jSpinner0.getFocusTraversalKeysEnabled());
      assertEquals(true, jSpinner0.isBackgroundSet());
      assertEquals(false, jSpinner0.isPreferredSizeSet());
      assertEquals(3, jSpinner0.getComponentCount());
      assertEquals(true, jSpinner0.isForegroundSet());
      assertEquals(false, jSpinner0.isFocusTraversalPolicySet());
      assertEquals(true, jSpinner0.isFontSet());
      assertEquals(false, jSpinner0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSpinner0.isValid());
      assertEquals(false, jSpinner0.isShowing());
      assertEquals(false, jSpinner0.isCursorSet());
      assertEquals(true, jSpinner0.isVisible());
      assertEquals(false, jSpinner0.isLightweight());
      assertEquals(false, jSpinner0.isDisplayable());
      assertEquals(false, jSpinner0.isMaximumSizeSet());
      assertNotNull(jSpinner0);
      
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      assertEquals(true, jSpinner0.isEnabled());
      assertEquals(false, jSpinner0.getIgnoreRepaint());
      assertEquals(false, jSpinner0.isFocusCycleRoot());
      assertEquals(3, jSpinner0.countComponents());
      assertEquals(false, jSpinner0.isMinimumSizeSet());
      assertEquals(true, jSpinner0.getFocusTraversalKeysEnabled());
      assertEquals(true, jSpinner0.isBackgroundSet());
      assertEquals(false, jSpinner0.isPreferredSizeSet());
      assertEquals(3, jSpinner0.getComponentCount());
      assertEquals(true, jSpinner0.isForegroundSet());
      assertEquals(false, jSpinner0.isFocusTraversalPolicySet());
      assertEquals(true, jSpinner0.isFontSet());
      assertEquals(false, jSpinner0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSpinner0.isValid());
      assertEquals(false, jSpinner0.isShowing());
      assertEquals(false, jSpinner0.isCursorSet());
      assertEquals(true, jSpinner0.isVisible());
      assertEquals(false, jSpinner0.isLightweight());
      assertEquals(false, jSpinner0.isDisplayable());
      assertEquals(false, jSpinner0.isMaximumSizeSet());
      assertEquals(true, jSpinner_NumberEditor0.isFontSet());
      assertEquals(1, jSpinner_NumberEditor0.countComponents());
      assertEquals(false, jSpinner_NumberEditor0.isValid());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicyProvider());
      assertEquals(1, jSpinner_NumberEditor0.getComponentCount());
      assertEquals(true, jSpinner_NumberEditor0.isEnabled());
      assertEquals(false, jSpinner_NumberEditor0.isLightweight());
      assertEquals(false, jSpinner_NumberEditor0.isMinimumSizeSet());
      assertEquals(true, jSpinner_NumberEditor0.isBackgroundSet());
      assertEquals(false, jSpinner_NumberEditor0.isDisplayable());
      assertEquals(true, jSpinner_NumberEditor0.isVisible());
      assertEquals(false, jSpinner_NumberEditor0.isFocusCycleRoot());
      assertEquals(false, jSpinner_NumberEditor0.isShowing());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicySet());
      assertEquals(true, jSpinner_NumberEditor0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSpinner_NumberEditor0.isCursorSet());
      assertEquals(true, jSpinner_NumberEditor0.isForegroundSet());
      assertEquals(false, jSpinner_NumberEditor0.isPreferredSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.isMaximumSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.getIgnoreRepaint());
      assertNotNull(jSpinner_NumberEditor0);
      
      Point point0 = jSpinner_NumberEditor0.location();
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(true, jSpinner0.isEnabled());
      assertEquals(false, jSpinner0.getIgnoreRepaint());
      assertEquals(false, jSpinner0.isFocusCycleRoot());
      assertEquals(3, jSpinner0.countComponents());
      assertEquals(false, jSpinner0.isMinimumSizeSet());
      assertEquals(true, jSpinner0.getFocusTraversalKeysEnabled());
      assertEquals(true, jSpinner0.isBackgroundSet());
      assertEquals(false, jSpinner0.isPreferredSizeSet());
      assertEquals(3, jSpinner0.getComponentCount());
      assertEquals(true, jSpinner0.isForegroundSet());
      assertEquals(false, jSpinner0.isFocusTraversalPolicySet());
      assertEquals(true, jSpinner0.isFontSet());
      assertEquals(false, jSpinner0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSpinner0.isValid());
      assertEquals(false, jSpinner0.isShowing());
      assertEquals(false, jSpinner0.isCursorSet());
      assertEquals(true, jSpinner0.isVisible());
      assertEquals(false, jSpinner0.isLightweight());
      assertEquals(false, jSpinner0.isDisplayable());
      assertEquals(false, jSpinner0.isMaximumSizeSet());
      assertEquals(true, jSpinner_NumberEditor0.isFontSet());
      assertEquals(1, jSpinner_NumberEditor0.countComponents());
      assertEquals(false, jSpinner_NumberEditor0.isValid());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicyProvider());
      assertEquals(1, jSpinner_NumberEditor0.getComponentCount());
      assertEquals(true, jSpinner_NumberEditor0.isEnabled());
      assertEquals(false, jSpinner_NumberEditor0.isLightweight());
      assertEquals(false, jSpinner_NumberEditor0.isMinimumSizeSet());
      assertEquals(true, jSpinner_NumberEditor0.isBackgroundSet());
      assertEquals(false, jSpinner_NumberEditor0.isDisplayable());
      assertEquals(true, jSpinner_NumberEditor0.isVisible());
      assertEquals(false, jSpinner_NumberEditor0.isFocusCycleRoot());
      assertEquals(false, jSpinner_NumberEditor0.isShowing());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicySet());
      assertEquals(true, jSpinner_NumberEditor0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSpinner_NumberEditor0.isCursorSet());
      assertEquals(true, jSpinner_NumberEditor0.isForegroundSet());
      assertEquals(false, jSpinner_NumberEditor0.isPreferredSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.isMaximumSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.getIgnoreRepaint());
      assertNotNull(point0);
      
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertNotNull(arc2D_Float0);
      
      float float0 = 719.88F;
      Arc2D.Float arc2D_Float1 = new Arc2D.Float(arc2D_Float0.extent, arc2D_Float0.y, float0, arc2D_Float0.width, arc2D_Float0.width, arc2D_Float0.y, point0.y);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0.0F, arc2D_Float1.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float1.height, 0.01F);
      assertEquals(719.88F, arc2D_Float1.width, 0.01F);
      assertEquals(0.0F, arc2D_Float1.start, 0.01F);
      assertEquals(0.0F, arc2D_Float1.y, 0.01F);
      assertEquals(0.0F, arc2D_Float1.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(true, jSpinner0.isEnabled());
      assertEquals(false, jSpinner0.getIgnoreRepaint());
      assertEquals(false, jSpinner0.isFocusCycleRoot());
      assertEquals(3, jSpinner0.countComponents());
      assertEquals(false, jSpinner0.isMinimumSizeSet());
      assertEquals(true, jSpinner0.getFocusTraversalKeysEnabled());
      assertEquals(true, jSpinner0.isBackgroundSet());
      assertEquals(false, jSpinner0.isPreferredSizeSet());
      assertEquals(3, jSpinner0.getComponentCount());
      assertEquals(true, jSpinner0.isForegroundSet());
      assertEquals(false, jSpinner0.isFocusTraversalPolicySet());
      assertEquals(true, jSpinner0.isFontSet());
      assertEquals(false, jSpinner0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSpinner0.isValid());
      assertEquals(false, jSpinner0.isShowing());
      assertEquals(false, jSpinner0.isCursorSet());
      assertEquals(true, jSpinner0.isVisible());
      assertEquals(false, jSpinner0.isLightweight());
      assertEquals(false, jSpinner0.isDisplayable());
      assertEquals(false, jSpinner0.isMaximumSizeSet());
      assertEquals(true, jSpinner_NumberEditor0.isFontSet());
      assertEquals(1, jSpinner_NumberEditor0.countComponents());
      assertEquals(false, jSpinner_NumberEditor0.isValid());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicyProvider());
      assertEquals(1, jSpinner_NumberEditor0.getComponentCount());
      assertEquals(true, jSpinner_NumberEditor0.isEnabled());
      assertEquals(false, jSpinner_NumberEditor0.isLightweight());
      assertEquals(false, jSpinner_NumberEditor0.isMinimumSizeSet());
      assertEquals(true, jSpinner_NumberEditor0.isBackgroundSet());
      assertEquals(false, jSpinner_NumberEditor0.isDisplayable());
      assertEquals(true, jSpinner_NumberEditor0.isVisible());
      assertEquals(false, jSpinner_NumberEditor0.isFocusCycleRoot());
      assertEquals(false, jSpinner_NumberEditor0.isShowing());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicySet());
      assertEquals(true, jSpinner_NumberEditor0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSpinner_NumberEditor0.isCursorSet());
      assertEquals(true, jSpinner_NumberEditor0.isForegroundSet());
      assertEquals(false, jSpinner_NumberEditor0.isPreferredSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.isMaximumSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.getIgnoreRepaint());
      assertEquals(359.94000244140625, arc2D_Float1.getCenterX(), 0.01D);
      assertEquals(719.8800048828125, arc2D_Float1.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float1.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float1.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float1.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float1.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Float1.getArcType());
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertNotSame(arc2D_Float1, arc2D_Float0);
      assertNotSame(arc2D_Float0, arc2D_Float1);
      assertFalse(arc2D_Float1.equals((Object)arc2D_Float0));
      assertFalse(arc2D_Float0.equals((Object)arc2D_Float1));
      assertNotNull(arc2D_Float1);
      
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Float0, (Arc2D) arc2D_Float1);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0.0F, arc2D_Float1.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float1.height, 0.01F);
      assertEquals(719.88F, arc2D_Float1.width, 0.01F);
      assertEquals(0.0F, arc2D_Float1.start, 0.01F);
      assertEquals(0.0F, arc2D_Float1.y, 0.01F);
      assertEquals(0.0F, arc2D_Float1.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(true, jSpinner0.isEnabled());
      assertEquals(false, jSpinner0.getIgnoreRepaint());
      assertEquals(false, jSpinner0.isFocusCycleRoot());
      assertEquals(3, jSpinner0.countComponents());
      assertEquals(false, jSpinner0.isMinimumSizeSet());
      assertEquals(true, jSpinner0.getFocusTraversalKeysEnabled());
      assertEquals(true, jSpinner0.isBackgroundSet());
      assertEquals(false, jSpinner0.isPreferredSizeSet());
      assertEquals(3, jSpinner0.getComponentCount());
      assertEquals(true, jSpinner0.isForegroundSet());
      assertEquals(false, jSpinner0.isFocusTraversalPolicySet());
      assertEquals(true, jSpinner0.isFontSet());
      assertEquals(false, jSpinner0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSpinner0.isValid());
      assertEquals(false, jSpinner0.isShowing());
      assertEquals(false, jSpinner0.isCursorSet());
      assertEquals(true, jSpinner0.isVisible());
      assertEquals(false, jSpinner0.isLightweight());
      assertEquals(false, jSpinner0.isDisplayable());
      assertEquals(false, jSpinner0.isMaximumSizeSet());
      assertEquals(true, jSpinner_NumberEditor0.isFontSet());
      assertEquals(1, jSpinner_NumberEditor0.countComponents());
      assertEquals(false, jSpinner_NumberEditor0.isValid());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicyProvider());
      assertEquals(1, jSpinner_NumberEditor0.getComponentCount());
      assertEquals(true, jSpinner_NumberEditor0.isEnabled());
      assertEquals(false, jSpinner_NumberEditor0.isLightweight());
      assertEquals(false, jSpinner_NumberEditor0.isMinimumSizeSet());
      assertEquals(true, jSpinner_NumberEditor0.isBackgroundSet());
      assertEquals(false, jSpinner_NumberEditor0.isDisplayable());
      assertEquals(true, jSpinner_NumberEditor0.isVisible());
      assertEquals(false, jSpinner_NumberEditor0.isFocusCycleRoot());
      assertEquals(false, jSpinner_NumberEditor0.isShowing());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicySet());
      assertEquals(true, jSpinner_NumberEditor0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSpinner_NumberEditor0.isCursorSet());
      assertEquals(true, jSpinner_NumberEditor0.isForegroundSet());
      assertEquals(false, jSpinner_NumberEditor0.isPreferredSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.isMaximumSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.getIgnoreRepaint());
      assertEquals(359.94000244140625, arc2D_Float1.getCenterX(), 0.01D);
      assertEquals(719.8800048828125, arc2D_Float1.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float1.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float1.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float1.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float1.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Float1.getArcType());
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertNotSame(arc2D_Float1, arc2D_Float0);
      assertNotSame(arc2D_Float0, arc2D_Float1);
      assertFalse(boolean0);
      assertFalse(arc2D_Float1.equals((Object)arc2D_Float0));
      assertFalse(arc2D_Float0.equals((Object)arc2D_Float1));
  }

  @Test
  public void test27()  throws Throwable  {
      Arc2D arc2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(arc2D0, arc2D0);
      assertTrue(boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      Arc2D arc2D0 = null;
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertNotNull(arc2D_Double0);
      
      boolean boolean0 = ShapeUtilities.equal(arc2D0, (Arc2D) arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertFalse(boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertNotNull(ellipse2D_Double0);
      
      double double0 = 2.0;
      Ellipse2D.Double ellipse2D_Double1 = new Ellipse2D.Double(ellipse2D_Double0.height, ellipse2D_Double0.y, ellipse2D_Double0.x, double0);
      assertEquals(2.0, ellipse2D_Double1.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double1.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double1.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double1.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(2.0, ellipse2D_Double1.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double1.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double1.getMinY(), 0.01D);
      assertEquals(1.0, ellipse2D_Double1.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double1.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double1.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertNotSame(ellipse2D_Double1, ellipse2D_Double0);
      assertNotSame(ellipse2D_Double0, ellipse2D_Double1);
      assertFalse(ellipse2D_Double1.equals((Object)ellipse2D_Double0));
      assertFalse(ellipse2D_Double0.equals((Object)ellipse2D_Double1));
      assertNotNull(ellipse2D_Double1);
      
      boolean boolean0 = ShapeUtilities.equal((Ellipse2D) ellipse2D_Double0, (Ellipse2D) ellipse2D_Double1);
      assertEquals(2.0, ellipse2D_Double1.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double1.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double1.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double1.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(2.0, ellipse2D_Double1.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double1.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double1.getMinY(), 0.01D);
      assertEquals(1.0, ellipse2D_Double1.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double1.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double1.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertNotSame(ellipse2D_Double1, ellipse2D_Double0);
      assertNotSame(ellipse2D_Double0, ellipse2D_Double1);
      assertFalse(boolean0);
      assertFalse(ellipse2D_Double1.equals((Object)ellipse2D_Double0));
      assertFalse(ellipse2D_Double0.equals((Object)ellipse2D_Double1));
  }

  @Test
  public void test30()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertNotNull(ellipse2D_Float0);
      
      Ellipse2D.Float ellipse2D_Float1 = null;
      boolean boolean0 = ShapeUtilities.equal((Ellipse2D) ellipse2D_Float0, (Ellipse2D) ellipse2D_Float1);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test31()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertNotNull(point2D_Double0);
      
      Ellipse2D ellipse2D0 = null;
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double(point2D_Double0.x, point2D_Double0.y, point2D_Double0.y, point2D_Double0.x);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertNotNull(ellipse2D_Double0);
      
      boolean boolean0 = ShapeUtilities.equal(ellipse2D0, (Ellipse2D) ellipse2D_Double0);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      Ellipse2D ellipse2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(ellipse2D0, ellipse2D0);
      assertTrue(boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      double double0 = 2511.1;
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertNotNull(point2D_Double0);
      
      Point2D.Double point2D_Double1 = new Point2D.Double(double0, (double) byteArray0[0]);
      assertEquals(0.0, point2D_Double1.y, 0.01D);
      assertEquals(2511.1, point2D_Double1.x, 0.01D);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertNotNull(point2D_Double1);
      
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertNotNull(line2D_Double0);
      
      Line2D.Float line2D_Float0 = new Line2D.Float((Point2D) point2D_Double0, (Point2D) point2D_Double1);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(2511.1F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double1.y, 0.01D);
      assertEquals(2511.1, point2D_Double1.x, 0.01D);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertNotNull(line2D_Float0);
      
      boolean boolean0 = ShapeUtilities.equal((Line2D) line2D_Double0, (Line2D) line2D_Float0);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(2511.1F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double1.y, 0.01D);
      assertEquals(2511.1, point2D_Double1.x, 0.01D);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
  }

  @Test
  public void test34()  throws Throwable  {
      double double0 = 0.5;
      Line2D.Double line2D_Double0 = new Line2D.Double(double0, double0, double0, double0);
      assertEquals(0.5, line2D_Double0.y2, 0.01D);
      assertEquals(0.5, line2D_Double0.x1, 0.01D);
      assertEquals(0.5, line2D_Double0.x2, 0.01D);
      assertEquals(0.5, line2D_Double0.y1, 0.01D);
      assertNotNull(line2D_Double0);
      
      Line2D.Double line2D_Double1 = new Line2D.Double();
      assertEquals(0.0, line2D_Double1.x2, 0.01D);
      assertEquals(0.0, line2D_Double1.x1, 0.01D);
      assertEquals(0.0, line2D_Double1.y1, 0.01D);
      assertEquals(0.0, line2D_Double1.y2, 0.01D);
      assertNotSame(line2D_Double1, line2D_Double0);
      assertFalse(line2D_Double1.equals((Object)line2D_Double0));
      assertNotNull(line2D_Double1);
      
      boolean boolean0 = ShapeUtilities.equal((Line2D) line2D_Double0, (Line2D) line2D_Double1);
      assertEquals(0.0, line2D_Double1.x2, 0.01D);
      assertEquals(0.0, line2D_Double1.x1, 0.01D);
      assertEquals(0.0, line2D_Double1.y1, 0.01D);
      assertEquals(0.0, line2D_Double1.y2, 0.01D);
      assertEquals(0.5, line2D_Double0.y2, 0.01D);
      assertEquals(0.5, line2D_Double0.x1, 0.01D);
      assertEquals(0.5, line2D_Double0.x2, 0.01D);
      assertEquals(0.5, line2D_Double0.y1, 0.01D);
      assertNotSame(line2D_Double1, line2D_Double0);
      assertNotSame(line2D_Double0, line2D_Double1);
      assertFalse(boolean0);
      assertFalse(line2D_Double1.equals((Object)line2D_Double0));
      assertFalse(line2D_Double0.equals((Object)line2D_Double1));
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = 1795;
      Line2D.Float line2D_Float0 = new Line2D.Float((float) int0, (float) int0, (float) int0, (float) int0);
      assertEquals(1795.0F, line2D_Float0.y1, 0.01F);
      assertEquals(1795.0F, line2D_Float0.x2, 0.01F);
      assertEquals(1795.0F, line2D_Float0.x1, 0.01F);
      assertEquals(1795.0F, line2D_Float0.y2, 0.01F);
      assertNotNull(line2D_Float0);
      
      Line2D line2D0 = null;
      boolean boolean0 = ShapeUtilities.equal((Line2D) line2D_Float0, line2D0);
      assertEquals(1795.0F, line2D_Float0.y1, 0.01F);
      assertEquals(1795.0F, line2D_Float0.x2, 0.01F);
      assertEquals(1795.0F, line2D_Float0.x1, 0.01F);
      assertEquals(1795.0F, line2D_Float0.y2, 0.01F);
      assertFalse(boolean0);
  }

  @Test
  public void test36()  throws Throwable  {
      double double0 = (-1571.752652019281);
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertNotNull(ellipse2D_Float0);
      
      Line2D.Double line2D_Double0 = new Line2D.Double(double0, double0, (double) ellipse2D_Float0.y, (double) ellipse2D_Float0.height);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals((-1571.752652019281), line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals((-1571.752652019281), line2D_Double0.y1, 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertNotNull(line2D_Double0);
      
      Line2D.Double line2D_Double1 = null;
      boolean boolean0 = ShapeUtilities.equal((Line2D) line2D_Double1, (Line2D) line2D_Double0);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals((-1571.752652019281), line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals((-1571.752652019281), line2D_Double0.y1, 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test37()  throws Throwable  {
      Line2D line2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(line2D0, line2D0);
      assertTrue(boolean0);
  }

  @Test
  public void test38()  throws Throwable  {
      GeneralPath generalPath0 = new GeneralPath();
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      GeneralPath generalPath1 = null;
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath0, (Shape) generalPath1);
      assertEquals(1, generalPath0.getWindingRule());
      assertFalse(boolean0);
  }

  @Test
  public void test39()  throws Throwable  {
      GeneralPath generalPath0 = new GeneralPath();
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath0, (Shape) generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      assertTrue(boolean0);
  }

  @Test
  public void test40()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Polygon polygon1 = null;
      boolean boolean0 = ShapeUtilities.equal((Shape) polygon0, (Shape) polygon1);
      assertEquals(0, polygon0.npoints);
      assertFalse(boolean0);
  }

  @Test
  public void test41()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) polygon0, (Shape) polygon0);
      assertEquals(0, polygon0.npoints);
      assertTrue(boolean0);
  }

  @Test
  public void test42()  throws Throwable  {
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertNotNull(arc2D_Double0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) arc2D_Double0, (Shape) arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertTrue(boolean0);
  }

  @Test
  public void test43()  throws Throwable  {
      double double0 = (-1571.752652019281);
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertNotNull(ellipse2D_Float0);
      
      Line2D.Double line2D_Double0 = new Line2D.Double(double0, double0, (double) ellipse2D_Float0.y, (double) ellipse2D_Float0.height);
      assertEquals((-1571.752652019281), line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals((-1571.752652019281), line2D_Double0.y1, 0.01D);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertNotNull(line2D_Double0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) ellipse2D_Float0, (Shape) line2D_Double0);
      assertEquals((-1571.752652019281), line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals((-1571.752652019281), line2D_Double0.y1, 0.01D);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test44()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertNotNull(ellipse2D_Float0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) ellipse2D_Float0, (Shape) ellipse2D_Float0);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertTrue(boolean0);
  }

  @Test
  public void test45()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertNotNull(point2D_Double0);
      
      Line2D.Float line2D_Float0 = new Line2D.Float((Point2D) point2D_Double0, (Point2D) point2D_Double0);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertNotNull(line2D_Float0);
      
      Line2D.Float line2D_Float1 = null;
      boolean boolean0 = ShapeUtilities.equal((Shape) line2D_Float0, (Shape) line2D_Float1);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test46()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertNotNull(point2D_Double0);
      
      Line2D.Float line2D_Float0 = new Line2D.Float((Point2D) point2D_Double0, (Point2D) point2D_Double0);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertNotNull(line2D_Float0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) line2D_Float0, (Shape) line2D_Float0);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertTrue(boolean0);
  }

  @Test
  public void test47()  throws Throwable  {
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertNotNull(arc2D_Double0);
      
      String string0 = "You are attempting to add an observation for ";
      boolean boolean0 = false;
      JInternalFrame jInternalFrame0 = new JInternalFrame(string0, boolean0);
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertNotNull(jInternalFrame0);
      
      Rectangle rectangle0 = null;
      Rectangle rectangle1 = jInternalFrame0.getBounds(rectangle0);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.y);
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle1.toString());
      assertEquals(0.0, rectangle1.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals(0.0, rectangle1.getMinX(), 0.01D);
      assertEquals(true, rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getWidth(), 0.01D);
      assertEquals(0.0, rectangle1.getX(), 0.01D);
      assertEquals(0.0, rectangle1.getHeight(), 0.01D);
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertNotNull(rectangle1);
      
      boolean boolean1 = ShapeUtilities.equal((Shape) arc2D_Double0, (Shape) rectangle1);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.y);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle1.toString());
      assertEquals(0.0, rectangle1.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals(0.0, rectangle1.getMinX(), 0.01D);
      assertEquals(true, rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getWidth(), 0.01D);
      assertEquals(0.0, rectangle1.getX(), 0.01D);
      assertEquals(0.0, rectangle1.getHeight(), 0.01D);
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test48()  throws Throwable  {
      float float0 = 0.0F;
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createDiagonalCross(float0, float0);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      GeneralPath generalPath1 = (GeneralPath)ShapeUtilities.clone((Shape) generalPath0);
      assertEquals(1, generalPath1.getWindingRule());
      assertEquals(1, generalPath0.getWindingRule());
      assertNotSame(generalPath1, generalPath0);
      assertNotSame(generalPath0, generalPath1);
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertFalse(generalPath0.equals((Object)generalPath1));
      assertNotNull(generalPath1);
  }

  @Test
  public void test49()  throws Throwable  {
      Ellipse2D ellipse2D0 = null;
      Shape shape0 = ShapeUtilities.clone((Shape) ellipse2D0);
      assertNull(shape0);
  }

  @Test
  public void test50()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createRegularCross((float) polygon0.npoints, (float) polygon0.npoints);
      assertEquals(0, polygon0.npoints);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
  }

  @Test
  public void test51()  throws Throwable  {
      double double0 = 1159.95;
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertNotNull(arc2D_Double0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)arc2D_Double0.getBounds2D();
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)ShapeUtilities.getPointInRectangle(double0, double0, (Rectangle2D) rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertNotNull(point2D_Double0);
  }

  @Test
  public void test52()  throws Throwable  {
      byte byte0 = (byte)0;
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createDiamond((float) byte0);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
  }

  @Test
  public void test53()  throws Throwable  {
      float float0 = 0.0F;
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createUpTriangle(float0);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
  }

  @Test
  public void test54()  throws Throwable  {
      float float0 = 2832.7444F;
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createDownTriangle(float0);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Graphics2D graphics2D0 = null;
      // Undeclared exception!
      try {
        ShapeUtilities.drawRotatedShape(graphics2D0, (Shape) generalPath0, (double) float0, (float) polygon0.npoints, (float) polygon0.npoints);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
