/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:37:21 GMT 2014
 */

package org.jfree.chart.util;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.geom.Arc2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Path2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.Properties;
import java.util.Stack;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JColorChooser;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JToolBar;
import javax.swing.border.TitledBorder;
import javax.swing.colorchooser.ColorSelectionModel;
import javax.swing.colorchooser.DefaultColorSelectionModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.ShapeUtilities;
import org.junit.runner.RunWith;
import sun.swing.PrintColorUIResource;

 
public class ShapeUtilitiesEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-2104.030894973);
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double(double0, double0, double0, double1);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals((-2104.030894973), ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals((-1052.0154474865), ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals((-2104.030894973), ellipse2D_Double0.getMaxY(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(ellipse2D_Double0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)ellipse2D_Double0.getFrame();
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals((-2104.030894973), ellipse2D_Double0.height, 0.01D);
      assertEquals((-2104.030894973), rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals((-1052.0154474865), ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals((-2104.030894973), ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals((-1052.0154474865), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-2104.030894973), rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(rectangle2D_Double0);
      
      boolean boolean0 = ShapeUtilities.intersects((Rectangle2D) rectangle2D_Double0, (Rectangle2D) rectangle2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals((-2104.030894973), ellipse2D_Double0.height, 0.01D);
      assertEquals((-2104.030894973), rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals((-1052.0154474865), ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals((-2104.030894973), ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals((-1052.0154474865), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-2104.030894973), rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertNotNull(rectangle0);
      
      boolean boolean0 = ShapeUtilities.intersects((Rectangle2D) rectangle0, (Rectangle2D) rectangle0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertTrue(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "";
      TitledBorder titledBorder0 = new TitledBorder(string0);
      assertNotNull(titledBorder0);
      
      JCheckBox jCheckBox0 = new JCheckBox();
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertNotNull(jCheckBox0);
      
      int int0 = (-4563);
      Rectangle rectangle0 = titledBorder0.getInteriorRectangle((Component) jCheckBox0, int0, int0, int0, int0);
      assertEquals((-4565), rectangle0.width);
      assertEquals((-4562), rectangle0.y);
      assertEquals((-4562), rectangle0.x);
      assertEquals((-4565), rectangle0.height);
      assertEquals((-9127.0), rectangle0.getMaxY(), 0.01D);
      assertEquals((-4565.0), rectangle0.getWidth(), 0.01D);
      assertEquals((-4565.0), rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals((-4562.0), rectangle0.getY(), 0.01D);
      assertEquals((-4562.0), rectangle0.getX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=-4562,y=-4562,width=-4565,height=-4565]", rectangle0.toString());
      assertEquals((-6844.5), rectangle0.getCenterX(), 0.01D);
      assertEquals((-6844.5), rectangle0.getCenterY(), 0.01D);
      assertEquals((-4562.0), rectangle0.getMinY(), 0.01D);
      assertEquals((-4562.0), rectangle0.getMinX(), 0.01D);
      assertEquals((-9127.0), rectangle0.getMaxX(), 0.01D);
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertNotNull(rectangle0);
      
      boolean boolean0 = ShapeUtilities.intersects((Rectangle2D) rectangle0, (Rectangle2D) rectangle0);
      assertEquals((-4565), rectangle0.width);
      assertEquals((-4562), rectangle0.y);
      assertEquals((-4562), rectangle0.x);
      assertEquals((-4565), rectangle0.height);
      assertEquals((-9127.0), rectangle0.getMaxY(), 0.01D);
      assertEquals((-4565.0), rectangle0.getWidth(), 0.01D);
      assertEquals((-4565.0), rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals((-4562.0), rectangle0.getY(), 0.01D);
      assertEquals((-4562.0), rectangle0.getX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=-4562,y=-4562,width=-4565,height=-4565]", rectangle0.toString());
      assertEquals((-6844.5), rectangle0.getCenterX(), 0.01D);
      assertEquals((-6844.5), rectangle0.getCenterY(), 0.01D);
      assertEquals((-4562.0), rectangle0.getMinY(), 0.01D);
      assertEquals((-4562.0), rectangle0.getMinX(), 0.01D);
      assertEquals((-9127.0), rectangle0.getMaxX(), 0.01D);
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertFalse(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertNotNull(point2D_Double0);
      
      double double0 = (-2193.106173813692);
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double(point2D_Double0.y, double0, point2D_Double0.x, point2D_Double0.y);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals((-2193.106173813692), ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals((-2193.106173813692), ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals((-2193.106173813692), ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals((-2193.106173813692), ellipse2D_Double0.getMaxY(), 0.01D);
      assertNotNull(ellipse2D_Double0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)ellipse2D_Double0.getFrame();
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals((-2193.106173813692), rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals((-2193.106173813692), ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals((-2193.106173813692), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-2193.106173813692), rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals((-2193.106173813692), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-2193.106173813692), ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals((-2193.106173813692), ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals((-2193.106173813692), ellipse2D_Double0.getMaxY(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      Stack<Properties> stack0 = new Stack<Properties>();
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertNotNull(stack0);
      
      Vector<RenderingHints> vector0 = new Vector<RenderingHints>();
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      JTable jTable0 = new JTable((Vector) stack0, (Vector) vector0);
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(false, jTable0.isShowing());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isLightweight());
      assertNotNull(jTable0);
      
      PrintColorUIResource printColorUIResource0 = (PrintColorUIResource)jTable0.getForeground();
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", printColorUIResource0.toString());
      assertEquals(51, printColorUIResource0.getRed());
      assertEquals(255, printColorUIResource0.getAlpha());
      assertEquals(51, printColorUIResource0.getBlue());
      assertEquals(51, printColorUIResource0.getGreen());
      assertEquals(1, printColorUIResource0.getTransparency());
      assertEquals(-13421773, printColorUIResource0.getRGB());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(false, jTable0.isShowing());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isLightweight());
      assertNotNull(printColorUIResource0);
      
      DefaultColorSelectionModel defaultColorSelectionModel0 = new DefaultColorSelectionModel((Color) printColorUIResource0);
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", printColorUIResource0.toString());
      assertEquals(51, printColorUIResource0.getRed());
      assertEquals(255, printColorUIResource0.getAlpha());
      assertEquals(51, printColorUIResource0.getBlue());
      assertEquals(51, printColorUIResource0.getGreen());
      assertEquals(1, printColorUIResource0.getTransparency());
      assertEquals(-13421773, printColorUIResource0.getRGB());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(false, jTable0.isShowing());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isLightweight());
      assertNotNull(defaultColorSelectionModel0);
      
      JColorChooser jColorChooser0 = new JColorChooser((ColorSelectionModel) defaultColorSelectionModel0);
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", printColorUIResource0.toString());
      assertEquals(51, printColorUIResource0.getRed());
      assertEquals(255, printColorUIResource0.getAlpha());
      assertEquals(51, printColorUIResource0.getBlue());
      assertEquals(51, printColorUIResource0.getGreen());
      assertEquals(1, printColorUIResource0.getTransparency());
      assertEquals(-13421773, printColorUIResource0.getRGB());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(false, jTable0.isShowing());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isLightweight());
      assertNotNull(jColorChooser0);
      
      Rectangle rectangle0 = jColorChooser0.getVisibleRect();
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", printColorUIResource0.toString());
      assertEquals(51, printColorUIResource0.getRed());
      assertEquals(255, printColorUIResource0.getAlpha());
      assertEquals(51, printColorUIResource0.getBlue());
      assertEquals(51, printColorUIResource0.getGreen());
      assertEquals(1, printColorUIResource0.getTransparency());
      assertEquals(-13421773, printColorUIResource0.getRGB());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(false, jTable0.isShowing());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isLightweight());
      assertNotNull(rectangle0);
      
      boolean boolean0 = ShapeUtilities.contains((Rectangle2D) rectangle2D_Double0, (Rectangle2D) rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals((-2193.106173813692), rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals((-2193.106173813692), ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", printColorUIResource0.toString());
      assertEquals(51, printColorUIResource0.getRed());
      assertEquals(255, printColorUIResource0.getAlpha());
      assertEquals(51, printColorUIResource0.getBlue());
      assertEquals(51, printColorUIResource0.getGreen());
      assertEquals(1, printColorUIResource0.getTransparency());
      assertEquals(-13421773, printColorUIResource0.getRGB());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(false, jTable0.isShowing());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals((-2193.106173813692), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-2193.106173813692), rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals((-2193.106173813692), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-2193.106173813692), ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals((-2193.106173813692), ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals((-2193.106173813692), ellipse2D_Double0.getMaxY(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 1;
      DefaultTableCellRenderer defaultTableCellRenderer0 = new DefaultTableCellRenderer();
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertNotNull(defaultTableCellRenderer0);
      
      Rectangle rectangle0 = defaultTableCellRenderer0.bounds();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertNotNull(rectangle0);
      
      double double0 = 2749.1559722;
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(double0, (double) rectangle0.x, double0, (double) rectangle0.x, double0, (double) rectangle0.y, int0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(2749.1559722, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(2749.1559722, arc2D_Double0.x, 0.01D);
      assertEquals(2749.1559722, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(1, arc2D_Double0.getArcType());
      assertEquals(5498.3119444, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(2749.1559722, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(4123.7339583, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertNotNull(arc2D_Double0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)arc2D_Double0.getBounds2D();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(2749.1559722, rectangle2D_Double0.width, 0.01D);
      assertEquals(2749.1559722, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(2749.1559722, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(2749.1559722, arc2D_Double0.x, 0.01D);
      assertEquals(2749.1559722, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(4123.7339583, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(5498.3119444, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(2749.1559722, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(1, arc2D_Double0.getArcType());
      assertEquals(5498.3119444, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(2749.1559722, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(4123.7339583, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      boolean boolean0 = ShapeUtilities.contains((Rectangle2D) rectangle0, (Rectangle2D) rectangle2D_Double0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(2749.1559722, rectangle2D_Double0.width, 0.01D);
      assertEquals(2749.1559722, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(2749.1559722, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(2749.1559722, arc2D_Double0.x, 0.01D);
      assertEquals(2749.1559722, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(4123.7339583, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(5498.3119444, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(2749.1559722, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(1, arc2D_Double0.getArcType());
      assertEquals(5498.3119444, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(2749.1559722, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(4123.7339583, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      JButton jButton0 = new JButton();
      assertEquals(true, jButton0.isVisible());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(0, jButton0.countComponents());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(false, jButton0.isShowing());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertNotNull(jButton0);
      
      Rectangle rectangle0 = jButton0.getVisibleRect();
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(true, jButton0.isVisible());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(0, jButton0.countComponents());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(false, jButton0.isShowing());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertNotNull(rectangle0);
      
      boolean boolean0 = ShapeUtilities.contains((Rectangle2D) rectangle0, (Rectangle2D) rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(true, jButton0.isVisible());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(0, jButton0.countComponents());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(false, jButton0.isShowing());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertTrue(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      float float0 = 289.585F;
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource0 = new DefaultTableCellRenderer.UIResource();
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertNotNull(defaultTableCellRenderer_UIResource0);
      
      Rectangle rectangle0 = defaultTableCellRenderer_UIResource0.bounds();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertNotNull(rectangle0);
      
      Line2D.Float line2D_Float0 = new Line2D.Float((float) rectangle0.x, (float) rectangle0.y, float0, (float) rectangle0.width);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(289.585F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertNotNull(line2D_Float0);
      
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createLineRegion((Line2D) line2D_Float0, line2D_Float0.y1);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(289.585F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertNotNull(generalPath0);
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = (-1.7976931348623157E308);
      Shape shape0 = null;
      float float0 = 1672.3281F;
      Shape shape1 = ShapeUtilities.rotateShape(shape0, double0, float0, float0);
      assertNull(shape1);
  }

  @Test
  public void test08()  throws Throwable  {
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator();
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertNotNull(jToolBar_Separator0);
      
      Rectangle rectangle0 = jToolBar_Separator0.getBounds();
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertNotNull(rectangle0);
      
      Path2D.Double path2D_Double0 = (Path2D.Double)ShapeUtilities.rotateShape((Shape) rectangle0, (double) rectangle0.x, (float) rectangle0.width, (float) rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(1, path2D_Double0.getWindingRule());
      assertNotNull(path2D_Double0);
  }

  @Test
  public void test09()  throws Throwable  {
      JCheckBox jCheckBox0 = new JCheckBox();
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(true, jCheckBox0.isVisible());
      assertNotNull(jCheckBox0);
      
      Rectangle rectangle0 = jCheckBox0.getBounds();
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertNotNull(rectangle0);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      Path2D.Double path2D_Double0 = (Path2D.Double)ShapeUtilities.createTranslatedShape((Shape) rectangle0, rectangleAnchor0, (double) rectangle0.width, (double) rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(1, path2D_Double0.getWindingRule());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertNotNull(path2D_Double0);
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = (-713.7);
      Shape shape0 = null;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      // Undeclared exception!
      try {
        Shape shape1 = ShapeUtilities.createTranslatedShape(shape0, rectangleAnchor0, double0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      float float0 = (-302.0403F);
      String string0 = "";
      TitledBorder titledBorder0 = new TitledBorder(string0);
      assertNotNull(titledBorder0);
      
      JCheckBox jCheckBox0 = new JCheckBox();
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertNotNull(jCheckBox0);
      
      int int0 = (-4563);
      Rectangle rectangle0 = titledBorder0.getInteriorRectangle((Component) jCheckBox0, int0, int0, int0, int0);
      assertEquals((-4562), rectangle0.x);
      assertEquals((-4565), rectangle0.height);
      assertEquals((-4562), rectangle0.y);
      assertEquals((-4565), rectangle0.width);
      assertEquals((-4562.0), rectangle0.getX(), 0.01D);
      assertEquals((-4562.0), rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=-4562,y=-4562,width=-4565,height=-4565]", rectangle0.toString());
      assertEquals((-4562.0), rectangle0.getMinY(), 0.01D);
      assertEquals((-4562.0), rectangle0.getMinX(), 0.01D);
      assertEquals((-4565.0), rectangle0.getWidth(), 0.01D);
      assertEquals((-9127.0), rectangle0.getMaxX(), 0.01D);
      assertEquals((-4565.0), rectangle0.getHeight(), 0.01D);
      assertEquals((-9127.0), rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals((-6844.5), rectangle0.getCenterY(), 0.01D);
      assertEquals((-6844.5), rectangle0.getCenterX(), 0.01D);
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertNotNull(rectangle0);
      
      RectangleAnchor rectangleAnchor0 = null;
      // Undeclared exception!
      try {
        Shape shape0 = ShapeUtilities.createTranslatedShape((Shape) rectangle0, rectangleAnchor0, (double) float0, (double) float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' argument.
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = 993.54734;
      Ellipse2D ellipse2D0 = null;
      Shape shape0 = ShapeUtilities.clone((Shape) ellipse2D0);
      assertNull(shape0);
      
      // Undeclared exception!
      try {
        Shape shape1 = ShapeUtilities.createTranslatedShape(shape0, double0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertNotNull(defaultTreeCellRenderer0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      Rectangle rectangle0 = defaultTreeCellRenderer0.getVisibleRect();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertNotNull(rectangle0);
      
      Path2D.Double path2D_Double0 = (Path2D.Double)ShapeUtilities.createTranslatedShape((Shape) rectangle0, (double) rectangle0.width, rectangle2D_Double0.height);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(1, path2D_Double0.getWindingRule());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertNotNull(path2D_Double0);
  }

  @Test
  public void test14()  throws Throwable  {
      float float0 = 289.585F;
      JCheckBox jCheckBox0 = new JCheckBox();
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertNotNull(jCheckBox0);
      
      Rectangle rectangle0 = jCheckBox0.getBounds();
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertNotNull(rectangle0);
      
      GeneralPath generalPath0 = new GeneralPath((Shape) rectangle0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      GeneralPath generalPath1 = (GeneralPath)ShapeUtilities.createRegularCross(float0, float0);
      assertEquals(1, generalPath1.getWindingRule());
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertNotSame(generalPath1, generalPath0);
      assertNotNull(generalPath1);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath1, (Shape) generalPath0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(1, generalPath1.getWindingRule());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(1, generalPath0.getWindingRule());
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertFalse(generalPath0.equals((Object)generalPath1));
      assertNotSame(generalPath1, generalPath0);
      assertNotSame(generalPath0, generalPath1);
      assertFalse(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      JCheckBox jCheckBox0 = new JCheckBox();
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isShowing());
      assertNotNull(jCheckBox0);
      
      Rectangle rectangle0 = jCheckBox0.getBounds();
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertNotNull(rectangle0);
      
      GeneralPath generalPath0 = new GeneralPath((Shape) rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      GeneralPath generalPath1 = new GeneralPath();
      assertEquals(1, generalPath1.getWindingRule());
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertNotSame(generalPath1, generalPath0);
      assertNotNull(generalPath1);
      
      boolean boolean0 = ShapeUtilities.equal(generalPath1, generalPath0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(1, generalPath1.getWindingRule());
      assertEquals(1, generalPath0.getWindingRule());
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertFalse(generalPath0.equals((Object)generalPath1));
      assertNotSame(generalPath1, generalPath0);
      assertNotSame(generalPath0, generalPath1);
      assertFalse(boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      GeneralPath generalPath0 = new GeneralPath();
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      assertTrue(boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      float float0 = 289.585F;
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createRegularCross(float0, float0);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource0 = new DefaultTableCellRenderer.UIResource();
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertNotNull(defaultTableCellRenderer_UIResource0);
      
      Rectangle rectangle0 = defaultTableCellRenderer_UIResource0.bounds();
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertNotNull(rectangle0);
      
      GeneralPath generalPath1 = new GeneralPath((Shape) rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(1, generalPath1.getWindingRule());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertNotSame(generalPath1, generalPath0);
      assertNotNull(generalPath1);
      
      generalPath1.setWindingRule(rectangle0.width);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0, generalPath1.getWindingRule());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertNotSame(generalPath1, generalPath0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath0, (Shape) generalPath1);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0, generalPath1.getWindingRule());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertFalse(generalPath0.equals((Object)generalPath1));
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertNotSame(generalPath0, generalPath1);
      assertNotSame(generalPath1, generalPath0);
      assertFalse(boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      JCheckBox jCheckBox0 = new JCheckBox();
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(true, jCheckBox0.isEnabled());
      assertNotNull(jCheckBox0);
      
      Rectangle rectangle0 = jCheckBox0.getBounds();
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(true, jCheckBox0.isEnabled());
      assertNotNull(rectangle0);
      
      GeneralPath generalPath0 = new GeneralPath((Shape) rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(true, jCheckBox0.isEnabled());
      assertNotNull(generalPath0);
      
      GeneralPath generalPath1 = null;
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath1);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(true, jCheckBox0.isEnabled());
      assertFalse(boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator();
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertNotNull(jToolBar_Separator0);
      
      Rectangle rectangle0 = jToolBar_Separator0.getBounds();
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertNotNull(rectangle0);
      
      GeneralPath generalPath0 = new GeneralPath((Shape) rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertNotNull(generalPath0);
      
      GeneralPath generalPath1 = null;
      boolean boolean0 = ShapeUtilities.equal(generalPath1, generalPath0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      GeneralPath generalPath0 = null;
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath0);
      assertTrue(boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Polygon polygon1 = new Polygon(polygon0.ypoints, polygon0.ypoints, polygon0.npoints);
      assertEquals(0, polygon1.npoints);
      assertEquals(0, polygon0.npoints);
      assertFalse(polygon1.equals((Object)polygon0));
      assertFalse(polygon0.equals((Object)polygon1));
      assertNotSame(polygon1, polygon0);
      assertNotSame(polygon0, polygon1);
      assertNotNull(polygon1);
      
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon1);
      assertEquals(0, polygon1.npoints);
      assertEquals(0, polygon0.npoints);
      assertFalse(polygon1.equals((Object)polygon0));
      assertFalse(polygon0.equals((Object)polygon1));
      assertNotSame(polygon1, polygon0);
      assertNotSame(polygon0, polygon1);
      assertFalse(boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Polygon polygon1 = null;
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon1);
      assertEquals(0, polygon0.npoints);
      assertFalse(boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      Polygon polygon0 = null;
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon0);
      assertTrue(boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      JButton jButton0 = new JButton();
      assertEquals(false, jButton0.isShowing());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(0, jButton0.countComponents());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(true, jButton0.isVisible());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertNotNull(jButton0);
      
      Rectangle rectangle0 = jButton0.getVisibleRect();
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(false, jButton0.isShowing());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(0, jButton0.countComponents());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(true, jButton0.isVisible());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertNotNull(rectangle0);
      
      Arc2D.Float arc2D_Float0 = new Arc2D.Float(rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(false, jButton0.isShowing());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(0, jButton0.countComponents());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(true, jButton0.isVisible());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertNotNull(arc2D_Float0);
      
      double double0 = (-503.259162503574);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double((Rectangle2D) rectangle0, double0, (double) rectangle0.width, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals((-503.259162503574), arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(false, jButton0.isShowing());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(0, jButton0.countComponents());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(true, jButton0.isVisible());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertNotNull(arc2D_Double0);
      
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Float0, (Arc2D) arc2D_Double0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals((-503.259162503574), arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(false, jButton0.isShowing());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(0, jButton0.countComponents());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(true, jButton0.isVisible());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 0;
      Arc2D.Float arc2D_Float0 = new Arc2D.Float(int0);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertNotNull(arc2D_Float0);
      
      double double0 = 1.0;
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(double0, (double) int0, (double) arc2D_Float0.start, (double) arc2D_Float0.width, (double) arc2D_Float0.start, (double) arc2D_Float0.x, int0);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(1.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(1.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(1.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(1.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertNotNull(arc2D_Double0);
      
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Float0, (Arc2D) arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(1.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(1.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(1.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(1.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      Arc2D arc2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(arc2D0, arc2D0);
      assertTrue(boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      int int0 = 1086;
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double((double) int0, (double) polygon0.npoints, (double) polygon0.npoints, (double) int0);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(1086.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(1086.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0, polygon0.npoints);
      assertEquals(1086.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(1086.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(1086.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(1086.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(543.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertNotNull(ellipse2D_Double0);
      
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertNotNull(ellipse2D_Float0);
      
      boolean boolean0 = ShapeUtilities.equal((Ellipse2D) ellipse2D_Double0, (Ellipse2D) ellipse2D_Float0);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(1086.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(1086.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0, polygon0.npoints);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(1086.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(1086.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(1086.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(1086.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(543.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertNotNull(ellipse2D_Double0);
      
      Ellipse2D ellipse2D0 = null;
      boolean boolean0 = ShapeUtilities.equal((Ellipse2D) ellipse2D_Double0, ellipse2D0);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      Ellipse2D ellipse2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(ellipse2D0, ellipse2D0);
      assertTrue(boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertNotNull(ellipse2D_Float0);
      
      Ellipse2D.Float ellipse2D_Float1 = null;
      boolean boolean0 = ShapeUtilities.equal((Ellipse2D) ellipse2D_Float1, (Ellipse2D) ellipse2D_Float0);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test31()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertNotNull(line2D_Double0);
      
      boolean boolean0 = ShapeUtilities.equal((Line2D) line2D_Double0, (Line2D) line2D_Double0);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertTrue(boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertNotNull(line2D_Double0);
      
      Line2D line2D0 = null;
      boolean boolean0 = ShapeUtilities.equal((Line2D) line2D_Double0, line2D0);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      Line2D line2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(line2D0, line2D0);
      assertTrue(boolean0);
  }

  @Test
  public void test34()  throws Throwable  {
      Line2D line2D0 = null;
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertNotNull(line2D_Float0);
      
      boolean boolean0 = ShapeUtilities.equal(line2D0, (Line2D) line2D_Float0);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertFalse(boolean0);
  }

  @Test
  public void test35()  throws Throwable  {
      JCheckBox jCheckBox0 = new JCheckBox();
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertNotNull(jCheckBox0);
      
      Rectangle rectangle0 = jCheckBox0.getBounds();
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertNotNull(rectangle0);
      
      GeneralPath generalPath0 = new GeneralPath((Shape) rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertNotNull(generalPath0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath0, (Shape) rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test36()  throws Throwable  {
      float float0 = 0.0F;
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createDownTriangle(float0);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath0, (Shape) generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      assertTrue(boolean0);
  }

  @Test
  public void test37()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) polygon0, (Shape) polygon0);
      assertEquals(0, polygon0.npoints);
      assertTrue(boolean0);
  }

  @Test
  public void test38()  throws Throwable  {
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertNotNull(arc2D_Double0);
      
      Arc2D.Double arc2D_Double1 = null;
      boolean boolean0 = ShapeUtilities.equal((Shape) arc2D_Double0, (Shape) arc2D_Double1);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test39()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertNotNull(ellipse2D_Float0);
      
      Ellipse2D.Float ellipse2D_Float1 = null;
      boolean boolean0 = ShapeUtilities.equal((Shape) ellipse2D_Float0, (Shape) ellipse2D_Float1);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test40()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertNotNull(ellipse2D_Float0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) ellipse2D_Float0, (Shape) ellipse2D_Float0);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertTrue(boolean0);
  }

  @Test
  public void test41()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertNotNull(line2D_Double0);
      
      float float0 = (-1.0F);
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createLineRegion((Line2D) line2D_Double0, float0);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) line2D_Double0, (Shape) generalPath0);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(1, generalPath0.getWindingRule());
      assertFalse(boolean0);
  }

  @Test
  public void test42()  throws Throwable  {
      double double0 = 1.6341080286163947;
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertNotNull(point2D_Double0);
      
      Line2D.Double line2D_Double0 = new Line2D.Double(double0, point2D_Double0.y, point2D_Double0.y, double0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(1.6341080286163947, line2D_Double0.y2, 0.01D);
      assertEquals(1.6341080286163947, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertNotNull(line2D_Double0);
      
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertNotNull(line2D_Float0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) line2D_Double0, (Shape) line2D_Float0);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(1.6341080286163947, line2D_Double0.y2, 0.01D);
      assertEquals(1.6341080286163947, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test43()  throws Throwable  {
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertNotNull(arc2D_Double0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) arc2D_Double0, (Shape) arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertTrue(boolean0);
  }

  @Test
  public void test44()  throws Throwable  {
      JCheckBox jCheckBox0 = new JCheckBox();
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isShowing());
      assertNotNull(jCheckBox0);
      
      Rectangle rectangle0 = jCheckBox0.getBounds();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertNotNull(rectangle0);
      
      Rectangle rectangle1 = (Rectangle)ShapeUtilities.clone((Shape) rectangle0);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle1.getMinX(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals(true, rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle1.getX(), 0.01D);
      assertEquals(0.0, rectangle1.getHeight(), 0.01D);
      assertEquals(0.0, rectangle1.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle1.toString());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertTrue(rectangle0.equals((Object)rectangle1));
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle0, rectangle1);
      assertNotNull(rectangle1);
  }

  @Test
  public void test45()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertNotNull(rectangle0);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)ShapeUtilities.getPointInRectangle((double) rectangle0.width, (double) rectangle0.y, (Rectangle2D) rectangle0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertNotNull(point2D_Double0);
  }

  @Test
  public void test46()  throws Throwable  {
      JButton jButton0 = new JButton();
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(true, jButton0.isVisible());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(false, jButton0.isShowing());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(0, jButton0.countComponents());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(0, jButton0.getComponentCount());
      assertNotNull(jButton0);
      
      Rectangle rectangle0 = jButton0.getVisibleRect();
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(true, jButton0.isVisible());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(false, jButton0.isShowing());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(0, jButton0.countComponents());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(0, jButton0.getComponentCount());
      assertNotNull(rectangle0);
      
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createDiamond((float) rectangle0.y);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(true, jButton0.isVisible());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(false, jButton0.isShowing());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(0, jButton0.countComponents());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(0, jButton0.getComponentCount());
      assertNotNull(generalPath0);
  }

  @Test
  public void test47()  throws Throwable  {
      float float0 = (-302.0403F);
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createDiagonalCross(float0, float0);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
  }

  @Test
  public void test48()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertNotNull(defaultTreeCellRenderer0);
      
      Rectangle rectangle0 = defaultTreeCellRenderer0.getVisibleRect();
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertNotNull(rectangle0);
      
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createUpTriangle((float) rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertNotNull(generalPath0);
  }

  @Test
  public void test49()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertNotNull(line2D_Float0);
      
      JTextArea jTextArea0 = new JTextArea();
      assertEquals(false, jTextArea0.isMinimumSizeSet());
      assertEquals(0, jTextArea0.getComponentCount());
      assertEquals(true, jTextArea0.isVisible());
      assertEquals(false, jTextArea0.isPreferredSizeSet());
      assertEquals(false, jTextArea0.isFocusTraversalPolicySet());
      assertEquals(false, jTextArea0.isValid());
      assertEquals(false, jTextArea0.isShowing());
      assertEquals(false, jTextArea0.isMaximumSizeSet());
      assertEquals(false, jTextArea0.isFocusCycleRoot());
      assertEquals(0, jTextArea0.countComponents());
      assertEquals(false, jTextArea0.isLightweight());
      assertEquals(true, jTextArea0.isFontSet());
      assertEquals(false, jTextArea0.isDisplayable());
      assertEquals(false, jTextArea0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTextArea0.getIgnoreRepaint());
      assertEquals(true, jTextArea0.isCursorSet());
      assertEquals(true, jTextArea0.isForegroundSet());
      assertEquals(true, jTextArea0.isEnabled());
      assertEquals(true, jTextArea0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextArea0.isBackgroundSet());
      assertNotNull(jTextArea0);
      
      Rectangle rectangle0 = jTextArea0.getBounds();
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(false, jTextArea0.isMinimumSizeSet());
      assertEquals(0, jTextArea0.getComponentCount());
      assertEquals(true, jTextArea0.isVisible());
      assertEquals(false, jTextArea0.isPreferredSizeSet());
      assertEquals(false, jTextArea0.isFocusTraversalPolicySet());
      assertEquals(false, jTextArea0.isValid());
      assertEquals(false, jTextArea0.isShowing());
      assertEquals(false, jTextArea0.isMaximumSizeSet());
      assertEquals(false, jTextArea0.isFocusCycleRoot());
      assertEquals(0, jTextArea0.countComponents());
      assertEquals(false, jTextArea0.isLightweight());
      assertEquals(true, jTextArea0.isFontSet());
      assertEquals(false, jTextArea0.isDisplayable());
      assertEquals(false, jTextArea0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTextArea0.getIgnoreRepaint());
      assertEquals(true, jTextArea0.isCursorSet());
      assertEquals(true, jTextArea0.isForegroundSet());
      assertEquals(true, jTextArea0.isEnabled());
      assertEquals(true, jTextArea0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextArea0.isBackgroundSet());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertNotNull(rectangle0);
      
      Graphics2D graphics2D0 = null;
      // Undeclared exception!
      try {
        ShapeUtilities.drawRotatedShape(graphics2D0, (Shape) rectangle0, (double) rectangle0.y, line2D_Float0.x1, line2D_Float0.y1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
