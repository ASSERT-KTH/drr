/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:18:59 GMT 2014
 */

package org.jfree.data;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.jfree.chart.util.SortOrder;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.UnknownKeyException;
import org.junit.runner.RunWith;

 
public class DefaultKeyedValuesEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      int int0 = defaultKeyedValues0.hashCode();
      assertEquals(1, int0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
  }

  @Test
  public void test01()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      int int0 = 0;
      defaultKeyedValues0.addValue((Comparable) int0, (double) int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues defaultKeyedValues1 = (DefaultKeyedValues)defaultKeyedValues0.clone();
      assertNotNull(defaultKeyedValues1);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(1, defaultKeyedValues1.getItemCount());
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      assertTrue(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      assertTrue(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      
      double double0 = (-2498.581);
      defaultKeyedValues0.addValue((Comparable) int0, double0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      assertFalse(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      
      boolean boolean0 = defaultKeyedValues0.equals((Object) defaultKeyedValues1);
      assertFalse(boolean0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(1, defaultKeyedValues1.getItemCount());
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      assertFalse(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      assertFalse(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
  }

  @Test
  public void test02()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      int int0 = 0;
      defaultKeyedValues0.insertValue(int0, (Comparable) int0, (Number) int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues defaultKeyedValues1 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      assertFalse(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      
      boolean boolean0 = defaultKeyedValues1.equals((Object) defaultKeyedValues0);
      assertFalse(boolean0);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      assertFalse(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertFalse(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
  }

  @Test
  public void test03()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      boolean boolean0 = defaultKeyedValues0.equals((Object) linkedList0);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, defaultKeyedValues0.getItemCount());
  }

  @Test
  public void test04()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      int int0 = 0;
      defaultKeyedValues0.insertValue(int0, (Comparable) int0, (Number) int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      
      defaultKeyedValues0.sortByValues(sortOrder0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
  }

  @Test
  public void test05()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      
      String string0 = arrayList0.toString();
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      
      float float0 = Float.MAX_VALUE;
      assertEquals(3.4028235E38F, float0, 0.01F);
      
      defaultKeyedValues0.addValue((Comparable) string0, (Number) float0);
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.DESCENDING", sortOrder0.toString());
      
      defaultKeyedValues0.sortByKeys(sortOrder0);
      assertEquals("SortOrder.DESCENDING", sortOrder0.toString());
      assertEquals(1, defaultKeyedValues0.getItemCount());
  }

  @Test
  public void test06()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      float float0 = 0.0F;
      // Undeclared exception!
      try {
        defaultKeyedValues0.removeValue((Comparable) float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key (0.0) is not recognised.
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      int int0 = defaultKeyedValues0.getItemCount();
      assertEquals(0, int0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      defaultKeyedValues0.setValue((Comparable) int0, (double) int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      int int1 = 1;
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        defaultKeyedValues0.insertValue(int1, (Comparable) int0, (Number) int1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      int int0 = 0;
      defaultKeyedValues0.addValue((Comparable) int0, (double) int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      defaultKeyedValues0.insertValue(int0, (Comparable) int0, (Number) int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
  }

  @Test
  public void test09()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      int int0 = 0;
      Comparable<String> comparable0 = null;
      // Undeclared exception!
      try {
        defaultKeyedValues0.insertValue(int0, (Comparable) comparable0, (Number) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      int int0 = 2;
      // Undeclared exception!
      try {
        defaultKeyedValues0.insertValue(int0, (Comparable) int0, (double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      int int0 = (-1);
      short short0 = (short)1714;
      Short short1 = Short.valueOf(short0);
      assertEquals((short)1714, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      // Undeclared exception!
      try {
        defaultKeyedValues0.insertValue(int0, (Comparable) short1, (double) short1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = (-2.14653129102993);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Comparable<String> comparable0 = null;
      Double double1 = new Double(double0);
      assertEquals((-2.14653129102993), (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      // Undeclared exception!
      try {
        defaultKeyedValues0.addValue((Comparable) comparable0, (Number) double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      int int0 = 0;
      // Undeclared exception!
      try {
        Number number0 = defaultKeyedValues0.getValue((Comparable) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key not found: 0
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      boolean boolean0 = defaultKeyedValues0.equals((Object) defaultKeyedValues0);
      assertTrue(boolean0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      int int0 = Integer.MAX_VALUE;
      assertEquals(Integer.MAX_VALUE, int0);
      
      defaultKeyedValues0.setValue((Comparable) boolean0, (Number) int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      Integer integer0 = (Integer)defaultKeyedValues0.getValue((Comparable) boolean0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
  }

  @Test
  public void test15()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Comparable<Integer> comparable0 = null;
      // Undeclared exception!
      try {
        defaultKeyedValues0.removeValue(comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      boolean boolean0 = defaultKeyedValues0.equals((Object) defaultKeyedValues0);
      assertTrue(boolean0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues defaultKeyedValues1 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      assertTrue(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      
      int int0 = Integer.MAX_VALUE;
      assertEquals(Integer.MAX_VALUE, int0);
      
      defaultKeyedValues0.setValue((Comparable) boolean0, (Number) int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      assertFalse(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      
      defaultKeyedValues1.setValue((Comparable) boolean0, (Number) int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(1, defaultKeyedValues1.getItemCount());
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      assertTrue(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      assertTrue(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      
      boolean boolean1 = defaultKeyedValues1.equals((Object) defaultKeyedValues0);
      assertTrue(boolean1);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(1, defaultKeyedValues1.getItemCount());
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      assertTrue(boolean1 == boolean0);
      assertTrue(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      assertTrue(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
  }

  @Test
  public void test17()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      List list0 = defaultKeyedValues0.getKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, defaultKeyedValues0.getItemCount());
  }

  @Test
  public void test18()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = arrayList0.toString();
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      float float0 = Float.MAX_VALUE;
      assertEquals(3.4028235E38F, float0, 0.01F);
      
      defaultKeyedValues0.addValue((Comparable) string0, (Number) float0);
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      defaultKeyedValues0.removeValue((Comparable) string0);
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, defaultKeyedValues0.getItemCount());
  }

  @Test
  public void test19()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues defaultKeyedValues1 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      assertTrue(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      
      int int0 = Integer.MAX_VALUE;
      assertEquals(Integer.MAX_VALUE, int0);
      
      defaultKeyedValues0.addValue((Comparable) int0, (Number) int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      assertFalse(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      defaultKeyedValues1.insertValue(int1, (Comparable) int1, (double) int1);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      assertFalse(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertFalse(int1 == int0);
      
      boolean boolean0 = defaultKeyedValues1.equals((Object) defaultKeyedValues0);
      assertFalse(boolean0);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      assertFalse(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertFalse(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
  }
}
