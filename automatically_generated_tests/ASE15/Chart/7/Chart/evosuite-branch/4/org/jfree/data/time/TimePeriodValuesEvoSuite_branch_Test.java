/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:20:30 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.event.KeyEvent;
import java.awt.image.ImageObserver;
import java.util.Date;
import java.util.TimeZone;
import javax.swing.JLayeredPane;
import javax.swing.border.TitledBorder;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.javax.swing.MockJFileChooser;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class TimePeriodValuesEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      int int0 = ImageObserver.PROPERTIES;
      //  // Unstable assertion: assertEquals(4, int0);
      
      String string0 = "(O-";
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0, string0, string0);
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals("(O-", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals("(O-", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      //  // Unstable assertion: assertEquals("Wed May 04 04:04:00 GMT 1904", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(mockDate0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertEquals("U@lpFNZ_(r6{I", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      Month month0 = new Month((Date) mockDate0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertEquals("U@lpFNZ_(r6{I", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Wed May 04 04:04:00 GMT 1904", mockDate0.toString());
      //  // Unstable assertion: assertEquals((-2071051199508L), month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-2069711999508L), month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1904, month0.getYearValue());
      //  // Unstable assertion: assertEquals(5, month0.getMonth());
      //  // Unstable assertion: assertEquals(22853L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-2072390399507L), month0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(month0);
      
      timePeriodValues0.add((TimePeriod) month0, (Number) int0);
      //  // Unstable assertion: assertEquals("U@lpFNZ_(r6{I", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Wed May 04 04:04:00 GMT 1904", mockDate0.toString());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals("(O-", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals("(O-", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals((-2071051199508L), month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-2069711999508L), month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1904, month0.getYearValue());
      //  // Unstable assertion: assertEquals(5, month0.getMonth());
      //  // Unstable assertion: assertEquals(22853L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-2072390399507L), month0.getFirstMillisecond());
      
      // Undeclared exception!
      try {
        TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(int0, int0);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 1
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = ImageObserver.FRAMEBITS;
      assertEquals(16, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertNotNull(timePeriodValues0);
      
      String string0 = null;
      timePeriodValues0.setRangeDescription(string0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      
      int int1 = timePeriodValues0.hashCode();
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(1643569788, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = ImageObserver.FRAMEBITS;
      assertEquals(16, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertNotNull(timePeriodValues0);
      
      int int1 = timePeriodValues0.hashCode();
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(106986337, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = ImageObserver.FRAMEBITS;
      assertEquals(16, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNotNull(timePeriodValues0);
      
      String string0 = null;
      timePeriodValues0.setDomainDescription(string0);
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      
      int int1 = timePeriodValues0.hashCode();
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals((-963003820), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = ImageObserver.FRAMEBITS;
      //  // Unstable assertion: assertEquals(16, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(int0, int0);
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues1.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinStartIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.getNotify());
      //  // Unstable assertion: assertNull(timePeriodValues1.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getItemCount());
      //  // Unstable assertion: assertNotSame(timePeriodValues0, timePeriodValues1);
      //  // Unstable assertion: assertNotSame(timePeriodValues1, timePeriodValues0);
      //  // Unstable assertion: assertNotNull(timePeriodValues1);
      //  // Unstable assertion: assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      //  // Unstable assertion: assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      
      MockDate mockDate0 = new MockDate();
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(mockDate0);
      
      Second second0 = new Second((Date) mockDate0);
      //  // Unstable assertion: assertEquals(3601570880L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281492L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409280493L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409280992L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(second0);
      
      timePeriodValues0.add((TimePeriod) second0, (Number) int0);
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(3601570880L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281492L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409280493L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409280992L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertNotSame(timePeriodValues0, timePeriodValues1);
      //  // Unstable assertion: assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      
      String string0 = "\\";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      Second second1 = new Second((Date) mockDate0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertEquals(1392409281499L, second1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281000L, second1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(21, second1.getSecond());
      //  // Unstable assertion: assertEquals(3601570881L, second1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281999L, second1.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertNotSame(second1, second0);
      //  // Unstable assertion: assertNotNull(second1);
      //  // Unstable assertion: assertFalse(second1.equals((Object)second0));
      
      timePeriodValues1.add((TimePeriod) second1, (Number) int0);
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxEndIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues1.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues1.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinStartIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.getNotify());
      //  // Unstable assertion: assertNull(timePeriodValues1.getDescription());
      //  // Unstable assertion: assertEquals(1, timePeriodValues1.getItemCount());
      //  // Unstable assertion: assertEquals(1392409281499L, second1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281000L, second1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(21, second1.getSecond());
      //  // Unstable assertion: assertEquals(3601570881L, second1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281999L, second1.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertNotSame(timePeriodValues0, timePeriodValues1);
      //  // Unstable assertion: assertNotSame(timePeriodValues1, timePeriodValues0);
      //  // Unstable assertion: assertNotSame(second1, second0);
      //  // Unstable assertion: assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      //  // Unstable assertion: assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      //  // Unstable assertion: assertFalse(second1.equals((Object)second0));
      
      boolean boolean0 = timePeriodValues1.equals((Object) timePeriodValues0);
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxEndIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues1.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues1.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinStartIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.getNotify());
      //  // Unstable assertion: assertNull(timePeriodValues1.getDescription());
      //  // Unstable assertion: assertEquals(1, timePeriodValues1.getItemCount());
      //  // Unstable assertion: assertNotSame(timePeriodValues0, timePeriodValues1);
      //  // Unstable assertion: assertNotSame(timePeriodValues1, timePeriodValues0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      //  // Unstable assertion: assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = ImageObserver.FRAMEBITS;
      //  // Unstable assertion: assertEquals(16, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(int0, int0);
      //  // Unstable assertion: assertNull(timePeriodValues1.getDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues1.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues1.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertNotSame(timePeriodValues1, timePeriodValues0);
      //  // Unstable assertion: assertNotSame(timePeriodValues0, timePeriodValues1);
      //  // Unstable assertion: assertNotNull(timePeriodValues1);
      //  // Unstable assertion: assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      //  // Unstable assertion: assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      
      MockDate mockDate0 = new MockDate();
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(mockDate0);
      
      Second second0 = new Second((Date) mockDate0);
      //  // Unstable assertion: assertEquals(1392409280493L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409280992L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281492L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570880L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, second0.getSecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(second0);
      
      timePeriodValues0.add((TimePeriod) second0, (Number) int0);
      //  // Unstable assertion: assertEquals(1392409280493L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409280992L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281492L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570880L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, second0.getSecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertNotSame(timePeriodValues0, timePeriodValues1);
      //  // Unstable assertion: assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      
      timePeriodValues1.add((TimePeriod) second0, (Number) int0);
      //  // Unstable assertion: assertEquals(1392409280493L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409280992L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281492L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570880L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, second0.getSecond());
      //  // Unstable assertion: assertNull(timePeriodValues1.getDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.getNotify());
      //  // Unstable assertion: assertEquals(1, timePeriodValues1.getItemCount());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues1.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues1.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timePeriodValues1.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxEndIndex());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertNotSame(timePeriodValues1, timePeriodValues0);
      //  // Unstable assertion: assertNotSame(timePeriodValues0, timePeriodValues1);
      //  // Unstable assertion: assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      //  // Unstable assertion: assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      
      boolean boolean0 = timePeriodValues1.equals((Object) timePeriodValues0);
      //  // Unstable assertion: assertNull(timePeriodValues1.getDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.getNotify());
      //  // Unstable assertion: assertEquals(1, timePeriodValues1.getItemCount());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues1.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues1.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timePeriodValues1.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertNotSame(timePeriodValues1, timePeriodValues0);
      //  // Unstable assertion: assertNotSame(timePeriodValues0, timePeriodValues1);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      //  // Unstable assertion: assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = ImageObserver.FRAMEBITS;
      assertEquals(16, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(int0, int0);
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotNull(timePeriodValues1);
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      
      String string0 = null;
      timePeriodValues1.setDomainDescription(string0);
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertNull(timePeriodValues1.getDomainDescription());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      
      boolean boolean0 = timePeriodValues1.equals((Object) timePeriodValues0);
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertNull(timePeriodValues1.getDomainDescription());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertFalse(boolean0);
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
  }

  @Test
  public void test07()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertNotNull(fixedMillisecond0);
      
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281321L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(1392409281321L, fixedMillisecond1.getLastMillisecond());
      assertEquals(1392409281321L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals(1392409281321L, fixedMillisecond1.getSerialIndex());
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertNotNull(fixedMillisecond1);
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond1);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281321L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(1392409281321L, fixedMillisecond1.getLastMillisecond());
      assertEquals(1392409281321L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals(1392409281321L, fixedMillisecond1.getSerialIndex());
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertNotNull(timePeriodValues0);
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      
      String string0 = "T&%";
      TimePeriodValues timePeriodValues1 = new TimePeriodValues((Comparable) fixedMillisecond0, string0, string0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals("T&%", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals("T&%", timePeriodValues1.getDomainDescription());
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertNotNull(timePeriodValues1);
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      
      boolean boolean0 = timePeriodValues0.equals((Object) timePeriodValues1);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281321L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(1392409281321L, fixedMillisecond1.getLastMillisecond());
      assertEquals(1392409281321L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals(1392409281321L, fixedMillisecond1.getSerialIndex());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals("T&%", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals("T&%", timePeriodValues1.getDomainDescription());
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertFalse(boolean0);
      assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = MockJFileChooser.APPROVE_BUTTON_MNEMONIC_CHANGED_PROPERTY;
      assertEquals("ApproveButtonMnemonicChangedProperty", string0);
      assertNotNull(string0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0, string0, string0);
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("ApproveButtonMnemonicChangedProperty", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("ApproveButtonMnemonicChangedProperty", timePeriodValues0.getDomainDescription());
      assertNotNull(timePeriodValues0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      
      boolean boolean0 = timePeriodValues0.equals((Object) integer0);
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("ApproveButtonMnemonicChangedProperty", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("ApproveButtonMnemonicChangedProperty", timePeriodValues0.getDomainDescription());
      assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = ImageObserver.FRAMEBITS;
      //  // Unstable assertion: assertEquals(16, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      
      int int1 = timePeriodValues0.getMaxStartIndex();
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals((-1), int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      MockDate mockDate0 = new MockDate((long) int1);
      //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      Second second0 = new Second((Date) mockDate0);
      //  // Unstable assertion: assertEquals(2209161599L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-8L), second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-507L), second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(492L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(59, second0.getSecond());
      //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      Millisecond millisecond0 = new Millisecond(int0, second0);
      //  // Unstable assertion: assertEquals(2209161599L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-8L), second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-507L), second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(492L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(59, second0.getSecond());
      //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      //  // Unstable assertion: assertEquals((-984L), millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-984L), millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-984L), millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(16L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(2209161599016L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertNotNull(millisecond0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) int0);
      //  // Unstable assertion: assertEquals(2209161599L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-8L), second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-507L), second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(492L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(59, second0.getSecond());
      //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      //  // Unstable assertion: assertEquals((-984L), millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-984L), millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-984L), millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(16L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(2209161599016L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(int0, int1);
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.getNotify());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues1.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinStartIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues1.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues1.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertNotSame(timePeriodValues1, timePeriodValues0);
      //  // Unstable assertion: assertNotSame(timePeriodValues0, timePeriodValues1);
      //  // Unstable assertion: assertNotNull(timePeriodValues1);
      //  // Unstable assertion: assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      boolean boolean0 = timePeriodValues1.equals((Object) timePeriodValues0);
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.getNotify());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues1.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinStartIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues1.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues1.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertNotSame(timePeriodValues1, timePeriodValues0);
      //  // Unstable assertion: assertNotSame(timePeriodValues0, timePeriodValues1);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      //  // Unstable assertion: assertFalse(int0 == int1);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = DefaultEditorKit.beginLineAction;
      assertEquals("caret-begin-line", string0);
      assertNotNull(string0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertNotNull(timePeriodValues0);
      
      int int0 = 810;
      // Undeclared exception!
      try {
        timePeriodValues0.delete(int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 810, Size: 0
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = DefaultEditorKit.beginLineAction;
      assertEquals("caret-begin-line", string0);
      assertNotNull(string0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0);
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNotNull(timePeriodValues0);
      
      int int0 = 810;
      int int1 = (-991);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      MockDate mockDate0 = (MockDate)fixedMillisecond0.getEnd();
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((Date) mockDate0, (Date) mockDate0);
      assertEquals(1392409281320L, simpleTimePeriod0.getEndMillis());
      assertEquals(1392409281320L, simpleTimePeriod0.getStartMillis());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(simpleTimePeriod0);
      
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, (double) int1);
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(false, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(1, timePeriodValues0.getItemCount());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(1392409281320L, simpleTimePeriod0.getEndMillis());
      assertEquals(1392409281320L, simpleTimePeriod0.getStartMillis());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(int1 == int0);
      
      timePeriodValues0.delete(int0, int1);
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(false, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(1, timePeriodValues0.getItemCount());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = MockJFileChooser.APPROVE_BUTTON_MNEMONIC_CHANGED_PROPERTY;
      assertEquals("ApproveButtonMnemonicChangedProperty", string0);
      assertNotNull(string0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0, string0, string0);
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("ApproveButtonMnemonicChangedProperty", timePeriodValues0.getRangeDescription());
      assertEquals("ApproveButtonMnemonicChangedProperty", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValue timePeriodValue0 = null;
      // Undeclared exception!
      try {
        timePeriodValues0.add(timePeriodValue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null item not allowed.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      long long0 = (-1297L);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(long0, long0);
      assertEquals((-1297L), simpleTimePeriod0.getStartMillis());
      assertEquals((-1297L), simpleTimePeriod0.getEndMillis());
      assertNotNull(simpleTimePeriod0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) simpleTimePeriod0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals((-1297L), simpleTimePeriod0.getStartMillis());
      assertEquals((-1297L), simpleTimePeriod0.getEndMillis());
      assertNotNull(timePeriodValues0);
      
      int int0 = (-2609);
      // Undeclared exception!
      try {
        timePeriodValues0.update(int0, (Number) long0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = KeyEvent.VK_COMMA;
      assertEquals(44, int0);
      
      String string0 = "NegHtive 'periods' argument.";
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0, string0, string0);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("NegHtive 'periods' argument.", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("NegHtive 'periods' argument.", timePeriodValues0.getRangeDescription());
      assertNotNull(timePeriodValues0);
      
      // Undeclared exception!
      try {
        TimePeriod timePeriod0 = timePeriodValues0.getTimePeriod(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 44, Size: 0
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = ImageObserver.PROPERTIES;
      assertEquals(4, int0);
      
      String string0 = "(O-";
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0, string0, string0);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals("(O-", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("(O-", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertNotNull(timePeriodValues0);
      
      int int1 = timePeriodValues0.getMaxEndIndex();
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals("(O-", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("(O-", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = ImageObserver.FRAMEBITS;
      assertEquals(16, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertNotNull(timePeriodValues0);
      
      int int1 = timePeriodValues0.getMinMiddleIndex();
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test17()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertNotNull(timePeriodValues0);
      
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals((-1), int0);
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = TitledBorder.LEADING;
      assertEquals(4, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertNotNull(timePeriodValues0);
      
      // Undeclared exception!
      try {
        Number number0 = timePeriodValues0.getValue(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 0
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = TitledBorder.LEADING;
      assertEquals(4, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertNotNull(timePeriodValues1);
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = DefaultEditorKit.beginLineAction;
      assertEquals("caret-begin-line", string0);
      assertNotNull(string0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNotNull(timePeriodValues0);
      
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals((-1), int0);
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = ImageObserver.FRAMEBITS;
      //  // Unstable assertion: assertEquals(16, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      
      MockDate mockDate0 = new MockDate((long) int0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(mockDate0);
      
      Second second0 = new Second((Date) mockDate0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals(492L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2209161599L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-8L), second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-507L), second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(59, second0.getSecond());
      //  // Unstable assertion: assertNotNull(second0);
      
      Millisecond millisecond0 = new Millisecond(int0, second0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals(16L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals((-984L), millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-984L), millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-984L), millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2209161599016L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(492L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2209161599L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-8L), second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-507L), second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(59, second0.getSecond());
      //  // Unstable assertion: assertNotNull(millisecond0);
      
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) int0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals(16L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals((-984L), millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-984L), millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-984L), millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2209161599016L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(492L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2209161599L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-8L), second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-507L), second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(59, second0.getSecond());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
      //  // Unstable assertion: assertEquals(16L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(16L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(16L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(16L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(fixedMillisecond0);
      
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, (Number) int0);
      //  // Unstable assertion: assertEquals(16L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(16L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(16L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(16L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(timePeriodValue0);
      
      timePeriodValues0.add(timePeriodValue0);
      //  // Unstable assertion: assertEquals(16L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(16L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(16L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(16L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = ImageObserver.FRAMEBITS;
      assertEquals(16, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertNotNull(timePeriodValues0);
      
      int int1 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }
}
