/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:09:36 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Component;
import java.awt.image.ImageObserver;
import java.util.Calendar;
import java.util.Date;
import javax.swing.AbstractButton;
import javax.swing.DefaultButtonModel;
import javax.swing.JComponent;
import javax.swing.SwingConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.FileSystemHandling;

import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.junit.runner.RunWith;

 
public class TimePeriodValuesEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      int int0 = (-31);
      String string0 = null;
      String string1 = "Monthoutsia vld rane.";
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0, string1, string0);
      assertNull(timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Monthoutsia vld rane.", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertNotNull(timePeriodValues0);
      
      int int1 = timePeriodValues0.hashCode();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Monthoutsia vld rane.", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(1916521122, int1);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = AbstractButton.ROLLOVER_ICON_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("rolloverIcon", string0);
      
      String string1 = null;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0, string1, string0);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("rolloverIcon", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNotNull(timePeriodValues0);
      
      int int0 = timePeriodValues0.hashCode();
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("rolloverIcon", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(1023268641, int0);
  }

  @Test
  public void test02()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(569L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570880569L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(millisecond0);
      
      int int0 = (-436);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-436,MONTH=-436,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-436,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      
      long long0 = millisecond0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409280569,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=2014,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=20,MINUTE=21,SECOND=20,MILLISECOND=569,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(569L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570880569L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409280569L, long0);
      
      String string0 = "org.jfree.data.time.TimePeriodValues";
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) millisecond0, string0, string0);
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals("org.jfree.data.time.TimePeriodValues", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals("org.jfree.data.time.TimePeriodValues", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(569L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570880569L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) long0);
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals("org.jfree.data.time.TimePeriodValues", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals("org.jfree.data.time.TimePeriodValues", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409280569,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=2014,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=20,MINUTE=21,SECOND=20,MILLISECOND=569,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(569L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570880569L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      int int1 = 0;
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(int1, int1);
      //  // Unstable assertion: assertNotSame(timePeriodValues0, timePeriodValues1);
      //  // Unstable assertion: assertNotSame(timePeriodValues1, timePeriodValues0);
      //  // Unstable assertion: assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      //  // Unstable assertion: assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals("org.jfree.data.time.TimePeriodValues", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals("org.jfree.data.time.TimePeriodValues", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues1.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals("org.jfree.data.time.TimePeriodValues", timePeriodValues1.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timePeriodValues1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.getNotify());
      //  // Unstable assertion: assertEquals("org.jfree.data.time.TimePeriodValues", timePeriodValues1.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinStartIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues1.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(569L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570880569L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(timePeriodValues1);
      
      boolean boolean0 = timePeriodValues0.equals((Object) timePeriodValues1);
      //  // Unstable assertion: assertNotSame(timePeriodValues0, timePeriodValues1);
      //  // Unstable assertion: assertNotSame(timePeriodValues1, timePeriodValues0);
      //  // Unstable assertion: assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      //  // Unstable assertion: assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals("org.jfree.data.time.TimePeriodValues", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals("org.jfree.data.time.TimePeriodValues", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues1.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals("org.jfree.data.time.TimePeriodValues", timePeriodValues1.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timePeriodValues1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.getNotify());
      //  // Unstable assertion: assertEquals("org.jfree.data.time.TimePeriodValues", timePeriodValues1.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinStartIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues1.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(569L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570880569L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = JComponent.UNDEFINED_CONDITION;
      //  // Unstable assertion: assertEquals((-1), int0);
      
      String string0 = "org.jfree.data.time.TimePeriodValues";
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0);
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(int0, int0);
      //  // Unstable assertion: assertNotSame(timePeriodValues1, timePeriodValues0);
      //  // Unstable assertion: assertNotSame(timePeriodValues0, timePeriodValues1);
      //  // Unstable assertion: assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      //  // Unstable assertion: assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.getNotify());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues1.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues1.getDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertNotNull(timePeriodValues1);
      
      Year year0 = new Year();
      //  // Unstable assertion: assertEquals(1388534400751L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302400750L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1420070400750L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertNotNull(year0);
      
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) year0, (Number) int0);
      //  // Unstable assertion: assertEquals(1388534400751L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302400750L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1420070400750L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertNotNull(timePeriodValue0);
      
      timePeriodValues0.add(timePeriodValue0);
      //  // Unstable assertion: assertNotSame(timePeriodValues0, timePeriodValues1);
      //  // Unstable assertion: assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(1388534400751L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302400750L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1420070400750L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      
      boolean boolean0 = timePeriodValues1.equals((Object) timePeriodValues0);
      //  // Unstable assertion: assertNotSame(timePeriodValues1, timePeriodValues0);
      //  // Unstable assertion: assertNotSame(timePeriodValues0, timePeriodValues1);
      //  // Unstable assertion: assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      //  // Unstable assertion: assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.getNotify());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues1.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues1.getDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = DefaultButtonModel.ENABLED;
      assertEquals(8, int0);
      
      String string0 = "s!e!8N1E_";
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0, string0, string0);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals("s!e!8N1E_", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("s!e!8N1E_", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValues timePeriodValues1 = new TimePeriodValues((Comparable) int0);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertNotNull(timePeriodValues1);
      
      boolean boolean0 = timePeriodValues0.equals((Object) timePeriodValues1);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals("s!e!8N1E_", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("s!e!8N1E_", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertFalse(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      float float0 = Component.RIGHT_ALIGNMENT;
      assertEquals(1.0F, float0, 0.01F);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) float0, (Number) float0);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01D);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01D);
      assertNotNull(xYDataItem0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) xYDataItem0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01D);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01D);
      assertNotNull(timePeriodValues0);
      
      int int0 = (-37);
      String string0 = "org.jfree.data.time.TimePeriodValue";
      TimePeriodValues timePeriodValues1 = new TimePeriodValues((Comparable) int0, string0, string0);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals("org.jfree.data.time.TimePeriodValue", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals("org.jfree.data.time.TimePeriodValue", timePeriodValues1.getDomainDescription());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertNotNull(timePeriodValues1);
      
      boolean boolean0 = timePeriodValues0.equals((Object) timePeriodValues1);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01D);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01D);
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals("org.jfree.data.time.TimePeriodValue", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals("org.jfree.data.time.TimePeriodValue", timePeriodValues1.getDomainDescription());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertFalse(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      float float0 = Component.RIGHT_ALIGNMENT;
      assertEquals(1.0F, float0, 0.01F);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) float0, (Number) float0);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01D);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01D);
      assertNotNull(xYDataItem0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) xYDataItem0);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01D);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01D);
      assertNotNull(timePeriodValues0);
      
      boolean boolean0 = timePeriodValues0.equals((Object) xYDataItem0);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01D);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = AbstractButton.ROLLOVER_ICON_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("rolloverIcon", string0);
      
      String string1 = null;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0, string0, string0);
      assertEquals("rolloverIcon", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("rolloverIcon", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertEquals("rolloverIcon", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("rolloverIcon", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals("rolloverIcon", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals("rolloverIcon", timePeriodValues1.getDomainDescription());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertNotNull(timePeriodValues1);
      
      timePeriodValues0.setRangeDescription(string1);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      assertEquals("rolloverIcon", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      
      boolean boolean0 = timePeriodValues0.equals((Object) timePeriodValues1);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertEquals("rolloverIcon", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals("rolloverIcon", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals("rolloverIcon", timePeriodValues1.getDomainDescription());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertFalse(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      float float0 = Component.RIGHT_ALIGNMENT;
      assertEquals(1.0F, float0, 0.01F);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) float0, (Number) float0);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01D);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01D);
      assertNotNull(xYDataItem0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) xYDataItem0);
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01D);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01D);
      assertNotNull(timePeriodValues0);
      
      int int0 = (-37);
      // Undeclared exception!
      try {
        timePeriodValues0.delete(int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570880569L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(569L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(millisecond0);
      
      int int0 = (-436);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-436,MONTH=-436,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-436,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      
      long long0 = millisecond0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409280569,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=2014,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=20,MINUTE=21,SECOND=20,MILLISECOND=569,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570880569L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(569L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409280569L, long0);
      
      String string0 = "org.jfree.data.time.TimePeriodValues";
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) millisecond0, string0, string0);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570880569L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(569L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("org.jfree.data.time.TimePeriodValues", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals("org.jfree.data.time.TimePeriodValues", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) long0);
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409280569,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=2014,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=20,MINUTE=21,SECOND=20,MILLISECOND=569,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570880569L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(569L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("org.jfree.data.time.TimePeriodValues", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals("org.jfree.data.time.TimePeriodValues", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      
      int int1 = timePeriodValues0.getMinStartIndex();
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570880569L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(569L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("org.jfree.data.time.TimePeriodValues", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals("org.jfree.data.time.TimePeriodValues", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, int1);
      
      timePeriodValues0.delete(int1, int0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570880569L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(569L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("org.jfree.data.time.TimePeriodValues", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals("org.jfree.data.time.TimePeriodValues", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
  }

  @Test
  public void test10()  throws Throwable  {
      boolean boolean0 = false;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) boolean0);
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      
      int int0 = Integer.MAX_VALUE;
      int int1 = timePeriodValues0.getMaxStartIndex();
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals((-1), int1);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int1, int0, int1, int1, int1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-1,MONTH=2147483647,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1,HOUR_OF_DAY=-1,MINUTE=-1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getTime();
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals("Mon Apr 29 22:59:00 GMT 178960644", date0.toString());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=5647390295727540000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=178960644,MONTH=3,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=29,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=59,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertNotNull(date0);
      
      Week week0 = new Week(date0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals("Mon Apr 29 22:59:00 GMT 178960644", date0.toString());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=5647390295727540000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=178960644,MONTH=3,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=29,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=59,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(18, week0.getWeek());
      //  // Unstable assertion: assertEquals((-963098L), week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-635621471999250L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-635622076799249L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-635621774399250L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(-18172, week0.getYearValue());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertNotNull(week0);
      
      timePeriodValues0.add((TimePeriod) week0, (double) int1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals("Mon Apr 29 22:59:00 GMT 178960644", date0.toString());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=5647390295727540000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=178960644,MONTH=3,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=29,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=59,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(18, week0.getWeek());
      //  // Unstable assertion: assertEquals((-963098L), week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-635621471999250L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-635622076799249L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-635621774399250L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(-18172, week0.getYearValue());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(date0, date0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals("Mon Apr 29 22:59:00 GMT 178960644", date0.toString());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=5647390295727540000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=178960644,MONTH=3,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=29,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=59,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(5647390295727540000L, simpleTimePeriod0.getStartMillis());
      //  // Unstable assertion: assertEquals(5647390295727540000L, simpleTimePeriod0.getEndMillis());
      //  // Unstable assertion: assertNotNull(simpleTimePeriod0);
      
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) simpleTimePeriod0, (double) int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals("Mon Apr 29 22:59:00 GMT 178960644", date0.toString());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=5647390295727540000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=178960644,MONTH=3,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=29,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=59,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(5647390295727540000L, simpleTimePeriod0.getStartMillis());
      //  // Unstable assertion: assertEquals(5647390295727540000L, simpleTimePeriod0.getEndMillis());
      //  // Unstable assertion: assertNotNull(timePeriodValue0);
      
      timePeriodValues0.add(timePeriodValue0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals("Mon Apr 29 22:59:00 GMT 178960644", date0.toString());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=5647390295727540000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=178960644,MONTH=3,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=29,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=59,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(2, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(5647390295727540000L, simpleTimePeriod0.getStartMillis());
      //  // Unstable assertion: assertEquals(5647390295727540000L, simpleTimePeriod0.getEndMillis());
  }

  @Test
  public void test11()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      //  // Unstable assertion: assertTrue(boolean0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) boolean0);
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595200750L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391990400751L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392292800750L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertNotNull(week0);
      
      int int0 = SwingConstants.RIGHT;
      //  // Unstable assertion: assertEquals(4, int0);
      
      timePeriodValues0.add((TimePeriod) week0, (Number) int0);
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595200750L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391990400751L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392292800750L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((long) int0, (long) int0);
      //  // Unstable assertion: assertEquals(4L, simpleTimePeriod0.getEndMillis());
      //  // Unstable assertion: assertEquals(4L, simpleTimePeriod0.getStartMillis());
      //  // Unstable assertion: assertNotNull(simpleTimePeriod0);
      
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, (Number) int0);
      //  // Unstable assertion: assertEquals(4L, simpleTimePeriod0.getEndMillis());
      //  // Unstable assertion: assertEquals(4L, simpleTimePeriod0.getStartMillis());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(2, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = ImageObserver.ABORT;
      assertEquals(128, int0);
      
      String string0 = "";
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0, string0, string0);
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValue timePeriodValue0 = null;
      // Undeclared exception!
      try {
        timePeriodValues0.add(timePeriodValue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null item not allowed.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = JComponent.UNDEFINED_CONDITION;
      assertEquals((-1), int0);
      
      String string0 = "org.jfree.data.time.TimePeriodValues";
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0);
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertNotNull(timePeriodValues0);
      
      // Undeclared exception!
      try {
        timePeriodValues0.update(int0, (Number) int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) boolean0);
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertNotNull(timePeriodValues0);
      
      int int0 = SwingConstants.RIGHT;
      assertEquals(4, int0);
      
      // Undeclared exception!
      try {
        TimePeriod timePeriod0 = timePeriodValues0.getTimePeriod(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 0
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "org.jfree.data.time.TimePeriodValues";
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0);
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertNotNull(timePeriodValues0);
      
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals((-1), int0);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "org.jfree.data.time.TimePeriodValues";
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0);
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertNotNull(timePeriodValues0);
      
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals((-1), int0);
  }

  @Test
  public void test17()  throws Throwable  {
      boolean boolean0 = false;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) boolean0);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNotNull(timePeriodValues0);
      
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try {
        Number number0 = timePeriodValues0.getValue(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = (-10);
      String string0 = "-'I";
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0, string0, string0);
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("-'I", timePeriodValues0.getDomainDescription());
      assertEquals("-'I", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertNotNull(timePeriodValues0);
      
      timePeriodValues0.setDomainDescription(string0);
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("-'I", timePeriodValues0.getDomainDescription());
      assertEquals("-'I", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = DefaultButtonModel.ENABLED;
      assertEquals(8, int0);
      
      String string0 = "s!e!8N1E_";
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0, string0, string0);
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("s!e!8N1E_", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("s!e!8N1E_", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertNotNull(timePeriodValues0);
      
      int int1 = timePeriodValues0.getMinEndIndex();
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("s!e!8N1E_", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("s!e!8N1E_", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), int1);
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = (-31);
      String string0 = null;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0, string0, string0);
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertNotNull(timePeriodValues0);
      
      int int1 = timePeriodValues0.getMaxMiddleIndex();
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), int1);
  }
}
