/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:03:12 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.image.DataBuffer;
import java.util.Date;
import java.util.TimeZone;
import javax.swing.JComponent;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Second;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class TimePeriodValuesEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = DefaultEditorKit.insertContentAction;
      assertNotNull(string0);
      assertEquals("insert-content", string0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0);
      assertNotNull(timePeriodValues0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      
      int int0 = 8;
      Week week0 = new Week(int0, int0);
      assertNotNull(week0);
      assertEquals(8, week0.getYearValue());
      assertEquals(432L, week0.getSerialIndex());
      assertEquals((-61910308800001L), week0.getMiddleMillisecond());
      assertEquals((-61910611200000L), week0.getFirstMillisecond());
      assertEquals((-61910006400001L), week0.getLastMillisecond());
      assertEquals(8, week0.getWeek());
      
      timePeriodValues0.add((TimePeriod) week0, (Number) int0);
      assertEquals(8, week0.getYearValue());
      assertEquals(432L, week0.getSerialIndex());
      assertEquals((-61910308800001L), week0.getMiddleMillisecond());
      assertEquals((-61910611200000L), week0.getFirstMillisecond());
      assertEquals((-61910006400001L), week0.getLastMillisecond());
      assertEquals(8, week0.getWeek());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(false, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(1, timePeriodValues0.getItemCount());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      assertNotNull(timePeriodValues1);
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals(0, timePeriodValues1.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals(false, timePeriodValues1.isEmpty());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals(0, timePeriodValues1.getMaxEndIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(1, timePeriodValues1.getItemCount());
      assertEquals(0, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues1.getMinEndIndex());
      assertEquals(0, timePeriodValues1.getMinStartIndex());
      assertEquals(0, timePeriodValues1.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(false, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(1, timePeriodValues0.getItemCount());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertNotSame(timePeriodValues0, timePeriodValues1);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = DefaultEditorKit.insertContentAction;
      assertNotNull(string0);
      assertEquals("insert-content", string0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0);
      assertNotNull(timePeriodValues0);
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      
      int int0 = (-1687);
      int int1 = timePeriodValues0.getMinEndIndex();
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Week week0 = new Week(int0, int0);
      assertNotNull(week0);
      assertEquals((-115341969600001L), week0.getMiddleMillisecond());
      assertEquals(105, week0.getWeek());
      assertEquals((-89306L), week0.getSerialIndex());
      assertEquals((-115342272000000L), week0.getFirstMillisecond());
      assertEquals(-1687, week0.getYearValue());
      assertEquals((-115341667200001L), week0.getLastMillisecond());
      assertFalse(int0 == int1);
      
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) week0, (double) int1);
      assertNotNull(timePeriodValue0);
      assertEquals((-115341969600001L), week0.getMiddleMillisecond());
      assertEquals(105, week0.getWeek());
      assertEquals((-89306L), week0.getSerialIndex());
      assertEquals((-115342272000000L), week0.getFirstMillisecond());
      assertEquals(-1687, week0.getYearValue());
      assertEquals((-115341667200001L), week0.getLastMillisecond());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      timePeriodValues0.add(timePeriodValue0);
      assertEquals((-115341969600001L), week0.getMiddleMillisecond());
      assertEquals(105, week0.getWeek());
      assertEquals((-89306L), week0.getSerialIndex());
      assertEquals((-115342272000000L), week0.getFirstMillisecond());
      assertEquals(-1687, week0.getYearValue());
      assertEquals((-115341667200001L), week0.getLastMillisecond());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(1, timePeriodValues0.getItemCount());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(false, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(int1, int0);
      assertNotNull(timePeriodValues1);
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals(0, timePeriodValues1.getMaxStartIndex());
      assertEquals(0, timePeriodValues1.getMinMiddleIndex());
      assertEquals(0, timePeriodValues1.getMinStartIndex());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(0, timePeriodValues1.getMaxEndIndex());
      assertEquals(0, timePeriodValues1.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals(0, timePeriodValues1.getMinEndIndex());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(1, timePeriodValues0.getItemCount());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(false, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertFalse(int1 == int0);
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertFalse(int0 == int1);
      assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertNotSame(timePeriodValues0, timePeriodValues1);
  }

  @Test
  public void test02()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      String string0 = "~";
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, string0, string0);
      assertNotNull(timePeriodValues0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("~", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("~", timePeriodValues0.getDomainDescription());
      
      int int0 = timePeriodValues0.hashCode();
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("~", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("~", timePeriodValues0.getDomainDescription());
      assertEquals((-1087460221), int0);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT;
      assertEquals(1, int0);
      
      String string0 = null;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0, string0, string0);
      assertNotNull(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      
      int int1 = timePeriodValues0.hashCode();
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(573579631, int1);
  }

  @Test
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)61;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) byteArray0[0]);
      assertNotNull(timePeriodValues0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = "by";
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy((int) byte0, (int) byteArray0[0]);
      assertNotNull(timePeriodValues1);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertNull(timePeriodValues1.getDescription());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      timePeriodValues0.setRangeDescription(string0);
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals("by", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      
      boolean boolean0 = timePeriodValues1.equals((Object) timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals("by", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertNull(timePeriodValues1.getDescription());
      assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = (-246);
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(1392409281992L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570881L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(21, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409280993L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281492L, second0.getMiddleMillisecond());
      
      Millisecond millisecond0 = new Millisecond(int0, second0);
      //  // Unstable assertion: assertNotNull(millisecond0);
      //  // Unstable assertion: assertEquals((-246L), millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409280754L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409280754L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409280754L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570880754L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281992L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570881L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(21, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409280993L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281492L, second0.getMiddleMillisecond());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) millisecond0);
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      //  // Unstable assertion: assertEquals((-246L), millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409280754L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409280754L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409280754L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570880754L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(1392409281992L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570881L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(21, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409280993L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281492L, second0.getMiddleMillisecond());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-246,MONTH=-246,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-246,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      
      TimePeriodValues timePeriodValues1 = new TimePeriodValues((Comparable) mockGregorianCalendar0);
      //  // Unstable assertion: assertNotNull(timePeriodValues1);
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-246,MONTH=-246,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-246,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues1.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinStartIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues1.getDescription());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues1.getDomainDescription());
      //  // Unstable assertion: assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      //  // Unstable assertion: assertNotSame(timePeriodValues1, timePeriodValues0);
      
      boolean boolean0 = timePeriodValues1.equals((Object) timePeriodValues0);
      //  // Unstable assertion: assertEquals((-246L), millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409280754L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409280754L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409280754L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570880754L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(1392409281992L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570881L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(21, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409280993L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281492L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-246,MONTH=-246,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-246,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues1.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinStartIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues1.getDescription());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues1.getDomainDescription());
      //  // Unstable assertion: assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      //  // Unstable assertion: assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(timePeriodValues0, timePeriodValues1);
      //  // Unstable assertion: assertNotSame(timePeriodValues1, timePeriodValues0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "";
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0, string0, string0);
      assertNotNull(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      
      boolean boolean0 = timePeriodValues0.equals((Object) string0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 0;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      assertNotNull(timePeriodValues0);
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      
      // Undeclared exception!
      try {
        timePeriodValues0.delete(int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      String string0 = "~";
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, string0, string0);
      assertNotNull(timePeriodValues0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals("~", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("~", timePeriodValues0.getRangeDescription());
      
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals("~", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("~", timePeriodValues0.getRangeDescription());
      assertEquals((-1), int0);
      
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (double) int0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(false, timePeriodValues0.isEmpty());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals("~", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(1, timePeriodValues0.getItemCount());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals("~", timePeriodValues0.getRangeDescription());
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      timePeriodValues0.delete(int1, int0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(false, timePeriodValues0.isEmpty());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals("~", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(1, timePeriodValues0.getItemCount());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals("~", timePeriodValues0.getRangeDescription());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = DefaultEditorKit.insertContentAction;
      assertNotNull(string0);
      assertEquals("insert-content", string0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0);
      assertNotNull(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      
      int int0 = 8;
      Week week0 = new Week(int0, int0);
      assertNotNull(week0);
      assertEquals((-61910308800001L), week0.getMiddleMillisecond());
      assertEquals(8, week0.getYearValue());
      assertEquals((-61910611200000L), week0.getFirstMillisecond());
      assertEquals(8, week0.getWeek());
      assertEquals(432L, week0.getSerialIndex());
      assertEquals((-61910006400001L), week0.getLastMillisecond());
      
      Week week1 = (Week)week0.previous();
      assertNotNull(week1);
      assertEquals((-61910611200001L), week1.getLastMillisecond());
      assertEquals((-61910913600001L), week1.getMiddleMillisecond());
      assertEquals(7, week1.getWeek());
      assertEquals(431L, week1.getSerialIndex());
      assertEquals(8, week1.getYearValue());
      assertEquals((-61911216000000L), week1.getFirstMillisecond());
      assertEquals((-61910308800001L), week0.getMiddleMillisecond());
      assertEquals(8, week0.getYearValue());
      assertEquals((-61910611200000L), week0.getFirstMillisecond());
      assertEquals(8, week0.getWeek());
      assertEquals(432L, week0.getSerialIndex());
      assertEquals((-61910006400001L), week0.getLastMillisecond());
      assertFalse(week1.equals((Object)week0));
      assertFalse(week0.equals((Object)week1));
      assertNotSame(week1, week0);
      assertNotSame(week0, week1);
      
      timePeriodValues0.add((TimePeriod) week0, (Number) int0);
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(false, timePeriodValues0.isEmpty());
      assertEquals(1, timePeriodValues0.getItemCount());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-61910308800001L), week0.getMiddleMillisecond());
      assertEquals(8, week0.getYearValue());
      assertEquals((-61910611200000L), week0.getFirstMillisecond());
      assertEquals(8, week0.getWeek());
      assertEquals(432L, week0.getSerialIndex());
      assertEquals((-61910006400001L), week0.getLastMillisecond());
      assertFalse(week0.equals((Object)week1));
      assertNotSame(week0, week1);
      
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) week1, (double) int0);
      assertNotNull(timePeriodValue0);
      assertEquals((-61910611200001L), week1.getLastMillisecond());
      assertEquals((-61910913600001L), week1.getMiddleMillisecond());
      assertEquals(7, week1.getWeek());
      assertEquals(431L, week1.getSerialIndex());
      assertEquals(8, week1.getYearValue());
      assertEquals((-61911216000000L), week1.getFirstMillisecond());
      assertEquals((-61910308800001L), week0.getMiddleMillisecond());
      assertEquals(8, week0.getYearValue());
      assertEquals((-61910611200000L), week0.getFirstMillisecond());
      assertEquals(8, week0.getWeek());
      assertEquals(432L, week0.getSerialIndex());
      assertEquals((-61910006400001L), week0.getLastMillisecond());
      assertFalse(week1.equals((Object)week0));
      assertFalse(week0.equals((Object)week1));
      assertNotSame(week1, week0);
      assertNotSame(week0, week1);
      
      timePeriodValues0.add(timePeriodValue0);
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(1, timePeriodValues0.getMinStartIndex());
      assertEquals(1, timePeriodValues0.getMinEndIndex());
      assertEquals(false, timePeriodValues0.isEmpty());
      assertEquals(2, timePeriodValues0.getItemCount());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-61910611200001L), week1.getLastMillisecond());
      assertEquals((-61910913600001L), week1.getMiddleMillisecond());
      assertEquals(7, week1.getWeek());
      assertEquals(431L, week1.getSerialIndex());
      assertEquals(8, week1.getYearValue());
      assertEquals((-61911216000000L), week1.getFirstMillisecond());
      assertEquals((-61910308800001L), week0.getMiddleMillisecond());
      assertEquals(8, week0.getYearValue());
      assertEquals((-61910611200000L), week0.getFirstMillisecond());
      assertEquals(8, week0.getWeek());
      assertEquals(432L, week0.getSerialIndex());
      assertEquals((-61910006400001L), week0.getLastMillisecond());
      assertFalse(week1.equals((Object)week0));
      assertFalse(week0.equals((Object)week1));
      assertNotSame(week1, week0);
      assertNotSame(week0, week1);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = DefaultEditorKit.insertContentAction;
      assertNotNull(string0);
      assertEquals("insert-content", string0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0);
      assertNotNull(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      
      int int0 = (-1687);
      int int1 = timePeriodValues0.getMinEndIndex();
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Week week0 = new Week(int0, int0);
      assertNotNull(week0);
      assertEquals((-115341969600001L), week0.getMiddleMillisecond());
      assertEquals((-115341667200001L), week0.getLastMillisecond());
      assertEquals((-115342272000000L), week0.getFirstMillisecond());
      assertEquals(105, week0.getWeek());
      assertEquals((-89306L), week0.getSerialIndex());
      assertEquals(-1687, week0.getYearValue());
      assertFalse(int0 == int1);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int1, int1, int0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-1,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1687,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      assertNotNull(zoneInfo0);
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-1,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1687,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) week0, (double) int1);
      assertNotNull(timePeriodValue0);
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals((-115341969600001L), week0.getMiddleMillisecond());
      assertEquals((-115341667200001L), week0.getLastMillisecond());
      assertEquals((-115342272000000L), week0.getFirstMillisecond());
      assertEquals(105, week0.getWeek());
      assertEquals((-89306L), week0.getSerialIndex());
      assertEquals(-1687, week0.getYearValue());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      timePeriodValues0.add(timePeriodValue0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(false, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(1, timePeriodValues0.getItemCount());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals((-115341969600001L), week0.getMiddleMillisecond());
      assertEquals((-115341667200001L), week0.getLastMillisecond());
      assertEquals((-115342272000000L), week0.getFirstMillisecond());
      assertEquals(105, week0.getWeek());
      assertEquals((-89306L), week0.getSerialIndex());
      assertEquals(-1687, week0.getYearValue());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      int int2 = 3080;
      assertFalse(int2 == int1);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(int2);
      assertNotNull(spreadsheetDate0);
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(6, spreadsheetDate0.getDayOfMonth());
      assertEquals(1908, spreadsheetDate0.getYYYY());
      assertEquals(6, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3080, spreadsheetDate0.toSerial());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Date date0 = spreadsheetDate0.toDate();
      assertNotNull(date0);
      assertEquals("Sat Jun 06 00:00:00 GMT 1908", date0.toString());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(6, spreadsheetDate0.getDayOfMonth());
      assertEquals(1908, spreadsheetDate0.getYYYY());
      assertEquals(6, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3080, spreadsheetDate0.toSerial());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Minute minute0 = new Minute(date0, (TimeZone) zoneInfo0);
      assertNotNull(minute0);
      assertEquals(0, minute0.getHourValue());
      assertEquals(0, minute0.getMinute());
      assertEquals((-1943049600000L), minute0.getFirstMillisecond());
      assertEquals(4435200L, minute0.getSerialIndex());
      assertEquals((-1943049540001L), minute0.getLastMillisecond());
      assertEquals((-1943049570001L), minute0.getMiddleMillisecond());
      assertEquals("Sat Jun 06 00:00:00 GMT 1908", date0.toString());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(6, spreadsheetDate0.getDayOfMonth());
      assertEquals(1908, spreadsheetDate0.getYYYY());
      assertEquals(6, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3080, spreadsheetDate0.toSerial());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(false, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(1, timePeriodValues0.getItemCount());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-1,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1687,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      
      Day day0 = minute0.getDay();
      assertNotNull(day0);
      assertEquals(0, minute0.getHourValue());
      assertEquals(0, minute0.getMinute());
      assertEquals((-1943049600000L), minute0.getFirstMillisecond());
      assertEquals(4435200L, minute0.getSerialIndex());
      assertEquals((-1943049540001L), minute0.getLastMillisecond());
      assertEquals((-1943049570001L), minute0.getMiddleMillisecond());
      assertEquals(6, day0.getDayOfMonth());
      assertEquals((-1943049600000L), day0.getFirstMillisecond());
      assertEquals(3080L, day0.getSerialIndex());
      assertEquals(1908, day0.getYear());
      assertEquals((-1943006400001L), day0.getMiddleMillisecond());
      assertEquals(6, day0.getMonth());
      assertEquals((-1942963200001L), day0.getLastMillisecond());
      assertEquals("Sat Jun 06 00:00:00 GMT 1908", date0.toString());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(6, spreadsheetDate0.getDayOfMonth());
      assertEquals(1908, spreadsheetDate0.getYYYY());
      assertEquals(6, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3080, spreadsheetDate0.toSerial());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(false, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(1, timePeriodValues0.getItemCount());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-1,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1687,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      
      timePeriodValues0.add((TimePeriod) day0, (Number) int1);
      assertEquals(0, minute0.getHourValue());
      assertEquals(0, minute0.getMinute());
      assertEquals((-1943049600000L), minute0.getFirstMillisecond());
      assertEquals(4435200L, minute0.getSerialIndex());
      assertEquals((-1943049540001L), minute0.getLastMillisecond());
      assertEquals((-1943049570001L), minute0.getMiddleMillisecond());
      assertEquals(6, day0.getDayOfMonth());
      assertEquals((-1943049600000L), day0.getFirstMillisecond());
      assertEquals(3080L, day0.getSerialIndex());
      assertEquals(1908, day0.getYear());
      assertEquals((-1943006400001L), day0.getMiddleMillisecond());
      assertEquals(6, day0.getMonth());
      assertEquals((-1942963200001L), day0.getLastMillisecond());
      assertEquals("Sat Jun 06 00:00:00 GMT 1908", date0.toString());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(6, spreadsheetDate0.getDayOfMonth());
      assertEquals(1908, spreadsheetDate0.getYYYY());
      assertEquals(6, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3080, spreadsheetDate0.toSerial());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(false, timePeriodValues0.isEmpty());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(2, timePeriodValues0.getItemCount());
      assertEquals(1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValues0.getMaxEndIndex());
      assertEquals(1, timePeriodValues0.getMaxStartIndex());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-1,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1687,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = DataBuffer.TYPE_SHORT;
      assertEquals(2, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      assertNotNull(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      
      TimePeriodValue timePeriodValue0 = null;
      // Undeclared exception!
      try {
        timePeriodValues0.add(timePeriodValue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null item not allowed.
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-246);
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(21, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281992L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409280993L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570881L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281492L, second0.getMiddleMillisecond());
      
      Millisecond millisecond0 = new Millisecond(int0, second0);
      //  // Unstable assertion: assertNotNull(millisecond0);
      //  // Unstable assertion: assertEquals(21, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281992L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409280993L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570881L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281492L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409280754L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409280754L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409280754L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570880754L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-246L), millisecond0.getMillisecond());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) millisecond0);
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      //  // Unstable assertion: assertEquals(21, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281992L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409280993L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570881L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281492L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(1392409280754L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409280754L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409280754L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570880754L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-246L), millisecond0.getMillisecond());
      
      // Undeclared exception!
      try {
        TimePeriod timePeriod0 = timePeriodValues0.getTimePeriod(int0);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = DefaultEditorKit.insertContentAction;
      assertNotNull(string0);
      assertEquals("insert-content", string0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0);
      assertNotNull(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), int0);
  }

  @Test
  public void test14()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      String string0 = "~";
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, string0, string0);
      assertNotNull(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("~", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals("~", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("~", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals("~", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals((-1), int0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = DefaultEditorKit.insertContentAction;
      assertNotNull(string0);
      assertEquals("insert-content", string0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0);
      assertNotNull(timePeriodValues0);
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(true, timePeriodValues0.getNotify());
      
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals((-1), int0);
  }

  @Test
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) byteArray0[0]);
      assertNotNull(timePeriodValues0);
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try {
        Number number0 = timePeriodValues0.getValue((int) byteArray0[0]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) byteArray0[0]);
      assertNotNull(timePeriodValues0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = "by";
      timePeriodValues0.setDomainDescription(string0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals("by", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)61;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) byteArray0[0]);
      assertNotNull(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy((int) byte0, (int) byteArray0[0]);
      assertNotNull(timePeriodValues1);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      boolean boolean0 = timePeriodValues1.equals((Object) timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "";
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0, string0, string0);
      assertNotNull(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      
      TimePeriodValues timePeriodValues1 = new TimePeriodValues((Comparable) string0);
      assertNotNull(timePeriodValues1);
      assertNull(timePeriodValues1.getDescription());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      boolean boolean0 = timePeriodValues0.equals((Object) timePeriodValues1);
      assertNull(timePeriodValues1.getDescription());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      assertFalse(boolean0);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertNotSame(timePeriodValues0, timePeriodValues1);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = DefaultEditorKit.insertContentAction;
      assertNotNull(string0);
      assertEquals("insert-content", string0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0);
      assertNotNull(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try {
        timePeriodValues0.update(int0, (Number) int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      String string0 = "~";
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, string0, string0);
      assertNotNull(timePeriodValues0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("~", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("~", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("~", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("~", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals((-1), int0);
  }
}
