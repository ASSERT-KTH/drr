/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:10:47 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriodFormatException;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class WeekEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "yF&EM-4";
      // Undeclared exception!
      try {
        Week week0 = Week.parseWeek(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        Week week0 = Week.parseWeek(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = null;
      Week week0 = Week.parseWeek(string0);
      assertNull(week0);
  }

  @Test
  public void test03()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(1391904000001L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392508800000L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392206400000L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      
      MockDate mockDate0 = (MockDate)week0.getEnd();
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Sun Feb 16 00:00:00 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1391904000001L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392508800000L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392206400000L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      
      Second second0 = new Second((Date) mockDate0);
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals("Sun Feb 16 00:00:00 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1392508799001L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(59, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601670399L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392508799500L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392508800000L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391904000001L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392508800000L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392206400000L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      
      int int0 = week0.compareTo((Object) second0);
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertEquals("Sun Feb 16 00:00:00 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1392508799001L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(59, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601670399L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392508799500L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392508800000L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391904000001L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392508800000L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392206400000L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      //  // Unstable assertion: assertEquals("Sun Feb 16 00:00:00 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(1392508799001L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(59, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601670399L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392508799500L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392508800000L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391904000001L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392508800000L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392206400000L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      
      int int1 = week0.compareTo((Object) mockGregorianCalendar0);
      //  // Unstable assertion: assertEquals(1, int1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals("Sun Feb 16 00:00:00 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(1392508799001L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(59, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601670399L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392508799500L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392508800000L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391904000001L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392508800000L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392206400000L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 1901;
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302400000L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534400001L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070400000L, year0.getLastMillisecond());
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(1453593600000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(109, week0.getWeek());
      //  // Unstable assertion: assertEquals(1454198399999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1453895999999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106851L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302400000L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534400001L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070400000L, year0.getLastMillisecond());
      
      MockDate mockDate0 = (MockDate)year0.getEnd();
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302400000L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534400001L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070400000L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 2015", mockDate0.toString());
      
      Week week1 = new Week((Date) mockDate0);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertEquals(1420027200000L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2015, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1420329600000L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, week1.getWeek());
      //  // Unstable assertion: assertEquals(1419724800001L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106796L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302400000L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534400001L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070400000L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 2015", mockDate0.toString());
      
      int int1 = week1.compareTo((Object) week0);
      //  // Unstable assertion: assertEquals(1, int1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals(1420027200000L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2015, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1420329600000L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, week1.getWeek());
      //  // Unstable assertion: assertEquals(1419724800001L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106796L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1453593600000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(109, week0.getWeek());
      //  // Unstable assertion: assertEquals(1454198399999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1453895999999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106851L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302400000L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534400001L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070400000L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 2015", mockDate0.toString());
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "DLJiAUBe]A|LJ&1 }cq";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      Date date0 = mockGregorianCalendar0.getTime();
      //  // Unstable assertion: assertNotNull(date0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      Locale locale0 = Locale.CANADA;
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("en_CA", locale0.toString());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("CA", locale0.getCountry());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("CAN", locale0.getISO3Country());
      
      Week week0 = new Week(date0, (TimeZone) zoneInfo0, locale0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals("en_CA", locale0.toString());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("CA", locale0.getCountry());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("CAN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392508799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391904000000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392206399999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      Week week1 = new Week(date0);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertTrue(week1.equals((Object)week0));
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertEquals(1392206400000L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1392508800000L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391904000001L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week1.getWeek());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      boolean boolean0 = week0.equals((Object) week1);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertTrue(week1.equals((Object)week0));
      //  // Unstable assertion: assertTrue(week0.equals((Object)week1));
      //  // Unstable assertion: assertEquals(1392206400000L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1392508800000L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391904000001L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week1.getWeek());
      //  // Unstable assertion: assertEquals("en_CA", locale0.toString());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("CA", locale0.getCountry());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("CAN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392508799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391904000000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392206399999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 1901;
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070400000L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534400001L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1404302400000L, year0.getMiddleMillisecond());
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(109, week0.getWeek());
      //  // Unstable assertion: assertEquals(1454198399999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106851L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1453593600000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1453895999999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070400000L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534400001L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1404302400000L, year0.getMiddleMillisecond());
      
      boolean boolean0 = week0.equals((Object) year0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(109, week0.getWeek());
      //  // Unstable assertion: assertEquals(1454198399999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106851L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1453593600000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1453895999999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070400000L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534400001L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1404302400000L, year0.getMiddleMillisecond());
  }

  @Test
  public void test07() {}
//   @Test
//   public void test07()  throws Throwable  {
//       int int0 = (-6911);
//       Week week0 = new Week(int0, int0);
//       assertNotNull(week0);
//       assertEquals((-280261944000001L), week0.getMiddleMillisecond());
//       assertEquals((-280262246400000L), week0.getFirstMillisecond());
//       assertEquals(1, week0.getWeek());
//       assertEquals(-6911, week0.getYearValue());
//       assertEquals((-366282L), week0.getSerialIndex());
//       assertEquals((-280261641600001L), week0.getLastMillisecond());
//       
//       Week week1 = (Week)week0.next();
//       assertNotSame(week1, week0);
//       assertNotSame(week0, week1);
//       assertFalse(week1.equals((Object)week0));
//       assertFalse(week0.equals((Object)week1));
//       assertNotNull(week1);
//       assertEquals((-366281L), week1.getSerialIndex());
//       assertEquals((-280261036800001L), week1.getLastMillisecond());
//       assertEquals(-6911, week1.getYearValue());
//       assertEquals((-280261641600000L), week1.getFirstMillisecond());
//       assertEquals(2, week1.getWeek());
//       assertEquals((-280261339200001L), week1.getMiddleMillisecond());
//       assertEquals((-280261944000001L), week0.getMiddleMillisecond());
//       assertEquals((-280262246400000L), week0.getFirstMillisecond());
//       assertEquals(1, week0.getWeek());
//       assertEquals(-6911, week0.getYearValue());
//       assertEquals((-366282L), week0.getSerialIndex());
//       assertEquals((-280261641600001L), week0.getLastMillisecond());
//       
//       boolean boolean0 = week0.equals((Object) week1);
//       assertFalse(boolean0);
//       assertNotSame(week1, week0);
//       assertNotSame(week0, week1);
//       assertFalse(week1.equals((Object)week0));
//       assertFalse(week0.equals((Object)week1));
//       assertEquals((-366281L), week1.getSerialIndex());
//       assertEquals((-280261036800001L), week1.getLastMillisecond());
//       assertEquals(-6911, week1.getYearValue());
//       assertEquals((-280261641600000L), week1.getFirstMillisecond());
//       assertEquals(2, week1.getWeek());
//       assertEquals((-280261339200001L), week1.getMiddleMillisecond());
//       assertEquals((-280261944000001L), week0.getMiddleMillisecond());
//       assertEquals((-280262246400000L), week0.getFirstMillisecond());
//       assertEquals(1, week0.getWeek());
//       assertEquals(-6911, week0.getYearValue());
//       assertEquals((-366282L), week0.getSerialIndex());
//       assertEquals((-280261641600001L), week0.getLastMillisecond());
//   }

  @Test
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("Fourth", zoneInfo0.getID());
      
      int int0 = 694;
      mockDate0.setDate(int0);
      //  // Unstable assertion: assertEquals("Sat Dec 26 20:21:21 GMT 2015", mockDate0.toString());
      
      Week week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(1450872000000L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(106847L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1451174400000L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2015, week0.getYearValue());
      //  // Unstable assertion: assertEquals(52, week0.getWeek());
      //  // Unstable assertion: assertEquals(1450569600001L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Sat Dec 26 20:21:21 GMT 2015", mockDate0.toString());
      //  // Unstable assertion: assertEquals("Fourth", zoneInfo0.getID());
      
      Week week1 = (Week)week0.next();
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertEquals(1450872000000L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(106847L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1451174400000L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2015, week0.getYearValue());
      //  // Unstable assertion: assertEquals(52, week0.getWeek());
      //  // Unstable assertion: assertEquals(1450569600001L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Sat Dec 26 20:21:21 GMT 2015", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1451779199999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, week1.getWeek());
      //  // Unstable assertion: assertEquals(2016, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1451174400000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1451476799999L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(106849L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals("Fourth", zoneInfo0.getID());
  }

  @Test
  public void test09() {}
//   @Test
//   public void test09()  throws Throwable  {
//       int int0 = (-6911);
//       Week week0 = new Week(int0, int0);
//       assertNotNull(week0);
//       assertEquals((-280261944000001L), week0.getMiddleMillisecond());
//       assertEquals(1, week0.getWeek());
//       assertEquals((-366282L), week0.getSerialIndex());
//       assertEquals((-280262246400000L), week0.getFirstMillisecond());
//       assertEquals((-280261641600001L), week0.getLastMillisecond());
//       assertEquals(-6911, week0.getYearValue());
//       
//       RegularTimePeriod regularTimePeriod0 = week0.previous();
//       assertNull(regularTimePeriod0);
//       assertEquals((-280261944000001L), week0.getMiddleMillisecond());
//       assertEquals(1, week0.getWeek());
//       assertEquals((-366282L), week0.getSerialIndex());
//       assertEquals((-280262246400000L), week0.getFirstMillisecond());
//       assertEquals((-280261641600001L), week0.getLastMillisecond());
//       assertEquals(-6911, week0.getYearValue());
//   }

  @Test
  public void test10()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(1392508800000L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392206400000L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391904000001L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      
      Week week1 = (Week)week0.previous();
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertEquals(1392508800000L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392206400000L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391904000001L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1391903999999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391601599999L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(6, week1.getWeek());
      //  // Unstable assertion: assertEquals(106748L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391299200000L, week1.getFirstMillisecond());
  }

  @Test
  public void test11()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("Fourth", zoneInfo0.getID());
      
      long long0 = 13L;
      MockDate mockDate0 = new MockDate(long0);
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      Week week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals("Fourth", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals(259200000L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals(104411L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-345599999L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-43200000L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1970, week0.getYearValue());
      
      Week week1 = (Week)week0.previous();
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertEquals("Fourth", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals((-345600001L), week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(104409L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(52, week1.getWeek());
      //  // Unstable assertion: assertEquals((-950400000L), week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-648000001L), week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1969, week1.getYearValue());
      //  // Unstable assertion: assertEquals(259200000L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals(104411L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-345599999L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-43200000L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1970, week0.getYearValue());
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 2769;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Fri Aug 26 07:09:00 GMT 4907", mockDate0.toString());
      
      Locale locale0 = null;
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Week week0 = null;
      try {
        week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 1901;
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302400000L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070400000L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534400001L, year0.getFirstMillisecond());
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(106851L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(109, week0.getWeek());
      //  // Unstable assertion: assertEquals(1453895999999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1453593600000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1454198399999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302400000L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070400000L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534400001L, year0.getFirstMillisecond());
      
      int int1 = week0.compareTo((Object) week0);
      //  // Unstable assertion: assertEquals(0, int1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(106851L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(109, week0.getWeek());
      //  // Unstable assertion: assertEquals(1453895999999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1453593600000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1454198399999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302400000L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070400000L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534400001L, year0.getFirstMillisecond());
      
      MockDate mockDate0 = new MockDate(int1, int1, int1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      //  // Unstable assertion: assertEquals(106851L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(109, week0.getWeek());
      //  // Unstable assertion: assertEquals(1453895999999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1453593600000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1454198399999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302400000L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070400000L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534400001L, year0.getFirstMillisecond());
      
      TimeZone timeZone0 = null;
      Week week1 = null;
      try {
        week1 = new Week((Date) mockDate0, timeZone0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Date date0 = null;
      Week week0 = null;
      try {
        week0 = new Week(date0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
      }
  }

  @Test
  public void test15() {}
//   @Test
//   public void test15()  throws Throwable  {
//       String string0 = "DLJiAUBe]A|LJ&1 }cq";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       int int0 = (-8);
//       MockDate mockDate0 = new MockDate();
//       assertNotNull(mockDate0);
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       
//       Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
//       assertNotNull(quarter0);
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       
//       Year year0 = quarter0.getYear();
//       assertNotNull(year0);
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       assertEquals("2014", year0.toString());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       
//       Week week0 = new Week(int0, year0);
//       assertNotNull(week0);
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       assertEquals("2014", year0.toString());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1382832000000L, week0.getFirstMillisecond());
//       assertEquals(1383436799999L, week0.getLastMillisecond());
//       assertEquals(106734L, week0.getSerialIndex());
//       assertEquals(1383134399999L, week0.getMiddleMillisecond());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(-8, week0.getWeek());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//   }

  @Test
  public void test16()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("Fourth", zoneInfo0.getID());
      
      Week week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals("Fourth", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(1391904000001L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392508800000L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392206400000L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      
      String string0 = week0.toString();
      //  // Unstable assertion: assertEquals("Week 7, 2014", string0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals("Fourth", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(1391904000001L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392508800000L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392206400000L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      
      // Undeclared exception!
      try {
        Week week1 = Week.parseWeek(string0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the week.
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("Fourth", zoneInfo0.getID());
      
      Week week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals("Fourth", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1392508800000L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392206400000L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391904000001L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      
      int int0 = week0.getYearValue();
      //  // Unstable assertion: assertEquals(2014, int0);
      //  // Unstable assertion: assertEquals("Fourth", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1392508800000L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392206400000L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391904000001L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
  }

  @Test
  public void test18()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(1392206400000L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392508800000L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391904000001L, week0.getFirstMillisecond());
      
      MockDate mockDate0 = (MockDate)week0.getStart();
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals(1392206400000L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392508800000L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391904000001L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Sun Feb 09 00:00:00 GMT 2014", mockDate0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 1901;
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1404302400000L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534400001L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070400000L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1404302400000L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534400001L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070400000L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1453895999999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1454198399999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1453593600000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(109, week0.getWeek());
      //  // Unstable assertion: assertEquals(106851L, week0.getSerialIndex());
      
      long long0 = week0.getSerialIndex();
      //  // Unstable assertion: assertEquals(106851L, long0);
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1404302400000L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534400001L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070400000L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1453895999999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1454198399999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1453593600000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(109, week0.getWeek());
      //  // Unstable assertion: assertEquals(106851L, week0.getSerialIndex());
  }

  @Test
  public void test20()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(1392206400000L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392508800000L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391904000001L, week0.getFirstMillisecond());
      
      int int0 = week0.hashCode();
      //  // Unstable assertion: assertEquals(25546, int0);
      //  // Unstable assertion: assertEquals(1392206400000L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392508800000L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391904000001L, week0.getFirstMillisecond());
  }
}
