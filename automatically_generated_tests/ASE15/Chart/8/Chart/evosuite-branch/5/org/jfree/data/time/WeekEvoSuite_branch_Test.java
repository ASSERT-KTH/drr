/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:29:10 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.System;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriodFormatException;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class WeekEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 0;
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(1404302397726L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534397727L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070397726L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1388361599999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(0, week0.getWeek());
      //  // Unstable assertion: assertEquals(106742L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1387756800000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1388059199999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1404302397726L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534397727L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070397726L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      
      String string0 = week0.toString();
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("Week 0, 2014", string0);
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1388361599999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(0, week0.getWeek());
      //  // Unstable assertion: assertEquals(106742L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1387756800000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1388059199999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1404302397726L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534397727L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070397726L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      
      // Undeclared exception!
      try {
        Week week1 = Week.parseWeek(string0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the week.
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "f";
      // Undeclared exception!
      try {
        Week week0 = Week.parseWeek(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = null;
      Week week0 = Week.parseWeek(string0);
      assertNull(week0);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 0;
      Week week0 = new Week(int0, int0);
      assertNotNull(week0);
      assertEquals(0, week0.getYearValue());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals((-62167953600001L), week0.getMiddleMillisecond());
      assertEquals((-62167651200001L), week0.getLastMillisecond());
      assertEquals((-62168256000000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      
      MockDate mockDate0 = (MockDate)week0.getStart();
      assertNotNull(mockDate0);
      assertEquals("Mon Dec 22 00:00:00 GMT 2", mockDate0.toString());
      assertEquals(0, week0.getYearValue());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals((-62167953600001L), week0.getMiddleMillisecond());
      assertEquals((-62167651200001L), week0.getLastMillisecond());
      assertEquals((-62168256000000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      
      int int1 = week0.compareTo((Object) mockDate0);
      assertEquals(1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("Mon Dec 22 00:00:00 GMT 2", mockDate0.toString());
      assertEquals(0, week0.getYearValue());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals((-62167953600001L), week0.getMiddleMillisecond());
      assertEquals((-62167651200001L), week0.getLastMillisecond());
      assertEquals((-62168256000000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 0;
      Week week0 = new Week(int0, int0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(0, week0.getYearValue());
      //  // Unstable assertion: assertEquals(0, week0.getWeek());
      //  // Unstable assertion: assertEquals((-62167651200001L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-62168256000000L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(0L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-62167953600001L), week0.getMiddleMillisecond());
      
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(1420070397726L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534397727L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302397726L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      
      int int1 = week0.compareTo((Object) year0);
      //  // Unstable assertion: assertEquals(0, int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertEquals(1420070397726L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534397727L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302397726L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(0, week0.getYearValue());
      //  // Unstable assertion: assertEquals(0, week0.getWeek());
      //  // Unstable assertion: assertEquals((-62167651200001L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-62168256000000L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(0L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-62167953600001L), week0.getMiddleMillisecond());
  }

  @Test
  public void test05()  throws Throwable  {
      long long0 = 9223372036854775794L;
      System.setCurrentTimeMillis(long0);
      Week week0 = new Week();
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(-11566, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-427143283202273L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-612965L), week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-427142980802274L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-427142678402274L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(33, week0.getWeek());
      
      MockDate mockDate0 = (MockDate)week0.getEnd();
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals(-11566, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-427143283202273L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-612965L), week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-427142980802274L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-427142678402274L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(33, week0.getWeek());
      //  // Unstable assertion: assertEquals("Sun Aug 18 23:59:57 GMT 11567", mockDate0.toString());
      
      Week week1 = new Week((Date) mockDate0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertEquals(-11566, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-427143283202273L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-612965L), week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-427142980802274L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-427142678402274L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(33, week0.getWeek());
      //  // Unstable assertion: assertEquals("Sun Aug 18 23:59:57 GMT 11567", mockDate0.toString());
      //  // Unstable assertion: assertEquals(11567, week1.getYearValue());
      //  // Unstable assertion: assertEquals(302871787197726L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(302872089597726L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(613084L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(302871484797727L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(33, week1.getWeek());
      
      boolean boolean0 = week0.equals((Object) week1);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertEquals(-11566, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-427143283202273L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-612965L), week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-427142980802274L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-427142678402274L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(33, week0.getWeek());
      //  // Unstable assertion: assertEquals("Sun Aug 18 23:59:57 GMT 11567", mockDate0.toString());
      //  // Unstable assertion: assertEquals(11567, week1.getYearValue());
      //  // Unstable assertion: assertEquals(302871787197726L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(302872089597726L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(613084L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(302871484797727L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(33, week1.getWeek());
  }

  @Test
  public void test06()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(1391990397727L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392292797726L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392595197726L, week0.getLastMillisecond());
      
      MockDate mockDate0 = (MockDate)week0.getEnd();
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals(1391990397727L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392292797726L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392595197726L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Sun Feb 16 23:59:57 GMT 2014", mockDate0.toString());
      
      Week week1 = new Week((Date) mockDate0);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertTrue(week1.equals((Object)week0));
      //  // Unstable assertion: assertTrue(week0.equals((Object)week1));
      //  // Unstable assertion: assertEquals(1392595197726L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1391990397727L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392292797726L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7, week1.getWeek());
      //  // Unstable assertion: assertEquals(1391990397727L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392292797726L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392595197726L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Sun Feb 16 23:59:57 GMT 2014", mockDate0.toString());
      
      boolean boolean0 = week0.equals((Object) week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertTrue(week1.equals((Object)week0));
      //  // Unstable assertion: assertTrue(week0.equals((Object)week1));
      //  // Unstable assertion: assertEquals(1392595197726L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1391990397727L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392292797726L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7, week1.getWeek());
      //  // Unstable assertion: assertEquals(1391990397727L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392292797726L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392595197726L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Sun Feb 16 23:59:57 GMT 2014", mockDate0.toString());
  }

  @Test
  public void test07()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1391990397727L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392292797726L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392595197726L, week0.getLastMillisecond());
      
      Object object0 = new Object();
      //  // Unstable assertion: assertNotNull(object0);
      
      boolean boolean0 = week0.equals(object0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1391990397727L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392292797726L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392595197726L, week0.getLastMillisecond());
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = (-2);
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(1392409281226L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281726L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409280727L, second0.getFirstMillisecond());
      
      Minute minute0 = second0.getMinute();
      //  // Unstable assertion: assertNotNull(minute0);
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281226L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281726L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409280727L, second0.getFirstMillisecond());
      
      MockDate mockDate0 = (MockDate)minute0.getStart();
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281226L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281726L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409280727L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:00 GMT 2014", mockDate0.toString());
      
      Week week0 = new Week((Date) mockDate0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281226L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281726L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409280727L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:00 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1391990397727L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595197726L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392292797726L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      
      Year year0 = week0.getYear();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281226L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281726L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409280727L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:00 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1391990397727L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595197726L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392292797726L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      
      MockDate mockDate1 = (MockDate)year0.getStart();
      //  // Unstable assertion: assertNotSame(mockDate1, mockDate0);
      //  // Unstable assertion: assertNotSame(mockDate0, mockDate1);
      //  // Unstable assertion: assertNotNull(mockDate1);
      //  // Unstable assertion: assertFalse(mockDate1.equals((Object)mockDate0));
      //  // Unstable assertion: assertFalse(mockDate0.equals((Object)mockDate1));
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281226L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281726L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409280727L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Wed Jan 01 00:00:00 GMT 2014", mockDate1.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:00 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1391990397727L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595197726L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392292797726L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      
      String string0 = "h";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      //  // Unstable assertion: assertNotNull(simpleTimeZone0);
      //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id=h,offset=-2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      //  // Unstable assertion: assertEquals(-2, simpleTimeZone0.getRawOffset());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
      //  // Unstable assertion: assertEquals(false, simpleTimeZone0.useDaylightTime());
      //  // Unstable assertion: assertEquals("h", simpleTimeZone0.getID());
      
      Week week1 = new Week((Date) mockDate1, (TimeZone) simpleTimeZone0);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(mockDate1, mockDate0);
      //  // Unstable assertion: assertNotSame(mockDate0, mockDate1);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertFalse(mockDate1.equals((Object)mockDate0));
      //  // Unstable assertion: assertFalse(mockDate0.equals((Object)mockDate1));
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id=h,offset=-2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      //  // Unstable assertion: assertEquals(-2, simpleTimeZone0.getRawOffset());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
      //  // Unstable assertion: assertEquals(false, simpleTimeZone0.useDaylightTime());
      //  // Unstable assertion: assertEquals("h", simpleTimeZone0.getID());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281226L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281726L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409280727L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1388361600002L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1388966400001L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, week1.getWeek());
      //  // Unstable assertion: assertEquals(106743L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388664000001L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Wed Jan 01 00:00:00 GMT 2014", mockDate1.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:00 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1391990397727L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595197726L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392292797726L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      
      boolean boolean0 = week1.equals((Object) week0);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(mockDate1, mockDate0);
      //  // Unstable assertion: assertNotSame(mockDate0, mockDate1);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertFalse(mockDate1.equals((Object)mockDate0));
      //  // Unstable assertion: assertFalse(mockDate0.equals((Object)mockDate1));
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id=h,offset=-2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      //  // Unstable assertion: assertEquals(-2, simpleTimeZone0.getRawOffset());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
      //  // Unstable assertion: assertEquals(false, simpleTimeZone0.useDaylightTime());
      //  // Unstable assertion: assertEquals("h", simpleTimeZone0.getID());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281226L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281726L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409280727L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1388361600002L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1388966400001L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, week1.getWeek());
      //  // Unstable assertion: assertEquals(106743L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388664000001L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Wed Jan 01 00:00:00 GMT 2014", mockDate1.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:00 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1391990397727L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595197726L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392292797726L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 0;
      int int1 = (-14);
      Week week0 = new Week(int0, int1);
      assertNotNull(week0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-62609457600001L), week0.getMiddleMillisecond());
      assertEquals((-62609760000000L), week0.getFirstMillisecond());
      assertEquals((-742L), week0.getSerialIndex());
      assertEquals((-62609155200001L), week0.getLastMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(-14, week0.getYearValue());
      
      MockDate mockDate0 = (MockDate)week0.getStart();
      assertNotNull(mockDate0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-62609457600001L), week0.getMiddleMillisecond());
      assertEquals((-62609760000000L), week0.getFirstMillisecond());
      assertEquals((-742L), week0.getSerialIndex());
      assertEquals((-62609155200001L), week0.getLastMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(-14, week0.getYearValue());
      assertEquals("Mon Dec 25 00:00:00 GMT 16", mockDate0.toString());
      
      String string0 = ":{ER5";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Week week1 = new Week((Date) mockDate0, (TimeZone) zoneInfo0);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(week1);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals((-62609457600001L), week0.getMiddleMillisecond());
      assertEquals((-62609760000000L), week0.getFirstMillisecond());
      assertEquals((-742L), week0.getSerialIndex());
      assertEquals((-62609155200001L), week0.getLastMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(-14, week0.getYearValue());
      assertEquals((-61631496000001L), week1.getMiddleMillisecond());
      assertEquals((-61631193600001L), week1.getLastMillisecond());
      assertEquals((-61631798400000L), week1.getFirstMillisecond());
      assertEquals(16, week1.getYearValue());
      assertEquals(900L, week1.getSerialIndex());
      assertEquals(52, week1.getWeek());
      assertEquals("Mon Dec 25 00:00:00 GMT 16", mockDate0.toString());
      
      Week week2 = (Week)week1.next();
      assertNotSame(week0, week1);
      assertNotSame(week0, week2);
      assertNotSame(week1, week0);
      assertNotSame(week1, week2);
      assertNotSame(week2, week0);
      assertNotSame(week2, week1);
      assertNotNull(week2);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week0.equals((Object)week2));
      assertFalse(week1.equals((Object)week0));
      assertFalse(week1.equals((Object)week2));
      assertFalse(int0 == int1);
      assertFalse(week2.equals((Object)week0));
      assertFalse(week2.equals((Object)week1));
      assertFalse(int1 == int0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals((-62609457600001L), week0.getMiddleMillisecond());
      assertEquals((-62609760000000L), week0.getFirstMillisecond());
      assertEquals((-742L), week0.getSerialIndex());
      assertEquals((-62609155200001L), week0.getLastMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(-14, week0.getYearValue());
      assertEquals((-61631496000001L), week1.getMiddleMillisecond());
      assertEquals((-61631193600001L), week1.getLastMillisecond());
      assertEquals((-61631798400000L), week1.getFirstMillisecond());
      assertEquals(16, week1.getYearValue());
      assertEquals(900L, week1.getSerialIndex());
      assertEquals(52, week1.getWeek());
      assertEquals(16, week2.getYearValue());
      assertEquals(53, week2.getWeek());
      assertEquals((-61631193600000L), week2.getFirstMillisecond());
      assertEquals((-61630891200001L), week2.getMiddleMillisecond());
      assertEquals((-61630588800001L), week2.getLastMillisecond());
      assertEquals(901L, week2.getSerialIndex());
      assertEquals("Mon Dec 25 00:00:00 GMT 16", mockDate0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      Week week0 = new Week(int0, int0);
      assertNotNull(week0);
      assertEquals((-62168256000000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals((-62167651200001L), week0.getLastMillisecond());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(0, week0.getWeek());
      assertEquals((-62167953600001L), week0.getMiddleMillisecond());
      
      MockDate mockDate0 = (MockDate)week0.getStart();
      assertNotNull(mockDate0);
      assertEquals((-62168256000000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals((-62167651200001L), week0.getLastMillisecond());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(0, week0.getWeek());
      assertEquals((-62167953600001L), week0.getMiddleMillisecond());
      assertEquals("Mon Dec 22 00:00:00 GMT 2", mockDate0.toString());
      
      String string0 = ":{ER5";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Week week1 = new Week((Date) mockDate0, (TimeZone) zoneInfo0);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(week1);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals((-62168256000000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals((-62167651200001L), week0.getLastMillisecond());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(0, week0.getWeek());
      assertEquals((-62167953600001L), week0.getMiddleMillisecond());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(52, week1.getWeek());
      assertEquals(2, week1.getYearValue());
      assertEquals((-62072697600001L), week1.getLastMillisecond());
      assertEquals(158L, week1.getSerialIndex());
      assertEquals((-62073302400000L), week1.getFirstMillisecond());
      assertEquals((-62073000000001L), week1.getMiddleMillisecond());
      assertEquals("Mon Dec 22 00:00:00 GMT 2", mockDate0.toString());
      
      Week week2 = (Week)week1.next();
      assertNotSame(week0, week1);
      assertNotSame(week0, week2);
      assertNotSame(week2, week0);
      assertNotSame(week2, week1);
      assertNotSame(week1, week0);
      assertNotSame(week1, week2);
      assertNotNull(week2);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week0.equals((Object)week2));
      assertFalse(week2.equals((Object)week0));
      assertFalse(week2.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertFalse(week1.equals((Object)week2));
      assertEquals((-62168256000000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals((-62167651200001L), week0.getLastMillisecond());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals(0, week0.getWeek());
      assertEquals((-62167953600001L), week0.getMiddleMillisecond());
      assertEquals((-62072395200001L), week2.getMiddleMillisecond());
      assertEquals(3, week2.getYearValue());
      assertEquals((-62072092800001L), week2.getLastMillisecond());
      assertEquals(160L, week2.getSerialIndex());
      assertEquals((-62072697600000L), week2.getFirstMillisecond());
      assertEquals(1, week2.getWeek());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(52, week1.getWeek());
      assertEquals(2, week1.getYearValue());
      assertEquals((-62072697600001L), week1.getLastMillisecond());
      assertEquals(158L, week1.getSerialIndex());
      assertEquals((-62073302400000L), week1.getFirstMillisecond());
      assertEquals((-62073000000001L), week1.getMiddleMillisecond());
      assertEquals("Mon Dec 22 00:00:00 GMT 2", mockDate0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 3712;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
      assertNotNull(fixedMillisecond0);
      assertEquals(3712L, fixedMillisecond0.getLastMillisecond());
      assertEquals(3712L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(3712L, fixedMillisecond0.getSerialIndex());
      assertEquals(3712L, fixedMillisecond0.getMiddleMillisecond());
      
      MockDate mockDate0 = (MockDate)fixedMillisecond0.getStart();
      assertNotNull(mockDate0);
      assertEquals(3712L, fixedMillisecond0.getLastMillisecond());
      assertEquals(3712L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(3712L, fixedMillisecond0.getSerialIndex());
      assertEquals(3712L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals("Thu Jan 01 00:00:03 GMT 1970", mockDate0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Week week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0);
      assertNotNull(week0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(3712L, fixedMillisecond0.getLastMillisecond());
      assertEquals(3712L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(3712L, fixedMillisecond0.getSerialIndex());
      assertEquals(3712L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals("Thu Jan 01 00:00:03 GMT 1970", mockDate0.toString());
      assertEquals(1, week0.getWeek());
      assertEquals((-259200000L), week0.getFirstMillisecond());
      assertEquals(1970, week0.getYearValue());
      assertEquals(345599999L, week0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(43199999L, week0.getMiddleMillisecond());
      
      Week week1 = (Week)week0.previous();
      assertNotSame(week1, week0);
      assertNotSame(week0, week1);
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      assertFalse(week0.equals((Object)week1));
      assertEquals(1969, week1.getYearValue());
      assertEquals((-864000000L), week1.getFirstMillisecond());
      assertEquals(104409L, week1.getSerialIndex());
      assertEquals((-561600001L), week1.getMiddleMillisecond());
      assertEquals((-259200001L), week1.getLastMillisecond());
      assertEquals(52, week1.getWeek());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(3712L, fixedMillisecond0.getLastMillisecond());
      assertEquals(3712L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(3712L, fixedMillisecond0.getSerialIndex());
      assertEquals(3712L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals("Thu Jan 01 00:00:03 GMT 1970", mockDate0.toString());
      assertEquals(1, week0.getWeek());
      assertEquals((-259200000L), week0.getFirstMillisecond());
      assertEquals(1970, week0.getYearValue());
      assertEquals(345599999L, week0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(43199999L, week0.getMiddleMillisecond());
  }

  @Test
  public void test12()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(1392409280727L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281226L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281726L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      
      Minute minute0 = second0.getMinute();
      //  // Unstable assertion: assertNotNull(minute0);
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409280727L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281226L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281726L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      
      MockDate mockDate0 = (MockDate)minute0.getStart();
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:00 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1392409280727L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281226L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281726L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      
      Week week0 = new Week((Date) mockDate0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:00 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1392409280727L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281226L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281726L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392292797726L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391990397727L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595197726L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      
      Week week1 = (Week)week0.previous();
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertEquals(1391385600000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(106748L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391687999999L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391990399999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(6, week1.getWeek());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:00 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1392409280727L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281226L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281726L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392292797726L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391990397727L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595197726L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 288;
      int int1 = 0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int1);
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=288,MONTH=288,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      
      Date date0 = mockGregorianCalendar0.getTime();
      //  // Unstable assertion: assertNotNull(date0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals("Mon Dec 31 00:00:00 GMT 311", date0.toString());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-52321507200000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=311,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals(", ", zoneInfo0.getID());
      
      Week week0 = new Week(date0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(", ", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Mon Dec 31 00:00:00 GMT 311", date0.toString());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-52321507200000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=311,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(312, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals((-52320902402274L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-52321204802274L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-52321507202273L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(16537L, week0.getSerialIndex());
      
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      //  // Unstable assertion: assertNull(regularTimePeriod0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(", ", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Mon Dec 31 00:00:00 GMT 311", date0.toString());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-52321507200000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=311,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(312, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals((-52320902402274L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-52321204802274L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-52321507202273L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(16537L, week0.getSerialIndex());
  }

  @Test
  public void test14()  throws Throwable  {
      long long0 = 976L;
      MockDate mockDate0 = new MockDate(long0);
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      int int0 = 3085;
      mockDate0.setYear(int0);
      //  // Unstable assertion: assertEquals("Sat Jan 01 00:00:00 GMT 4985", mockDate0.toString());
      
      Week week0 = new Week((Date) mockDate0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals("Sat Jan 01 00:00:00 GMT 4985", mockDate0.toString());
      //  // Unstable assertion: assertEquals(95143852797727L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(264205L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(53, week0.getWeek());
      //  // Unstable assertion: assertEquals(95144155197726L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(4984, week0.getYearValue());
      //  // Unstable assertion: assertEquals(95144457597726L, week0.getLastMillisecond());
  }

  @Test
  public void test15()  throws Throwable  {
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392411597726L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392407997727L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1392409797726L, hour0.getMiddleMillisecond());
      
      MockDate mockDate0 = (MockDate)hour0.getStart();
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392411597726L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392407997727L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1392409797726L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 19:59:57 GMT 2014", mockDate0.toString());
      
      String string0 = " Y";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = null;
      Week week0 = null;
      try {
        week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0, locale0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 3712;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
      assertNotNull(fixedMillisecond0);
      assertEquals(3712L, fixedMillisecond0.getLastMillisecond());
      assertEquals(3712L, fixedMillisecond0.getSerialIndex());
      assertEquals(3712L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(3712L, fixedMillisecond0.getFirstMillisecond());
      
      MockDate mockDate0 = (MockDate)fixedMillisecond0.getStart();
      assertNotNull(mockDate0);
      assertEquals(3712L, fixedMillisecond0.getLastMillisecond());
      assertEquals(3712L, fixedMillisecond0.getSerialIndex());
      assertEquals(3712L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(3712L, fixedMillisecond0.getFirstMillisecond());
      assertEquals("Thu Jan 01 00:00:03 GMT 1970", mockDate0.toString());
      
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      Week week0 = null;
      try {
        week0 = new Week((Date) mockDate0, timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = ":{ER5";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Date date0 = null;
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      Week week0 = null;
      try {
        week0 = new Week(date0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 288;
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070397726L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302397726L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534397727L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(1407412799999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1407715199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1407110400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106774L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(32, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070397726L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302397726L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534397727L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
  }

  @Test
  public void test19()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(1391990397727L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392292797726L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392595197726L, week0.getLastMillisecond());
      
      Week week1 = (Week)week0.next();
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1392595200000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(8, week1.getWeek());
      //  // Unstable assertion: assertEquals(1393199999999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106750L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392897599999L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391990397727L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392292797726L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392595197726L, week0.getLastMillisecond());
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "883sXY951t-:c;ku$";
      // Undeclared exception!
      try {
        Week week0 = Week.parseWeek(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      long long0 = 976L;
      MockDate mockDate0 = new MockDate(long0);
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      Week week0 = new Week((Date) mockDate0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals((-259202273L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(345597726L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(104411L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(43197726L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1970, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      int int0 = week0.getYearValue();
      //  // Unstable assertion: assertEquals(1970, int0);
      //  // Unstable assertion: assertEquals((-259202273L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(345597726L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(104411L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(43197726L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1970, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
  }

  @Test
  public void test22()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990397727L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392292797726L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392595197726L, week0.getLastMillisecond());
      
      int int0 = week0.compareTo((Object) week0);
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990397727L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392292797726L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392595197726L, week0.getLastMillisecond());
  }

  @Test
  public void test23()  throws Throwable  {
      long long0 = 976L;
      MockDate mockDate0 = new MockDate(long0);
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      Week week0 = new Week((Date) mockDate0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(1970, week0.getYearValue());
      //  // Unstable assertion: assertEquals(345597726L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals(43197726L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(104411L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-259202273L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      long long1 = week0.getSerialIndex();
      //  // Unstable assertion: assertEquals(104411L, long1);
      //  // Unstable assertion: assertFalse(long1 == long0);
      //  // Unstable assertion: assertFalse(long0 == long1);
      //  // Unstable assertion: assertEquals(1970, week0.getYearValue());
      //  // Unstable assertion: assertEquals(345597726L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals(43197726L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(104411L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-259202273L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
  }

  @Test
  public void test24()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(1392409280727L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281226L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281726L, second0.getLastMillisecond());
      
      Minute minute0 = second0.getMinute();
      //  // Unstable assertion: assertNotNull(minute0);
      //  // Unstable assertion: assertEquals(1392409280727L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281226L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281726L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      
      MockDate mockDate0 = (MockDate)minute0.getStart();
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals(1392409280727L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281226L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281726L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:00 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      
      Week week0 = new Week((Date) mockDate0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392595197726L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391990397727L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392292797726L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392409280727L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281226L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281726L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:00 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      
      int int0 = week0.hashCode();
      //  // Unstable assertion: assertEquals(25546, int0);
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392595197726L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391990397727L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392292797726L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392409280727L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281226L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281726L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:00 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
  }
}
