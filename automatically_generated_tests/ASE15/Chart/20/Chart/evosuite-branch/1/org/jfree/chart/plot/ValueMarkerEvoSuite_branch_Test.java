/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:49:44 GMT 2014
 */

package org.jfree.chart.plot;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Paint;
import java.awt.Stroke;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.junit.runner.RunWith;

 
public class ValueMarkerEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      double double0 = 0.0;
      ValueMarker valueMarker0 = new ValueMarker(double0);
      assertNotNull(valueMarker0);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      
      double double1 = (-22.68680607816556);
      ValueMarker valueMarker1 = new ValueMarker(double1);
      assertNotSame(valueMarker1, valueMarker0);
      assertFalse(valueMarker1.equals((Object)valueMarker0));
      assertFalse(double1 == double0);
      assertNotNull(valueMarker1);
      assertNull(valueMarker1.getLabel());
      assertEquals(0.8F, valueMarker1.getAlpha(), 0.01F);
      assertEquals((-22.68680607816556), valueMarker1.getValue(), 0.01D);
      
      boolean boolean0 = valueMarker0.equals((Object) valueMarker1);
      assertNotSame(valueMarker1, valueMarker0);
      assertNotSame(valueMarker0, valueMarker1);
      assertFalse(double0 == double1);
      assertFalse(valueMarker1.equals((Object)valueMarker0));
      assertFalse(double1 == double0);
      assertFalse(valueMarker0.equals((Object)valueMarker1));
      assertFalse(boolean0);
      assertNull(valueMarker1.getLabel());
      assertEquals(0.8F, valueMarker1.getAlpha(), 0.01F);
      assertEquals((-22.68680607816556), valueMarker1.getValue(), 0.01D);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
  }

  @Test
  public void test1()  throws Throwable  {
      double double0 = 0.0;
      ValueMarker valueMarker0 = new ValueMarker(double0);
      assertNotNull(valueMarker0);
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      
      ValueMarker valueMarker1 = new ValueMarker(double0);
      assertNotSame(valueMarker1, valueMarker0);
      assertTrue(valueMarker1.equals((Object)valueMarker0));
      assertNotNull(valueMarker1);
      assertEquals(0.0, valueMarker1.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker1.getAlpha(), 0.01F);
      assertNull(valueMarker1.getLabel());
      
      boolean boolean0 = valueMarker0.equals((Object) valueMarker1);
      assertNotSame(valueMarker0, valueMarker1);
      assertNotSame(valueMarker1, valueMarker0);
      assertTrue(valueMarker0.equals((Object)valueMarker1));
      assertTrue(valueMarker1.equals((Object)valueMarker0));
      assertTrue(boolean0);
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.0, valueMarker1.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker1.getAlpha(), 0.01F);
      assertNull(valueMarker1.getLabel());
  }

  @Test
  public void test2()  throws Throwable  {
      Color color0 = (Color)WaferMapPlot.DEFAULT_CROSSHAIR_PAINT;
      assertNotNull(color0);
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(-16776961, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      
      double double0 = (-4.505241082935818);
      boolean boolean0 = false;
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(boolean0, boolean0);
      assertNotNull(lineAndShapeRenderer0);
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      
      int int0 = (-2499);
      BasicStroke basicStroke0 = (BasicStroke)lineAndShapeRenderer0.getItemStroke(int0, int0);
      assertNotNull(basicStroke0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      
      ValueMarker valueMarker0 = new ValueMarker(double0, (Paint) color0, (Stroke) basicStroke0);
      assertNotNull(valueMarker0);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals((-4.505241082935818), valueMarker0.getValue(), 0.01D);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(-16776961, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      
      boolean boolean1 = valueMarker0.equals((Object) color0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals((-4.505241082935818), valueMarker0.getValue(), 0.01D);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(-16776961, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
  }

  @Test
  public void test3()  throws Throwable  {
      double double0 = 0.0;
      ValueMarker valueMarker0 = new ValueMarker(double0);
      assertNotNull(valueMarker0);
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      
      double double1 = valueMarker0.getValue();
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
  }

  @Test
  public void test4()  throws Throwable  {
      Color color0 = (Color)WaferMapPlot.DEFAULT_CROSSHAIR_PAINT;
      assertNotNull(color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(255, color0.getBlue());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      
      double double0 = (-4.505241082935818);
      boolean boolean0 = false;
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(boolean0, boolean0);
      assertNotNull(lineAndShapeRenderer0);
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      
      int int0 = (-2499);
      BasicStroke basicStroke0 = (BasicStroke)lineAndShapeRenderer0.getItemStroke(int0, int0);
      assertNotNull(basicStroke0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      
      ValueMarker valueMarker0 = new ValueMarker(double0, (Paint) color0, (Stroke) basicStroke0);
      assertNotNull(valueMarker0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(255, color0.getBlue());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals((-4.505241082935818), valueMarker0.getValue(), 0.01D);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      
      valueMarker0.setValue(double0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(255, color0.getBlue());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals((-4.505241082935818), valueMarker0.getValue(), 0.01D);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
  }
}
