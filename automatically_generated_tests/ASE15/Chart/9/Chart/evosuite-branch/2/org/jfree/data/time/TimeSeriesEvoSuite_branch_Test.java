/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:58:45 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.image.ImageObserver;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.TimeZone;
import javax.swing.SwingConstants;
import javax.swing.text.DefaultCaret;
import javax.swing.text.JTextComponent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.FileSystemHandling;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.general.SeriesException;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Month;
import org.jfree.data.time.MonthConstants;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class TimeSeriesEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = JTextComponent.FOCUS_ACCELERATOR_KEY;
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("focusAcceleratorKey", string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      Quarter quarter0 = new Quarter();
      //  // Unstable assertion: assertNotNull(quarter0);
      //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      
      double double0 = 0.0;
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, double0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      int int0 = 11;
      Quarter quarter1 = (Quarter)quarter0.previous();
      //  // Unstable assertion: assertNotSame(quarter1, quarter0);
      //  // Unstable assertion: assertNotSame(quarter0, quarter1);
      //  // Unstable assertion: assertNotNull(quarter1);
      //  // Unstable assertion: assertFalse(quarter1.equals((Object)quarter0));
      //  // Unstable assertion: assertFalse(quarter0.equals((Object)quarter1));
      //  // Unstable assertion: assertEquals(8056L, quarter1.getSerialIndex());
      //  // Unstable assertion: assertEquals(4, quarter1.getQuarter());
      //  // Unstable assertion: assertEquals(1380585600000L, quarter1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1388534399999L, quarter1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2013, quarter1.getYearValue());
      //  // Unstable assertion: assertEquals(1384559999999L, quarter1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) quarter1, (double) int0);
      //  // Unstable assertion: assertNotSame(quarter1, quarter0);
      //  // Unstable assertion: assertNotSame(quarter0, quarter1);
      //  // Unstable assertion: assertNull(timeSeriesDataItem1);
      //  // Unstable assertion: assertFalse(quarter1.equals((Object)quarter0));
      //  // Unstable assertion: assertFalse(quarter0.equals((Object)quarter1));
      //  // Unstable assertion: assertEquals(8056L, quarter1.getSerialIndex());
      //  // Unstable assertion: assertEquals(4, quarter1.getQuarter());
      //  // Unstable assertion: assertEquals(1380585600000L, quarter1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1388534399999L, quarter1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2013, quarter1.getYearValue());
      //  // Unstable assertion: assertEquals(1384559999999L, quarter1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      int int1 = timeSeries0.hashCode();
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(930357994, int1);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = JTextComponent.FOCUS_ACCELERATOR_KEY;
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("focusAcceleratorKey", string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      
      Quarter quarter0 = new Quarter();
      //  // Unstable assertion: assertNotNull(quarter0);
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
      
      double double0 = 0.0;
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, double0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
      
      int int0 = timeSeries0.hashCode();
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2121489375, int0);
  }

  @Test
  public void test02()  throws Throwable  {
      long long0 = (-32L);
      String string0 = "";
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      
      String string1 = null;
      timeSeries0.setRangeDescription(string1);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      
      int int0 = timeSeries0.hashCode();
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals((-957834513), int0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = JTextComponent.FOCUS_ACCELERATOR_KEY;
      assertNotNull(string0);
      assertEquals("focusAcceleratorKey", string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotNull(timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      
      long long0 = 84L;
      timeSeries0.setMaximumItemAge(long0);
      assertNotSame(timeSeries0, timeSeries1);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(84L, timeSeries0.getMaximumItemAge());
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(84L, timeSeries0.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test
  public void test04() {}
//   @Test
//   public void test04()  throws Throwable  {
//       String string0 = JTextComponent.FOCUS_ACCELERATOR_KEY;
//       //  // Unstable assertion: assertNotNull(string0);
//       //  // Unstable assertion: assertEquals("focusAcceleratorKey", string0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       Quarter quarter0 = new Quarter();
//       //  // Unstable assertion: assertNotNull(quarter0);
//       //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       
//       MockDate mockDate0 = (MockDate)quarter0.getEnd();
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
//       //  // Unstable assertion: assertNotNull(zoneInfo0);
//       //  // Unstable assertion: assertEquals("focusAcceleratorKey", zoneInfo0.getID());
//       
//       Hour hour0 = new Hour((Date) mockDate0, (TimeZone) zoneInfo0);
//       //  // Unstable assertion: assertNotNull(hour0);
//       //  // Unstable assertion: assertEquals("focusAcceleratorKey", zoneInfo0.getID());
//       //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1396308599996L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(31, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(3, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(1001519L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(23, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1396310399996L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1396306799997L, hour0.getFirstMillisecond());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
//       //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
//       //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
//       //  // Unstable assertion: assertNotNull(timeSeries1);
//       //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
//       //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
//       //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
//       //  // Unstable assertion: assertNull(timeSeries1.getDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
//       //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
//       //  // Unstable assertion: assertEquals("focusAcceleratorKey", zoneInfo0.getID());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1396308599996L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(31, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(3, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(1001519L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(23, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1396310399996L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1396306799997L, hour0.getFirstMillisecond());
//   }

  @Test
  public void test05()  throws Throwable  {
      double double0 = (-2.1474836519797764E9);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) double0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      Day day0 = new Day();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      
      Day day1 = (Day)day0.next();
      //  // Unstable assertion: assertNotSame(day0, day1);
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertNotNull(day1);
      //  // Unstable assertion: assertFalse(day0.equals((Object)day1));
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392508799999L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(15, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422400000L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392465599999L, day1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41685L, day1.getSerialIndex());
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day1, (RegularTimePeriod) day0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      
      Class<Object> class1 = Object.class;
      int int0 = 193;
      MockDate mockDate0 = new MockDate(int0, int0, int0);
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Mon Aug 12 00:00:00 GMT 2109", mockDate0.toString());
      
      String string0 = "";
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat(string0);
      //  // Unstable assertion: assertNotNull(simpleDateFormat0);
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)simpleDateFormat0.getTimeZone();
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      
      RegularTimePeriod regularTimePeriod0 = RegularTimePeriod.createInstance((Class) class1, (Date) mockDate0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNull(regularTimePeriod0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("Mon Aug 12 00:00:00 GMT 2109", mockDate0.toString());
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year0, regularTimePeriod0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = MonthConstants.JULY;
      //  // Unstable assertion: assertEquals(7, int0);
      
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      String string0 = "/K";
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat(string0);
      //  // Unstable assertion: assertNotNull(simpleDateFormat0);
      //  // Unstable assertion: assertEquals("/K", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("/K", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      
      Date date0 = simpleDateFormat0.get2DigitYearStart();
      //  // Unstable assertion: assertNotNull(date0);
      //  // Unstable assertion: assertEquals("Tue Dec 11 15:58:37 GMT 1934", date0.toString());
      //  // Unstable assertion: assertEquals("/K", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("/K", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      
      Second second0 = new Second(date0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Tue Dec 11 15:58:37 GMT 1934", date0.toString());
      //  // Unstable assertion: assertEquals((-1106294483000L), second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(37, second0.getSecond());
      //  // Unstable assertion: assertEquals(1102867117L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1106294482001L), second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-1106294482501L), second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("/K", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("/K", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) second0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
      }
  }

  @Test
  public void test08() {}
//   @Test
//   public void test08()  throws Throwable  {
//       String string0 = JTextComponent.FOCUS_ACCELERATOR_KEY;
//       //  // Unstable assertion: assertNotNull(string0);
//       //  // Unstable assertion: assertEquals("focusAcceleratorKey", string0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       
//       Quarter quarter0 = new Quarter();
//       //  // Unstable assertion: assertNotNull(quarter0);
//       //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
//       
//       MockDate mockDate0 = (MockDate)quarter0.getEnd();
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       //  // Unstable assertion: assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
//       //  // Unstable assertion: assertNotNull(zoneInfo0);
//       //  // Unstable assertion: assertEquals("focusAcceleratorKey", zoneInfo0.getID());
//       
//       long long0 = 84L;
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) long0);
//       //  // Unstable assertion: assertNull(timeSeriesDataItem0);
//       //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
//       
//       Hour hour0 = new Hour((Date) mockDate0, (TimeZone) zoneInfo0);
//       //  // Unstable assertion: assertNotNull(hour0);
//       //  // Unstable assertion: assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals("focusAcceleratorKey", zoneInfo0.getID());
//       //  // Unstable assertion: assertEquals(1396308599996L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1001519L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1396310399996L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(31, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1396306799997L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(3, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(23, hour0.getHour());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
//       //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
//       //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
//       //  // Unstable assertion: assertNotNull(timeSeries1);
//       //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
//       //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
//       //  // Unstable assertion: assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
//       //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
//       //  // Unstable assertion: assertNull(timeSeries1.getDescription());
//       //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals("focusAcceleratorKey", zoneInfo0.getID());
//       //  // Unstable assertion: assertEquals(1396308599996L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1001519L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1396310399996L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(31, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1396306799997L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(3, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(23, hour0.getHour());
//   }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 2;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      int int1 = 0;
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)DateFormat.getDateInstance();
      //  // Unstable assertion: assertNotNull(simpleDateFormat0);
      //  // Unstable assertion: assertEquals("dd-MMM-yyyy", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("dd-MMM-yyyy", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)simpleDateFormat0.getCalendar();
      //  // Unstable assertion: assertNotNull(gregorianCalendar0);
      //  // Unstable assertion: assertEquals("dd-MMM-yyyy", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("dd-MMM-yyyy", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=-1106294482951,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1934,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=345,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=58,SECOND=37,MILLISECOND=49,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) gregorianCalendar0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals("dd-MMM-yyyy", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("dd-MMM-yyyy", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=-1106294482951,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1934,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=345,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=58,SECOND=37,MILLISECOND=49,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      
      int int0 = (-216);
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      long long0 = (-496L);
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      
      int int0 = 1919;
      int int1 = 1949;
      // Undeclared exception!
      try {
        timeSeries0.delete(int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test12() {}
//   @Test
//   public void test12()  throws Throwable  {
//       String string0 = JTextComponent.FOCUS_ACCELERATOR_KEY;
//       //  // Unstable assertion: assertNotNull(string0);
//       //  // Unstable assertion: assertEquals("focusAcceleratorKey", string0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       
//       Quarter quarter0 = new Quarter();
//       //  // Unstable assertion: assertNotNull(quarter0);
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
//       
//       MockDate mockDate0 = (MockDate)quarter0.getEnd();
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
//       //  // Unstable assertion: assertNotNull(zoneInfo0);
//       //  // Unstable assertion: assertEquals("focusAcceleratorKey", zoneInfo0.getID());
//       
//       Hour hour0 = new Hour((Date) mockDate0, (TimeZone) zoneInfo0);
//       //  // Unstable assertion: assertNotNull(hour0);
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1396306799997L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(23, hour0.getHour());
//       //  // Unstable assertion: assertEquals(31, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1001519L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(3, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(1396308599996L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1396310399996L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals("focusAcceleratorKey", zoneInfo0.getID());
//       //  // Unstable assertion: assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       
//       Day day0 = new Day();
//       //  // Unstable assertion: assertNotNull(day0);
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
//       
//       int int0 = SwingConstants.NORTH;
//       //  // Unstable assertion: assertEquals(1, int0);
//       
//       timeSeries0.add((RegularTimePeriod) day0, (Number) int0);
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       
//       timeSeries0.delete((RegularTimePeriod) hour0);
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1396306799997L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(23, hour0.getHour());
//       //  // Unstable assertion: assertEquals(31, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1001519L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(3, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(1396308599996L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1396310399996L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals("focusAcceleratorKey", zoneInfo0.getID());
//       //  // Unstable assertion: assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//   }

  @Test
  public void test13() {}
//   @Test
//   public void test13()  throws Throwable  {
//       String string0 = "'@d@f";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       
//       Quarter quarter0 = new Quarter();
//       //  // Unstable assertion: assertNotNull(quarter0);
//       //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
//       
//       MockDate mockDate0 = (MockDate)quarter0.getEnd();
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       //  // Unstable assertion: assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
//       //  // Unstable assertion: assertNotNull(zoneInfo0);
//       //  // Unstable assertion: assertEquals("focusAcceleratorKey", zoneInfo0.getID());
//       
//       Hour hour0 = new Hour((Date) mockDate0, (TimeZone) zoneInfo0);
//       //  // Unstable assertion: assertNotNull(hour0);
//       //  // Unstable assertion: assertEquals(1001519L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1396310399996L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1396306799997L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(23, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1396308599996L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(3, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(31, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals("focusAcceleratorKey", zoneInfo0.getID());
//       
//       timeSeries0.delete((RegularTimePeriod) hour0);
//       //  // Unstable assertion: assertEquals(1001519L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1396310399996L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1396306799997L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(23, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1396308599996L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(3, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(31, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals("focusAcceleratorKey", zoneInfo0.getID());
//   }

  @Test
  public void test14()  throws Throwable  {
      String string0 = JTextComponent.FOCUS_ACCELERATOR_KEY;
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("focusAcceleratorKey", string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      
      Quarter quarter0 = new Quarter();
      //  // Unstable assertion: assertNotNull(quarter0);
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
      
      int int0 = DefaultCaret.UPDATE_WHEN_ON_EDT;
      //  // Unstable assertion: assertEquals(0, int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      
      timeSeries0.clear();
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = JTextComponent.FOCUS_ACCELERATOR_KEY;
      assertNotNull(string0);
      assertEquals("focusAcceleratorKey", string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      
      timeSeries0.clear();
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = MonthConstants.JULY;
      //  // Unstable assertion: assertEquals(7, int0);
      
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      String string0 = "/WK";
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat(string0);
      //  // Unstable assertion: assertNotNull(simpleDateFormat0);
      //  // Unstable assertion: assertEquals("/WK", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("/WK", simpleDateFormat0.toLocalizedPattern());
      
      Date date0 = simpleDateFormat0.get2DigitYearStart();
      //  // Unstable assertion: assertNotNull(date0);
      //  // Unstable assertion: assertEquals("/WK", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("/WK", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("Tue Dec 11 15:58:37 GMT 1934", date0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      
      Second second0 = new Second(date0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals((-1106294482501L), second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1102867117L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(37, second0.getSecond());
      //  // Unstable assertion: assertEquals((-1106294483000L), second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-1106294482001L), second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("/WK", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("/WK", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("Tue Dec 11 15:58:37 GMT 1934", date0.toString());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (double) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals((-1106294482501L), second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1102867117L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(37, second0.getSecond());
      //  // Unstable assertion: assertEquals((-1106294483000L), second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-1106294482001L), second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("/WK", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("/WK", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("Tue Dec 11 15:58:37 GMT 1934", date0.toString());
      
      boolean boolean0 = true;
      timeSeries0.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
  }

  @Test
  public void test17()  throws Throwable  {
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      
      int int0 = 0;
      boolean boolean0 = true;
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      
      timeSeries0.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
  }

  @Test
  public void test18()  throws Throwable  {
      long long0 = (-32L);
      String string0 = "";
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      
      boolean boolean0 = true;
      timeSeries0.removeAgedItems(long0, boolean0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      
      timeSeries0.removeAgedItems(long0, boolean0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 0;
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      
      timeSeries0.setMaximumItemCount(int0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = 16;
      String string0 = "J&-7C:\"rlQb@?Q|o@D9";
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("J&-7C:\"rlQb@?Q|o@D9", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("J&-7C:\"rlQb@?Q|o@D9", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate(regularTimePeriod0, (double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test21() {}
//   @Test
//   public void test21()  throws Throwable  {
//       String string0 = "'@d@f";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       Quarter quarter0 = new Quarter();
//       //  // Unstable assertion: assertNotNull(quarter0);
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
//       
//       MockDate mockDate0 = (MockDate)quarter0.getEnd();
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       //  // Unstable assertion: assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
//       //  // Unstable assertion: assertNotNull(zoneInfo0);
//       //  // Unstable assertion: assertEquals("focusAcceleratorKey", zoneInfo0.getID());
//       
//       Hour hour0 = new Hour((Date) mockDate0, (TimeZone) zoneInfo0);
//       //  // Unstable assertion: assertNotNull(hour0);
//       //  // Unstable assertion: assertEquals(1001519L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(23, hour0.getHour());
//       //  // Unstable assertion: assertEquals(31, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(3, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(1396308599996L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1396306799997L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1396310399996L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals("focusAcceleratorKey", zoneInfo0.getID());
//       
//       int int0 = 0;
//       TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
//       //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
//       //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
//       //  // Unstable assertion: assertNotNull(timeSeries1);
//       //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
//       //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertNull(timeSeries1.getDescription());
//       //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
//       //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries1.addOrUpdate((RegularTimePeriod) hour0, (Number) int0);
//       //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
//       //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
//       //  // Unstable assertion: assertNull(timeSeriesDataItem0);
//       //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
//       //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
//       //  // Unstable assertion: assertEquals(1001519L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(23, hour0.getHour());
//       //  // Unstable assertion: assertEquals(31, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(3, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(1396308599996L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1396306799997L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1396310399996L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertNull(timeSeries1.getDescription());
//       //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
//       //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
//       //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
//       //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("focusAcceleratorKey", zoneInfo0.getID());
//       
//       TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
//       //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
//       //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
//       //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries1);
//       //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries0);
//       //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
//       //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
//       //  // Unstable assertion: assertNotNull(timeSeries2);
//       //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
//       //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
//       //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries1));
//       //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries0));
//       //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
//       //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
//       //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries2.getMaximumItemCount());
//       //  // Unstable assertion: assertNull(timeSeries2.getDescription());
//       //  // Unstable assertion: assertEquals("Value", timeSeries2.getRangeDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries2.getNotify());
//       //  // Unstable assertion: assertEquals(true, timeSeries2.isEmpty());
//       //  // Unstable assertion: assertEquals("Time", timeSeries2.getDomainDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries2.getItemCount());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
//       //  // Unstable assertion: assertNull(timeSeries1.getDescription());
//       //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
//       //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
//       //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
//       //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//   }

  @Test
  public void test22() {}
//   @Test
//   public void test22()  throws Throwable  {
//       String string0 = "'@d@f";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       
//       Quarter quarter0 = new Quarter();
//       //  // Unstable assertion: assertNotNull(quarter0);
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
//       
//       MockDate mockDate0 = (MockDate)quarter0.getEnd();
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       //  // Unstable assertion: assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
//       //  // Unstable assertion: assertNotNull(zoneInfo0);
//       //  // Unstable assertion: assertEquals("focusAcceleratorKey", zoneInfo0.getID());
//       
//       Hour hour0 = new Hour((Date) mockDate0, (TimeZone) zoneInfo0);
//       //  // Unstable assertion: assertNotNull(hour0);
//       //  // Unstable assertion: assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(31, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(23, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1396310399996L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1001519L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1396306799997L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1396308599996L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(3, hour0.getMonth());
//       //  // Unstable assertion: assertEquals("focusAcceleratorKey", zoneInfo0.getID());
//       
//       int int0 = 0;
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) int0);
//       //  // Unstable assertion: assertNull(timeSeriesDataItem0);
//       //  // Unstable assertion: assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(31, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(23, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1396310399996L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1001519L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1396306799997L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1396308599996L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(3, hour0.getMonth());
//       //  // Unstable assertion: assertEquals("focusAcceleratorKey", zoneInfo0.getID());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
//       
//       // Undeclared exception!
//       try {
//         TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
//        //  fail("Expecting exception: RuntimeException");
//        // Unstable assertion
//       } catch(RuntimeException e) {
//          //
//          // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
//          //
//       }
//   }

  @Test
  public void test23()  throws Throwable  {
      int int0 = MonthConstants.JULY;
      //  // Unstable assertion: assertEquals(7, int0);
      
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      String string0 = "/WK";
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat(string0);
      //  // Unstable assertion: assertNotNull(simpleDateFormat0);
      //  // Unstable assertion: assertEquals("/WK", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("/WK", simpleDateFormat0.toLocalizedPattern());
      
      Date date0 = simpleDateFormat0.get2DigitYearStart();
      //  // Unstable assertion: assertNotNull(date0);
      //  // Unstable assertion: assertEquals("/WK", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("/WK", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("Tue Dec 11 15:58:36 GMT 1934", date0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      
      Second second0 = new Second(date0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals((-1106294483001L), second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-1106294483501L), second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1102867116L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(36, second0.getSecond());
      //  // Unstable assertion: assertEquals((-1106294484000L), second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("/WK", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("/WK", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Tue Dec 11 15:58:36 GMT 1934", date0.toString());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (double) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals((-1106294483001L), second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-1106294483501L), second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1102867116L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(36, second0.getSecond());
      //  // Unstable assertion: assertEquals((-1106294484000L), second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("/WK", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("/WK", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Tue Dec 11 15:58:36 GMT 1934", date0.toString());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      //  // Unstable assertion: assertNotNull(fixedMillisecond0);
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) int0);
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test
  public void test24()  throws Throwable  {
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      
      String string0 = "\\N7";
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("\\N7", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("\\N7", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      
      int int0 = timeSeries0.hashCode();
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("\\N7", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("\\N7", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(520662358, int0);
      
      // Undeclared exception!
      try {
        timeSeries0.update((RegularTimePeriod) hour0, (Number) int0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // TimeSeries.update(TimePeriod, Number):  period does not exist.
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = MonthConstants.JULY;
      //  // Unstable assertion: assertEquals(7, int0);
      
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      String string0 = "";
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat(string0);
      //  // Unstable assertion: assertNotNull(simpleDateFormat0);
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      
      Date date0 = simpleDateFormat0.get2DigitYearStart();
      //  // Unstable assertion: assertNotNull(date0);
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("Tue Dec 11 15:58:36 GMT 1934", date0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      
      Second second0 = new Second(date0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals((-1106294484000L), second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-1106294483501L), second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(36, second0.getSecond());
      //  // Unstable assertion: assertEquals((-1106294483001L), second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1102867116L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("Tue Dec 11 15:58:36 GMT 1934", date0.toString());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (double) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals((-1106294484000L), second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-1106294483501L), second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(36, second0.getSecond());
      //  // Unstable assertion: assertEquals((-1106294483001L), second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1102867116L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("Tue Dec 11 15:58:36 GMT 1934", date0.toString());
      
      Quarter quarter0 = (Quarter)RegularTimePeriod.createInstance((Class) class0, date0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(quarter0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("Tue Dec 11 15:58:36 GMT 1934", date0.toString());
      //  // Unstable assertion: assertEquals(4, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals((-1108512000001L), quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1934, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(7740L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1112486400000L), quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-1104537600001L), quarter0.getLastMillisecond());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try {
        timeSeries0.add((RegularTimePeriod) quarter0, (double) int0, boolean0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Q4/1934 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      Number number0 = timeSeries0.getValue((RegularTimePeriod) year0);
      //  // Unstable assertion: assertNull(number0);
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test
  public void test27()  throws Throwable  {
      long long0 = (-1707L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem(regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      long long0 = (-496L);
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
      assertNotNull(fixedMillisecond0);
      assertEquals((-496L), fixedMillisecond0.getSerialIndex());
      assertEquals((-496L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-496L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-496L), fixedMillisecond0.getLastMillisecond());
      
      Class<Integer> class1 = Integer.class;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertEquals((-496L), fixedMillisecond0.getSerialIndex());
      assertEquals((-496L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-496L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-496L), fixedMillisecond0.getLastMillisecond());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries1.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) long0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNull(timeSeriesDataItem0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertEquals((-496L), fixedMillisecond0.getSerialIndex());
      assertEquals((-496L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-496L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-496L), fixedMillisecond0.getLastMillisecond());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getDescription());
      assertEquals(false, timeSeries1.isEmpty());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      
      Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotNull(collection0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertEquals((-496L), fixedMillisecond0.getSerialIndex());
      assertEquals((-496L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-496L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-496L), fixedMillisecond0.getLastMillisecond());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getDescription());
      assertEquals(false, timeSeries1.isEmpty());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test
  public void test29()  throws Throwable  {
      long long0 = (-496L);
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
      assertNotNull(fixedMillisecond0);
      assertEquals((-496L), fixedMillisecond0.getSerialIndex());
      assertEquals((-496L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-496L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-496L), fixedMillisecond0.getLastMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) long0);
      assertNull(timeSeriesDataItem0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals((-496L), fixedMillisecond0.getSerialIndex());
      assertEquals((-496L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-496L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-496L), fixedMillisecond0.getLastMillisecond());
      
      Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertNotNull(collection0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test
  public void test30()  throws Throwable  {
      long long0 = (-496L);
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
      assertNotNull(fixedMillisecond0);
      assertEquals((-496L), fixedMillisecond0.getSerialIndex());
      assertEquals((-496L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-496L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-496L), fixedMillisecond0.getFirstMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) long0);
      assertNull(timeSeriesDataItem0);
      assertEquals((-496L), fixedMillisecond0.getSerialIndex());
      assertEquals((-496L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-496L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-496L), fixedMillisecond0.getFirstMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      
      Collection collection0 = timeSeries0.getTimePeriods();
      assertNotNull(collection0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
  }

  @Test
  public void test31()  throws Throwable  {
      long long0 = (-496L);
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
      assertNotNull(fixedMillisecond0);
      assertEquals((-496L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-496L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-496L), fixedMillisecond0.getSerialIndex());
      assertEquals((-496L), fixedMillisecond0.getLastMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) long0);
      assertNull(timeSeriesDataItem0);
      assertEquals((-496L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-496L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-496L), fixedMillisecond0.getSerialIndex());
      assertEquals((-496L), fixedMillisecond0.getLastMillisecond());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond0);
      assertNotNull(timeSeriesDataItem1);
      assertEquals((-496L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-496L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-496L), fixedMillisecond0.getSerialIndex());
      assertEquals((-496L), fixedMillisecond0.getLastMillisecond());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
  }

  @Test
  public void test32()  throws Throwable  {
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      
      String string0 = "\\N7";
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals("\\N7", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("\\N7", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) hour0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals("\\N7", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("\\N7", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
  }

  @Test
  public void test33()  throws Throwable  {
      long long0 = (-32L);
      String string0 = "";
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemAge(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = JTextComponent.FOCUS_ACCELERATOR_KEY;
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("focusAcceleratorKey", string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      Quarter quarter0 = new Quarter();
      //  // Unstable assertion: assertNotNull(quarter0);
      //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      
      int int0 = DefaultCaret.UPDATE_WHEN_ON_EDT;
      //  // Unstable assertion: assertEquals(0, int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1396310399996L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399997L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399996L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      
      timeSeries0.setMaximumItemCount(int0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = "T|%";
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("T|%", timeSeries0.getDomainDescription());
      assertEquals("T|%", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      int int0 = (-62);
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemCount(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = MonthConstants.JULY;
      //  // Unstable assertion: assertEquals(7, int0);
      
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      String string0 = "/K";
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat(string0);
      //  // Unstable assertion: assertNotNull(simpleDateFormat0);
      //  // Unstable assertion: assertEquals("/K", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("/K", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      
      Date date0 = simpleDateFormat0.get2DigitYearStart();
      //  // Unstable assertion: assertNotNull(date0);
      //  // Unstable assertion: assertEquals("/K", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("/K", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("Tue Dec 11 15:58:36 GMT 1934", date0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      
      Second second0 = new Second(date0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(36, second0.getSecond());
      //  // Unstable assertion: assertEquals((-1106294483001L), second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1102867116L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1106294483501L), second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-1106294484000L), second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("/K", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("/K", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Tue Dec 11 15:58:36 GMT 1934", date0.toString());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (double) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(36, second0.getSecond());
      //  // Unstable assertion: assertEquals((-1106294483001L), second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1102867116L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1106294483501L), second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-1106294484000L), second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("/K", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("/K", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Tue Dec 11 15:58:36 GMT 1934", date0.toString());
      
      Double double0 = (Double)timeSeries0.getValue((RegularTimePeriod) second0);
      //  // Unstable assertion: assertEquals(36, second0.getSecond());
      //  // Unstable assertion: assertEquals((-1106294483001L), second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1102867116L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1106294483501L), second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-1106294484000L), second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("/K", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("/K", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Tue Dec 11 15:58:36 GMT 1934", date0.toString());
      //  // Unstable assertion: assertEquals(7.0, (double)double0, 0.01D);
  }

  @Test
  public void test37() {}
//   @Test
//   public void test37()  throws Throwable  {
//       int int0 = MonthConstants.JULY;
//       assertEquals(7, int0);
//       
//       Class<Quarter> class0 = Quarter.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) int0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Quarter.
//          //
//       }
//   }

  @Test
  public void test38()  throws Throwable  {
      int int0 = ImageObserver.WIDTH;
      assertEquals(1, int0);
      
      String string0 = "(J)QUK2&Y";
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("(J)QUK2&Y", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("(J)QUK2&Y", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      
      // Undeclared exception!
      try {
        RegularTimePeriod regularTimePeriod0 = timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test39() {}
//   @Test
//   public void test39()  throws Throwable  {
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
//       assertNotNull(timeSeries0);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       List list0 = timeSeries0.getItems();
//       assertNotNull(list0);
//       assertEquals(true, list0.isEmpty());
//       assertEquals(0, list0.size());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//   }

  @Test
  public void test40()  throws Throwable  {
      String string0 = JTextComponent.FOCUS_ACCELERATOR_KEY;
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("focusAcceleratorKey", string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      
      Day day0 = new Day();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      
      boolean boolean0 = timeSeries0.equals((Object) day0);
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertFalse(boolean0);
      
      int int0 = SwingConstants.NORTH;
      //  // Unstable assertion: assertEquals(1, int0);
      
      timeSeries0.add((RegularTimePeriod) day0, (Number) int0, boolean0);
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      
      timeSeries0.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
  }

  @Test
  public void test41()  throws Throwable  {
      String string0 = JTextComponent.FOCUS_ACCELERATOR_KEY;
      assertNotNull(string0);
      assertEquals("focusAcceleratorKey", string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      
      timeSeries0.setDomainDescription(string0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("focusAcceleratorKey", timeSeries0.getDomainDescription());
  }

  @Test
  public void test42()  throws Throwable  {
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      int int0 = 0;
      // Undeclared exception!
      try {
        timeSeries0.update(int0, (Number) int0);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
      }
  }

  @Test
  public void test43() {}
//   @Test
//   public void test43()  throws Throwable  {
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
//       assertNotNull(timeSeries0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       
//       int int0 = (-416);
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.add(timeSeriesDataItem0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'item' argument.
//          //
//       }
//   }

  @Test
  public void test44()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      int int0 = 1127;
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotNull(timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      boolean boolean1 = timeSeries1.equals((Object) timeSeries0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertTrue(boolean0 == boolean1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertTrue(boolean1 == boolean0);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(boolean1);
  }
}
