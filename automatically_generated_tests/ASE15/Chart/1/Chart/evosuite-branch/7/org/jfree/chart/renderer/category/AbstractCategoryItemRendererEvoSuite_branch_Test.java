/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:01:30 GMT 2014
 */

package org.jfree.chart.renderer.category;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.AWTEventMulticaster;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.event.ItemListener;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Date;
import java.util.EventListener;
import java.util.Locale;
import java.util.TimeZone;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JMenu;
import javax.swing.JPasswordField;
import javax.swing.JPopupMenu;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;
import org.jfree.chart.renderer.xy.XYErrorRenderer;
import org.jfree.chart.title.DateTitle;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class AbstractCategoryItemRendererEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      double double0 = 2763.0;
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertNotNull(lineRenderer3D0);
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertNotNull(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertNotNull(statisticalBarRenderer0);
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      
      int int0 = 910;
      Shape shape0 = statisticalBarRenderer0.getSeriesShape(int0);
      assertNull(shape0);
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try {
        lineRenderer3D0.addEntity(standardEntityCollection0, shape0, taskSeriesCollection0, int0, int0, boolean0, int0, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertNotNull(defaultCategoryItemRenderer0);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      
      ItemListener itemListener0 = null;
      ItemListener itemListener1 = AWTEventMulticaster.add(itemListener0, itemListener0);
      assertNull(itemListener1);
      
      boolean boolean0 = defaultCategoryItemRenderer0.hasListener((EventListener) itemListener1);
      assertFalse(boolean0);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      
      int int0 = 0;
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      assertNotNull(intervalBarRenderer0);
      assertEquals(1.0, intervalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, intervalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, intervalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, intervalBarRenderer0.getBaseCreateEntities());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, intervalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(2.0, intervalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, intervalBarRenderer0.getColumnCount());
      assertEquals(false, intervalBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, intervalBarRenderer0.getBase(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, intervalBarRenderer0.getRowCount());
      assertEquals(3, intervalBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, intervalBarRenderer0.getShadowsVisible());
      assertEquals(4.0, intervalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, intervalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, intervalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, intervalBarRenderer0.getPassCount());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, intervalBarRenderer0.getBaseItemLabelsVisible());
      
      EntityCollection entityCollection0 = null;
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertNotNull(waterfallBarRenderer0);
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      
      Shape shape0 = waterfallBarRenderer0.getLegendShape(int0);
      assertNull(shape0);
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      
      // Undeclared exception!
      try {
        intervalBarRenderer0.addEntity(entityCollection0, shape0, defaultCategoryDataset0, int0, int0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'hotspot' argument.
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      assertNotNull(barRenderer3D0);
      assertEquals(true, barRenderer3D0.getShadowsVisible());
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, barRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, barRenderer3D0.getBaseCreateEntities());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01D);
      assertEquals(false, barRenderer3D0.isDrawBarOutline());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, barRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(8.0, barRenderer3D0.getYOffset(), 0.01D);
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(12.0, barRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      
      LegendItemCollection legendItemCollection0 = barRenderer3D0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals(true, barRenderer3D0.getShadowsVisible());
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, barRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, barRenderer3D0.getBaseCreateEntities());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01D);
      assertEquals(false, barRenderer3D0.isDrawBarOutline());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, barRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(8.0, barRenderer3D0.getYOffset(), 0.01D);
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(12.0, barRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertEquals(0, legendItemCollection0.getItemCount());
  }

  @Test
  public void test03()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertNotNull(scatterRenderer0);
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertNotNull(categoryPlot0);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, categoryPlot0.isNotify());
      assertEquals(false, categoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, categoryPlot0.canSelectByPoint());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isRangePannable());
      assertEquals(0, categoryPlot0.getWeight());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(true, categoryPlot0.canSelectByRegion());
      assertEquals(false, categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainPannable());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      
      int int0 = 62;
      ValueAxis valueAxis0 = scatterRenderer0.getRangeAxis(categoryPlot0, int0);
      assertNull(valueAxis0);
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, categoryPlot0.isNotify());
      assertEquals(false, categoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, categoryPlot0.canSelectByPoint());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isRangePannable());
      assertEquals(0, categoryPlot0.getWeight());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(true, categoryPlot0.canSelectByRegion());
      assertEquals(false, categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainPannable());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.isOutlineVisible());
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(boolean0);
      assertNotNull(stackedBarRenderer3D0);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      
      NumberAxis numberAxis0 = (NumberAxis)stackedBarRenderer3D0.getRangeAxis(combinedRangeCategoryPlot0, int0);
      assertNotNull(numberAxis0);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertNotNull(waterfallBarRenderer0);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      
      WaterfallBarRenderer waterfallBarRenderer1 = (WaterfallBarRenderer)waterfallBarRenderer0.clone();
      assertTrue(waterfallBarRenderer0.equals((Object)waterfallBarRenderer1));
      assertTrue(waterfallBarRenderer1.equals((Object)waterfallBarRenderer0));
      assertNotSame(waterfallBarRenderer0, waterfallBarRenderer1);
      assertNotSame(waterfallBarRenderer1, waterfallBarRenderer0);
      assertNotNull(waterfallBarRenderer1);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0, waterfallBarRenderer1.getRowCount());
      assertEquals(true, waterfallBarRenderer1.getDefaultShadowsVisible());
      assertEquals(0.2, waterfallBarRenderer1.getItemMargin(), 0.01D);
      assertEquals(4.0, waterfallBarRenderer1.getShadowXOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer1.getIncludeBaseInRange());
      assertEquals(false, waterfallBarRenderer1.isDrawBarOutline());
      assertEquals(true, waterfallBarRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, waterfallBarRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(0, waterfallBarRenderer1.getColumnCount());
      assertEquals(4.0, waterfallBarRenderer1.getShadowYOffset(), 0.01D);
      assertEquals(false, waterfallBarRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, waterfallBarRenderer1.getShadowsVisible());
      assertEquals(0.0, waterfallBarRenderer1.getBase(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer1.getMaximumBarWidth(), 0.01D);
      assertEquals(true, waterfallBarRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(3, waterfallBarRenderer1.getDefaultEntityRadius());
      assertEquals(true, waterfallBarRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(false, waterfallBarRenderer1.getBaseItemLabelsVisible());
      assertEquals(false, waterfallBarRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer1.getBaseSeriesVisible());
      assertEquals(1.0, waterfallBarRenderer1.getMinimumBarLength(), 0.01D);
      assertEquals(2.0, waterfallBarRenderer1.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer1.getBaseCreateEntities());
      assertEquals(false, waterfallBarRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(1, waterfallBarRenderer1.getPassCount());
      assertEquals(true, waterfallBarRenderer1.getAutoPopulateSeriesShape());
  }

  @Test
  public void test06()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertNotNull(waterfallBarRenderer0);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      
      int int0 = 0;
      boolean boolean0 = false;
      CategoryCrosshairState categoryCrosshairState0 = null;
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertNotNull(thermometerPlot0);
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(true, thermometerPlot0.isNotify());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      assertNotNull(plotOrientation0);
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(true, thermometerPlot0.isNotify());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      
      waterfallBarRenderer0.updateCrosshairValues(categoryCrosshairState0, boolean0, boolean0, int0, int0, int0, int0, plotOrientation0);
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(true, thermometerPlot0.isNotify());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
  }

  @Test
  public void test07()  throws Throwable  {
      boolean boolean0 = true;
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      assertNotNull(xYErrorRenderer0);
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(true, xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      
      int int0 = (-252);
      Color color0 = (Color)xYErrorRenderer0.lookupSeriesOutlinePaint(int0);
      assertNotNull(color0);
      assertEquals(128, color0.getBlue());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(true, xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer((Paint) color0, (Paint) color0, (Paint) color0, (Paint) color0);
      assertNotNull(waterfallBarRenderer0);
      assertEquals(128, color0.getBlue());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(true, xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertNotNull(statisticalBarRenderer0);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      CategoryItemRendererState categoryItemRendererState0 = statisticalBarRenderer0.createState(plotRenderingInfo0);
      assertNotNull(categoryItemRendererState0);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01D);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01D);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      CategoryCrosshairState categoryCrosshairState0 = categoryItemRendererState0.getCrosshairState();
      assertNull(categoryCrosshairState0);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01D);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01D);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      PlotOrientation plotOrientation0 = null;
      // Undeclared exception!
      try {
        waterfallBarRenderer0.updateCrosshairValues(categoryCrosshairState0, int0, boolean0, int0, int0, int0, int0, plotOrientation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertNotNull(defaultCategoryItemRenderer0);
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      
      ItemListener itemListener0 = null;
      ItemListener itemListener1 = AWTEventMulticaster.add(itemListener0, itemListener0);
      assertNull(itemListener1);
      
      boolean boolean0 = defaultCategoryItemRenderer0.hasListener((EventListener) itemListener1);
      assertFalse(boolean0);
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      
      int int0 = 0;
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      assertNotNull(intervalBarRenderer0);
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, intervalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, intervalBarRenderer0.getPassCount());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, intervalBarRenderer0.isDrawBarOutline());
      assertEquals(true, intervalBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, intervalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, intervalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0, intervalBarRenderer0.getColumnCount());
      assertEquals(0.0, intervalBarRenderer0.getBase(), 0.01D);
      assertEquals(3, intervalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, intervalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, intervalBarRenderer0.getRowCount());
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, intervalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, intervalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getShadowsVisible());
      assertEquals(false, intervalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, intervalBarRenderer0.getShadowYOffset(), 0.01D);
      
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      assertNotNull(categoryCrosshairState0);
      assertEquals(0.0, categoryCrosshairState0.getCrosshairY(), 0.01D);
      assertEquals(0.0, categoryCrosshairState0.getAnchorY(), 0.01D);
      assertEquals(0, categoryCrosshairState0.getDatasetIndex());
      assertEquals(0.0, categoryCrosshairState0.getAnchorX(), 0.01D);
      assertEquals(0.0, categoryCrosshairState0.getCrosshairDistance(), 0.01D);
      assertEquals(0, categoryCrosshairState0.getDomainAxisIndex());
      assertEquals(0.0, categoryCrosshairState0.getCrosshairX(), 0.01D);
      assertEquals(0, categoryCrosshairState0.getRangeAxisIndex());
      
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      assertNotNull(plotOrientation0);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      
      // Undeclared exception!
      try {
        intervalBarRenderer0.updateCrosshairValues(categoryCrosshairState0, boolean0, boolean0, int0, int0, int0, int0, plotOrientation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 326;
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertNotNull(statisticalBarRenderer0);
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertNotNull(categoryPlot0);
      assertEquals(true, categoryPlot0.isNotify());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, categoryPlot0.canSelectByRegion());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isRangePannable());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(true, categoryPlot0.canSelectByPoint());
      assertEquals(false, categoryPlot0.isDomainPannable());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.isRangeZeroBaselineVisible());
      
      statisticalBarRenderer0.setPlot(categoryPlot0);
      assertEquals(true, categoryPlot0.isNotify());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, categoryPlot0.canSelectByRegion());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isRangePannable());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(true, categoryPlot0.canSelectByPoint());
      assertEquals(false, categoryPlot0.isDomainPannable());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      
      Color color0 = (Color)statisticalBarRenderer0.lookupSeriesPaint(int0);
      assertNotNull(color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(85, color0.getBlue());
      assertEquals(85, color0.getGreen());
      assertEquals(-43691, color0.getRGB());
      assertEquals("java.awt.Color[r=255,g=85,b=85]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
  }

  @Test
  public void test10()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      //  // Unstable assertion: assertNotNull(boxAndWhiskerRenderer0);
      //  // Unstable assertion: assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      //  // Unstable assertion: assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      //  // Unstable assertion: assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      //  // Unstable assertion: assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      //  // Unstable assertion: assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      //  // Unstable assertion: assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      //  // Unstable assertion: assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      //  // Unstable assertion: assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      
      int int0 = 63;
      boolean boolean0 = false;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)boxAndWhiskerRenderer0.getItemShape(int0, int0, boolean0);
      //  // Unstable assertion: assertNotNull(rectangle2D_Double0);
      //  // Unstable assertion: assertEquals(4024.5371167050002, rectangle2D_Double0.width, 0.01D);
      //  // Unstable assertion: assertEquals((-2867.571448), rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals((-793.42452), rectangle2D_Double0.y, 0.01D);
      //  // Unstable assertion: assertEquals(793.42452, rectangle2D_Double0.height, 0.01D);
      //  // Unstable assertion: assertEquals((-793.42452), rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(1156.965668705, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals((-855.3028896475), rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals((-2867.571448), rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals((-396.71226), rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      //  // Unstable assertion: assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      //  // Unstable assertion: assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      //  // Unstable assertion: assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      //  // Unstable assertion: assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      //  // Unstable assertion: assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      //  // Unstable assertion: assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      //  // Unstable assertion: assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      int int0 = 586;
      LegendItem legendItem0 = minMaxCategoryRenderer0.getLegendItem(int0, int0);
      assertNull(legendItem0);
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test
  public void test12()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      
      CategoryAxis categoryAxis0 = null;
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      
      Graphics2D graphics2D0 = null;
      PlotOrientation plotOrientation0 = combinedDomainCategoryPlot0.getOrientation();
      assertNotNull(plotOrientation0);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      
      String string0 = "5o,Dt";
      JPasswordField jPasswordField0 = new JPasswordField(string0);
      assertNotNull(jPasswordField0);
      assertEquals(false, jPasswordField0.isShowing());
      assertEquals(true, jPasswordField0.isEnabled());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicySet());
      assertEquals(true, jPasswordField0.isVisible());
      assertEquals(true, jPasswordField0.isForegroundSet());
      assertEquals(false, jPasswordField0.isMaximumSizeSet());
      assertEquals(false, jPasswordField0.isDisplayable());
      assertEquals(true, jPasswordField0.isBackgroundSet());
      assertEquals(0, jPasswordField0.countComponents());
      assertEquals(false, jPasswordField0.isMinimumSizeSet());
      assertEquals(true, jPasswordField0.getFocusTraversalKeysEnabled());
      assertEquals(true, jPasswordField0.isCursorSet());
      assertEquals(false, jPasswordField0.isFocusCycleRoot());
      assertEquals(false, jPasswordField0.isPreferredSizeSet());
      assertEquals(false, jPasswordField0.isValid());
      assertEquals(false, jPasswordField0.getIgnoreRepaint());
      assertEquals(0, jPasswordField0.getComponentCount());
      assertEquals(false, jPasswordField0.isLightweight());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicyProvider());
      assertEquals(true, jPasswordField0.isFontSet());
      
      Rectangle rectangle0 = jPasswordField0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(false, jPasswordField0.isShowing());
      assertEquals(true, jPasswordField0.isEnabled());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicySet());
      assertEquals(true, jPasswordField0.isVisible());
      assertEquals(true, jPasswordField0.isForegroundSet());
      assertEquals(false, jPasswordField0.isMaximumSizeSet());
      assertEquals(false, jPasswordField0.isDisplayable());
      assertEquals(true, jPasswordField0.isBackgroundSet());
      assertEquals(0, jPasswordField0.countComponents());
      assertEquals(false, jPasswordField0.isMinimumSizeSet());
      assertEquals(true, jPasswordField0.getFocusTraversalKeysEnabled());
      assertEquals(true, jPasswordField0.isCursorSet());
      assertEquals(false, jPasswordField0.isFocusCycleRoot());
      assertEquals(false, jPasswordField0.isPreferredSizeSet());
      assertEquals(false, jPasswordField0.isValid());
      assertEquals(false, jPasswordField0.getIgnoreRepaint());
      assertEquals(0, jPasswordField0.getComponentCount());
      assertEquals(false, jPasswordField0.isLightweight());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicyProvider());
      assertEquals(true, jPasswordField0.isFontSet());
      
      RectangleInsets rectangleInsets0 = null;
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) string0);
      assertNotNull(categoryMarker0);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      
      LengthAdjustmentType lengthAdjustmentType0 = categoryMarker0.getLabelOffsetType();
      assertNotNull(lengthAdjustmentType0);
      assertEquals("EXPAND", lengthAdjustmentType0.toString());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      
      LabelBlock labelBlock0 = new LabelBlock(string0);
      assertNotNull(labelBlock0);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01D);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01D);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01D);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01D);
      assertNull(labelBlock0.getToolTipText());
      
      RectangleAnchor rectangleAnchor0 = labelBlock0.getTextAnchor();
      assertNotNull(rectangleAnchor0);
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01D);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01D);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01D);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01D);
      assertNull(labelBlock0.getToolTipText());
      
      // Undeclared exception!
      try {
        Point2D point2D0 = minMaxCategoryRenderer0.calculateRangeMarkerTextAnchorPoint(graphics2D0, plotOrientation0, rectangle0, rectangle0, rectangleInsets0, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      boolean boolean0 = true;
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(boolean0);
      assertNotNull(stackedBarRenderer0);
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertNotNull(categoryPlot0);
      assertEquals(false, categoryPlot0.isRangePannable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, categoryPlot0.isRangeZeroBaselineVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, categoryPlot0.canSelectByPoint());
      assertEquals(false, categoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isNotify());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, categoryPlot0.canSelectByRegion());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainPannable());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      
      double double0 = (-1818.49128);
      String string0 = "";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0, double0, string0);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals((-1818.49128), cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals((-1818.49128), cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals((-1818.49128), cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      
      ValueMarker valueMarker0 = new ValueMarker(double0);
      assertNotNull(valueMarker0);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals((-1818.49128), valueMarker0.getValue(), 0.01D);
      
      Rectangle2D rectangle2D0 = null;
      stackedBarRenderer0.drawRangeMarker(graphics2D0, categoryPlot0, (ValueAxis) cyclicNumberAxis0, (Marker) valueMarker0, rectangle2D0);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals((-1818.49128), cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals((-1818.49128), cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals((-1818.49128), cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals((-1818.49128), valueMarker0.getValue(), 0.01D);
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, categoryPlot0.isRangePannable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, categoryPlot0.isRangeZeroBaselineVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, categoryPlot0.canSelectByPoint());
      assertEquals(false, categoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isNotify());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, categoryPlot0.canSelectByRegion());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainPannable());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(true, categoryPlot0.isOutlineVisible());
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 23;
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      assertNotNull(statisticalLineAndShapeRenderer0);
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      
      Graphics2D graphics2D0 = null;
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertNotNull(scatterRenderer0);
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      
      CategoryPlot categoryPlot0 = scatterRenderer0.getPlot();
      assertNull(categoryPlot0);
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float();
      assertNotNull(roundRectangle2D_Float0);
      assertEquals(0.0F, roundRectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, roundRectangle2D_Float0.archeight, 0.01F);
      assertEquals(0.0F, roundRectangle2D_Float0.arcwidth, 0.01F);
      assertEquals(0.0F, roundRectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, roundRectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, roundRectangle2D_Float0.y, 0.01F);
      assertEquals(0.0, roundRectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Float0.getMinY(), 0.01D);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)roundRectangle2D_Float0.getFrame();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0F, roundRectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, roundRectangle2D_Float0.archeight, 0.01F);
      assertEquals(0.0F, roundRectangle2D_Float0.arcwidth, 0.01F);
      assertEquals(0.0F, roundRectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, roundRectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, roundRectangle2D_Float0.y, 0.01F);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, roundRectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer((double) roundRectangle2D_Float0.width);
      assertNotNull(xYBoxAndWhiskerRenderer0);
      assertEquals(0.0F, roundRectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, roundRectangle2D_Float0.archeight, 0.01F);
      assertEquals(0.0F, roundRectangle2D_Float0.arcwidth, 0.01F);
      assertEquals(0.0F, roundRectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, roundRectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, roundRectangle2D_Float0.y, 0.01F);
      assertEquals(0.0, roundRectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, xYBoxAndWhiskerRenderer0.getBoxWidth(), 0.01D);
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYBoxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getFillBox());
      assertEquals(2.0, xYBoxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, xYBoxAndWhiskerRenderer0.getPassCount());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      
      Paint paint0 = xYBoxAndWhiskerRenderer0.getSeriesItemLabelPaint(int0);
      assertNull(paint0);
      assertEquals(0.0F, roundRectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, roundRectangle2D_Float0.archeight, 0.01F);
      assertEquals(0.0F, roundRectangle2D_Float0.arcwidth, 0.01F);
      assertEquals(0.0F, roundRectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, roundRectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, roundRectangle2D_Float0.y, 0.01F);
      assertEquals(0.0, roundRectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, xYBoxAndWhiskerRenderer0.getBoxWidth(), 0.01D);
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYBoxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getFillBox());
      assertEquals(2.0, xYBoxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, xYBoxAndWhiskerRenderer0.getPassCount());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      
      BasicStroke basicStroke0 = (BasicStroke)AbstractRenderer.DEFAULT_OUTLINE_STROKE;
      assertNotNull(basicStroke0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      
      // Undeclared exception!
      try {
        statisticalLineAndShapeRenderer0.drawDomainLine(graphics2D0, categoryPlot0, (Rectangle2D) rectangle2D_Double0, (double) roundRectangle2D_Float0.y, paint0, (Stroke) basicStroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertNotNull(scatterRenderer0);
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      
      Graphics2D graphics2D0 = null;
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      assertNotNull(categoryStepRenderer0);
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, categoryStepRenderer0.getStagger());
      
      CategoryPlot categoryPlot0 = categoryStepRenderer0.getPlot();
      assertNull(categoryPlot0);
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, categoryStepRenderer0.getStagger());
      
      JMenu jMenu0 = new JMenu();
      assertNotNull(jMenu0);
      assertEquals(true, jMenu0.isVisible());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      
      Rectangle rectangle0 = jMenu0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(true, jMenu0.isVisible());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      
      Color color0 = (Color)AbstractRenderer.DEFAULT_PAINT;
      assertNotNull(color0);
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(rectangle0.x);
      assertNotNull(standardXYItemRenderer0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, standardXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertEquals(true, standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, standardXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, standardXYItemRenderer0.getPlotImages());
      assertEquals(false, standardXYItemRenderer0.getPlotLines());
      assertEquals(true, standardXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, standardXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(true, standardXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      
      BasicStroke basicStroke0 = (BasicStroke)standardXYItemRenderer0.getBaseStroke();
      assertNotNull(basicStroke0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, standardXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertEquals(true, standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, standardXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, standardXYItemRenderer0.getPlotImages());
      assertEquals(false, standardXYItemRenderer0.getPlotLines());
      assertEquals(true, standardXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, standardXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(true, standardXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      
      // Undeclared exception!
      try {
        scatterRenderer0.drawDomainLine(graphics2D0, categoryPlot0, (Rectangle2D) rectangle0, (double) rectangle0.x, (Paint) color0, (Stroke) basicStroke0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertNotNull(boxAndWhiskerRenderer0);
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      
      CategoryDataset categoryDataset0 = null;
      Range range0 = boxAndWhiskerRenderer0.findRangeBounds(categoryDataset0);
      assertNull(range0);
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 1354;
      Graphics2D graphics2D0 = null;
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertNotNull(defaultCategoryItemRenderer0);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      
      Rectangle2D rectangle2D0 = null;
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertNotNull(categoryPlot0);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, categoryPlot0.isRangePannable());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isNotify());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.isDomainPannable());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(true, categoryPlot0.canSelectByPoint());
      assertEquals(true, categoryPlot0.canSelectByRegion());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      
      CategoryDataset categoryDataset0 = categoryPlot0.getDataset(int0);
      assertNull(categoryDataset0);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, categoryPlot0.isRangePannable());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isNotify());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.isDomainPannable());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(true, categoryPlot0.canSelectByPoint());
      assertEquals(true, categoryPlot0.canSelectByRegion());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, int0, int0);
      assertNotNull(slidingCategoryDataset0);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, categoryPlot0.isRangePannable());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isNotify());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.isDomainPannable());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(true, categoryPlot0.canSelectByPoint());
      assertEquals(true, categoryPlot0.canSelectByRegion());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1354, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1354, slidingCategoryDataset0.getFirstCategoryIndex());
      
      CategoryDataset categoryDataset1 = slidingCategoryDataset0.getUnderlyingDataset();
      assertNull(categoryDataset1);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, categoryPlot0.isRangePannable());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isNotify());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.isDomainPannable());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(true, categoryPlot0.canSelectByPoint());
      assertEquals(true, categoryPlot0.canSelectByRegion());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1354, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1354, slidingCategoryDataset0.getFirstCategoryIndex());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      // Undeclared exception!
      try {
        CategoryItemRendererState categoryItemRendererState0 = defaultCategoryItemRenderer0.initialise(graphics2D0, rectangle2D0, categoryPlot0, categoryDataset1, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertNotNull(lineRenderer3D0);
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      assertNotNull(intervalBarRenderer0);
      assertEquals(2.0, intervalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.2, intervalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0, intervalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(3, intervalBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, intervalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, intervalBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, intervalBarRenderer0.getBase(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(1, intervalBarRenderer0.getPassCount());
      assertEquals(true, intervalBarRenderer0.getShadowsVisible());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, intervalBarRenderer0.getRowCount());
      assertEquals(4.0, intervalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getBaseCreateEntities());
      assertEquals(0, intervalBarRenderer0.getColumnCount());
      assertEquals(4.0, intervalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, intervalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, intervalBarRenderer0.isDrawBarOutline());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesPaint());
      
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = intervalBarRenderer0.getLegendItemToolTipGenerator();
      assertNull(categorySeriesLabelGenerator0);
      assertEquals(2.0, intervalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.2, intervalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0, intervalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(3, intervalBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, intervalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, intervalBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, intervalBarRenderer0.getBase(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(1, intervalBarRenderer0.getPassCount());
      assertEquals(true, intervalBarRenderer0.getShadowsVisible());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, intervalBarRenderer0.getRowCount());
      assertEquals(4.0, intervalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getBaseCreateEntities());
      assertEquals(0, intervalBarRenderer0.getColumnCount());
      assertEquals(4.0, intervalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, intervalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, intervalBarRenderer0.isDrawBarOutline());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesPaint());
      
      // Undeclared exception!
      try {
        lineRenderer3D0.setLegendItemLabelGenerator(categorySeriesLabelGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      boolean boolean0 = false;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(boolean0);
      assertNotNull(stackedBarRenderer3D0);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertNotNull(defaultCategoryItemRenderer0);
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = (StandardCategorySeriesLabelGenerator)defaultCategoryItemRenderer0.getLegendItemLabelGenerator();
      assertNotNull(standardCategorySeriesLabelGenerator0);
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      
      stackedBarRenderer3D0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) standardCategorySeriesLabelGenerator0);
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
  }

  @Test
  public void test20()  throws Throwable  {
      double double0 = 4.0;
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      assertNotNull(categoryStepRenderer0);
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      
      String string0 = "Ir$4";
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation(string0, (Comparable) double0, double0, double0);
      assertNotNull(categoryPointerAnnotation0);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals("Ir$4", categoryPointerAnnotation0.getText());
      assertEquals(true, categoryPointerAnnotation0.getNotify());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01D);
      assertEquals(4.0, categoryPointerAnnotation0.getAngle(), 0.01D);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01D);
      assertEquals(4.0, categoryPointerAnnotation0.getValue(), 0.01D);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01D);
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      categoryStepRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0, layer0);
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals("Ir$4", categoryPointerAnnotation0.getText());
      assertEquals(true, categoryPointerAnnotation0.getNotify());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01D);
      assertEquals(4.0, categoryPointerAnnotation0.getAngle(), 0.01D);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01D);
      assertEquals(4.0, categoryPointerAnnotation0.getValue(), 0.01D);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01D);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "k9;D";
      boolean boolean0 = false;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      assertNotNull(stackedBarRenderer3D0);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      
      double double0 = 5508.52;
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation(string0, (Comparable) boolean0, double0, double0);
      assertNotNull(categoryPointerAnnotation0);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01D);
      assertEquals(5508.52, categoryPointerAnnotation0.getAngle(), 0.01D);
      assertEquals(true, categoryPointerAnnotation0.getNotify());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals("k9;D", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01D);
      assertEquals(5508.52, categoryPointerAnnotation0.getValue(), 0.01D);
      
      stackedBarRenderer3D0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01D);
      assertEquals(5508.52, categoryPointerAnnotation0.getAngle(), 0.01D);
      assertEquals(true, categoryPointerAnnotation0.getNotify());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals("k9;D", categoryPointerAnnotation0.getText());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01D);
      assertEquals(5508.52, categoryPointerAnnotation0.getValue(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
  }

  @Test
  public void test22()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      assertNotNull(barRenderer3D0);
      assertEquals(true, barRenderer3D0.getBaseCreateEntities());
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01D);
      assertEquals(true, barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisible());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, barRenderer3D0.isDrawBarOutline());
      assertEquals(true, barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, barRenderer3D0.getIncludeBaseInRange());
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(true, barRenderer3D0.getShadowsVisible());
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertEquals(false, barRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(12.0, barRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(8.0, barRenderer3D0.getYOffset(), 0.01D);
      
      CategoryURLGenerator categoryURLGenerator0 = barRenderer3D0.getBaseURLGenerator();
      assertNull(categoryURLGenerator0);
      assertEquals(true, barRenderer3D0.getBaseCreateEntities());
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01D);
      assertEquals(true, barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisible());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, barRenderer3D0.isDrawBarOutline());
      assertEquals(true, barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, barRenderer3D0.getIncludeBaseInRange());
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(true, barRenderer3D0.getShadowsVisible());
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertEquals(false, barRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(12.0, barRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(8.0, barRenderer3D0.getYOffset(), 0.01D);
      
      boolean boolean0 = false;
      barRenderer3D0.setBaseURLGenerator(categoryURLGenerator0, boolean0);
      assertEquals(true, barRenderer3D0.getBaseCreateEntities());
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01D);
      assertEquals(true, barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisible());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, barRenderer3D0.isDrawBarOutline());
      assertEquals(true, barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, barRenderer3D0.getIncludeBaseInRange());
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(true, barRenderer3D0.getShadowsVisible());
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertEquals(false, barRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(12.0, barRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(8.0, barRenderer3D0.getYOffset(), 0.01D);
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = 3;
      boolean boolean0 = false;
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertNotNull(layeredBarRenderer0);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertNotNull(waterfallBarRenderer0);
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      
      CategoryURLGenerator categoryURLGenerator0 = waterfallBarRenderer0.getURLGenerator(int0, int0, boolean0);
      assertNull(categoryURLGenerator0);
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      
      layeredBarRenderer0.setSeriesURLGenerator(int0, categoryURLGenerator0, boolean0);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
  }

  @Test
  public void test24()  throws Throwable  {
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      assertNotNull(defaultListCellRenderer0);
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      
      Dimension dimension0 = defaultListCellRenderer0.size();
      assertNotNull(dimension0);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0.0, dimension0.getHeight(), 0.01D);
      assertEquals(0.0, dimension0.getWidth(), 0.01D);
      assertEquals("java.awt.Dimension[width=0,height=0]", dimension0.toString());
      
      boolean boolean0 = true;
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertNotNull(levelRenderer0);
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      
      EntityCollection entityCollection0 = null;
      DateTitle dateTitle0 = new DateTitle();
      assertNotNull(dateTitle0);
      assertTrue(dateTitle0.visible);
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01D);
      assertNull(dateTitle0.getURLText());
      assertEquals(true, dateTitle0.isVisible());
      assertNull(dateTitle0.getToolTipText());
      assertEquals(false, dateTitle0.getExpandToFitSpace());
      assertEquals(true, dateTitle0.getNotify());
      assertEquals(2147483647, dateTitle0.getMaximumLinesToDisplay());
      assertNull(dateTitle0.getID());
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01D);
      assertEquals(0.0, dateTitle0.getWidth(), 0.01D);
      assertEquals("14 February 2014", dateTitle0.getText());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01D);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)dateTitle0.getBounds();
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertTrue(dateTitle0.visible);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01D);
      assertNull(dateTitle0.getURLText());
      assertEquals(true, dateTitle0.isVisible());
      assertNull(dateTitle0.getToolTipText());
      assertEquals(false, dateTitle0.getExpandToFitSpace());
      assertEquals(true, dateTitle0.getNotify());
      assertEquals(2147483647, dateTitle0.getMaximumLinesToDisplay());
      assertNull(dateTitle0.getID());
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01D);
      assertEquals(0.0, dateTitle0.getWidth(), 0.01D);
      assertEquals("14 February 2014", dateTitle0.getText());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01D);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) dimension0.width);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0.0, dimension0.getHeight(), 0.01D);
      assertEquals(0.0, dimension0.getWidth(), 0.01D);
      assertEquals("java.awt.Dimension[width=0,height=0]", dimension0.toString());
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) cyclicNumberAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0.0, dimension0.getHeight(), 0.01D);
      assertEquals(0.0, dimension0.getWidth(), 0.01D);
      assertEquals("java.awt.Dimension[width=0,height=0]", dimension0.toString());
      
      CategoryDataset categoryDataset0 = combinedRangeCategoryPlot0.getDataset(dimension0.height);
      assertNull(categoryDataset0);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0.0, dimension0.getHeight(), 0.01D);
      assertEquals(0.0, dimension0.getWidth(), 0.01D);
      assertEquals("java.awt.Dimension[width=0,height=0]", dimension0.toString());
      
      // Undeclared exception!
      try {
        levelRenderer0.addEntity(entityCollection0, rectangle2D_Float0, categoryDataset0, dimension0.height, dimension0.height, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertNotNull(defaultCategoryItemRenderer0);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertNotNull(boxAndWhiskerRenderer0);
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      
      int int0 = 0;
      boolean boolean0 = false;
      CategoryToolTipGenerator categoryToolTipGenerator0 = boxAndWhiskerRenderer0.getToolTipGenerator(int0, int0, boolean0);
      assertNull(categoryToolTipGenerator0);
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      
      defaultCategoryItemRenderer0.setBaseToolTipGenerator(categoryToolTipGenerator0, boolean0);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
  }

  @Test
  public void test26()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertNotNull(levelRenderer0);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      
      int int0 = 3;
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertNotNull(boxAndWhiskerRenderer0);
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      
      boolean boolean0 = true;
      CategoryToolTipGenerator categoryToolTipGenerator0 = boxAndWhiskerRenderer0.getToolTipGenerator(int0, int0, boolean0);
      assertNull(categoryToolTipGenerator0);
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      
      boolean boolean1 = false;
      levelRenderer0.setSeriesToolTipGenerator(int0, categoryToolTipGenerator0, boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
  }

  @Test
  public void test27()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertNotNull(groupedStackedBarRenderer0);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      
      String string0 = "Null 'generator' argument.";
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      assertNotNull(decimalFormat0);
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals(false, decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator(string0, (NumberFormat) decimalFormat0, (NumberFormat) decimalFormat0);
      assertNotNull(standardCategoryItemLabelGenerator0);
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals(false, decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals("Null 'generator' argument.", standardCategoryItemLabelGenerator0.getLabelFormat());
      
      boolean boolean0 = false;
      groupedStackedBarRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, boolean0);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals(false, decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals("Null 'generator' argument.", standardCategoryItemLabelGenerator0.getLabelFormat());
  }

  @Test
  public void test28()  throws Throwable  {
      boolean boolean0 = false;
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(boolean0, boolean0);
      assertNotNull(statisticalLineAndShapeRenderer0);
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      
      int int0 = 27;
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertNotNull(defaultCategoryItemRenderer0);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = defaultCategoryItemRenderer0.getBaseItemLabelGenerator();
      assertNull(categoryItemLabelGenerator0);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      
      statisticalLineAndShapeRenderer0.setSeriesItemLabelGenerator(int0, categoryItemLabelGenerator0, boolean0);
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
  }

  @Test
  public void test29()  throws Throwable  {
      boolean boolean0 = false;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(boolean0);
      assertNotNull(stackedAreaRenderer0);
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      
      CategoryAxis categoryAxis0 = null;
      int int0 = 11;
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      PlotOrientation plotOrientation0 = combinedDomainCategoryPlot0.getOrientation();
      assertNotNull(plotOrientation0);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      
      CategoryDataset categoryDataset0 = combinedDomainCategoryPlot0.getDataset();
      assertNull(categoryDataset0);
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      
      stackedAreaRenderer0.drawItemLabel(graphics2D0, plotOrientation0, categoryDataset0, int0, int0, boolean0, int0, int0, boolean0);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
  }

  @Test
  public void test30()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertNotNull(lineRenderer3D0);
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      
      CategoryPlot categoryPlot0 = lineRenderer3D0.getPlot();
      assertNull(categoryPlot0);
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      
      JPopupMenu.Separator jPopupMenu_Separator0 = new JPopupMenu.Separator();
      assertNotNull(jPopupMenu_Separator0);
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      
      Rectangle rectangle0 = jPopupMenu_Separator0.bounds();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      boolean boolean0 = true;
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(boolean0);
      assertNotNull(stackedBarRenderer0);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      
      Graphics2D graphics2D0 = null;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      // Undeclared exception!
      try {
        CategoryItemRendererState categoryItemRendererState0 = stackedBarRenderer0.initialise(graphics2D0, (Rectangle2D) rectangle0, categoryPlot0, (CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertNotNull(levelRenderer0);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = levelRenderer0.getLegendItemURLGenerator();
      assertNull(categorySeriesLabelGenerator0);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      
      levelRenderer0.setLegendItemURLGenerator(categorySeriesLabelGenerator0);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
  }

  @Test
  public void test32()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      
      String string0 = "{?R>D\"0/\\YZ,`[";
      MockDate mockDate0 = (MockDate)DateAxis.DEFAULT_ANCHOR_DATE;
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Week week0 = new Week((Date) mockDate0);
      assertNotNull(week0);
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      JTableHeader jTableHeader0 = new JTableHeader();
      assertNotNull(jTableHeader0);
      assertEquals(false, jTableHeader0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTableHeader0.isFocusCycleRoot());
      assertEquals(false, jTableHeader0.isDisplayable());
      assertEquals(false, jTableHeader0.isCursorSet());
      assertEquals(false, jTableHeader0.isLightweight());
      assertEquals(1, jTableHeader0.getComponentCount());
      assertEquals(true, jTableHeader0.isFontSet());
      assertEquals(false, jTableHeader0.isMaximumSizeSet());
      assertEquals(false, jTableHeader0.isShowing());
      assertEquals(true, jTableHeader0.isEnabled());
      assertEquals(true, jTableHeader0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTableHeader0.isBackgroundSet());
      assertEquals(false, jTableHeader0.getIgnoreRepaint());
      assertEquals(true, jTableHeader0.isVisible());
      assertEquals(false, jTableHeader0.isMinimumSizeSet());
      assertEquals(true, jTableHeader0.isForegroundSet());
      assertEquals(1, jTableHeader0.countComponents());
      assertEquals(false, jTableHeader0.isValid());
      assertEquals(false, jTableHeader0.isPreferredSizeSet());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicySet());
      
      Locale locale0 = jTableHeader0.getLocale();
      assertNotNull(locale0);
      assertEquals(false, jTableHeader0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTableHeader0.isFocusCycleRoot());
      assertEquals(false, jTableHeader0.isDisplayable());
      assertEquals(false, jTableHeader0.isCursorSet());
      assertEquals(false, jTableHeader0.isLightweight());
      assertEquals(1, jTableHeader0.getComponentCount());
      assertEquals(true, jTableHeader0.isFontSet());
      assertEquals(false, jTableHeader0.isMaximumSizeSet());
      assertEquals(false, jTableHeader0.isShowing());
      assertEquals(true, jTableHeader0.isEnabled());
      assertEquals(true, jTableHeader0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTableHeader0.isBackgroundSet());
      assertEquals(false, jTableHeader0.getIgnoreRepaint());
      assertEquals(true, jTableHeader0.isVisible());
      assertEquals(false, jTableHeader0.isMinimumSizeSet());
      assertEquals(true, jTableHeader0.isForegroundSet());
      assertEquals(1, jTableHeader0.countComponents());
      assertEquals(false, jTableHeader0.isValid());
      assertEquals(false, jTableHeader0.isPreferredSizeSet());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicySet());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      PeriodAxis periodAxis0 = new PeriodAxis(string0, (RegularTimePeriod) week0, (RegularTimePeriod) week0, (TimeZone) zoneInfo0, locale0);
      assertNotNull(periodAxis0);
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals("{?R>D\"0/\\YZ,`[", periodAxis0.getLabel());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTableHeader0.isFocusCycleRoot());
      assertEquals(false, jTableHeader0.isDisplayable());
      assertEquals(false, jTableHeader0.isCursorSet());
      assertEquals(false, jTableHeader0.isLightweight());
      assertEquals(1, jTableHeader0.getComponentCount());
      assertEquals(true, jTableHeader0.isFontSet());
      assertEquals(false, jTableHeader0.isMaximumSizeSet());
      assertEquals(false, jTableHeader0.isShowing());
      assertEquals(true, jTableHeader0.isEnabled());
      assertEquals(true, jTableHeader0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTableHeader0.isBackgroundSet());
      assertEquals(false, jTableHeader0.getIgnoreRepaint());
      assertEquals(true, jTableHeader0.isVisible());
      assertEquals(false, jTableHeader0.isMinimumSizeSet());
      assertEquals(true, jTableHeader0.isForegroundSet());
      assertEquals(1, jTableHeader0.countComponents());
      assertEquals(false, jTableHeader0.isValid());
      assertEquals(false, jTableHeader0.isPreferredSizeSet());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicySet());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) periodAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals((-2.592E8), periodAxis0.getLowerBound(), 0.01D);
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals("{?R>D\"0/\\YZ,`[", periodAxis0.getLabel());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals(3.456E8, periodAxis0.getUpperBound(), 0.01D);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTableHeader0.isFocusCycleRoot());
      assertEquals(false, jTableHeader0.isDisplayable());
      assertEquals(false, jTableHeader0.isCursorSet());
      assertEquals(false, jTableHeader0.isLightweight());
      assertEquals(1, jTableHeader0.getComponentCount());
      assertEquals(true, jTableHeader0.isFontSet());
      assertEquals(false, jTableHeader0.isMaximumSizeSet());
      assertEquals(false, jTableHeader0.isShowing());
      assertEquals(true, jTableHeader0.isEnabled());
      assertEquals(true, jTableHeader0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTableHeader0.isBackgroundSet());
      assertEquals(false, jTableHeader0.getIgnoreRepaint());
      assertEquals(true, jTableHeader0.isVisible());
      assertEquals(false, jTableHeader0.isMinimumSizeSet());
      assertEquals(true, jTableHeader0.isForegroundSet());
      assertEquals(1, jTableHeader0.countComponents());
      assertEquals(false, jTableHeader0.isValid());
      assertEquals(false, jTableHeader0.isPreferredSizeSet());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicySet());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      CategoryDataset categoryDataset0 = combinedRangeCategoryPlot0.getDataset();
      assertNull(categoryDataset0);
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals((-2.592E8), periodAxis0.getLowerBound(), 0.01D);
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals("{?R>D\"0/\\YZ,`[", periodAxis0.getLabel());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals(3.456E8, periodAxis0.getUpperBound(), 0.01D);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTableHeader0.isFocusCycleRoot());
      assertEquals(false, jTableHeader0.isDisplayable());
      assertEquals(false, jTableHeader0.isCursorSet());
      assertEquals(false, jTableHeader0.isLightweight());
      assertEquals(1, jTableHeader0.getComponentCount());
      assertEquals(true, jTableHeader0.isFontSet());
      assertEquals(false, jTableHeader0.isMaximumSizeSet());
      assertEquals(false, jTableHeader0.isShowing());
      assertEquals(true, jTableHeader0.isEnabled());
      assertEquals(true, jTableHeader0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTableHeader0.isBackgroundSet());
      assertEquals(false, jTableHeader0.getIgnoreRepaint());
      assertEquals(true, jTableHeader0.isVisible());
      assertEquals(false, jTableHeader0.isMinimumSizeSet());
      assertEquals(true, jTableHeader0.isForegroundSet());
      assertEquals(1, jTableHeader0.countComponents());
      assertEquals(false, jTableHeader0.isValid());
      assertEquals(false, jTableHeader0.isPreferredSizeSet());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicySet());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      
      CategoryAxis categoryAxis0 = combinedDomainCategoryPlot0.getDomainAxis();
      assertNotNull(categoryAxis0);
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(false, categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isTickMarksVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource0 = new DefaultTableCellRenderer.UIResource();
      assertNotNull(defaultTableCellRenderer_UIResource0);
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      
      Rectangle rectangle0 = defaultTableCellRenderer_UIResource0.getVisibleRect();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getDomainAxisLocation(rectangle0.width);
      assertNotNull(axisLocation0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals((-2.592E8), periodAxis0.getLowerBound(), 0.01D);
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals("{?R>D\"0/\\YZ,`[", periodAxis0.getLabel());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals(3.456E8, periodAxis0.getUpperBound(), 0.01D);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(false, jTableHeader0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTableHeader0.isFocusCycleRoot());
      assertEquals(false, jTableHeader0.isDisplayable());
      assertEquals(false, jTableHeader0.isCursorSet());
      assertEquals(false, jTableHeader0.isLightweight());
      assertEquals(1, jTableHeader0.getComponentCount());
      assertEquals(true, jTableHeader0.isFontSet());
      assertEquals(false, jTableHeader0.isMaximumSizeSet());
      assertEquals(false, jTableHeader0.isShowing());
      assertEquals(true, jTableHeader0.isEnabled());
      assertEquals(true, jTableHeader0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTableHeader0.isBackgroundSet());
      assertEquals(false, jTableHeader0.getIgnoreRepaint());
      assertEquals(true, jTableHeader0.isVisible());
      assertEquals(false, jTableHeader0.isMinimumSizeSet());
      assertEquals(true, jTableHeader0.isForegroundSet());
      assertEquals(1, jTableHeader0.countComponents());
      assertEquals(false, jTableHeader0.isValid());
      assertEquals(false, jTableHeader0.isPreferredSizeSet());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicySet());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      PlotOrientation plotOrientation0 = combinedDomainCategoryPlot0.getOrientation();
      assertNotNull(plotOrientation0);
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      
      RectangleEdge rectangleEdge0 = Plot.resolveRangeAxisLocation(axisLocation0, plotOrientation0);
      assertNotNull(rectangleEdge0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(false, jTableHeader0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTableHeader0.isFocusCycleRoot());
      assertEquals(false, jTableHeader0.isDisplayable());
      assertEquals(false, jTableHeader0.isCursorSet());
      assertEquals(false, jTableHeader0.isLightweight());
      assertEquals(1, jTableHeader0.getComponentCount());
      assertEquals(true, jTableHeader0.isFontSet());
      assertEquals(false, jTableHeader0.isMaximumSizeSet());
      assertEquals(false, jTableHeader0.isShowing());
      assertEquals(true, jTableHeader0.isEnabled());
      assertEquals(true, jTableHeader0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTableHeader0.isBackgroundSet());
      assertEquals(false, jTableHeader0.getIgnoreRepaint());
      assertEquals(true, jTableHeader0.isVisible());
      assertEquals(false, jTableHeader0.isMinimumSizeSet());
      assertEquals(true, jTableHeader0.isForegroundSet());
      assertEquals(1, jTableHeader0.countComponents());
      assertEquals(false, jTableHeader0.isValid());
      assertEquals(false, jTableHeader0.isPreferredSizeSet());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicySet());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals((-2.592E8), periodAxis0.getLowerBound(), 0.01D);
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals("{?R>D\"0/\\YZ,`[", periodAxis0.getLabel());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals(3.456E8, periodAxis0.getUpperBound(), 0.01D);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try {
        double double0 = minMaxCategoryRenderer0.getItemMiddle((Comparable) week0, (Comparable) mockDate0, categoryDataset0, categoryAxis0, (Rectangle2D) rectangle0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertNotNull(lineRenderer3D0);
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      
      CategoryAnnotation categoryAnnotation0 = null;
      // Undeclared exception!
      try {
        lineRenderer3D0.addAnnotation(categoryAnnotation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      boolean boolean0 = false;
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(boolean0, boolean0);
      assertNotNull(lineAndShapeRenderer0);
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(false, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      
      lineAndShapeRenderer0.removeAnnotations();
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(false, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
  }

  @Test
  public void test35()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertNotNull(lineRenderer3D0);
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      assertNotNull(intervalBarRenderer0);
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, intervalBarRenderer0.getBaseCreateEntities());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, intervalBarRenderer0.getColumnCount());
      assertEquals(true, intervalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, intervalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, intervalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, intervalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, intervalBarRenderer0.isDrawBarOutline());
      assertEquals(1, intervalBarRenderer0.getPassCount());
      assertEquals(true, intervalBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, intervalBarRenderer0.getBase(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, intervalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, intervalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getShadowsVisible());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, intervalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(3, intervalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, intervalBarRenderer0.getRowCount());
      assertEquals(0.2, intervalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, intervalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = intervalBarRenderer0.getLegendItemToolTipGenerator();
      assertNull(categorySeriesLabelGenerator0);
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, intervalBarRenderer0.getBaseCreateEntities());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, intervalBarRenderer0.getColumnCount());
      assertEquals(true, intervalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, intervalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, intervalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, intervalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, intervalBarRenderer0.isDrawBarOutline());
      assertEquals(1, intervalBarRenderer0.getPassCount());
      assertEquals(true, intervalBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, intervalBarRenderer0.getBase(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, intervalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, intervalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getShadowsVisible());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, intervalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(3, intervalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, intervalBarRenderer0.getRowCount());
      assertEquals(0.2, intervalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, intervalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      lineRenderer3D0.setLegendItemToolTipGenerator(categorySeriesLabelGenerator0);
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, intervalBarRenderer0.getBaseCreateEntities());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, intervalBarRenderer0.getColumnCount());
      assertEquals(true, intervalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, intervalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, intervalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, intervalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, intervalBarRenderer0.isDrawBarOutline());
      assertEquals(1, intervalBarRenderer0.getPassCount());
      assertEquals(true, intervalBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, intervalBarRenderer0.getBase(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, intervalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, intervalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getShadowsVisible());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, intervalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(3, intervalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, intervalBarRenderer0.getRowCount());
      assertEquals(0.2, intervalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, intervalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = 15;
      boolean boolean0 = false;
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(boolean0);
      assertNotNull(stackedBarRenderer0);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      
      int int1 = stackedBarRenderer0.hashCode();
      assertEquals(617098003, int1);
      assertFalse(int1 == int0);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((double) int0, (double) int1, boolean0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(stackedBarRenderer3D0);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(15.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(6.17098003E8, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertNotNull(layeredBarRenderer0);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertNotNull(statisticalBarRenderer0);
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      
      boolean boolean1 = layeredBarRenderer0.equals((Object) statisticalBarRenderer0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      
      String string0 = "#@;x.\\#u3#)4d";
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(string0);
      assertNotNull(categoryAxis3D0);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals("#@;x.\\#u3#)4d", categoryAxis3D0.getLabel());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals("#@;x.\\#u3#)4d", categoryAxis3D0.getLabel());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      
      Rectangle2D rectangle2D0 = null;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertNotNull(defaultCategoryItemRenderer0);
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      
      JFreeChart jFreeChart0 = new JFreeChart(string0, (Plot) combinedDomainCategoryPlot0);
      assertNotNull(jFreeChart0);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals("#@;x.\\#u3#)4d", categoryAxis3D0.getLabel());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, int1, int1, int1, int1, int1, int1, boolean0, boolean0, boolean1, boolean1, boolean0, boolean0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(int1 == int0);
      assertNotNull(chartPanel0);
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(617098003, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.getFillZoomRectangle());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.isMouseWheelEnabled());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(617098003, chartPanel0.getMinimumDrawHeight());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(true, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.getUseBuffer());
      assertEquals(617098003, chartPanel0.getMinimumDrawWidth());
      assertEquals(617098003, chartPanel0.getMaximumDrawWidth());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals("#@;x.\\#u3#)4d", categoryAxis3D0.getLabel());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(int1 == int0);
      assertNotNull(chartRenderingInfo0);
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(617098003, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.getFillZoomRectangle());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.isMouseWheelEnabled());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(617098003, chartPanel0.getMinimumDrawHeight());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(true, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.getUseBuffer());
      assertEquals(617098003, chartPanel0.getMinimumDrawWidth());
      assertEquals(617098003, chartPanel0.getMaximumDrawWidth());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals("#@;x.\\#u3#)4d", categoryAxis3D0.getLabel());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(int1 == int0);
      assertNotNull(plotRenderingInfo0);
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(617098003, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.getFillZoomRectangle());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.isMouseWheelEnabled());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(617098003, chartPanel0.getMinimumDrawHeight());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(true, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.getUseBuffer());
      assertEquals(617098003, chartPanel0.getMinimumDrawWidth());
      assertEquals(617098003, chartPanel0.getMaximumDrawWidth());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals("#@;x.\\#u3#)4d", categoryAxis3D0.getLabel());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      
      CategoryItemRendererState categoryItemRendererState0 = defaultCategoryItemRenderer0.createState(plotRenderingInfo0);
      assertFalse(boolean0 == boolean1);
      assertFalse(int1 == int0);
      assertFalse(boolean1 == boolean0);
      assertNotNull(categoryItemRendererState0);
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(617098003, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.getFillZoomRectangle());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.isMouseWheelEnabled());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(617098003, chartPanel0.getMinimumDrawHeight());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(true, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.getUseBuffer());
      assertEquals(617098003, chartPanel0.getMinimumDrawWidth());
      assertEquals(617098003, chartPanel0.getMaximumDrawWidth());
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01D);
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01D);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals("#@;x.\\#u3#)4d", categoryAxis3D0.getLabel());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      
      // Undeclared exception!
      try {
        stackedBarRenderer3D0.calculateBarWidth(combinedDomainCategoryPlot0, rectangle2D0, defaultMultiValueCategoryDataset0, categoryItemRendererState0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      assertNotNull(statisticalLineAndShapeRenderer0);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      
      int int0 = statisticalLineAndShapeRenderer0.getColumnCount();
      assertEquals(0, int0);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
  }

  @Test
  public void test38()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      assertNotNull(barRenderer0);
      assertEquals(true, barRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, barRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, barRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0, barRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, barRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, barRenderer0.getPassCount());
      assertEquals(3, barRenderer0.getDefaultEntityRadius());
      assertEquals(true, barRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, barRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, barRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, barRenderer0.getColumnCount());
      assertEquals(true, barRenderer0.getBaseCreateEntities());
      assertEquals(0.0, barRenderer0.getBase(), 0.01D);
      assertEquals(true, barRenderer0.getShadowsVisible());
      assertEquals(true, barRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, barRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, barRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, barRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, barRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, barRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, barRenderer0.isDrawBarOutline());
      assertEquals(true, barRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, barRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, barRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, barRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, barRenderer0.getRowCount());
      
      double[][] doubleArray0 = new double[9][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      
      Range range0 = barRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(true, barRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, barRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, barRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0, barRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, barRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, barRenderer0.getPassCount());
      assertEquals(3, barRenderer0.getDefaultEntityRadius());
      assertEquals(true, barRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, barRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, barRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, barRenderer0.getColumnCount());
      assertEquals(true, barRenderer0.getBaseCreateEntities());
      assertEquals(0.0, barRenderer0.getBase(), 0.01D);
      assertEquals(true, barRenderer0.getShadowsVisible());
      assertEquals(true, barRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, barRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, barRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, barRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, barRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, barRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, barRenderer0.isDrawBarOutline());
      assertEquals(true, barRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, barRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, barRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, barRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, barRenderer0.getRowCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
  }

  @Test
  public void test39()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertNotNull(boxAndWhiskerRenderer0);
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      
      Graphics2D graphics2D0 = null;
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      assertNotNull(intervalBarRenderer0);
      assertEquals(false, intervalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, intervalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0.0, intervalBarRenderer0.getBase(), 0.01D);
      assertEquals(3, intervalBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, intervalBarRenderer0.getBaseCreateEntities());
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, intervalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, intervalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, intervalBarRenderer0.getRowCount());
      assertEquals(0, intervalBarRenderer0.getColumnCount());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, intervalBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, intervalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, intervalBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, intervalBarRenderer0.getShadowsVisible());
      assertEquals(1.0, intervalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(1, intervalBarRenderer0.getPassCount());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, intervalBarRenderer0.getItemMargin(), 0.01D);
      
      CategoryPlot categoryPlot0 = intervalBarRenderer0.getPlot();
      assertNull(categoryPlot0);
      assertEquals(false, intervalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, intervalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0.0, intervalBarRenderer0.getBase(), 0.01D);
      assertEquals(3, intervalBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, intervalBarRenderer0.getBaseCreateEntities());
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, intervalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, intervalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, intervalBarRenderer0.getRowCount());
      assertEquals(0, intervalBarRenderer0.getColumnCount());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, intervalBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, intervalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, intervalBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, intervalBarRenderer0.getShadowsVisible());
      assertEquals(1.0, intervalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(1, intervalBarRenderer0.getPassCount());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, intervalBarRenderer0.getItemMargin(), 0.01D);
      
      Rectangle2D rectangle2D0 = null;
      // Undeclared exception!
      try {
        boxAndWhiskerRenderer0.drawBackground(graphics2D0, categoryPlot0, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test40()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(boolean0);
      assertNotNull(stackedBarRenderer3D0);
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      assertNotNull(statisticalLineAndShapeRenderer0);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      
      CategoryURLGenerator categoryURLGenerator0 = statisticalLineAndShapeRenderer0.getSeriesURLGenerator(int0);
      assertNull(categoryURLGenerator0);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      
      stackedBarRenderer3D0.setBaseURLGenerator(categoryURLGenerator0);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
  }

  @Test
  public void test41()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertNotNull(levelRenderer0);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      
      Graphics2D graphics2D0 = null;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      assertNotNull(stackedBarRenderer3D0);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      
      CategoryPlot categoryPlot0 = stackedBarRenderer3D0.getPlot();
      assertNull(categoryPlot0);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      
      JTextArea jTextArea0 = new JTextArea();
      assertNotNull(jTextArea0);
      assertEquals(false, jTextArea0.isFocusCycleRoot());
      assertEquals(false, jTextArea0.isPreferredSizeSet());
      assertEquals(false, jTextArea0.isMaximumSizeSet());
      assertEquals(false, jTextArea0.isDisplayable());
      assertEquals(false, jTextArea0.isShowing());
      assertEquals(true, jTextArea0.isFontSet());
      assertEquals(true, jTextArea0.isCursorSet());
      assertEquals(0, jTextArea0.countComponents());
      assertEquals(false, jTextArea0.getIgnoreRepaint());
      assertEquals(true, jTextArea0.isBackgroundSet());
      assertEquals(false, jTextArea0.isLightweight());
      assertEquals(true, jTextArea0.isEnabled());
      assertEquals(false, jTextArea0.isValid());
      assertEquals(0, jTextArea0.getComponentCount());
      assertEquals(true, jTextArea0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTextArea0.isMinimumSizeSet());
      assertEquals(false, jTextArea0.isFocusTraversalPolicySet());
      assertEquals(false, jTextArea0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTextArea0.isForegroundSet());
      assertEquals(true, jTextArea0.isVisible());
      
      Rectangle rectangle0 = jTextArea0.getVisibleRect();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(false, jTextArea0.isFocusCycleRoot());
      assertEquals(false, jTextArea0.isPreferredSizeSet());
      assertEquals(false, jTextArea0.isMaximumSizeSet());
      assertEquals(false, jTextArea0.isDisplayable());
      assertEquals(false, jTextArea0.isShowing());
      assertEquals(true, jTextArea0.isFontSet());
      assertEquals(true, jTextArea0.isCursorSet());
      assertEquals(0, jTextArea0.countComponents());
      assertEquals(false, jTextArea0.getIgnoreRepaint());
      assertEquals(true, jTextArea0.isBackgroundSet());
      assertEquals(false, jTextArea0.isLightweight());
      assertEquals(true, jTextArea0.isEnabled());
      assertEquals(false, jTextArea0.isValid());
      assertEquals(0, jTextArea0.getComponentCount());
      assertEquals(true, jTextArea0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTextArea0.isMinimumSizeSet());
      assertEquals(false, jTextArea0.isFocusTraversalPolicySet());
      assertEquals(false, jTextArea0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTextArea0.isForegroundSet());
      assertEquals(true, jTextArea0.isVisible());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      
      // Undeclared exception!
      try {
        levelRenderer0.drawOutline(graphics2D0, categoryPlot0, (Rectangle2D) rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      int int0 = 2083;
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertNotNull(statisticalBarRenderer0);
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      
      StandardCategoryToolTipGenerator standardCategoryToolTipGenerator0 = new StandardCategoryToolTipGenerator();
      assertNotNull(standardCategoryToolTipGenerator0);
      assertEquals("({0}, {1}) = {2}", standardCategoryToolTipGenerator0.getLabelFormat());
      
      statisticalBarRenderer0.setSeriesToolTipGenerator(int0, (CategoryToolTipGenerator) standardCategoryToolTipGenerator0);
      assertEquals("({0}, {1}) = {2}", standardCategoryToolTipGenerator0.getLabelFormat());
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
  }

  @Test
  public void test43()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertNotNull(boxAndWhiskerRenderer0);
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      
      int int0 = boxAndWhiskerRenderer0.getRowCount();
      assertEquals(0, int0);
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
  }

  @Test
  public void test44()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertNotNull(statisticalBarRenderer0);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      
      int int0 = statisticalBarRenderer0.getPassCount();
      assertEquals(1, int0);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
  }

  @Test
  public void test45()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertNotNull(defaultCategoryItemRenderer0);
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      
      boolean boolean0 = defaultCategoryItemRenderer0.getUseOutlinePaint();
      assertFalse(boolean0);
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(boolean0, boolean0);
      assertNotNull(statisticalLineAndShapeRenderer0);
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      
      CategoryAnnotation categoryAnnotation0 = null;
      boolean boolean1 = statisticalLineAndShapeRenderer0.removeAnnotation(categoryAnnotation0);
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
  }

  @Test
  public void test46()  throws Throwable  {
      JPopupMenu.Separator jPopupMenu_Separator0 = new JPopupMenu.Separator();
      assertNotNull(jPopupMenu_Separator0);
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      
      Rectangle rectangle0 = jPopupMenu_Separator0.bounds();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      
      boolean boolean0 = true;
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(boolean0);
      assertNotNull(stackedBarRenderer0);
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(boolean0);
      assertNotNull(categoryStepRenderer0);
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, categoryStepRenderer0.getStagger());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      
      CategoryURLGenerator categoryURLGenerator0 = categoryStepRenderer0.getSeriesURLGenerator(rectangle0.x);
      assertNull(categoryURLGenerator0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, categoryStepRenderer0.getStagger());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      
      stackedBarRenderer0.setSeriesURLGenerator(rectangle0.x, categoryURLGenerator0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, categoryStepRenderer0.getStagger());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
  }

  @Test
  public void test47()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      assertNotNull(barRenderer3D0);
      assertEquals(true, barRenderer3D0.getShadowsVisible());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisible());
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(8.0, barRenderer3D0.getYOffset(), 0.01D);
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, barRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, barRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, barRenderer3D0.isDrawBarOutline());
      assertEquals(true, barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(12.0, barRenderer3D0.getXOffset(), 0.01D);
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01D);
      assertEquals(true, barRenderer3D0.getBaseCreateEntities());
      
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertNotNull(levelRenderer0);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      
      CategoryToolTipGenerator categoryToolTipGenerator0 = levelRenderer0.getBaseToolTipGenerator();
      assertNull(categoryToolTipGenerator0);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      
      barRenderer3D0.setBaseToolTipGenerator(categoryToolTipGenerator0);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, barRenderer3D0.getShadowsVisible());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisible());
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(8.0, barRenderer3D0.getYOffset(), 0.01D);
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, barRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, barRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, barRenderer3D0.isDrawBarOutline());
      assertEquals(true, barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(12.0, barRenderer3D0.getXOffset(), 0.01D);
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01D);
      assertEquals(true, barRenderer3D0.getBaseCreateEntities());
  }

  @Test
  public void test48()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertNotNull(levelRenderer0);
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, levelRenderer0.getRowCount());
      
      int int0 = 326;
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = levelRenderer0.getBaseItemLabelGenerator();
      assertNull(categoryItemLabelGenerator0);
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, levelRenderer0.getRowCount());
      
      levelRenderer0.setSeriesItemLabelGenerator(int0, categoryItemLabelGenerator0);
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, levelRenderer0.getRowCount());
  }

  @Test
  public void test49()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertNotNull(defaultCategoryItemRenderer0);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      
      int int0 = 2083;
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = defaultCategoryItemRenderer0.getSeriesItemLabelGenerator(int0);
      assertNull(categoryItemLabelGenerator0);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      
      defaultCategoryItemRenderer0.setBaseItemLabelGenerator(categoryItemLabelGenerator0);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
  }
}
