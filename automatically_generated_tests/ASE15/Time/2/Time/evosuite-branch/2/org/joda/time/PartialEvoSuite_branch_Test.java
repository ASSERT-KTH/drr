/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:18:44 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TimeOfDay;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class PartialEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      int[] intArray0 = new int[3];
      Partial partial0 = new Partial(iSOChronology0, dateTimeFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(5, partial0.size());
      assertNotNull(partial0);
      
      String string0 = "jM";
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        String string1 = partial0.toString(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) ethiopicChronology0);
      assertNotNull(strictChronology0);
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) strictChronology0);
      assertEquals(1, partial0.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      String string0 = null;
      String string1 = partial0.toString(string0);
      assertEquals(1, partial0.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertNotNull(string1);
      assertEquals("-00", string1);
  }

  @Test
  public void test02()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      String string0 = " < ";
      String string1 = partial0.toString(string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, partial0.size());
      assertNotNull(string1);
      assertEquals(" < ", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test03()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(0, partial0.size());
      assertNull(dateTimeFormatter0);
      
      String string0 = partial0.toString(dateTimeFormatter0);
      assertEquals(0, partial0.size());
      assertNotNull(string0);
      assertEquals("[]", string0);
  }

  @Test
  public void test04()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertEquals(1, partial1.size());
      assertEquals(0, partial0.size());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertNotNull(partial1);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      
      DateTimeFormatter dateTimeFormatter0 = partial1.getFormatter();
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertEquals(1, partial1.size());
      assertEquals(0, partial0.size());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertNull(dateTimeFormatter0);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      
      String string0 = partial1.toString();
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertEquals(1, partial1.size());
      assertEquals(0, partial0.size());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertNotNull(string0);
      assertEquals("[millisOfDay=0]", string0);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
  }

  @Test
  public void test05()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) ethiopicChronology0);
      assertNotNull(strictChronology0);
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) strictChronology0);
      assertEquals(1, partial0.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      String string0 = null;
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string1 = partial0.toString(string0, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(1, partial0.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertNotNull(string1);
      assertEquals("-00", string1);
  }

  @Test
  public void test06()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) buddhistChronology0);
      assertNotNull(lenientChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)lenientChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Partial partial0 = new Partial((ReadablePartial) localDateTime0);
      assertEquals(4, partial0.size());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertNotNull(partial0);
      
      String string0 = partial0.toString();
      assertEquals(4, partial0.size());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertNotNull(string0);
      assertEquals("[year=2014, monthOfYear=2, dayOfMonth=14, millisOfDay=73281320]", string0);
  }

  @Test
  public void test07()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(0, partial0.size());
      assertEquals(1, partial1.size());
      assertNotNull(partial1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      
      DateTimeFormatter dateTimeFormatter0 = partial1.getFormatter();
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(0, partial0.size());
      assertEquals(1, partial1.size());
      assertNull(dateTimeFormatter0);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      
      DateTimeFormatter dateTimeFormatter1 = partial1.getFormatter();
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(0, partial0.size());
      assertEquals(1, partial1.size());
      assertNull(dateTimeFormatter1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
  }

  @Test
  public void test08()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      int int0 = 41;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int1 = 79;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertFalse(int0 == int1);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      Partial partial1 = partial0.withField(dateTimeFieldTypeArray0[0], int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertNotNull(partial1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      
      boolean boolean0 = partial1.isMatch((ReadablePartial) partial0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertFalse(boolean0);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
  }

  @Test
  public void test09()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 1881;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = partial0.isMatch(readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 41;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      boolean boolean0 = partial0.isMatch((ReadablePartial) partial0);
      assertEquals(1, partial0.size());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertTrue(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 388;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      ReadableInstant readableInstant0 = null;
      boolean boolean0 = partial0.isMatch(readableInstant0);
      assertEquals(1, partial0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertFalse(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) copticChronology0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      DateMidnight dateMidnight0 = new DateMidnight((long) int0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      boolean boolean0 = partial0.isMatch((ReadableInstant) dateMidnight0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertTrue(boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      Partial partial0 = new Partial((Chronology) iSOChronology0);
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      Years years0 = Years.ZERO;
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      int int0 = 0;
      Partial partial1 = partial0.withPeriodAdded((ReadablePeriod) years0, int0);
      assertEquals(1, years0.size());
      assertEquals(0, partial1.size());
      assertEquals(0, partial0.size());
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
  }

  @Test
  public void test14()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("millisOfSecond", dateTimeFieldTypeArray0[0].toString());
      assertEquals("millisOfSecond", dateTimeFieldTypeArray0[0].getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
      assertEquals("millisOfSecond", dateTimeFieldTypeArray0[1].getName());
      assertEquals("millisOfSecond", dateTimeFieldTypeArray0[1].toString());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[0];
      assertEquals("millisOfSecond", dateTimeFieldTypeArray0[2].getName());
      assertEquals("millisOfSecond", dateTimeFieldTypeArray0[2].toString());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldTypeArray0[3].getName());
      assertEquals("millisOfSecond", dateTimeFieldTypeArray0[3].toString());
      assertNotNull(dateTimeFieldTypeArray0[3]);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.yearOfCentury();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertEquals("yearOfCentury", dateTimeFieldType1.getName());
      assertEquals("yearOfCentury", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldType1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldType1;
      assertEquals("yearOfCentury", dateTimeFieldType1.getName());
      assertEquals("yearOfCentury", dateTimeFieldType1.toString());
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[4].getName());
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[4].toString());
      assertNotNull(dateTimeFieldTypeArray0[4]);
      
      int[] intArray0 = new int[3];
      int int0 = 0;
      Partial partial0 = new Partial(iSOChronology0, dateTimeFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(5, partial0.size());
      assertNotNull(partial0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, int0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals(5, partial1.size());
      assertEquals(5, partial0.size());
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
  }

  @Test
  public void test15() {}
//   @Test
//   public void test15()  throws Throwable  {
//       Object object0 = null;
//       YearMonth yearMonth0 = new YearMonth(object0);
//       assertEquals(2, yearMonth0.size());
//       assertNotNull(yearMonth0);
//       
//       ISOChronology iSOChronology0 = (ISOChronology)yearMonth0.getChronology();
//       assertEquals(2, yearMonth0.size());
//       assertNotNull(iSOChronology0);
//       
//       LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) iSOChronology0);
//       assertEquals(2, yearMonth0.size());
//       assertNotNull(lenientChronology0);
//       
//       FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)lenientChronology0.getZone();
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertEquals(2, yearMonth0.size());
//       assertNotNull(fixedDateTimeZone0);
//       
//       LocalDate localDate0 = new LocalDate((DateTimeZone) fixedDateTimeZone0);
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertEquals(3, localDate0.size());
//       assertEquals(2, yearMonth0.size());
//       assertNotNull(localDate0);
//       
//       Partial partial0 = new Partial((ReadablePartial) localDate0);
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertEquals(3, partial0.size());
//       assertEquals(3, localDate0.size());
//       assertEquals(2, yearMonth0.size());
//       assertNotNull(partial0);
//       
//       DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
//       assertEquals("years", durationFieldType0.getName());
//       assertEquals("years", durationFieldType0.toString());
//       assertNotNull(durationFieldType0);
//       
//       int int0 = 5062500;
//       Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, int0);
//       assertFalse(partial1.equals((Object)partial0));
//       assertFalse(partial0.equals((Object)partial1));
//       assertEquals(3, partial1.size());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertEquals(3, partial0.size());
//       assertEquals("years", durationFieldType0.getName());
//       assertEquals("years", durationFieldType0.toString());
//       assertEquals(3, localDate0.size());
//       assertEquals(2, yearMonth0.size());
//       assertNotNull(partial1);
//       assertNotSame(partial1, partial0);
//       assertNotSame(partial0, partial1);
//   }

  @Test
  public void test16() {}
//   @Test
//   public void test16()  throws Throwable  {
//       long long0 = 1000000002L;
//       JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
//       assertNotNull(julianChronology0);
//       
//       LocalTime localTime0 = LocalTime.fromMillisOfDay(long0, (Chronology) julianChronology0);
//       assertEquals(4, localTime0.size());
//       assertNotNull(localTime0);
//       
//       Partial partial0 = new Partial((ReadablePartial) localTime0);
//       assertEquals(4, localTime0.size());
//       assertEquals(4, partial0.size());
//       assertNotNull(partial0);
//       
//       DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
//       assertEquals("millis", durationFieldType0.toString());
//       assertEquals("millis", durationFieldType0.getName());
//       assertNotNull(durationFieldType0);
//       
//       int int0 = 0;
//       Partial partial1 = partial0.withFieldAdded(durationFieldType0, int0);
//       assertEquals(4, localTime0.size());
//       assertEquals(4, partial0.size());
//       assertEquals(4, partial1.size());
//       assertEquals("millis", durationFieldType0.toString());
//       assertEquals("millis", durationFieldType0.getName());
//       assertNotNull(partial1);
//       assertSame(partial0, partial1);
//       assertSame(partial1, partial0);
//   }

  @Test
  public void test17()  throws Throwable  {
      Chronology chronology0 = null;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int[] intArray0 = new int[7];
      Partial partial0 = new Partial(dateTimeFieldType0, intArray0[0], chronology0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1, partial0.size());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      int int0 = 1;
      Partial partial1 = partial0.withFieldAdded(durationFieldType0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertEquals(1, partial0.size());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals(1, partial1.size());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertNotNull(partial1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
  }

  @Test
  public void test18()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) ethiopicChronology0);
      assertNotNull(strictChronology0);
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) strictChronology0);
      assertEquals(1, partial0.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.withField(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(1, partial1.size());
      assertNotNull(partial1);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
  }

  @Test
  public void test19()  throws Throwable  {
      long long0 = 259200000L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Partial partial0 = new Partial((ReadablePartial) localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial1.size());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(4, partial0.size());
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
  }

  @Test
  public void test20()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) julianChronology0);
      assertEquals(1, partial0.size());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      int int1 = 4040;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 4040 for secondOfMinute must be in the range [0,59]
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int int0 = 25;
      Partial partial0 = new Partial((ReadablePartial) localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: hourOfDay and clockhourOfDay
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      long long0 = 259200000L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Partial partial0 = new Partial((ReadablePartial) localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
      assertNotNull(partial0);
      
      int int0 = 2714;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2714 for era must not be larger than 1
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) julianChronology0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertEquals(1, partial1.size());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
  }

  @Test
  public void test24()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = (-1176);
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      Partial partial0 = new Partial((Chronology) iSOChronology0);
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.withChronologyRetainFields((Chronology) iSOChronology0);
      assertEquals(0, partial0.size());
      assertEquals(0, partial1.size());
      assertNotNull(partial1);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
  }

  @Test
  public void test26()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      Partial partial1 = partial0.withChronologyRetainFields((Chronology) julianChronology0);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertEquals(0, partial1.size());
      assertEquals(0, partial0.size());
      assertNotNull(partial1);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
  }

  @Test
  public void test27()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldTypeArray0[0].getName());
      assertEquals("weekyear", dateTimeFieldTypeArray0[0].toString());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
      assertEquals("weekyear", dateTimeFieldTypeArray0[1].toString());
      assertEquals("weekyear", dateTimeFieldTypeArray0[1].getName());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[1];
      assertEquals("weekyear", dateTimeFieldTypeArray0[2].toString());
      assertEquals("weekyear", dateTimeFieldTypeArray0[2].getName());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      int[] intArray0 = new int[3];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: weekyear and weekyear
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      assertEquals(4, timeOfDay0.size());
      assertNotNull(timeOfDay0);
      
      Partial partial0 = new Partial((ReadablePartial) timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(4, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 2980;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2980 for minuteOfDay must not be larger than 1439
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("secondOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("secondOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.year();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertEquals("year", dateTimeFieldType1.getName());
      assertEquals("year", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldType1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertEquals("year", dateTimeFieldTypeArray0[1].toString());
      assertEquals("year", dateTimeFieldTypeArray0[1].getName());
      assertEquals("year", dateTimeFieldType1.getName());
      assertEquals("year", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType1;
      assertEquals("year", dateTimeFieldTypeArray0[2].getName());
      assertEquals("year", dateTimeFieldTypeArray0[2].toString());
      assertEquals("year", dateTimeFieldType1.getName());
      assertEquals("year", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      int[] intArray0 = new int[3];
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: secondOfDay < year
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      int[] intArray0 = new int[5];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null: index 0
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[10];
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      int[] intArray0 = new int[6];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = (-1056);
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      ReadablePeriod readablePeriod0 = null;
      Partial partial1 = partial0.minus(readablePeriod0);
      assertEquals(0, partial1.size());
      assertEquals(0, partial0.size());
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
  }

  @Test
  public void test35()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertEquals(1, partial1.size());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(0, partial0.size());
      assertNotNull(partial1);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      
      Partial partial2 = partial1.without(dateTimeFieldType0);
      assertTrue(partial2.equals((Object)partial0));
      assertFalse(partial2.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial1.equals((Object)partial2));
      assertTrue(partial0.equals((Object)partial2));
      assertFalse(partial0.equals((Object)partial1));
      assertEquals(0, partial2.size());
      assertEquals(1, partial1.size());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(0, partial0.size());
      assertNotNull(partial2);
      assertNotSame(partial2, partial0);
      assertNotSame(partial2, partial1);
      assertNotSame(partial1, partial0);
      assertNotSame(partial1, partial2);
      assertNotSame(partial0, partial2);
      assertNotSame(partial0, partial1);
  }

  @Test
  public void test36()  throws Throwable  {
      Chronology chronology0 = null;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int[] intArray0 = new int[7];
      Partial partial0 = new Partial(dateTimeFieldType0, intArray0[0], chronology0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = partial0.getFieldTypes();
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(dateTimeFieldTypeArray0);
  }

  @Test
  public void test37() {}
//   @Test
//   public void test37()  throws Throwable  {
//       long long0 = 259200000L;
//       LocalDateTime localDateTime0 = new LocalDateTime(long0);
//       assertEquals(4, localDateTime0.size());
//       assertNotNull(localDateTime0);
//       
//       Partial partial0 = new Partial((ReadablePartial) localDateTime0);
//       assertEquals(4, partial0.size());
//       assertEquals(4, localDateTime0.size());
//       assertNotNull(partial0);
//       
//       int int0 = 2714;
//       MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0);
//       assertNotNull(mutablePeriod0);
//       
//       Partial partial1 = partial0.plus((ReadablePeriod) mutablePeriod0);
//       assertFalse(partial0.equals((Object)partial1));
//       assertFalse(partial1.equals((Object)partial0));
//       assertEquals(4, partial0.size());
//       assertEquals(4, localDateTime0.size());
//       assertEquals(4, partial1.size());
//       assertNotNull(partial1);
//       assertNotSame(partial0, partial1);
//       assertNotSame(partial1, partial0);
//   }

  @Test
  public void test38()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) ethiopicChronology0);
      assertNotNull(strictChronology0);
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) strictChronology0);
      assertEquals(1, partial0.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertEquals(1, partial0.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertNotNull(partial_Property0);
      
      Partial partial1 = partial_Property0.withMinimumValue();
      assertTrue(partial0.equals((Object)partial1));
      assertTrue(partial1.equals((Object)partial0));
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertNotNull(partial1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
  }

  @Test
  public void test39()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      Partial partial0 = new Partial((Chronology) iSOChronology0);
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      int int0 = 1329;
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertEquals(0, partial0.size());
      assertNotNull(partial_Property0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.addToCopy(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test40()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) copticChronology0);
      assertEquals(1, partial0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertEquals(1, partial0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertNotNull(partial_Property0);
      
      String string0 = partial_Property0.getAsText();
      assertEquals(1, partial0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertNotNull(string0);
      assertEquals("0", string0);
  }

  @Test
  public void test41()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 1881;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial_Property0);
      
      Partial partial1 = partial_Property0.withMaximumValue();
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertNotNull(partial1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
  }

  @Test
  public void test42()  throws Throwable  {
      Partial partial0 = null;
      int int0 = (-11);
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      
      String string0 = "Nh]>c(IHjfv=NB$LZ-e";
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.setCopy(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      Partial partial0 = null;
      int int0 = (-11);
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      
      Partial partial1 = partial_Property0.getPartial();
      assertNull(partial1);
  }

  @Test
  public void test44()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) julianChronology0);
      assertEquals(1, partial0.size());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertEquals(1, partial0.size());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertNotNull(partial_Property0);
      
      Partial partial1 = partial_Property0.addWrapFieldToCopy(int0);
      assertTrue(partial0.equals((Object)partial1));
      assertTrue(partial1.equals((Object)partial0));
      assertEquals(1, partial0.size());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(1, partial1.size());
      assertNotNull(partial1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
  }
}
