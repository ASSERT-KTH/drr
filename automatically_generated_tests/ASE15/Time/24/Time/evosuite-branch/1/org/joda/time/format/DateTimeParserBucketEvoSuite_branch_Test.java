/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:47:19 GMT 2014
 */

package org.joda.time.format;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.field.PreciseDateTimeField;
import org.joda.time.field.UnsupportedDurationField;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.tz.CachedDateTimeZone;
import org.junit.runner.RunWith;

 
public class DateTimeParserBucketEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertNotNull(gJChronology0);
      
      DurationField durationField0 = gJChronology0.centuries();
      assertEquals(true, durationField0.isSupported());
      assertEquals("centuries", durationField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertNotNull(durationField0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      UnsupportedDurationField unsupportedDurationField0 = (UnsupportedDurationField)copticChronology0.eras();
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertNotNull(unsupportedDurationField0);
      
      int int0 = DateTimeParserBucket.compareReverse(durationField0, unsupportedDurationField0);
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals("centuries", durationField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertEquals(1, int0);
  }

  @Test
  public void test01()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      DateTimeField dateTimeField0 = gregorianChronology0.year();
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("year", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotNull(dateTimeField0);
      
      PreciseDateTimeField preciseDateTimeField0 = (PreciseDateTimeField)gregorianChronology0.minuteOfDay();
      assertEquals(0, preciseDateTimeField0.getMinimumValue());
      assertEquals(false, preciseDateTimeField0.isLenient());
      assertEquals(true, preciseDateTimeField0.isSupported());
      assertEquals(1439, preciseDateTimeField0.getMaximumValue());
      assertEquals("minuteOfDay", preciseDateTimeField0.getName());
      assertEquals(1440, preciseDateTimeField0.getRange());
      assertEquals(60000L, preciseDateTimeField0.getUnitMillis());
      assertNotNull(preciseDateTimeField0);
      
      int int0 = 2147;
      DateTimeParserBucket.SavedField dateTimeParserBucket_SavedField0 = new DateTimeParserBucket.SavedField(dateTimeField0, int0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("year", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotNull(dateTimeParserBucket_SavedField0);
      
      DateTimeParserBucket.SavedField dateTimeParserBucket_SavedField1 = new DateTimeParserBucket.SavedField(preciseDateTimeField0, int0);
      assertEquals(0, preciseDateTimeField0.getMinimumValue());
      assertEquals(false, preciseDateTimeField0.isLenient());
      assertEquals(true, preciseDateTimeField0.isSupported());
      assertEquals(1439, preciseDateTimeField0.getMaximumValue());
      assertEquals("minuteOfDay", preciseDateTimeField0.getName());
      assertEquals(1440, preciseDateTimeField0.getRange());
      assertEquals(60000L, preciseDateTimeField0.getUnitMillis());
      assertNotSame(dateTimeParserBucket_SavedField1, dateTimeParserBucket_SavedField0);
      assertFalse(dateTimeParserBucket_SavedField1.equals((Object)dateTimeParserBucket_SavedField0));
      assertNotNull(dateTimeParserBucket_SavedField1);
      
      int int1 = dateTimeParserBucket_SavedField0.compareTo(dateTimeParserBucket_SavedField1);
      assertEquals(0, preciseDateTimeField0.getMinimumValue());
      assertEquals(false, preciseDateTimeField0.isLenient());
      assertEquals(true, preciseDateTimeField0.isSupported());
      assertEquals(1439, preciseDateTimeField0.getMaximumValue());
      assertEquals("minuteOfDay", preciseDateTimeField0.getName());
      assertEquals(1440, preciseDateTimeField0.getRange());
      assertEquals(60000L, preciseDateTimeField0.getUnitMillis());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("year", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotSame(dateTimeParserBucket_SavedField1, dateTimeParserBucket_SavedField0);
      assertNotSame(dateTimeParserBucket_SavedField0, dateTimeParserBucket_SavedField1);
      assertFalse(int0 == int1);
      assertFalse(dateTimeParserBucket_SavedField1.equals((Object)dateTimeParserBucket_SavedField0));
      assertFalse(int1 == int0);
      assertFalse(dateTimeParserBucket_SavedField0.equals((Object)dateTimeParserBucket_SavedField1));
      assertEquals((-1), int1);
  }

  @Test
  public void test02()  throws Throwable  {
      long long0 = (-15L);
      DateMidnight dateMidnight0 = new DateMidnight(long0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateMidnight0.getZone();
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(islamicChronology0);
      
      UnsupportedDurationField unsupportedDurationField0 = (UnsupportedDurationField)islamicChronology0.eras();
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(unsupportedDurationField0);
      
      int int0 = DateTimeParserBucket.compareReverse(unsupportedDurationField0, unsupportedDurationField0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(0, int0);
  }

  @Test
  public void test03()  throws Throwable  {
      long long0 = (-302L);
      Chronology chronology0 = null;
      int int0 = 86400001;
      Locale locale0 = null;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, chronology0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotNull(dateTimeParserBucket0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, int0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      String string0 = "sZ08$zL78Y@Zy<OI";
      dateTimeParserBucket0.saveField(dateTimeFieldType0, string0, locale0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      // Undeclared exception!
      try {
        long long1 = dateTimeParserBucket0.computeMillis();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 86400001 for halfdayOfDay must be in the range [0,1]
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      long long0 = 0L;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withUTC();
      assertNotSame(gJChronology1, gJChronology0);
      assertNotSame(gJChronology0, gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertNotNull(gJChronology1);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) gJChronology1, locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotSame(gJChronology1, gJChronology0);
      assertNotSame(gJChronology0, gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertNotNull(dateTimeParserBucket0);
      
      boolean boolean0 = true;
      String string0 = "";
      long long1 = dateTimeParserBucket0.computeMillis(boolean0, string0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotSame(gJChronology1, gJChronology0);
      assertNotSame(gJChronology0, gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test
  public void test05()  throws Throwable  {
      long long0 = 21260793599943L;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) julianChronology0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotNull(dateTimeParserBucket0);
      
      boolean boolean0 = false;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      String string0 = "o)jb";
      dateTimeParserBucket0.saveField(dateTimeFieldType0, string0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      
      // Undeclared exception!
      try {
        long long1 = dateTimeParserBucket0.computeMillis(boolean0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"o)jb\": Value \"o)jb\" for centuryOfEra is not supported
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      long long0 = 0L;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) gJChronology0, locale0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotNull(dateTimeParserBucket0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 10;
      dateTimeParserBucket0.saveField(dateTimeFieldType0, int0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      int int1 = dateTimeParserBucket0.getOffset();
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.millisOfSecond();
      assertEquals("millisOfSecond", dateTimeFieldType1.getName());
      assertEquals("millisOfSecond", dateTimeFieldType1.toString());
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotNull(dateTimeFieldType1);
      
      dateTimeParserBucket0.saveField(dateTimeFieldType1, int1);
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("millisOfSecond", dateTimeFieldType1.getName());
      assertEquals("millisOfSecond", dateTimeFieldType1.toString());
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertFalse(int1 == int0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      boolean boolean0 = true;
      String string0 = "";
      long long1 = dateTimeParserBucket0.computeMillis(boolean0, string0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(32400000L, long1);
  }

  @Test
  public void test07()  throws Throwable  {
      long long0 = (-302L);
      Chronology chronology0 = null;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      DateTimeField dateTimeField0 = islamicChronology0.monthOfYear();
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("monthOfYear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotNull(dateTimeField0);
      
      int int0 = 86400001;
      Locale locale0 = null;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, chronology0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotNull(dateTimeParserBucket0);
      
      dateTimeParserBucket0.saveField(dateTimeField0, int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("monthOfYear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      // Undeclared exception!
      try {
        long long1 = dateTimeParserBucket0.computeMillis();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 86400001 for monthOfYear must be in the range [1,12]
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      long long0 = 24L;
      Chronology chronology0 = null;
      Locale locale0 = null;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, chronology0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotNull(dateTimeParserBucket0);
      
      DateTimeParserBucket.SavedState dateTimeParserBucket_SavedState0 = dateTimeParserBucket0.new SavedState();
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotNull(dateTimeParserBucket_SavedState0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      String string0 = "";
      dateTimeParserBucket0.saveField(dateTimeFieldType0, string0, locale0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      boolean boolean0 = dateTimeParserBucket_SavedState0.restoreState(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertTrue(boolean0);
      
      long long1 = dateTimeParserBucket0.computeMillis(boolean0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-3599976L), long1);
  }

  @Test
  public void test09()  throws Throwable  {
      long long0 = (-15L);
      DateMidnight dateMidnight0 = new DateMidnight(long0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateMidnight0.getZone();
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(islamicChronology0);
      
      int int0 = dateMidnight0.getWeekyear();
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(1970, int0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) islamicChronology0, locale0, (Integer) int0, int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(dateTimeParserBucket0);
      
      DateTimeParserBucket dateTimeParserBucket1 = new DateTimeParserBucket(long0, (Chronology) islamicChronology0, locale0, (Integer) int0, int0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(0, dateTimeParserBucket1.getOffset());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertNotSame(dateTimeParserBucket1, dateTimeParserBucket0);
      assertFalse(dateTimeParserBucket1.equals((Object)dateTimeParserBucket0));
      assertNotNull(dateTimeParserBucket1);
      
      DateTimeParserBucket.SavedState dateTimeParserBucket_SavedState0 = dateTimeParserBucket1.new SavedState();
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(0, dateTimeParserBucket1.getOffset());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertNotSame(dateTimeParserBucket1, dateTimeParserBucket0);
      assertFalse(dateTimeParserBucket1.equals((Object)dateTimeParserBucket0));
      assertNotNull(dateTimeParserBucket_SavedState0);
      
      boolean boolean0 = dateTimeParserBucket0.restoreState((Object) dateTimeParserBucket_SavedState0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(0, dateTimeParserBucket1.getOffset());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertNotSame(dateTimeParserBucket0, dateTimeParserBucket1);
      assertNotSame(dateTimeParserBucket1, dateTimeParserBucket0);
      assertFalse(dateTimeParserBucket0.equals((Object)dateTimeParserBucket1));
      assertFalse(dateTimeParserBucket1.equals((Object)dateTimeParserBucket0));
      assertFalse(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      long long0 = (-6L);
      Chronology chronology0 = null;
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, chronology0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(dateTimeParserBucket0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = dateTimeParserBucket0.restoreState(object0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      long long0 = (-302L);
      Chronology chronology0 = null;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      DateTimeField dateTimeField0 = islamicChronology0.monthOfYear();
      assertEquals("monthOfYear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotNull(dateTimeField0);
      
      int int0 = 86400001;
      Locale locale0 = null;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, chronology0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotNull(dateTimeParserBucket0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      
      String string0 = "sZ08$zL78Y@Zy<OI";
      dateTimeParserBucket0.saveField(dateTimeFieldType0, string0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      
      dateTimeParserBucket0.saveField(dateTimeField0, int0);
      assertEquals("monthOfYear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      
      dateTimeParserBucket0.saveField(dateTimeField0, int0);
      assertEquals("monthOfYear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      Locale locale1 = new Locale(string0, string0);
      assertEquals("", locale1.getVariant());
      assertEquals("sz08$zl78y@zy<oi_SZ08$ZL78Y@ZY<OI", locale1.toString());
      assertEquals("SZ08$ZL78Y@ZY<OI", locale1.getCountry());
      assertEquals("sz08$zl78y@zy<oi", locale1.getLanguage());
      assertNotNull(locale1);
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, string0, locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("sz08$zl78y@zy<oi_SZ08$ZL78Y@ZY<OI", locale1.toString());
      assertEquals("SZ08$ZL78Y@ZY<OI", locale1.getCountry());
      assertEquals("sz08$zl78y@zy<oi", locale1.getLanguage());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      
      dateTimeParserBucket0.saveField(dateTimeField0, int0);
      assertEquals("monthOfYear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      dateTimeParserBucket0.saveField(dateTimeField0, int0);
      assertEquals("monthOfYear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(0, dateTimeParserBucket0.getOffset());
  }

  @Test
  public void test12()  throws Throwable  {
      long long0 = 0L;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) gJChronology0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotNull(dateTimeParserBucket0);
      
      int int0 = 10;
      dateTimeParserBucket0.setOffset(int0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals(10, dateTimeParserBucket0.getOffset());
  }

  @Test
  public void test13()  throws Throwable  {
      DurationField durationField0 = null;
      int int0 = DateTimeParserBucket.compareReverse(durationField0, durationField0);
      assertEquals(0, int0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Chronology chronology0 = null;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, chronology0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(dateTimeParserBucket0);
      
      Locale locale1 = dateTimeParserBucket0.getLocale();
      assertEquals("IT", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it_IT", locale1.toString());
      assertEquals("it", locale1.getLanguage());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertSame(locale1, locale0);
      assertSame(locale0, locale1);
      assertNotNull(locale1);
  }

  @Test
  public void test14()  throws Throwable  {
      long long0 = (-302L);
      Chronology chronology0 = null;
      Locale locale0 = null;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, chronology0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotNull(dateTimeParserBucket0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateTimeParserBucket0.getZone();
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
  }

  @Test
  public void test15()  throws Throwable  {
      long long0 = 0L;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      int int0 = 10;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) gJChronology0, locale0, (Integer) int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(dateTimeParserBucket0);
  }

  @Test
  public void test16()  throws Throwable  {
      long long0 = 24L;
      Chronology chronology0 = null;
      Locale locale0 = null;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, chronology0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotNull(dateTimeParserBucket0);
      
      DateTimeParserBucket.SavedState dateTimeParserBucket_SavedState0 = dateTimeParserBucket0.new SavedState();
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotNull(dateTimeParserBucket_SavedState0);
      
      boolean boolean0 = dateTimeParserBucket_SavedState0.restoreState(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertTrue(boolean0);
      
      long long1 = dateTimeParserBucket0.computeMillis(boolean0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-3599976L), long1);
  }

  @Test
  public void test17()  throws Throwable  {
      long long0 = (-302L);
      Chronology chronology0 = null;
      int int0 = 86400001;
      Locale locale0 = null;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, chronology0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotNull(dateTimeParserBucket0);
      
      dateTimeParserBucket0.setPivotYear((Integer) int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
  }

  @Test
  public void test18()  throws Throwable  {
      long long0 = (-6L);
      Chronology chronology0 = null;
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, chronology0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotNull(dateTimeParserBucket0);
      
      Integer integer0 = dateTimeParserBucket0.getPivotYear();
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(0, dateTimeParserBucket0.getOffset());
  }

  @Test
  public void test19()  throws Throwable  {
      DurationField durationField0 = null;
      int int0 = DateTimeParserBucket.compareReverse(durationField0, durationField0);
      assertEquals(0, int0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Chronology chronology0 = null;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, chronology0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(dateTimeParserBucket0);
      
      long long0 = dateTimeParserBucket0.computeMillis();
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals((-3600000L), long0);
  }

  @Test
  public void test20()  throws Throwable  {
      long long0 = 0L;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) gJChronology0, locale0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotNull(dateTimeParserBucket0);
      
      GJChronology gJChronology1 = (GJChronology)dateTimeParserBucket0.getChronology();
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotNull(gJChronology1);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "1WFAwo;py(LE-esP";
      // Undeclared exception!
      try {
        DateMidnight dateMidnight0 = DateMidnight.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"1WFAwo;py(LE-esP\" is malformed at \"WFAwo;py(LE-esP\"
         //
      }
  }
}
