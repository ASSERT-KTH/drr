/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:18:38 GMT 2014
 */

package org.joda.time.format;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.MutableDateTime;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.field.LenientDateTimeField;
import org.joda.time.field.UnsupportedDurationField;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class DateTimeParserBucketEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) gregorianChronology0);
      assertNotNull(strictChronology0);
      
      DateTimeField dateTimeField0 = strictChronology0.centuryOfEra();
      assertNotNull(dateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("centuryOfEra", dateTimeField0.getName());
      
      int int0 = 1417;
      DateTimeParserBucket.SavedField dateTimeParserBucket_SavedField0 = new DateTimeParserBucket.SavedField(dateTimeField0, int0);
      assertNotNull(dateTimeParserBucket_SavedField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("centuryOfEra", dateTimeField0.getName());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) strictChronology0, locale0, (Integer) int0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateTimeParserBucket0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(islamicChronology0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      DateTimeField dateTimeField1 = islamicChronology0.era();
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertNotSame(dateTimeField1, dateTimeField0);
      assertNotNull(dateTimeField1);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("era", dateTimeField1.getName());
      assertEquals(true, dateTimeField1.isSupported());
      assertEquals(false, dateTimeField1.isLenient());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      String string0 = "z f}) /=&()";
      DateTimeParserBucket.SavedField dateTimeParserBucket_SavedField1 = new DateTimeParserBucket.SavedField(dateTimeField1, string0, locale0);
      assertFalse(dateTimeParserBucket_SavedField1.equals((Object)dateTimeParserBucket_SavedField0));
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertNotSame(dateTimeParserBucket_SavedField1, dateTimeParserBucket_SavedField0);
      assertNotSame(dateTimeField1, dateTimeField0);
      assertNotNull(dateTimeParserBucket_SavedField1);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("era", dateTimeField1.getName());
      assertEquals(true, dateTimeField1.isSupported());
      assertEquals(false, dateTimeField1.isLenient());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      int int1 = dateTimeParserBucket_SavedField0.compareTo(dateTimeParserBucket_SavedField1);
      assertFalse(dateTimeParserBucket_SavedField1.equals((Object)dateTimeParserBucket_SavedField0));
      assertFalse(int0 == int1);
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertFalse(int1 == int0);
      assertFalse(dateTimeParserBucket_SavedField0.equals((Object)dateTimeParserBucket_SavedField1));
      assertFalse(dateTimeField0.equals((Object)dateTimeField1));
      assertNotSame(dateTimeParserBucket_SavedField1, dateTimeParserBucket_SavedField0);
      assertNotSame(dateTimeParserBucket_SavedField0, dateTimeParserBucket_SavedField1);
      assertNotSame(dateTimeField1, dateTimeField0);
      assertNotSame(dateTimeField0, dateTimeField1);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("era", dateTimeField1.getName());
      assertEquals(true, dateTimeField1.isSupported());
      assertEquals(false, dateTimeField1.isLenient());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("centuryOfEra", dateTimeField0.getName());
      assertEquals(1, int1);
  }

  @Test
  public void test01()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) gregorianChronology0);
      assertNotNull(strictChronology0);
      
      DateTimeField dateTimeField0 = strictChronology0.centuryOfEra();
      assertNotNull(dateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("centuryOfEra", dateTimeField0.getName());
      
      int int0 = 1417;
      DateTimeParserBucket.SavedField dateTimeParserBucket_SavedField0 = new DateTimeParserBucket.SavedField(dateTimeField0, int0);
      assertNotNull(dateTimeParserBucket_SavedField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("centuryOfEra", dateTimeField0.getName());
      
      int int1 = dateTimeParserBucket_SavedField0.compareTo(dateTimeParserBucket_SavedField0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("centuryOfEra", dateTimeField0.getName());
      assertEquals(0, int1);
  }

  @Test
  public void test02()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      UnsupportedDurationField unsupportedDurationField0 = (UnsupportedDurationField)islamicChronology0.eras();
      assertNotNull(unsupportedDurationField0);
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals("eras", unsupportedDurationField0.getName());
      
      int int0 = DateTimeParserBucket.compareReverse(unsupportedDurationField0, unsupportedDurationField0);
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(0, int0);
  }

  @Test
  public void test03()  throws Throwable  {
      long long0 = 1000068L;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      
      int int0 = 900;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) gJChronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      DateTimeField dateTimeField0 = gJChronology0.clockhourOfHalfday();
      assertNotNull(dateTimeField0);
      assertEquals("clockhourOfHalfday", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      dateTimeParserBucket0.saveField(dateTimeField0, int0);
      assertEquals("clockhourOfHalfday", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      boolean boolean0 = cachedDateTimeZone0.isStandardOffset((long) int0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertFalse(boolean0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      String string0 = "#S:&f$C";
      dateTimeParserBucket0.saveField(dateTimeField0, int0);
      assertEquals("clockhourOfHalfday", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, string0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, string0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, string0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, string0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      dateTimeParserBucket0.saveField(dateTimeField0, int0);
      assertEquals("clockhourOfHalfday", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      DateTimeField dateTimeField1 = buddhistChronology0.weekOfWeekyear();
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertNotSame(dateTimeField1, dateTimeField0);
      assertNotNull(dateTimeField1);
      assertEquals(true, dateTimeField1.isSupported());
      assertEquals("weekOfWeekyear", dateTimeField1.getName());
      assertEquals(false, dateTimeField1.isLenient());
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, string0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      dateTimeParserBucket0.saveField(dateTimeField1, int0);
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertNotSame(dateTimeField1, dateTimeField0);
      assertEquals(true, dateTimeField1.isSupported());
      assertEquals("weekOfWeekyear", dateTimeField1.getName());
      assertEquals(false, dateTimeField1.isLenient());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      // Undeclared exception!
      try {
        long long1 = dateTimeParserBucket0.computeMillis(boolean0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"#S:&f$C\": Value 900 for weekOfWeekyear must be in the range [1,52]
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      long long0 = 13L;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      int int0 = (-1434);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1434), (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) julianChronology0, locale0, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      boolean boolean0 = false;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      String string0 = "";
      dateTimeParserBucket0.saveField(dateTimeFieldType0, string0, locale0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      // Undeclared exception!
      try {
        long long1 = dateTimeParserBucket0.computeMillis(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for hourOfDay is not supported
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      long long0 = (-153L);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      Locale locale0 = null;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) gJChronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gJChronology0);
      assertNotNull(lenientChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      LenientDateTimeField lenientDateTimeField0 = (LenientDateTimeField)lenientChronology0.clockhourOfDay();
      assertNotNull(lenientDateTimeField0);
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals("clockhourOfDay", lenientDateTimeField0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      boolean boolean0 = true;
      int int0 = 0;
      dateTimeParserBucket0.saveField((DateTimeField) lenientDateTimeField0, int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals("clockhourOfDay", lenientDateTimeField0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      String string0 = "BD";
      long long1 = dateTimeParserBucket0.computeMillis(boolean0, string0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals((-262800000L), long1);
  }

  @Test
  public void test06()  throws Throwable  {
      long long0 = 1000068L;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      
      int int0 = 900;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) gJChronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      boolean boolean0 = cachedDateTimeZone0.isStandardOffset((long) int0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertFalse(boolean0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      String string0 = "#S:&f$C";
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      assertNotNull(dateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("weekOfWeekyear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      
      dateTimeParserBucket0.saveField(dateTimeField0, int0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("weekOfWeekyear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      // Undeclared exception!
      try {
        long long1 = dateTimeParserBucket0.computeMillis(boolean0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"#S:&f$C\": Value 900 for weekOfWeekyear must be in the range [1,52]
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      long long0 = 1655L;
      Chronology chronology0 = null;
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      int int0 = 1962;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1962, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, chronology0, locale0, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(dateTimeParserBucket0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      DateTimeParserBucket.SavedState dateTimeParserBucket_SavedState0 = (DateTimeParserBucket.SavedState)dateTimeParserBucket0.saveState();
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(dateTimeParserBucket_SavedState0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      DateTimeParserBucket dateTimeParserBucket1 = new DateTimeParserBucket(long0, (Chronology) gregorianChronology0, locale0, integer0);
      assertFalse(dateTimeParserBucket1.equals((Object)dateTimeParserBucket0));
      assertTrue(integer0.equals((Object)int0));
      assertNotSame(dateTimeParserBucket1, dateTimeParserBucket0);
      assertNotNull(dateTimeParserBucket1);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(0, dateTimeParserBucket1.getOffset());
      
      boolean boolean0 = dateTimeParserBucket1.restoreState((Object) dateTimeParserBucket_SavedState0);
      assertFalse(dateTimeParserBucket1.equals((Object)dateTimeParserBucket0));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(dateTimeParserBucket0.equals((Object)dateTimeParserBucket1));
      assertNotSame(dateTimeParserBucket1, dateTimeParserBucket0);
      assertNotSame(dateTimeParserBucket0, dateTimeParserBucket1);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(0, dateTimeParserBucket1.getOffset());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertFalse(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      int int0 = (-2);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(gregorianChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-2), (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) gregorianChronology0, locale0, integer0, int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(dateTimeParserBucket0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      boolean boolean0 = dateTimeParserBucket0.restoreState((Object) iSOChronology0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      long long0 = 1000068L;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      
      int int0 = 900;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) gJChronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      
      dateTimeParserBucket0.setOffset(int0);
      assertEquals(900, dateTimeParserBucket0.getOffset());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
  }

  @Test
  public void test10()  throws Throwable  {
      long long0 = 1000068L;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) gJChronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      
      Locale locale1 = dateTimeParserBucket0.getLocale();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
  }

  @Test
  public void test11()  throws Throwable  {
      long long0 = (-153L);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      Locale locale0 = null;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) gJChronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      boolean boolean0 = true;
      long long1 = dateTimeParserBucket0.computeMillis(boolean0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals((-3600153L), long1);
  }

  @Test
  public void test12()  throws Throwable  {
      long long0 = 1655L;
      Chronology chronology0 = null;
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      
      int int0 = 1962;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1962, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, chronology0, locale0, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(dateTimeParserBucket0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      dateTimeParserBucket0.setPivotYear(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals(0, dateTimeParserBucket0.getOffset());
  }

  @Test
  public void test13()  throws Throwable  {
      long long0 = 1000068L;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) gJChronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      Integer integer0 = dateTimeParserBucket0.getPivotYear();
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(0, dateTimeParserBucket0.getOffset());
  }

  @Test
  public void test14()  throws Throwable  {
      long long0 = 1655L;
      Chronology chronology0 = null;
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      int int0 = 1962;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1962, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, chronology0, locale0, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      int int1 = dateTimeParserBucket0.getOffset();
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, int1);
  }

  @Test
  public void test15()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      int int0 = (-2);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(gregorianChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-2), (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) gregorianChronology0, locale0, integer0, int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(dateTimeParserBucket0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      long long0 = dateTimeParserBucket0.computeMillis();
      assertTrue(integer0.equals((Object)int0));
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals((-2L), long0);
  }

  @Test
  public void test16()  throws Throwable  {
      long long0 = 13L;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      
      int int0 = (-1434);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1434), (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) julianChronology0, locale0, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      
      JulianChronology julianChronology1 = (JulianChronology)dateTimeParserBucket0.getChronology();
      assertFalse(julianChronology1.equals((Object)julianChronology0));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertNotSame(julianChronology1, julianChronology0);
      assertNotSame(julianChronology0, julianChronology1);
      assertNotNull(julianChronology1);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "02{";
      // Undeclared exception!
      try {
        MutableDateTime mutableDateTime0 = MutableDateTime.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"02{\" is malformed at \"{\"
         //
      }
  }
}
