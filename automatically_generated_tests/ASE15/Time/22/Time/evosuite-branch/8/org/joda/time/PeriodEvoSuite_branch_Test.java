/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:49:51 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Calendar;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

 
public class PeriodEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 40;
      PeriodType periodType0 = PeriodType.years();
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = new Period((long) int0, periodType0);
      assertEquals(1, period0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(period0);
      
      Period period1 = period0.normalizedStandard();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(1, period0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 2165;
      Period period0 = Period.months(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      // Undeclared exception!
      try {
        Seconds seconds0 = period0.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains months and months vary in length
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      long long0 = 0L;
      Period period0 = new Period(long0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.minus(readablePeriod0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 40;
      PeriodType periodType0 = PeriodType.years();
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period((long) int0, periodType0);
      assertEquals(1, period0.size());
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minus((ReadablePeriod) period0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(1, period0.size());
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, period1.size());
      assertNotNull(period1);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.months(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.plusMillis(int0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 2355;
      Days days0 = Days.TWO;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Period period0 = days0.toPeriod();
      assertEquals(1, days0.size());
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minusSeconds(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(1, days0.size());
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test
  public void test06()  throws Throwable  {
      Period period0 = Period.ZERO;
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = 9;
      Period period1 = period0.plusMinutes(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
  }

  @Test
  public void test07()  throws Throwable  {
      long long0 = 0L;
      Period period0 = new Period(long0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = (-1945);
      Period period1 = period0.plusHours(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.seconds(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.plusDays(int0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.months(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int1 = 2165;
      Period period1 = period0.minusWeeks(int1);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test10()  throws Throwable  {
      long long0 = 2155L;
      Chronology chronology0 = null;
      Period period0 = new Period(long0, long0, chronology0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.minusMonths(int0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.seconds(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.plusYears(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
  }

  @Test
  public void test12()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      Period period0 = new Period(readableInstant0, readableInstant0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.plus(readablePeriod0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.months(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.plus((ReadablePeriod) period0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
  }

  @Test
  public void test14()  throws Throwable  {
      Period period0 = new Period();
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      int int0 = 0;
      Period period1 = period0.withFieldAdded(durationFieldType0, int0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", durationFieldType0.toString());
      assertNotNull(period1);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = (-12);
      Period period0 = Period.millis(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        Period period1 = period0.withFieldAdded(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 37;
      Period period0 = new Period();
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals("centuries", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      // Undeclared exception!
      try {
        Period period1 = period0.withFieldAdded(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'centuries'
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      long long0 = 0L;
      Period period0 = new Period(long0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = 0;
      int int1 = period0.getValue(int0);
      assertEquals(0, int1);
      assertEquals(8, period0.size());
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        Period period1 = period0.withField(durationFieldType0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 40;
      PeriodType periodType0 = PeriodType.years();
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = new Period((long) int0, periodType0);
      assertEquals(1, period0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      // Undeclared exception!
      try {
        Period period1 = period0.withField(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'days'
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = (-13);
      Period period0 = Period.millis(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      MutablePeriod mutablePeriod0 = null;
      Period period1 = period0.withFields((ReadablePeriod) mutablePeriod0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
  }

  @Test
  public void test20()  throws Throwable  {
      long long0 = 2155L;
      Chronology chronology0 = null;
      Period period0 = new Period(long0, long0, chronology0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      PeriodType periodType0 = null;
      Period period1 = period0.withPeriodType(periodType0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = 0;
      int int1 = PeriodType.DAY_INDEX;
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(mockGregorianCalendar0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      ISOChronology iSOChronology0 = (ISOChronology)localDateTime0.getChronology();
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(4, localDateTime0.size());
      assertNotNull(iSOChronology0);
      
      YearMonth yearMonth0 = new YearMonth(int0, int1, (Chronology) iSOChronology0);
      assertEquals(2, yearMonth0.size());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(4, localDateTime0.size());
      assertNotNull(yearMonth0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference((ReadablePartial) yearMonth0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = 0;
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)mutableDateTime0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(cachedDateTimeZone0);
      
      LocalDate localDate0 = new LocalDate((long) int0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals(3, localDate0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(localDate0);
      
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference((ReadablePartial) localDate0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test23() {}
//   @Test
//   public void test23()  throws Throwable  {
//       int int0 = 0;
//       MutableDateTime mutableDateTime0 = new MutableDateTime();
//       assertEquals(0, mutableDateTime0.getRoundingMode());
//       assertEquals(1392409281320L, mutableDateTime0.getMillis());
//       assertNotNull(mutableDateTime0);
//       
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)mutableDateTime0.getZone();
//       assertEquals(0, mutableDateTime0.getRoundingMode());
//       assertEquals(1392409281320L, mutableDateTime0.getMillis());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertNotNull(cachedDateTimeZone0);
//       
//       LocalDate localDate0 = new LocalDate((long) int0, (DateTimeZone) cachedDateTimeZone0);
//       assertEquals(0, mutableDateTime0.getRoundingMode());
//       assertEquals(1392409281320L, mutableDateTime0.getMillis());
//       assertEquals(3, localDate0.size());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertNotNull(localDate0);
//       
//       Period period0 = Period.fieldDifference((ReadablePartial) localDate0, (ReadablePartial) localDate0);
//       assertEquals(0, mutableDateTime0.getRoundingMode());
//       assertEquals(1392409281320L, mutableDateTime0.getMillis());
//       assertEquals(3, period0.size());
//       assertEquals(3, localDate0.size());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertNotNull(period0);
//   }

  @Test
  public void test24()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference(readablePartial0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.months(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(8, period0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.months(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minusWeeks(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
  }

  @Test
  public void test27()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      Duration duration0 = new Duration(readableInstant0, readableInstant0);
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      Period period0 = new Period((ReadableDuration) duration0, readableInstant0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test
  public void test28()  throws Throwable  {
      long long0 = 0L;
      Period period0 = new Period(long0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(8, period0.size());
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 40;
      Period period0 = Period.days(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.seconds(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(8, period0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
  }

  @Test
  public void test31()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertNotNull(periodType0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      Object object0 = null;
      Period period0 = new Period(object0, periodType0, (Chronology) buddhistChronology0);
      assertEquals(4, period0.size());
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertNotNull(period0);
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = (-352);
      Period period0 = new Period(int0, int0, int0, int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test
  public void test33()  throws Throwable  {
      Years years0 = Years.TWO;
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      Period period0 = years0.toPeriod();
      assertEquals(1, years0.size());
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      // Undeclared exception!
      try {
        Days days0 = period0.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains years and years vary in length
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = 2355;
      Period period0 = Period.years(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = 2355;
      Days days0 = Days.TWO;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Period period0 = days0.toPeriod();
      assertEquals(8, period0.size());
      assertEquals(1, days0.size());
      assertNotNull(period0);
      
      Period period1 = period0.withHours(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertEquals(1, days0.size());
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.months(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minusSeconds(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
  }

  @Test
  public void test37()  throws Throwable  {
      int int0 = 2355;
      Days days0 = Days.TWO;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Period period0 = days0.toPeriod();
      assertEquals(1, days0.size());
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.withWeeks(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(1, days0.size());
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test
  public void test38()  throws Throwable  {
      long long0 = 2155L;
      Chronology chronology0 = null;
      Period period0 = new Period(long0, long0, chronology0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = (-335);
      Period period1 = period0.withSeconds(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
  }

  @Test
  public void test39()  throws Throwable  {
      int int0 = 40;
      PeriodType periodType0 = PeriodType.years();
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = new Period((long) int0, periodType0);
      assertEquals(1, period0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(period0);
      
      Period period1 = period0.minusYears(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(1, period1.size());
      assertEquals(1, period0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
  }

  @Test
  public void test40()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Period period0 = new Period((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      assertEquals(8, period0.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(period0);
  }

  @Test
  public void test41()  throws Throwable  {
      long long0 = 0L;
      Period period0 = new Period(long0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.minusHours(int0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
  }

  @Test
  public void test42()  throws Throwable  {
      long long0 = 2534L;
      Duration duration0 = Duration.standardHours(long0);
      assertEquals(9122400000L, duration0.getMillis());
      assertNotNull(duration0);
      
      ReadableInstant readableInstant0 = null;
      PeriodType periodType0 = PeriodType.days();
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = duration0.toPeriodTo(readableInstant0, periodType0);
      assertEquals(1, period0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(9122400000L, duration0.getMillis());
      assertNotNull(period0);
  }

  @Test
  public void test43()  throws Throwable  {
      long long0 = 2155L;
      Chronology chronology0 = null;
      Period period0 = new Period(long0, long0, chronology0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = (-335);
      Period period1 = period0.withDays(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test
  public void test44()  throws Throwable  {
      long long0 = 604800L;
      PeriodType periodType0 = PeriodType.time();
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertNotNull(periodType0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      Period period0 = new Period(long0, long0, periodType0, (Chronology) buddhistChronology0);
      assertEquals(4, period0.size());
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertNotNull(period0);
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = 40;
      PeriodType periodType0 = PeriodType.years();
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = new Period((long) int0, periodType0);
      assertEquals(1, period0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(period0);
      
      Duration duration0 = period0.toStandardDuration();
      assertEquals(0L, duration0.getMillis());
      assertEquals(1, period0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(duration0);
  }

  @Test
  public void test46()  throws Throwable  {
      Years years0 = Years.TWO;
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      Period period0 = years0.toPeriod();
      assertEquals(8, period0.size());
      assertEquals(1, years0.size());
      assertNotNull(period0);
      
      Period period1 = period0.normalizedStandard();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(1, years0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
  }

  @Test
  public void test47()  throws Throwable  {
      int int0 = (-870);
      Period period0 = Period.hours(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test
  public void test48()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.seconds(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minusMinutes(int0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
  }

  @Test
  public void test49()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      PeriodType periodType0 = PeriodType.years();
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = new Period(readableInstant0, readableInstant0, periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertEquals(1, period0.size());
      assertNotNull(period0);
  }

  @Test
  public void test50()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      
      int int0 = (-31);
      Months months0 = Months.monthsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      assertEquals(2, yearMonth0.size());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      PeriodType periodType0 = months0.getPeriodType();
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(2, yearMonth0.size());
      assertEquals(1, months0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0, periodType0);
      assertEquals(1, period0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(2, yearMonth0.size());
      assertEquals(1, months0.size());
      assertNotNull(period0);
      
      // Undeclared exception!
      try {
        Period period1 = period0.minusDays(int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      Period period0 = Period.ZERO;
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = 9;
      Period period1 = period0.minusMillis(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test
  public void test52()  throws Throwable  {
      Period period0 = Period.ZERO;
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = 9;
      Months months0 = Months.months(int0);
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Period period1 = period0.withFields((ReadablePeriod) months0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(1, months0.size());
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      Period period2 = period1.normalizedStandard(periodType0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertEquals(7, period2.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(1, months0.size());
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period2);
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
  }

  @Test
  public void test53()  throws Throwable  {
      int int0 = PeriodType.WEEK_INDEX;
      assertEquals(2, int0);
      
      ReadableInstant readableInstant0 = null;
      Period period0 = new Period(readableInstant0, readableInstant0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      PeriodType periodType0 = period0.getPeriodType();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, period0.size());
      assertNotNull(periodType0);
      
      Period period1 = new Period((long) int0, (long) int0, periodType0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
  }

  @Test
  public void test54()  throws Throwable  {
      String string0 = "@\"/";
      // Undeclared exception!
      try {
        Period period0 = Period.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"@\"/\"
         //
      }
  }

  @Test
  public void test55()  throws Throwable  {
      int int0 = 37;
      Period period0 = new Period();
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minusMonths(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
  }

  @Test
  public void test56()  throws Throwable  {
      int int0 = 40;
      PeriodType periodType0 = PeriodType.years();
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = new Period((long) int0, periodType0);
      assertEquals(1, period0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(period0);
      
      // Undeclared exception!
      try {
        Period period1 = period0.withMinutes(int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
      }
  }

  @Test
  public void test57()  throws Throwable  {
      int int0 = (-13);
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test
  public void test58()  throws Throwable  {
      int int0 = 40;
      PeriodType periodType0 = PeriodType.years();
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = new Period((long) int0, periodType0);
      assertEquals(1, period0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(period0);
      
      // Undeclared exception!
      try {
        Period period1 = period0.withMillis(int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
      }
  }

  @Test
  public void test59()  throws Throwable  {
      Chronology chronology0 = null;
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      int int0 = (-335);
      LocalDate localDate0 = new LocalDate(chronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Duration duration0 = Duration.millis((long) int0);
      assertEquals((-335L), duration0.getMillis());
      assertNotNull(duration0);
      
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      String string0 = "";
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      DateTime dateTime0 = localDate0.toDateTime(localTime0, dateTimeZone0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals(4, localTime0.size());
      assertNotNull(dateTime0);
      
      Period period0 = new Period((ReadableInstant) dateTime0, (ReadableDuration) duration0, periodType0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(7, period0.size());
      assertEquals((-335L), duration0.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(4, localTime0.size());
      assertNotNull(period0);
  }

  @Test
  public void test60()  throws Throwable  {
      Chronology chronology0 = null;
      long long0 = 0L;
      Period period0 = new Period(long0, chronology0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.time();
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period1 = period0.withPeriodType(periodType0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(4, period1.size());
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test
  public void test61()  throws Throwable  {
      long long0 = (-3007L);
      Period period0 = new Period(long0, long0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test
  public void test62()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.weeks(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test
  public void test63()  throws Throwable  {
      int int0 = 40;
      PeriodType periodType0 = PeriodType.years();
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period((long) int0, periodType0);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.toPeriod();
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, period0.size());
      assertEquals(1, period1.size());
      assertNotNull(period1);
  }

  @Test
  public void test64()  throws Throwable  {
      long long0 = 2155L;
      Chronology chronology0 = null;
      Period period0 = new Period(long0, long0, chronology0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Hours hours0 = period0.toStandardHours();
      assertEquals(1, hours0.size());
      assertEquals(8, period0.size());
      assertNotNull(hours0);
  }

  @Test
  public void test65()  throws Throwable  {
      int int0 = (-335);
      ReadableInstant readableInstant0 = null;
      Duration duration0 = Duration.millis((long) int0);
      assertEquals((-335L), duration0.getMillis());
      assertNotNull(duration0);
      
      Period period0 = new Period(readableInstant0, (ReadableDuration) duration0);
      assertEquals((-335L), duration0.getMillis());
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test
  public void test66()  throws Throwable  {
      int int0 = (-870);
      Period period0 = Period.minutes(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }
}
