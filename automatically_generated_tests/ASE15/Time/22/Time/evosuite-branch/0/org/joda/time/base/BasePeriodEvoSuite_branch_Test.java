/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:36:50 GMT 2014
 */

package org.joda.time.base;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TimeOfDay;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class BasePeriodEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 0;
      Period period0 = new Period((long) int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Hours hours0 = Hours.ONE;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      PeriodType periodType0 = PeriodType.seconds();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) period0, periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(8, period0.size());
      assertEquals(1, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      // Undeclared exception!
      try {
        mutablePeriod0.add((ReadablePeriod) hours0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'hours'
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      Days days0 = Days.TWO;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      int int0 = (-693);
      Days days1 = days0.dividedBy(int0);
      assertNotSame(days0, days1);
      assertNotSame(days1, days0);
      assertEquals(1, days0.size());
      assertEquals(1, days1.size());
      assertFalse(days0.equals((Object)days1));
      assertFalse(days1.equals((Object)days0));
      assertNotNull(days1);
      
      MutablePeriod mutablePeriod0 = days1.toMutablePeriod();
      assertNotSame(days0, days1);
      assertNotSame(days1, days0);
      assertEquals(1, days0.size());
      assertEquals(1, days1.size());
      assertEquals(8, mutablePeriod0.size());
      assertFalse(days0.equals((Object)days1));
      assertFalse(days1.equals((Object)days0));
      assertNotNull(mutablePeriod0);
  }

  @Test
  public void test02()  throws Throwable  {
      long long0 = 39L;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Hours hours0 = null;
      mutablePeriod0.add((ReadablePeriod) hours0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test03()  throws Throwable  {
      Months months0 = Months.SEVEN;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertEquals(1, months0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.mergePeriod((ReadablePeriod) months0);
      assertEquals(1, months0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test04()  throws Throwable  {
      long long0 = 39L;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Hours hours0 = null;
      mutablePeriod0.mergePeriod((ReadablePeriod) hours0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test05()  throws Throwable  {
      long long0 = 0L;
      int int0 = 38;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.038", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.038", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.038", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.038", fixedDateTimeZone0.getID());
      assertNotNull(copticChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, (Chronology) copticChronology0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.038", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.038", fixedDateTimeZone0.getID());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = null;
      int int1 = 0;
      // Undeclared exception!
      try {
        mutablePeriod0.add(durationFieldType0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      long long0 = (-1829L);
      Hours hours0 = Hours.FIVE;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      int int0 = 0;
      PeriodType periodType0 = hours0.getPeriodType();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, hours0.size());
      assertNotNull(periodType0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0, (Chronology) julianChronology0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, hours0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.addMonths(int0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, hours0.size());
  }

  @Test
  public void test07()  throws Throwable  {
      Days days0 = Days.TWO;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      int int0 = (-693);
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      assertEquals(1, days0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.addHours(int0);
      assertEquals(1, days0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 0;
      Object object0 = null;
      PeriodType periodType0 = PeriodType.millis();
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(object0, periodType0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.setWeeks(int0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = (-2);
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals("halfdays", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      // Undeclared exception!
      try {
        mutablePeriod0.set(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'halfdays'
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-9);
      PeriodType periodType0 = PeriodType.millis();
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = null;
      try {
        period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Object object0 = null;
      Period period0 = new Period(object0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test
  public void test12()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      
      Period period0 = new Period((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      assertEquals(8, period0.size());
      assertEquals(2, yearMonth0.size());
      assertNotNull(period0);
  }

  @Test
  public void test13()  throws Throwable  {
      long long0 = 0L;
      Chronology chronology0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime(long0, chronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDate localDate0 = localDateTime0.toLocalDate();
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) localDate0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-1910);
      Weeks weeks0 = Weeks.weeks(int0);
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Period period0 = weeks0.toPeriod();
      assertEquals(1, weeks0.size());
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      PeriodType periodType0 = period0.getPeriodType();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(1, weeks0.size());
      assertEquals(8, period0.size());
      assertNotNull(periodType0);
      
      Chronology chronology0 = null;
      Partial partial0 = new Partial(chronology0);
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      LocalDate localDate0 = new LocalDate((Chronology) gregorianChronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Period period1 = null;
      try {
        period1 = new Period((ReadablePartial) localDate0, (ReadablePartial) partial0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      assertEquals(4, timeOfDay0.size());
      assertNotNull(timeOfDay0);
      
      long long0 = 1L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) timeOfDay0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) cachedDateTimeZone0);
      assertEquals(2, yearMonth0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(yearMonth0);
      
      ReadablePartial readablePartial0 = null;
      PeriodType periodType0 = PeriodType.dayTime();
      assertEquals(5, periodType0.size());
      assertEquals("DayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) yearMonth0, readablePartial0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) buddhistChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Period period0 = new Period((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      assertEquals(8, period0.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(period0);
  }

  @Test
  public void test18()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      Period period0 = null;
      try {
        period0 = new Period(readablePartial0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      Period period0 = new Period(readableInstant0, readableInstant0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test
  public void test20()  throws Throwable  {
      long long0 = 970L;
      Instant instant0 = new Instant(long0);
      assertEquals(970L, instant0.getMillis());
      assertNotNull(instant0);
      
      PeriodType periodType0 = PeriodType.time();
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period((ReadableInstant) instant0, (ReadableInstant) instant0, periodType0);
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertEquals(970L, instant0.getMillis());
      assertEquals(4, period0.size());
      assertNotNull(period0);
  }

  @Test
  public void test21()  throws Throwable  {
      long long0 = 47L;
      Instant instant0 = new Instant(long0);
      assertEquals(47L, instant0.getMillis());
      assertNotNull(instant0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Duration duration0 = mutablePeriod0.toDurationFrom((ReadableInstant) instant0);
      assertEquals(47L, instant0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = (-2);
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.setWeeks(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test23()  throws Throwable  {
      long long0 = 30L;
      Duration duration0 = Duration.standardDays(long0);
      assertEquals(2592000000L, duration0.getMillis());
      assertNotNull(duration0);
      
      DateMidnight dateMidnight0 = new DateMidnight(long0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateTime dateTime0 = dateMidnight0.toDateTime();
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals((-3600000L), dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals(2592000000L, duration0.getMillis());
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test
  public void test24()  throws Throwable  {
      Days days0 = Days.ZERO;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Weeks weeks0 = days0.toStandardWeeks();
      assertEquals(1, days0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      PeriodType periodType0 = weeks0.getPeriodType();
      assertEquals(1, days0.size());
      assertEquals(1, weeks0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(periodType0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      int int0 = 1116;
      ReadableInstant readableInstant0 = null;
      ISOChronology iSOChronology0 = (ISOChronology)yearMonthDay0.getChronology();
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(iSOChronology0);
      
      DateTime dateTime0 = new DateTime((Chronology) iSOChronology0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(dateTime0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, (ReadableInstant) dateTime0, periodType0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1, days0.size());
      assertEquals(1, weeks0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(mutablePeriod0);
      
      // Undeclared exception!
      try {
        mutablePeriod0.addYears(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      long long0 = 970L;
      Instant instant0 = new Instant(long0);
      assertEquals(970L, instant0.getMillis());
      assertNotNull(instant0);
      
      PeriodType periodType0 = PeriodType.time();
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertEquals(4, mutablePeriod0.size());
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      Duration duration0 = mutablePeriod0.toDurationTo((ReadableInstant) instant0);
      assertEquals(970L, instant0.getMillis());
      assertEquals(4, mutablePeriod0.size());
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
  }

  @Test
  public void test26()  throws Throwable  {
      long long0 = 0L;
      Chronology chronology0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime(long0, chronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Days days0 = Days.TWO;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      int int0 = (-693);
      int int1 = localDateTime0.getYear();
      assertEquals(4, localDateTime0.size());
      assertEquals(1970, int1);
      assertFalse(int1 == int0);
      
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, days0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.setPeriod(int0, int0, int0, int0, int0, int0, int1, int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(4, localDateTime0.size());
      assertEquals(1, days0.size());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = (-28);
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      // Undeclared exception!
      try {
        mutablePeriod0.setValue(int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -28
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      long long0 = 30L;
      Duration duration0 = Duration.standardDays(long0);
      assertEquals(2592000000L, duration0.getMillis());
      assertNotNull(duration0);
      
      DateMidnight dateMidnight0 = new DateMidnight(long0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateTime dateTime0 = dateMidnight0.toDateTime();
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateTime0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableDuration) duration0, (ReadableInstant) dateTime0);
      assertEquals(2592000000L, duration0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(mutablePeriod0);
  }
}
