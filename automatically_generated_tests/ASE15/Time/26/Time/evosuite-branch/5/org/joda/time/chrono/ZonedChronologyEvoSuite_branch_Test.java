/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:46:38 GMT 2014
 */

package org.joda.time.chrono;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TimeOfDay;
import org.joda.time.Weeks;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BasicYearDateTimeField;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.LenientDateTimeField;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.field.UnsupportedDurationField;
import org.joda.time.field.ZeroIsMaxDateTimeField;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class ZonedChronologyEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)islamicChronology0.clockhourOfHalfday();
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      int int0 = (-17);
      String string0 = "";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) islamicChronology0);
      assertNotNull(strictChronology0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)strictChronology0.centuries();
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("centuries", zonedChronology_ZonedDurationField0.getName());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("centuries", zonedChronology_ZonedDurationField0.getName());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      long long0 = zonedChronology_ZonedDateTimeField1.roundHalfEven((long) int0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertEquals(0L, long0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("centuries", zonedChronology_ZonedDurationField0.getName());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      
      long long1 = zonedChronology_ZonedDateTimeField1.getDifferenceAsLong(long0, long0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertEquals(0L, long1);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("centuries", zonedChronology_ZonedDurationField0.getName());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertTrue(long1 == long0);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertTrue(long0 == long1);
  }

  @Test
  public void test01()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      int int0 = 128;
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertEquals("+00:00:00.128", fixedDateTimeZone1.getID());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("+00:00:00.128", fixedDateTimeZone1.toString());
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertNotNull(fixedDateTimeZone1);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone1);
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertEquals("+00:00:00.128", fixedDateTimeZone1.getID());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("+00:00:00.128", fixedDateTimeZone1.toString());
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertNotNull(ethiopicChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)ethiopicChronology0.secondOfDay();
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("secondOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("+00:00:00.128", fixedDateTimeZone1.getID());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("+00:00:00.128", fixedDateTimeZone1.toString());
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) ethiopicChronology0);
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertEquals("+00:00:00.128", fixedDateTimeZone1.getID());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("+00:00:00.128", fixedDateTimeZone1.toString());
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertNotNull(lenientChronology0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)lenientChronology0.years();
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals("+00:00:00.128", fixedDateTimeZone1.getID());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("+00:00:00.128", fixedDateTimeZone1.toString());
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("secondOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("+00:00:00.128", fixedDateTimeZone1.getID());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("+00:00:00.128", fixedDateTimeZone1.toString());
      assertEquals("secondOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone1));
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      int int1 = zonedChronology_ZonedDateTimeField1.getMinimumValue((long) int0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertEquals(0, int1);
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("secondOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("+00:00:00.128", fixedDateTimeZone1.getID());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("+00:00:00.128", fixedDateTimeZone1.toString());
      assertEquals("secondOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(int1 == int0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone1));
      assertFalse(int0 == int1);
      
      int int2 = zonedChronology_ZonedDateTimeField1.getDifference((long) int1, (long) int0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertEquals(0, int2);
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("secondOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("+00:00:00.128", fixedDateTimeZone1.getID());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("+00:00:00.128", fixedDateTimeZone1.toString());
      assertEquals("secondOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test02()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) gregorianChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(zonedChronology0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertNotNull(dateTimeField0);
      
      UnsupportedDurationField unsupportedDurationField0 = (UnsupportedDurationField)zonedChronology0.eras();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertNotNull(unsupportedDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, cachedDateTimeZone0, unsupportedDurationField0, unsupportedDurationField0, unsupportedDurationField0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      ReadablePartial readablePartial0 = null;
      int int0 = zonedChronology_ZonedDateTimeField0.getMinimumValue(readablePartial0);
      assertEquals(0, int0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)copticChronology0.centuries();
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("centuries", zonedChronology_ZonedDurationField0.getName());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, cachedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("centuries", zonedChronology_ZonedDurationField0.getName());
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      long long0 = zonedChronology_ZonedDateTimeField1.addWrapField((long) int0, int0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertEquals(0L, long0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("centuries", zonedChronology_ZonedDurationField0.getName());
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
  }

  @Test
  public void test03()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)islamicChronology0.clockhourOfHalfday();
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      int int0 = (-17);
      String string0 = "";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) islamicChronology0);
      assertNotNull(strictChronology0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)strictChronology0.centuries();
      assertEquals("centuries", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("centuries", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField1.getName());
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      long long0 = zonedChronology_ZonedDateTimeField1.add((long) int0, (long) int0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertEquals((-61200017L), long0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("centuries", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField1.getName());
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
  }

  @Test
  public void test04()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) gregorianChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(zonedChronology0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotNull(dateTimeField0);
      
      UnsupportedDurationField unsupportedDurationField0 = (UnsupportedDurationField)zonedChronology0.eras();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertNotNull(unsupportedDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, cachedDateTimeZone0, unsupportedDurationField0, unsupportedDurationField0, unsupportedDurationField0);
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      ReadablePartial readablePartial0 = null;
      int int0 = zonedChronology_ZonedDateTimeField0.getMinimumValue(readablePartial0);
      assertEquals(0, int0);
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)copticChronology0.centuries();
      assertEquals("centuries", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, cachedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("centuries", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      long long0 = zonedChronology_ZonedDateTimeField1.add((long) int0, int0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertEquals(0L, long0);
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("centuries", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
  }

  @Test
  public void test05()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) iSOChronology0);
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(assembledChronology_Fields0.days, fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("days", zonedChronology_ZonedDurationField0.getName());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, (DurationField) zonedChronology_ZonedDurationField0);
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("days", zonedChronology_ZonedDurationField0.getName());
      assertEquals(false, unsupportedDateTimeField0.isLenient());
      assertEquals("yearOfCentury", unsupportedDateTimeField0.getName());
      assertEquals(false, unsupportedDateTimeField0.isSupported());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertNotNull(unsupportedDateTimeField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = null;
      try {
        zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(unsupportedDateTimeField0, fixedDateTimeZone0, assembledChronology_Fields0.halfdays, zonedChronology_ZonedDurationField0, assembledChronology_Fields0.hours);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      long long0 = 0L;
      int int0 = 442;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("+00:00:00.442", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.442", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      MillisDurationField millisDurationField0 = (MillisDurationField)iSOChronology0.millis();
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals(true, millisDurationField0.isSupported());
      assertEquals(true, millisDurationField0.isPrecise());
      assertNotNull(millisDurationField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(millisDurationField0, fixedDateTimeZone0);
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("+00:00:00.442", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.442", fixedDateTimeZone0.getID());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals(true, millisDurationField0.isSupported());
      assertEquals(true, millisDurationField0.isPrecise());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      long long1 = zonedChronology_ZonedDurationField0.add(long0, int0);
      assertEquals(442L, long1);
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("+00:00:00.442", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.442", fixedDateTimeZone0.getID());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals(true, millisDurationField0.isSupported());
      assertEquals(true, millisDurationField0.isPrecise());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      long long2 = zonedChronology_ZonedDurationField0.getDifferenceAsLong(long1, (long) int0);
      assertEquals(0L, long2);
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("+00:00:00.442", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.442", fixedDateTimeZone0.getID());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals(true, millisDurationField0.isSupported());
      assertEquals(true, millisDurationField0.isPrecise());
      assertTrue(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long2 == long1);
      assertTrue(long2 == long0);
  }

  @Test
  public void test07()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      DateTimeZone dateTimeZone0 = null;
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withZone(dateTimeZone0);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertNotNull(islamicChronology1);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertNotNull(lenientChronology0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) islamicChronology0);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertEquals(3, yearMonthDay0.size());
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertNotNull(yearMonthDay0);
      
      int int0 = (-929);
      DateTime dateTime0 = yearMonthDay0.toDateTimeAtCurrentTime(dateTimeZone0);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertNotNull(dateTime0);
      
      LocalDate localDate0 = new LocalDate((long) int0, dateTimeZone0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DateTime dateTime1 = localDate0.toDateTimeAtStartOfDay();
      assertNotSame(dateTime1, dateTime0);
      assertEquals((-3600000L), dateTime1.getMillis());
      assertEquals(3, localDate0.size());
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotNull(dateTime1);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) dateTime0, (ReadableInstant) dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(dateTime0, dateTime1);
      assertEquals((-3600000L), dateTime1.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(3, localDate0.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertNotNull(mutablePeriod0);
      
      long long0 = lenientChronology0.add((ReadablePeriod) mutablePeriod0, (long) int0, int0);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(dateTime0, dateTime1);
      assertEquals(1293480139145351L, long0);
      assertEquals((-3600000L), dateTime1.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(3, localDate0.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(dateTime0.equals((Object)dateTime1));
  }

  @Test
  public void test08()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) gregorianChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(zonedChronology0);
      
      ReadableInterval readableInterval0 = null;
      Weeks weeks0 = Weeks.weeksIn(readableInterval0);
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      long long0 = (-192L);
      long long1 = 271L;
      int[] intArray0 = zonedChronology0.get((ReadablePeriod) weeks0, long0, long1);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1, weeks0.size());
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test
  public void test09()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.millisOfSecond();
      assertEquals("millisOfSecond", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertNotNull(dateTimeField0);
      
      DurationField durationField0 = null;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, cachedDateTimeZone0, durationField0, durationField0, durationField0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("millisOfSecond", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("millisOfSecond", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      int int0 = zonedChronology_ZonedDateTimeField0.getMaximumTextLength(locale0);
      assertEquals(3, int0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("millisOfSecond", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("millisOfSecond", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("millisOfSecond", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("millisOfSecond", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(mutablePeriod0);
  }

  @Test
  public void test10()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(copticChronology0);
      assertEquals("year", basicYearDateTimeField0.getName());
      assertEquals(true, basicYearDateTimeField0.isSupported());
      assertNotNull(basicYearDateTimeField0);
      
      DurationField durationField0 = basicYearDateTimeField0.getLeapDurationField();
      assertEquals("days", durationField0.getName());
      assertEquals(true, durationField0.isPrecise());
      assertEquals(true, durationField0.isSupported());
      assertEquals("year", basicYearDateTimeField0.getName());
      assertEquals(true, basicYearDateTimeField0.isSupported());
      assertNotNull(durationField0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, fixedDateTimeZone0);
      assertEquals("days", durationField0.getName());
      assertEquals(true, durationField0.isPrecise());
      assertEquals(true, durationField0.isSupported());
      assertEquals("year", basicYearDateTimeField0.getName());
      assertEquals(true, basicYearDateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("days", zonedChronology_ZonedDurationField0.getName());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      boolean boolean0 = zonedChronology_ZonedDurationField0.isPrecise();
      assertTrue(boolean0);
      assertEquals("days", durationField0.getName());
      assertEquals(true, durationField0.isPrecise());
      assertEquals(true, durationField0.isSupported());
      assertEquals("year", basicYearDateTimeField0.getName());
      assertEquals(true, basicYearDateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("days", zonedChronology_ZonedDurationField0.getName());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test
  public void test11()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(gJChronology0);
      
      UnsupportedDurationField unsupportedDurationField0 = (UnsupportedDurationField)gJChronology0.eras();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertNotNull(unsupportedDurationField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = null;
      try {
        zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(unsupportedDurationField0, fixedDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) islamicChronology0);
      assertNotNull(lenientChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)lenientChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(iSOChronology0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) iSOChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology0);
      
      boolean boolean0 = zonedChronology0.equals((Object) zonedChronology0);
      assertTrue(boolean0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test
  public void test13()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) islamicChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(zonedChronology0);
      
      boolean boolean0 = zonedChronology0.equals((Object) assembledChronology_Fields0);
      assertFalse(boolean0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test
  public void test14()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) ethiopicChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(zonedChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      zonedChronology0.assemble(assembledChronology_Fields0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
  }

  @Test
  public void test15()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) gregorianChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(zonedChronology0);
      
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      GregorianChronology gregorianChronology1 = (GregorianChronology)zonedChronology0.withZone((DateTimeZone) fixedDateTimeZone0);
      assertNotSame(gregorianChronology1, gregorianChronology0);
      assertNotSame(gregorianChronology0, gregorianChronology1);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertFalse(gregorianChronology1.equals((Object)gregorianChronology0));
      assertFalse(gregorianChronology0.equals((Object)gregorianChronology1));
      assertNotNull(gregorianChronology1);
  }

  @Test
  public void test16()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      //  // Unstable assertion: assertNotNull(gregorianChronology0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      //  // Unstable assertion: assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.getID());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) gregorianChronology0, (DateTimeZone) cachedDateTimeZone0);
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.getID());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertNotNull(zonedChronology0);
      
      DateTimeZone dateTimeZone0 = null;
      ZonedChronology zonedChronology1 = (ZonedChronology)zonedChronology0.withZone(dateTimeZone0);
      //  // Unstable assertion: assertNotSame(zonedChronology1, zonedChronology0);
      //  // Unstable assertion: assertNotSame(zonedChronology0, zonedChronology1);
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.getID());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertTrue(zonedChronology1.equals((Object)zonedChronology0));
      //  // Unstable assertion: assertTrue(zonedChronology0.equals((Object)zonedChronology1));
      //  // Unstable assertion: assertNotNull(zonedChronology1);
  }

  @Test
  public void test17()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      String string0 = "\\?,XglH";
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      // Undeclared exception!
      try {
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) julianChronology0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DateTimeZone must not be null
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      ISOChronology iSOChronology0 = null;
      // Undeclared exception!
      try {
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) iSOChronology0, (DateTimeZone) fixedDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply a chronology
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) iSOChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(zonedChronology0);
      
      int int0 = 11;
      long long0 = zonedChronology0.getDateTimeMillis(int0, int0, int0, int0);
      assertEquals((-61792934324989L), long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  @Test
  public void test20()  throws Throwable  {
      Chronology chronology0 = null;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology(chronology0, chronology0, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) islamicChronology0);
      assertNotNull(strictChronology0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) strictChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(zonedChronology0);
      
      String string0 = zonedChronology0.toString();
      assertEquals("ZonedChronology[StrictChronology[IslamicChronology[UTC]], Europe/London]", string0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(string0);
  }

  @Test
  public void test21()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      long long0 = 0L;
      int int0 = 442;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("+00:00:00.442", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.442", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0, (Chronology) islamicChronology0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      DateMidnight dateMidnight0 = yearMonthDay0.toDateMidnight((DateTimeZone) fixedDateTimeZone0);
      assertEquals("+00:00:00.442", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.442", fixedDateTimeZone0.toString());
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-442L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
  }

  @Test
  public void test22()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      //  // Unstable assertion: assertNotNull(ethiopicChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.getID());
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) ethiopicChronology0, (DateTimeZone) cachedDateTimeZone0);
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.getID());
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertNotNull(zonedChronology0);
      
      int int0 = zonedChronology0.hashCode();
      //  // Unstable assertion: assertEquals(1470476013, int0);
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.getID());
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  @Test
  public void test23()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = (-1L);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) islamicChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(zonedChronology0);
      
      int int0 = 1061;
      try {
        long long1 = zonedChronology0.getDateTimeMillis(long0, int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1061 for hourOfDay must be in the range [0,23]
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) gregorianChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(zonedChronology0);
      
      GregorianChronology gregorianChronology1 = (GregorianChronology)zonedChronology0.withUTC();
      assertNotSame(gregorianChronology1, gregorianChronology0);
      assertNotSame(gregorianChronology0, gregorianChronology1);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertFalse(gregorianChronology1.equals((Object)gregorianChronology0));
      assertFalse(gregorianChronology0.equals((Object)gregorianChronology1));
      assertNotNull(gregorianChronology1);
  }

  @Test
  public void test25()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DurationField durationField0 = buddhistChronology0.minutes();
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("minutes", durationField0.getName());
      assertNotNull(durationField0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, cachedDateTimeZone0);
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("minutes", durationField0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("minutes", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      long long0 = 1041L;
      long long1 = zonedChronology_ZonedDurationField0.getValueAsLong(long0, long0);
      assertEquals(0L, long1);
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("minutes", durationField0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("minutes", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test26()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      DurationField durationField0 = julianChronology0.weekyears();
      assertEquals(true, durationField0.isSupported());
      assertEquals("weekyears", durationField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertNotNull(durationField0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, cachedDateTimeZone0);
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weekyears", zonedChronology_ZonedDurationField0.getName());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(true, durationField0.isSupported());
      assertEquals("weekyears", durationField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      int int0 = 1159;
      long long0 = zonedChronology_ZonedDurationField0.getMillis(int0, (long) int0);
      assertEquals(36575280000000L, long0);
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weekyears", zonedChronology_ZonedDurationField0.getName());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(true, durationField0.isSupported());
      assertEquals("weekyears", durationField0.getName());
      assertEquals(false, durationField0.isPrecise());
  }

  @Test
  public void test27()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DurationField durationField0 = buddhistChronology0.minutes();
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("minutes", durationField0.getName());
      assertNotNull(durationField0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("minutes", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("minutes", durationField0.getName());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      long long0 = 1041L;
      long long1 = zonedChronology_ZonedDurationField0.getMillis(long0, long0);
      assertEquals(62460000L, long1);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("minutes", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("minutes", durationField0.getName());
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test28()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) buddhistChronology0);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = 2147483647L;
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(assembledChronology_Fields0.weeks, cachedDateTimeZone0);
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      int int0 = zonedChronology_ZonedDurationField0.getValue(long0, long0);
      assertEquals(3, int0);
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  @Test
  public void test29()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.millisOfSecond();
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("millisOfSecond", dateTimeField0.getName());
      assertNotNull(dateTimeField0);
      
      DurationField durationField0 = null;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, cachedDateTimeZone0, durationField0, durationField0, durationField0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("millisOfSecond", dateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("millisOfSecond", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = 1674L;
      boolean boolean0 = zonedChronology_ZonedDateTimeField0.isLeap(long0);
      assertFalse(boolean0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("millisOfSecond", dateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("millisOfSecond", zonedChronology_ZonedDateTimeField0.getName());
  }

  @Test
  public void test30()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) buddhistChronology0);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.clockhourOfDay, cachedDateTimeZone0, assembledChronology_Fields0.centuries, assembledChronology_Fields0.weeks, assembledChronology_Fields0.centuries);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("clockhourOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = 2147483647L;
      String string0 = zonedChronology_ZonedDateTimeField0.getAsShortText(long0);
      assertEquals("22", string0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("clockhourOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertNotNull(string0);
  }

  @Test
  public void test31()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(ethiopicChronology0);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.secondOfDay();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("secondOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotNull(dateTimeField0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) ethiopicChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(lenientChronology0);
      
      DurationField durationField0 = lenientChronology0.years();
      assertEquals(false, durationField0.isPrecise());
      assertEquals("years", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(durationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      assertEquals(false, durationField0.isPrecise());
      assertEquals("years", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("secondOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("secondOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int[] intArray0 = new int[4];
      int int0 = zonedChronology_ZonedDateTimeField0.getMaximumValue((ReadablePartial) localDateTime0, intArray0);
      assertEquals(86399, int0);
      assertEquals(false, durationField0.isPrecise());
      assertEquals("years", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("secondOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("secondOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(4, localDateTime0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test32()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.millisOfSecond();
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("millisOfSecond", dateTimeField0.getName());
      assertNotNull(dateTimeField0);
      
      DurationField durationField0 = null;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, cachedDateTimeZone0, durationField0, durationField0, durationField0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("millisOfSecond", dateTimeField0.getName());
      assertEquals("millisOfSecond", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = 1674L;
      Locale locale0 = Locale.CANADA;
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = zonedChronology_ZonedDateTimeField0.getAsText(long0, locale0);
      assertEquals("674", string0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("millisOfSecond", dateTimeField0.getName());
      assertEquals("millisOfSecond", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(string0);
  }

  @Test
  public void test33()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) gregorianChronology0);
      assertNotNull(strictChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)strictChronology0.getZone();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)islamicChronology0.minuteOfDay();
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.halfdays();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("halfdays", durationField0.getName());
      assertNotNull(durationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("halfdays", durationField0.getName());
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      TimeOfDay timeOfDay0 = new TimeOfDay((DateTimeZone) fixedDateTimeZone0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(timeOfDay0);
      
      int int0 = zonedChronology_ZonedDateTimeField1.getMaximumValue((ReadablePartial) timeOfDay0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertEquals(1439, int0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("halfdays", durationField0.getName());
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
  }

  @Test
  public void test34() {}
//   @Test
//   public void test34()  throws Throwable  {
//       ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
//       assertNotNull(iSOChronology0);
//       
//       LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) iSOChronology0);
//       assertNotNull(lenientChronology0);
//       
//       LenientDateTimeField lenientDateTimeField0 = (LenientDateTimeField)lenientChronology0.dayOfWeek();
//       assertEquals("dayOfWeek", lenientDateTimeField0.getName());
//       assertEquals(true, lenientDateTimeField0.isLenient());
//       assertEquals(true, lenientDateTimeField0.isSupported());
//       assertNotNull(lenientDateTimeField0);
//       
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertNotNull(cachedDateTimeZone0);
//       
//       ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) iSOChronology0, (DateTimeZone) cachedDateTimeZone0);
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertNotNull(zonedChronology0);
//       
//       ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)zonedChronology0.months();
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
//       assertEquals("months", zonedChronology_ZonedDurationField0.getName());
//       assertNotNull(zonedChronology_ZonedDurationField0);
//       
//       ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(lenientDateTimeField0, cachedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
//       assertEquals("months", zonedChronology_ZonedDurationField0.getName());
//       assertEquals("dayOfWeek", lenientDateTimeField0.getName());
//       assertEquals(true, lenientDateTimeField0.isLenient());
//       assertEquals(true, lenientDateTimeField0.isSupported());
//       assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
//       assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
//       assertNotNull(zonedChronology_ZonedDateTimeField0);
//       
//       Locale locale0 = null;
//       int int0 = zonedChronology_ZonedDateTimeField0.getMaximumShortTextLength(locale0);
//       assertEquals(4, int0);
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
//       assertEquals("months", zonedChronology_ZonedDurationField0.getName());
//       assertEquals("dayOfWeek", lenientDateTimeField0.getName());
//       assertEquals(true, lenientDateTimeField0.isLenient());
//       assertEquals(true, lenientDateTimeField0.isSupported());
//       assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
//       assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
//   }

  @Test
  public void test35()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      int int0 = 128;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(ethiopicChronology0);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.secondOfDay();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("secondOfDay", dateTimeField0.getName());
      assertNotNull(dateTimeField0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) ethiopicChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(lenientChronology0);
      
      DurationField durationField0 = lenientChronology0.years();
      assertEquals(false, durationField0.isPrecise());
      assertEquals("years", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(durationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("secondOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertEquals("years", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("secondOfDay", dateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      int int1 = zonedChronology_ZonedDateTimeField0.getMinimumValue((long) int0);
      assertEquals(0, int1);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("secondOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertEquals("years", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("secondOfDay", dateTimeField0.getName());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = zonedChronology_ZonedDateTimeField0.getLeapAmount((long) int1);
      assertEquals(0, int2);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("secondOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertEquals("years", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("secondOfDay", dateTimeField0.getName());
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
  }

  @Test
  public void test36()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DurationField durationField0 = buddhistChronology0.minutes();
      assertEquals("minutes", durationField0.getName());
      assertEquals(true, durationField0.isPrecise());
      assertEquals(true, durationField0.isSupported());
      assertNotNull(durationField0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = 1041L;
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) buddhistChronology0);
      assertNotNull(strictChronology0);
      
      DateTimeField dateTimeField0 = strictChronology0.yearOfEra();
      assertEquals("yearOfEra", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertNotNull(dateTimeField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, cachedDateTimeZone0, durationField0, durationField0, durationField0);
      assertEquals("yearOfEra", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("minutes", durationField0.getName());
      assertEquals(true, durationField0.isPrecise());
      assertEquals(true, durationField0.isSupported());
      assertEquals("yearOfEra", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long1 = zonedChronology_ZonedDateTimeField0.getDifferenceAsLong(long0, long0);
      assertEquals(0L, long1);
      assertEquals("yearOfEra", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("minutes", durationField0.getName());
      assertEquals(true, durationField0.isPrecise());
      assertEquals(true, durationField0.isSupported());
      assertEquals("yearOfEra", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test37()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) gregorianChronology0);
      assertNotNull(strictChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)strictChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)islamicChronology0.minuteOfDay();
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.halfdays();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("halfdays", durationField0.getName());
      assertNotNull(durationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("halfdays", durationField0.getName());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      long long0 = 60000L;
      int int0 = zonedChronology_ZonedDateTimeField1.getMaximumValue(long0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertEquals(1439, int0);
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("halfdays", durationField0.getName());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      
      String string0 = "4l(";
      // Undeclared exception!
      try {
        long long1 = zonedChronology_ZonedDateTimeField1.set((long) int0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"4l(\" for minuteOfDay is not supported
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      int int0 = 442;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.442", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.442", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      MillisDurationField millisDurationField0 = (MillisDurationField)iSOChronology0.millis();
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(true, millisDurationField0.isPrecise());
      assertEquals(true, millisDurationField0.isSupported());
      assertNotNull(millisDurationField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(millisDurationField0, fixedDateTimeZone0);
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(true, millisDurationField0.isPrecise());
      assertEquals(true, millisDurationField0.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.442", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.442", fixedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = (ZeroIsMaxDateTimeField)iSOChronology0.clockhourOfHalfday();
      assertEquals(false, zeroIsMaxDateTimeField0.isLenient());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals(true, zeroIsMaxDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", zeroIsMaxDateTimeField0.getName());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(zeroIsMaxDateTimeField0, fixedDateTimeZone0, zonedChronology_ZonedDurationField0, millisDurationField0, millisDurationField0);
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(true, millisDurationField0.isPrecise());
      assertEquals(true, millisDurationField0.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.442", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.442", fixedDateTimeZone0.getID());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals(false, zeroIsMaxDateTimeField0.isLenient());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals(true, zeroIsMaxDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", zeroIsMaxDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      String string0 = " duraion,";
      Locale locale0 = new Locale(string0);
      assertEquals(" duraion,", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(" duraion,", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string1 = zonedChronology_ZonedDateTimeField0.getAsShortText(int0, locale0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("442", string1);
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(true, millisDurationField0.isPrecise());
      assertEquals(true, millisDurationField0.isSupported());
      assertEquals(" duraion,", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(" duraion,", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.442", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.442", fixedDateTimeZone0.getID());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals(false, zeroIsMaxDateTimeField0.isLenient());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals(true, zeroIsMaxDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", zeroIsMaxDateTimeField0.getName());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test
  public void test39()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) gregorianChronology0);
      assertNotNull(strictChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)strictChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)islamicChronology0.minuteOfDay();
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.halfdays();
      assertEquals(true, durationField0.isSupported());
      assertEquals("halfdays", durationField0.getName());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(durationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertEquals(true, durationField0.isSupported());
      assertEquals("halfdays", durationField0.getName());
      assertEquals(true, durationField0.isPrecise());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      long long0 = 60000L;
      int int0 = zonedChronology_ZonedDateTimeField1.getMaximumValue(long0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertEquals(1439, int0);
      assertEquals(true, durationField0.isSupported());
      assertEquals("halfdays", durationField0.getName());
      assertEquals(true, durationField0.isPrecise());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      
      long long1 = zonedChronology_ZonedDateTimeField1.remainder((long) int0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertEquals(1439L, long1);
      assertEquals(true, durationField0.isSupported());
      assertEquals("halfdays", durationField0.getName());
      assertEquals(true, durationField0.isPrecise());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
  }

  @Test
  public void test40()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) ethiopicChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(zonedChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)zonedChronology0.minuteOfHour();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      DurationField durationField0 = null;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, cachedDateTimeZone0, durationField0, durationField0, durationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      ReadablePartial readablePartial0 = null;
      int[] intArray0 = new int[6];
      int int0 = zonedChronology_ZonedDateTimeField1.getMinimumValue(readablePartial0, intArray0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertEquals(0, int0);
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test41() {}
//   @Test
//   public void test41()  throws Throwable  {
//       IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
//       assertNotNull(islamicChronology0);
//       
//       long long0 = 0L;
//       int int0 = 442;
//       FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
//       assertEquals("+00:00:00.442", fixedDateTimeZone0.getID());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("+00:00:00.442", fixedDateTimeZone0.toString());
//       assertNotNull(fixedDateTimeZone0);
//       
//       YearMonthDay yearMonthDay0 = new YearMonthDay(long0, (Chronology) islamicChronology0);
//       assertEquals(3, yearMonthDay0.size());
//       assertNotNull(yearMonthDay0);
//       
//       ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
//       assertNotNull(iSOChronology0);
//       
//       MillisDurationField millisDurationField0 = (MillisDurationField)iSOChronology0.millis();
//       assertEquals(true, millisDurationField0.isPrecise());
//       assertEquals("DurationField[millis]", millisDurationField0.toString());
//       assertEquals(1L, millisDurationField0.getUnitMillis());
//       assertEquals(true, millisDurationField0.isSupported());
//       assertEquals("millis", millisDurationField0.getName());
//       assertNotNull(millisDurationField0);
//       
//       LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) islamicChronology0);
//       assertNotNull(lenientChronology0);
//       
//       LenientDateTimeField lenientDateTimeField0 = (LenientDateTimeField)lenientChronology0.year();
//       assertEquals(true, lenientDateTimeField0.isSupported());
//       assertEquals("year", lenientDateTimeField0.getName());
//       assertEquals(true, lenientDateTimeField0.isLenient());
//       assertNotNull(lenientDateTimeField0);
//       
//       ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(lenientDateTimeField0, fixedDateTimeZone0, millisDurationField0, millisDurationField0, millisDurationField0);
//       assertEquals(true, lenientDateTimeField0.isSupported());
//       assertEquals("year", lenientDateTimeField0.getName());
//       assertEquals(true, lenientDateTimeField0.isLenient());
//       assertEquals("+00:00:00.442", fixedDateTimeZone0.getID());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("+00:00:00.442", fixedDateTimeZone0.toString());
//       assertEquals(true, millisDurationField0.isPrecise());
//       assertEquals("DurationField[millis]", millisDurationField0.toString());
//       assertEquals(1L, millisDurationField0.getUnitMillis());
//       assertEquals(true, millisDurationField0.isSupported());
//       assertEquals("millis", millisDurationField0.getName());
//       assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
//       assertEquals("year", zonedChronology_ZonedDateTimeField0.getName());
//       assertNotNull(zonedChronology_ZonedDateTimeField0);
//       
//       Locale locale0 = Locale.GERMAN;
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("de", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertNotNull(locale0);
//       
//       String string0 = zonedChronology_ZonedDateTimeField0.getAsText((ReadablePartial) yearMonthDay0, locale0);
//       assertEquals("1389", string0);
//       assertEquals(true, lenientDateTimeField0.isSupported());
//       assertEquals("year", lenientDateTimeField0.getName());
//       assertEquals(true, lenientDateTimeField0.isLenient());
//       assertEquals("+00:00:00.442", fixedDateTimeZone0.getID());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("+00:00:00.442", fixedDateTimeZone0.toString());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("de", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals(true, millisDurationField0.isPrecise());
//       assertEquals("DurationField[millis]", millisDurationField0.toString());
//       assertEquals(1L, millisDurationField0.getUnitMillis());
//       assertEquals(true, millisDurationField0.isSupported());
//       assertEquals("millis", millisDurationField0.getName());
//       assertEquals(3, yearMonthDay0.size());
//       assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
//       assertEquals("year", zonedChronology_ZonedDateTimeField0.getName());
//       assertNotNull(string0);
//   }
}
