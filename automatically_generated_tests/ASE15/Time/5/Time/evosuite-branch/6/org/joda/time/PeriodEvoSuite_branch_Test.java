/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:40:50 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TimeOfDay;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.YearMonthDay;
import org.joda.time.Years;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class PeriodEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      int int0 = PeriodType.MONTH_INDEX;
      assertEquals(1, int0);
      
      Period period0 = new Period();
      assertNotNull(period0);
      
      Period period1 = period0.withMonths(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period1);
      
      PeriodType periodType0 = PeriodType.hours();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      
      // Undeclared exception!
      try {
        Period period2 = period1.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: P1M
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      
      Period period0 = seconds0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, seconds0.size());
      
      Period period1 = period0.normalizedStandard();
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotNull(period1);
      assertEquals(1, seconds0.size());
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = (-579);
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      
      // Undeclared exception!
      try {
        Minutes minutes0 = period0.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains years and years vary in length
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      long long0 = 830L;
      YearMonth yearMonth0 = new YearMonth(long0);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Interval interval0 = yearMonth0.toInterval();
      assertNotNull(interval0);
      assertEquals(2, yearMonth0.size());
      assertEquals((-3600000L), interval0.getStartMillis());
      assertEquals(2674800000L, interval0.getEndMillis());
      
      Period period0 = interval0.toPeriod();
      assertNotNull(period0);
      assertEquals(2, yearMonth0.size());
      assertEquals((-3600000L), interval0.getStartMillis());
      assertEquals(2674800000L, interval0.getEndMillis());
      
      // Undeclared exception!
      try {
        Seconds seconds0 = period0.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains months and months vary in length
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = PeriodType.MONTH_INDEX;
      assertEquals(1, int0);
      
      Period period0 = new Period();
      assertNotNull(period0);
      
      Period period1 = period0.multipliedBy(int0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.months(int0);
      assertNotNull(period0);
      
      Period period1 = null;
      Period period2 = period0.minus((ReadablePeriod) period1);
      assertSame(period2, period0);
      assertSame(period0, period2);
      assertNotNull(period2);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = (-556);
      Period period0 = Period.seconds(int0);
      assertNotNull(period0);
      
      Period period1 = period0.minus((ReadablePeriod) period0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period1);
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = (-556);
      Period period0 = Period.seconds(int0);
      assertNotNull(period0);
      
      int int1 = 0;
      Period period1 = period0.plusMillis(int1);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(period1);
  }

  @Test
  public void test08()  throws Throwable  {
      long long0 = 0L;
      PeriodType periodType0 = PeriodType.hours();
      assertNotNull(periodType0);
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period0 = new Period(long0, long0, periodType0);
      assertNotNull(period0);
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      int int0 = 0;
      Period period1 = period0.plusSeconds(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = (-22);
      Period period0 = Period.millis(int0);
      assertNotNull(period0);
      
      int int1 = 0;
      Period period1 = period0.plusMinutes(int1);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(period1);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-556);
      Period period0 = Period.seconds(int0);
      assertNotNull(period0);
      
      Period period1 = period0.plusHours(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period1);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.months(int0);
      assertNotNull(period0);
      
      Period period1 = period0.plusDays(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.millis(int0);
      assertNotNull(period0);
      
      int int1 = (-579);
      Period period1 = period0.plusWeeks(int1);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period1);
  }

  @Test
  public void test13()  throws Throwable  {
      long long0 = (-154L);
      Duration duration0 = new Duration(long0, long0);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      DateTimeZone dateTimeZone0 = null;
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      Instant instant0 = mutableDateTime0.toInstant();
      assertNotNull(instant0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1392409281320L, instant0.getMillis());
      
      Period period0 = new Period((ReadableDuration) duration0, (ReadableInstant) instant0);
      assertNotNull(period0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392409281320L, instant0.getMillis());
      
      int int0 = (-2139);
      Period period1 = period0.minusMonths(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392409281320L, instant0.getMillis());
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-22);
      Period period0 = Period.millis(int0);
      assertNotNull(period0);
      
      int int1 = 0;
      Period period1 = period0.plusYears(int1);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(period1);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 2038;
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.plus(readablePeriod0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = (-556);
      Period period0 = Period.seconds(int0);
      assertNotNull(period0);
      
      Period period1 = period0.plus((ReadablePeriod) period0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = (-556);
      Period period0 = Period.seconds(int0);
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      assertNotNull(durationFieldType0);
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      
      Period period1 = period0.withFieldAdded(durationFieldType0, int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period1);
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 2753;
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = null;
      int int1 = period0.indexOf(durationFieldType0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try {
        Period period1 = period0.withFieldAdded(durationFieldType0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      Months months0 = Months.ELEVEN;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      Period period0 = months0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, months0.size());
      
      int int0 = 0;
      Period period1 = Period.years(int0);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Seconds seconds0 = Seconds.standardSecondsIn((ReadablePeriod) period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      
      DurationFieldType durationFieldType0 = seconds0.getFieldType(int0);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(durationFieldType0);
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals(1, seconds0.size());
      
      Period period2 = period0.withFieldAdded(durationFieldType0, int0);
      assertSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertSame(period0, period2);
      assertNotSame(period0, period1);
      assertFalse(period2.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period2);
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals(1, months0.size());
      assertEquals(1, seconds0.size());
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = 3507;
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        Period period1 = period0.withField(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = (-1807);
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      assertNotNull(durationFieldType0);
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals("centuries", durationFieldType0.getName());
      
      // Undeclared exception!
      try {
        Period period1 = period0.withField(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'centuries'
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = 2038;
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.withFields(readablePeriod0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test23()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      
      Duration duration0 = weeks0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(1, weeks0.size());
      assertEquals(0L, duration0.getMillis());
      
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) copticChronology0);
      assertNotNull(lenientChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)lenientChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      DateTime dateTime0 = yearMonthDay0.toDateTimeAtCurrentTime((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      PeriodType periodType0 = PeriodType.yearDay();
      assertNotNull(periodType0);
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
      assertNotNull(period0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1, weeks0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertEquals(0L, duration0.getMillis());
      
      Period period1 = period0.withPeriodType(periodType0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
      assertEquals(3, yearMonthDay0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1, weeks0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertEquals(0L, duration0.getMillis());
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 6;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:00:00.006", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.006", fixedDateTimeZone0.getID());
      
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals("+00:00:00.006", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.006", fixedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((long) int0);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      LocalTime localTime0 = timeOfDay0.toLocalTime();
      assertNotNull(localTime0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference((ReadablePartial) localDateTime0, (ReadablePartial) localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((long) PeriodType.MINUTE_INDEX);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      Period period0 = Period.fieldDifference((ReadablePartial) timeOfDay0, (ReadablePartial) timeOfDay0);
      assertNotNull(period0);
      assertEquals(4, timeOfDay0.size());
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "";
      MonthDay monthDay0 = MonthDay.parse(string0);
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      
      int int0 = 0;
      LocalDate localDate0 = monthDay0.toLocalDate(int0);
      assertNotNull(localDate0);
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference((ReadablePartial) localDate0, (ReadablePartial) monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference(readablePartial0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = (-556);
      Period period0 = Period.seconds(int0);
      assertNotNull(period0);
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
  }

  @Test
  public void test29()  throws Throwable  {
      long long0 = (-3974L);
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      
      Period period0 = new Period(long0, periodType0);
      assertNotNull(period0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      
      int int0 = 0;
      Period period1 = period0.minusWeeks(int0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
  }

  @Test
  public void test30()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      Period period0 = duration0.toPeriod();
      assertNotNull(period0);
      assertEquals(0L, duration0.getMillis());
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.millis(int0);
      assertNotNull(period0);
      
      Weeks weeks0 = period0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = 3074;
      Period period0 = new Period(int0, int0, int0, int0);
      assertNotNull(period0);
  }

  @Test
  public void test33()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      
      Period period0 = seconds0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, seconds0.size());
      
      Days days0 = period0.toStandardDays();
      assertNotNull(days0);
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = 3507;
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      
      Period period1 = period0.withHours(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period1);
  }

  @Test
  public void test35()  throws Throwable  {
      long long0 = (-154L);
      Duration duration0 = new Duration(long0, long0);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      DateTimeZone dateTimeZone0 = null;
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      Instant instant0 = mutableDateTime0.toInstant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      Period period0 = new Period((ReadableDuration) duration0, (ReadableInstant) instant0);
      assertNotNull(period0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = (-2139);
      Period period1 = period0.minusSeconds(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test36()  throws Throwable  {
      Months months0 = Months.ELEVEN;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      Period period0 = months0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, months0.size());
      
      int int0 = 0;
      Period period1 = period0.withWeeks(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotNull(period1);
      assertEquals(1, months0.size());
  }

  @Test
  public void test37()  throws Throwable  {
      Object object0 = null;
      long long0 = (-3974L);
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      ISOChronology iSOChronology0 = (ISOChronology)yearMonthDay0.getChronology();
      assertNotNull(iSOChronology0);
      assertEquals(3, yearMonthDay0.size());
      
      Period period0 = new Period(object0, (Chronology) iSOChronology0);
      assertNotNull(period0);
      assertEquals(3, yearMonthDay0.size());
  }

  @Test
  public void test38()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.millis(int0);
      assertNotNull(period0);
      
      Period period1 = period0.withSeconds(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertNotNull(period1);
  }

  @Test
  public void test39()  throws Throwable  {
      int int0 = 898;
      Period period0 = new Period();
      assertNotNull(period0);
      
      Period period1 = period0.minusYears(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period1);
  }

  @Test
  public void test40()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      
      Period period0 = new Period((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      assertNotNull(period0);
      assertEquals(2, monthDay0.size());
  }

  @Test
  public void test41()  throws Throwable  {
      long long0 = (-3974L);
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      
      Period period0 = new Period(long0, periodType0);
      assertNotNull(period0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      
      int int0 = 0;
      Period period1 = period0.minusHours(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
  }

  @Test
  public void test42()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      int int0 = (-22);
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      Years years0 = Years.years(int0);
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      PeriodType periodType0 = years0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(1, years0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      
      Period period0 = new Period((ReadableDuration) duration0, readableInstant0, periodType0);
      assertNotNull(period0);
      assertEquals(1, years0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
  }

  @Test
  public void test43()  throws Throwable  {
      int int0 = (-22);
      Period period0 = Period.millis(int0);
      assertNotNull(period0);
      
      Period period1 = period0.withDays(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period1);
  }

  @Test
  public void test44()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      int int0 = 0;
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      Period period0 = new Period((long) int0, (long) int0, periodType0, (Chronology) julianChronology0);
      assertNotNull(period0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
  }

  @Test
  public void test45()  throws Throwable  {
      long long0 = (-154L);
      Duration duration0 = new Duration(long0, long0);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      DateTimeZone dateTimeZone0 = null;
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      Instant instant0 = mutableDateTime0.toInstant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      Period period0 = new Period((ReadableDuration) duration0, (ReadableInstant) instant0);
      assertNotNull(period0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getMillis());
      
      Duration duration1 = period0.toStandardDuration();
      assertNotSame(duration1, duration0);
      assertNotSame(duration0, duration1);
      assertTrue(duration1.equals((Object)duration0));
      assertTrue(duration0.equals((Object)duration1));
      assertNotNull(duration1);
      assertEquals(0L, duration1.getMillis());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getMillis());
  }

  @Test
  public void test46()  throws Throwable  {
      int int0 = (-556);
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      
      Period period1 = period0.normalizedStandard();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertNotNull(period1);
  }

  @Test
  public void test47()  throws Throwable  {
      int int0 = 2753;
      Period period0 = Period.hours(int0);
      assertNotNull(period0);
  }

  @Test
  public void test48()  throws Throwable  {
      int int0 = 898;
      Period period0 = new Period();
      assertNotNull(period0);
      
      Period period1 = period0.minusMinutes(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period1);
  }

  @Test
  public void test49()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      int int0 = (-22);
      Years years0 = Years.years(int0);
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      PeriodType periodType0 = years0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, years0.size());
      
      Period period0 = new Period(readableInstant0, readableInstant0, periodType0);
      assertNotNull(period0);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, years0.size());
  }

  @Test
  public void test50()  throws Throwable  {
      int int0 = 2038;
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      Period period1 = period0.minusDays(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
  }

  @Test
  public void test51()  throws Throwable  {
      int int0 = (-556);
      Period period0 = Period.seconds(int0);
      assertNotNull(period0);
      
      Period period1 = period0.minusMillis(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
  }

  @Test
  public void test52()  throws Throwable  {
      long long0 = 830L;
      YearMonth yearMonth0 = new YearMonth(long0);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      PeriodType periodType0 = PeriodType.millis();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      
      Period period0 = new Period((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0, periodType0);
      assertNotNull(period0);
      assertEquals(2, yearMonth0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
  }

  @Test
  public void test53()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        Period period0 = Period.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
      }
  }

  @Test
  public void test54()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.millis(int0);
      assertNotNull(period0);
      
      Period period1 = period0.minusMonths(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test55()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.millis(int0);
      assertNotNull(period0);
      
      Period period1 = period0.withMinutes(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotNull(period1);
  }

  @Test
  public void test56()  throws Throwable  {
      int int0 = 898;
      Period period0 = new Period();
      assertNotNull(period0);
      
      Period period1 = period0.withMillis(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period1);
  }

  @Test
  public void test57()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      Period period0 = new Period((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      assertNotNull(period0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test
  public void test58()  throws Throwable  {
      long long0 = (-154L);
      Duration duration0 = new Duration(long0, long0);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      DateTimeZone dateTimeZone0 = null;
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      Instant instant0 = mutableDateTime0.toInstant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, instant0.getMillis());
      
      Period period0 = new Period((ReadableDuration) duration0, (ReadableInstant) instant0);
      assertNotNull(period0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392409281320L, instant0.getMillis());
      
      PeriodType periodType0 = PeriodType.minutes();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      
      Period period1 = period0.withPeriodType(periodType0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392409281320L, instant0.getMillis());
  }

  @Test
  public void test59()  throws Throwable  {
      long long0 = (-49L);
      Period period0 = new Period(long0, long0);
      assertNotNull(period0);
  }

  @Test
  public void test60()  throws Throwable  {
      int int0 = 2038;
      Period period0 = Period.weeks(int0);
      assertNotNull(period0);
  }

  @Test
  public void test61()  throws Throwable  {
      int int0 = (-556);
      Period period0 = Period.seconds(int0);
      assertNotNull(period0);
      
      Period period1 = period0.toPeriod();
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test62()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      
      Period period0 = seconds0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, seconds0.size());
      
      Period period1 = period0.negated();
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period1);
      assertEquals(1, seconds0.size());
  }

  @Test
  public void test63()  throws Throwable  {
      long long0 = 0L;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      Period period0 = new Period(long0, (Chronology) gregorianChronology0);
      assertNotNull(period0);
      
      Hours hours0 = period0.toStandardHours();
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
  }

  @Test
  public void test64()  throws Throwable  {
      int int0 = 3074;
      ReadableInstant readableInstant0 = null;
      Duration duration0 = Duration.standardMinutes((long) int0);
      assertNotNull(duration0);
      assertEquals(184440000L, duration0.getMillis());
      
      Period period0 = duration0.toPeriodFrom(readableInstant0);
      assertNotNull(period0);
      assertEquals(184440000L, duration0.getMillis());
  }

  @Test
  public void test65()  throws Throwable  {
      int int0 = (-1807);
      Period period0 = Period.minutes(int0);
      assertNotNull(period0);
  }
}
