/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:36:56 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.LocalDateTime;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class DateTimeZoneEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      int int0 = (-21);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals("-21:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-21:00", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = fixedDateTimeZone0.equals(object0);
      assertEquals("-21:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-21:00", fixedDateTimeZone0.getID());
      assertFalse(boolean0);
      
      long long0 = fixedDateTimeZone0.adjustOffset((long) int0, boolean0);
      assertEquals("-21:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-21:00", fixedDateTimeZone0.getID());
      assertEquals((-21L), long0);
  }

  @Test
  public void test01()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = 9223372036854775807L;
      boolean boolean0 = true;
      long long1 = cachedDateTimeZone0.adjustOffset(long0, boolean0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(9223372036854775807L, long1);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "UTC";
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      int int0 = (-4657);
      LocalDateTime localDateTime0 = new LocalDateTime((long) int0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      boolean boolean0 = fixedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      long long0 = 325L;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      DateTimeZone dateTimeZone0 = null;
      long long1 = cachedDateTimeZone0.getMillisKeepLocal(dateTimeZone0, long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(325L, long1);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "Asia/Ho_Chi_Minh";
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Asia/Ho_Chi_Minh", cachedDateTimeZone0.toString());
      assertEquals("Asia/Ho_Chi_Minh", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = (-3L);
      long long1 = cachedDateTimeZone0.convertUTCToLocal(long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Asia/Ho_Chi_Minh", cachedDateTimeZone0.toString());
      assertEquals("Asia/Ho_Chi_Minh", cachedDateTimeZone0.getID());
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(25199997L, long1);
      
      boolean boolean0 = true;
      long long2 = cachedDateTimeZone0.convertLocalToUTC(long1, boolean0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Asia/Ho_Chi_Minh", cachedDateTimeZone0.toString());
      assertEquals("Asia/Ho_Chi_Minh", cachedDateTimeZone0.getID());
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      assertTrue(long0 == long2);
      assertFalse(long0 == long1);
      assertEquals((-3L), long2);
  }

  @Test
  public void test05()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      DateTime dateTime0 = new DateTime((Chronology) iSOChronology0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      int int0 = 61;
      // Undeclared exception!
      try {
        DateTime dateTime1 = dateTime0.withDate(int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 61 for monthOfYear must be in the range [1,12]
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      //  // Unstable assertion: assertEquals(0, mutableDateTime0.getRoundingMode());
      //  // Unstable assertion: assertEquals(1392409281320L, mutableDateTime0.getMillis());
      //  // Unstable assertion: assertNotNull(mutableDateTime0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)mutableDateTime0.getZone();
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.getID());
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals(0, mutableDateTime0.getRoundingMode());
      //  // Unstable assertion: assertEquals(1392409281320L, mutableDateTime0.getMillis());
      //  // Unstable assertion: assertNotNull(cachedDateTimeZone0);
      
      long long0 = (-9223372036854775786L);
      // Undeclared exception!
      try {
        long long1 = cachedDateTimeZone0.convertUTCToLocal(long0);
       //  fail("Expecting exception: ArithmeticException");
       // Unstable assertion
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "Asia/Tokyo";
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("Asia/Tokyo", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals("Asia/Tokyo", cachedDateTimeZone0.getID());
      //  // Unstable assertion: assertNotNull(cachedDateTimeZone0);
      
      long long0 = 9223372036854775807L;
      int int0 = cachedDateTimeZone0.getOffsetFromLocal(long0);
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("Asia/Tokyo", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals("Asia/Tokyo", cachedDateTimeZone0.getID());
      //  // Unstable assertion: assertEquals(32400000, int0);
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 0;
      String string0 = "America/Phoenix";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals("java.util.SimpleTimeZone[id=America/Phoenix,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("America/Phoenix", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("America/Phoenix", cachedDateTimeZone0.toString());
      assertEquals("America/Phoenix", cachedDateTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=America/Phoenix,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("America/Phoenix", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(cachedDateTimeZone0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("America/Phoenix", cachedDateTimeZone0.toString());
      assertEquals("America/Phoenix", cachedDateTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=America/Phoenix,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("America/Phoenix", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      boolean boolean0 = cachedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("America/Phoenix", cachedDateTimeZone0.toString());
      assertEquals("America/Phoenix", cachedDateTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=America/Phoenix,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("America/Phoenix", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(4, localDateTime0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "Asia/Tokyo";
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals("Asia/Tokyo", cachedDateTimeZone0.getID());
      assertEquals("Asia/Tokyo", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = (-9223372036854775786L);
      int int0 = cachedDateTimeZone0.getOffsetFromLocal(long0);
      assertEquals("Asia/Tokyo", cachedDateTimeZone0.getID());
      assertEquals("Asia/Tokyo", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(32400000, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 23;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals("+23:00", fixedDateTimeZone0.getID());
      assertEquals("+23:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      boolean boolean0 = fixedDateTimeZone0.isStandardOffset((long) int0);
      assertEquals("+23:00", fixedDateTimeZone0.getID());
      assertEquals("+23:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertTrue(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      int int0 = mutableDateTime0.getYear();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(2014, int0);
      
      boolean boolean0 = cachedDateTimeZone0.isStandardOffset((long) int0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertFalse(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      int int0 = cachedDateTimeZone0.getOffset((ReadableInstant) mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(0, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "AST";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("AST", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertEquals("AST", zoneInfo0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = 0L;
      String string1 = cachedDateTimeZone0.getName(long0);
      assertEquals("AST", zoneInfo0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-10:00", string1);
  }

  @Test
  public void test14()  throws Throwable  {
      long long0 = (-2584L);
      int int0 = (-7);
      int int1 = 59;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int1);
      assertEquals("-07:59", fixedDateTimeZone0.toString());
      assertEquals("-07:59", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(fixedDateTimeZone0);
      
      int int2 = fixedDateTimeZone0.getOffset(long0);
      assertEquals("-07:59", fixedDateTimeZone0.toString());
      assertEquals("-07:59", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals((-28740000), int2);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = fixedDateTimeZone0.getName((long) int2, locale0);
      assertEquals("-07:59", fixedDateTimeZone0.toString());
      assertEquals("-07:59", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertNotNull(string0);
      assertEquals("-07:59", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = 0L;
      Locale locale0 = Locale.ITALY;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = fixedDateTimeZone0.getName(long0, locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(string0);
      assertEquals("Tempo universale coordinato", string0);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "AST";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("AST", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("AST", zoneInfo0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = 0L;
      Locale locale0 = Locale.ITALY;
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertNotNull(locale0);
      
      String string1 = cachedDateTimeZone0.getShortName(long0, locale0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("AST", zoneInfo0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-10:00", string1);
  }

  @Test
  public void test17()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      ReadableInstant readableInstant0 = null;
      int int0 = fixedDateTimeZone0.getOffset(readableInstant0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(0, int0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = fixedDateTimeZone0.getShortName((long) int0, locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(string0);
      assertEquals("UTC", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = (-86399999);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("-23:59:59.999", fixedDateTimeZone0.toString());
      assertEquals("-23:59:59.999", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      String string0 = fixedDateTimeZone0.getShortName((long) int0);
      assertEquals("-23:59:59.999", fixedDateTimeZone0.toString());
      assertEquals("-23:59:59.999", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(string0);
      assertEquals("-23:59:59.999", string0);
      
      int int1 = 0;
      int int2 = 59;
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int1, int2);
      assertEquals("+00:59", fixedDateTimeZone1.toString());
      assertEquals("+00:59", fixedDateTimeZone1.getID());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertNotNull(fixedDateTimeZone1);
      
      FixedDateTimeZone fixedDateTimeZone2 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals("-23:59:59.999", fixedDateTimeZone2.toString());
      assertEquals("-23:59:59.999", fixedDateTimeZone2.getID());
      assertEquals(true, fixedDateTimeZone2.isFixed());
      assertEquals("-23:59:59.999", fixedDateTimeZone0.toString());
      assertEquals("-23:59:59.999", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotSame(fixedDateTimeZone2, fixedDateTimeZone1);
      assertSame(fixedDateTimeZone2, fixedDateTimeZone0);
      assertNotSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone2);
      assertFalse(fixedDateTimeZone2.equals((Object)fixedDateTimeZone1));
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertNotNull(fixedDateTimeZone2);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)fixedDateTimeZone1.toTimeZone();
      assertEquals("+00:59", fixedDateTimeZone1.toString());
      assertEquals("+00:59", fixedDateTimeZone1.getID());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("GMT+00:59", zoneInfo0.getID());
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone2);
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone2));
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertNotNull(zoneInfo0);
      
      FixedDateTimeZone fixedDateTimeZone3 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertEquals("+00:59", fixedDateTimeZone1.toString());
      assertEquals("+00:59", fixedDateTimeZone1.getID());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("GMT+00:59", zoneInfo0.getID());
      assertEquals("+00:59", fixedDateTimeZone3.toString());
      assertEquals("+00:59", fixedDateTimeZone3.getID());
      assertEquals(true, fixedDateTimeZone3.isFixed());
      assertSame(fixedDateTimeZone1, fixedDateTimeZone3);
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone2);
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotSame(fixedDateTimeZone3, fixedDateTimeZone2);
      assertSame(fixedDateTimeZone3, fixedDateTimeZone1);
      assertNotSame(fixedDateTimeZone3, fixedDateTimeZone0);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone2));
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(fixedDateTimeZone3.equals((Object)fixedDateTimeZone2));
      assertFalse(fixedDateTimeZone3.equals((Object)fixedDateTimeZone0));
      assertNotNull(fixedDateTimeZone3);
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 12825000;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+03:33:45", fixedDateTimeZone0.toString());
      assertEquals("+03:33:45", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
  }

  @Test
  public void test20()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("GMT", zoneInfo0.getID());
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotNull(fixedDateTimeZone1);
  }

  @Test
  public void test21()  throws Throwable  {
      NameProvider nameProvider0 = null;
      DateTimeZone.setNameProvider(nameProvider0);
  }

  @Test
  public void test22()  throws Throwable  {
      DefaultNameProvider defaultNameProvider0 = (DefaultNameProvider)DateTimeZone.getNameProvider();
      assertNotNull(defaultNameProvider0);
      
      DateTimeZone.setNameProvider((NameProvider) defaultNameProvider0);
  }

  @Test
  public void test23()  throws Throwable  {
      Provider provider0 = null;
      DateTimeZone.setProvider(provider0);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = (-7);
      int int1 = 59;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int1);
      assertEquals("-07:59", fixedDateTimeZone0.toString());
      assertEquals("-07:59", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(fixedDateTimeZone0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)fixedDateTimeZone0.toTimeZone();
      assertEquals("GMT-07:59", zoneInfo0.getID());
      assertEquals("-07:59", fixedDateTimeZone0.toString());
      assertEquals("-07:59", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(zoneInfo0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertEquals("GMT-07:59", zoneInfo0.getID());
      assertEquals("-07:59", fixedDateTimeZone0.toString());
      assertEquals("-07:59", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("-07:59", fixedDateTimeZone1.getID());
      assertEquals("-07:59", fixedDateTimeZone1.toString());
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(fixedDateTimeZone1);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = (-21);
      String string0 = "Po2";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=Po2,offset=-21,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Po2", simpleTimeZone0.getID());
      assertEquals(-21, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      // Undeclared exception!
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'Po2' is not recognised
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "UTC";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("UTC", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", zoneInfo0.getID());
      assertNotNull(fixedDateTimeZone0);
  }

  @Test
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 690562326;
      // Undeclared exception!
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: 690562326
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = (-292269337);
      // Undeclared exception!
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: -292269337
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = 23;
      int int1 = 364;
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 364
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = 3274;
      String string0 = "Asia/Tokyo";
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Asia/Tokyo", cachedDateTimeZone0.getID());
      assertEquals("Asia/Tokyo", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      int int1 = cachedDateTimeZone0.getOffsetFromLocal((long) int0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Asia/Tokyo", cachedDateTimeZone0.getID());
      assertEquals("Asia/Tokyo", cachedDateTimeZone0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(32400000, int1);
      
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 3274
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = (-86399999);
      int int1 = 0;
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -86399999
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = 23;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+23:00", fixedDateTimeZone0.toString());
      assertEquals("+23:00", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      Locale locale0 = null;
      String string0 = fixedDateTimeZone0.getShortName((long) int0, locale0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+23:00", fixedDateTimeZone0.toString());
      assertEquals("+23:00", fixedDateTimeZone0.getID());
      assertNotNull(string0);
      assertEquals("+23:00", string0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals("+23:00", fixedDateTimeZone1.getID());
      assertEquals("+23:00", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+23:00", fixedDateTimeZone0.toString());
      assertEquals("+23:00", fixedDateTimeZone0.getID());
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertNotNull(fixedDateTimeZone1);
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
  }

  @Test
  public void test37()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      DateTimeZone.setDefault((DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
  }

  @Test
  public void test38()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try {
        DateTimeZone.setDefault(dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)cachedDateTimeZone0.toTimeZone();
      assertEquals("Europe/London", zoneInfo0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(zoneInfo0);
  }

  @Test
  public void test40()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertEquals(578, set0.size());
      assertEquals(false, set0.isEmpty());
      assertNotNull(set0);
  }

  @Test
  public void test41()  throws Throwable  {
      int int0 = (-1923);
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -1923
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      String string0 = fixedDateTimeZone0.toString();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(string0);
      assertEquals("UTC", string0);
  }

  @Test
  public void test43()  throws Throwable  {
      ZoneInfoProvider zoneInfoProvider0 = (ZoneInfoProvider)DateTimeZone.getProvider();
      assertNotNull(zoneInfoProvider0);
  }

  @Test
  public void test44()  throws Throwable  {
      String string0 = "Asia/Ho_Chi_Minh";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("Asia/Ho_Chi_Minh", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Asia/Ho_Chi_Minh", cachedDateTimeZone0.toString());
      assertEquals("Asia/Ho_Chi_Minh", cachedDateTimeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", zoneInfo0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      Object object0 = cachedDateTimeZone0.writeReplace();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Asia/Ho_Chi_Minh", cachedDateTimeZone0.toString());
      assertEquals("Asia/Ho_Chi_Minh", cachedDateTimeZone0.getID());
      assertEquals("Asia/Ho_Chi_Minh", zoneInfo0.getID());
      assertNotNull(object0);
  }
}
