/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:59:57 GMT 2014
 */

package org.joda.time.chrono;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class GJChronologyEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gJChronology0);
      assertNotNull(lenientChronology0);
      
      int int0 = 65533;
      int int1 = 0;
      DateMidnight dateMidnight0 = new DateMidnight(int1, int0, int1, (Chronology) lenientChronology0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(110165270400000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(int1);
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(110165270400000L, dateMidnight0.getMillis());
      assertEquals((-62167651125000L), dateMidnight1.getMillis());
      assertNotNull(dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      
      Months months0 = Months.monthsBetween((ReadableInstant) dateMidnight1, (ReadableInstant) dateMidnight1);
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, months0.size());
      assertEquals(110165270400000L, dateMidnight0.getMillis());
      assertEquals((-62167651125000L), dateMidnight1.getMillis());
      assertNotNull(months0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
  }

  @Test
  public void test01()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gJChronology0);
      assertNotNull(lenientChronology0);
      
      int int0 = 65533;
      int int1 = 0;
      DateMidnight dateMidnight0 = new DateMidnight(int1, int0, int1, (Chronology) lenientChronology0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(110165270400000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(int1);
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-62167651125000L), dateMidnight1.getMillis());
      assertEquals(110165270400000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight0, dateMidnight1);
      
      Months months0 = Months.monthsBetween((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight1);
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, months0.size());
      assertEquals((-62167651125000L), dateMidnight1.getMillis());
      assertEquals(110165270400000L, dateMidnight0.getMillis());
      assertNotNull(months0);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight0, dateMidnight1);
  }

  @Test
  public void test02()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gJChronology0);
      assertNotNull(lenientChronology0);
      
      int int0 = 65533;
      int int1 = 4;
      DateMidnight dateMidnight0 = new DateMidnight(int1, int0, int1, (Chronology) lenientChronology0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(110291846400000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
  }

  @Test
  public void test03()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      byte byte0 = (byte)0;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(gJChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) byte0, (Chronology) gJChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(mutablePeriod0);
      
      long long0 = (-12219292800000L);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, long0, (long) byte0);
      assertArrayEquals(new int[] {387, 2, 3, 6, 1, 1, 15, 0}, intArray0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(intArray0);
  }

  @Test
  public void test04()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) gJChronology0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int0 = (-2226);
      YearMonthDay yearMonthDay1 = yearMonthDay0.withFieldAdded(durationFieldType0, int0);
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertEquals(3, yearMonthDay1.size());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay1);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay0, yearMonthDay1);
  }

  @Test
  public void test05()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) gJChronology0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      int int0 = (-28);
      YearMonthDay yearMonthDay1 = yearMonthDay0.withYear(int0);
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertEquals(3, yearMonthDay1.size());
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay1);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay0, yearMonthDay1);
  }

  @Test
  public void test06()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) gJChronology0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      long long0 = (-12219292799992L);
      long long1 = gJChronology0.set((ReadablePartial) yearMonthDay0, long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392422325008L, long1);
  }

  @Test
  public void test07()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) gJChronology0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int0 = (-1034);
      YearMonthDay yearMonthDay1 = yearMonthDay0.withFieldAdded(durationFieldType0, int0);
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertEquals(3, yearMonthDay0.size());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertEquals(3, yearMonthDay1.size());
      assertNotNull(yearMonthDay1);
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      
      Months months0 = Months.ELEVEN;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      YearMonthDay yearMonthDay2 = yearMonthDay1.withPeriodAdded((ReadablePeriod) months0, int0);
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay2));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay2));
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay2.equals((Object)yearMonthDay1));
      assertFalse(yearMonthDay2.equals((Object)yearMonthDay0));
      assertEquals(3, yearMonthDay0.size());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertEquals(3, yearMonthDay1.size());
      assertEquals(1, months0.size());
      assertEquals(3, yearMonthDay2.size());
      assertNotNull(yearMonthDay2);
      assertNotSame(yearMonthDay0, yearMonthDay2);
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertNotSame(yearMonthDay1, yearMonthDay2);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay2, yearMonthDay1);
      assertNotSame(yearMonthDay2, yearMonthDay0);
  }

  @Test
  public void test08()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) gJChronology0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      int int0 = (-28);
      Period period0 = new Period((long) int0, (Chronology) gJChronology0);
      assertNotNull(period0);
      
      YearMonthDay yearMonthDay1 = yearMonthDay0.minus((ReadablePeriod) period0);
      assertTrue(yearMonthDay0.equals((Object)yearMonthDay1));
      assertTrue(yearMonthDay1.equals((Object)yearMonthDay0));
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, yearMonthDay1.size());
      assertNotNull(yearMonthDay1);
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertNotSame(yearMonthDay1, yearMonthDay0);
  }

  @Test
  public void test09()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      gJChronology0.assemble(assembledChronology_Fields0);
  }

  @Test
  public void test10()  throws Throwable  {
      long long0 = 471L;
      DateTimeZone dateTimeZone0 = null;
      DateMidnight dateMidnight0 = new DateMidnight(long0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = 21;
      DateMidnight dateMidnight1 = dateMidnight0.minusYears(int0);
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals((-662688000000L), dateMidnight1.getMillis());
      assertNotNull(dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight1);
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals((-662688000000L), dateMidnight1.getMillis());
      assertNotNull(gJChronology0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      
      String string0 = gJChronology0.toString();
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals((-662688000000L), dateMidnight1.getMillis());
      assertNotNull(string0);
      assertEquals("GJChronology[Europe/London,cutover=1949-01-01]", string0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
  }

  @Test
  public void test11()  throws Throwable  {
      long long0 = (-1L);
      DateTimeZone dateTimeZone0 = null;
      DateMidnight dateMidnight0 = new DateMidnight(long0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(gJChronology0);
      
      String string0 = gJChronology0.toString();
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(string0);
      assertEquals("GJChronology[Europe/London,cutover=1969-12-31T23:00:00.000Z]", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      long long0 = 1053L;
      Instant instant0 = new Instant(long0);
      assertEquals(1053L, instant0.getMillis());
      assertNotNull(instant0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) instant0);
      assertEquals(1053L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1053L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)mutableDateTime0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1053L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1053L, mutableDateTime0.getMillis());
      assertNotNull(fixedDateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1053L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1053L, mutableDateTime0.getMillis());
      assertNotNull(gJChronology0);
      
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1053L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1053L, mutableDateTime0.getMillis());
      assertNotNull(gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      
      boolean boolean0 = gJChronology0.equals((Object) gJChronology1);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1053L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1053L, mutableDateTime0.getMillis());
      assertFalse(boolean0);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 1;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.toString());
      assertNotNull(gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      
      boolean boolean0 = gJChronology1.equals((Object) gJChronology0);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.toString());
      assertFalse(boolean0);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
  }

  @Test
  public void test14()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      boolean boolean0 = gJChronology0.equals((Object) gJChronology0);
      assertTrue(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      long long0 = (-1L);
      DateMidnight dateMidnight0 = new DateMidnight(long0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      long long1 = gJChronology0.julianToGregorianByWeekyear(long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals((-1209600001L), long1);
      
      Duration duration0 = Duration.standardHours(long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals((-4354560003600000L), duration0.getMillis());
      assertNotNull(duration0);
      
      Period period0 = new Period((ReadableInstant) dateMidnight0, (ReadableDuration) duration0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals((-4354560003600000L), duration0.getMillis());
      assertNotNull(period0);
      
      boolean boolean0 = gJChronology0.equals((Object) period0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals((-4354560003600000L), duration0.getMillis());
      assertFalse(boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 1;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.getDateTimeMillis(int0, int0, int0, int0, int0, int0, int0);
      assertEquals((-62135765863999L), long0);
  }

  @Test
  public void test17()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = 2;
      int int1 = 1382;
      try {
        long long0 = gJChronology0.getDateTimeMillis(int0, int0, int0, int0, int0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1382 for millisOfSecond must be in the range [0,999]
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 1;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int1 = 0;
      try {
        long long0 = gJChronology0.getDateTimeMillis(int1, int1, int1, int0, int1, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) gJChronology0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      Interval interval0 = yearMonthDay0.toInterval();
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392422400000L, interval0.getEndMillis());
      assertEquals(1392336000000L, interval0.getStartMillis());
      assertNotNull(interval0);
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = 1;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.getDateTimeMillis(int0, int0, int0, int0);
      assertEquals((-62135769524999L), long0);
  }

  @Test
  public void test21()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) gJChronology0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      LocalDate localDate0 = yearMonthDay0.toLocalDate();
      assertEquals(3, localDate0.size());
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(localDate0);
  }

  @Test
  public void test22()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertNotNull(gJChronology0);
      
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone(dateTimeZone0);
      assertNotNull(gJChronology1);
      assertSame(gJChronology0, gJChronology1);
      assertSame(gJChronology1, gJChronology0);
  }

  @Test
  public void test23()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      String string0 = gJChronology0.toString();
      assertNotNull(string0);
      assertEquals("GJChronology[UTC]", string0);
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "I";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = 0L;
      int int0 = 91;
      // Undeclared exception!
      try {
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, long0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 91
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      //  // Unstable assertion: assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = null;
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gJChronology0);
      //  // Unstable assertion: assertNotNull(lenientChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)lenientChronology0.getZone();
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.getID());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertNotNull(cachedDateTimeZone0);
      
      int int0 = 65533;
      int int1 = 7;
      DateMidnight dateMidnight0 = new DateMidnight(int0, int0, int1, (Chronology) lenientChronology0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(2178187632000000L, dateMidnight0.getMillis());
      //  // Unstable assertion: assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(int1);
      //  // Unstable assertion: assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      //  // Unstable assertion: assertEquals(2178187632000000L, dateMidnight0.getMillis());
      //  // Unstable assertion: assertEquals((-61945603125000L), dateMidnight1.getMillis());
      //  // Unstable assertion: assertNotNull(dateMidnight1);
      //  // Unstable assertion: assertNotSame(dateMidnight0, dateMidnight1);
      //  // Unstable assertion: assertNotSame(dateMidnight1, dateMidnight0);
      
      DateMidnight dateMidnight2 = dateMidnight1.withZoneRetainFields(dateTimeZone0);
      //  // Unstable assertion: assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      //  // Unstable assertion: assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      //  // Unstable assertion: assertTrue(dateMidnight2.equals((Object)dateMidnight1));
      //  // Unstable assertion: assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      //  // Unstable assertion: assertTrue(dateMidnight1.equals((Object)dateMidnight2));
      //  // Unstable assertion: assertEquals(2178187632000000L, dateMidnight0.getMillis());
      //  // Unstable assertion: assertEquals((-61945603125000L), dateMidnight2.getMillis());
      //  // Unstable assertion: assertEquals((-61945603125000L), dateMidnight1.getMillis());
      //  // Unstable assertion: assertNotNull(dateMidnight2);
      //  // Unstable assertion: assertNotSame(dateMidnight0, dateMidnight2);
      //  // Unstable assertion: assertNotSame(dateMidnight0, dateMidnight1);
      //  // Unstable assertion: assertNotSame(dateMidnight2, dateMidnight0);
      //  // Unstable assertion: assertNotSame(dateMidnight2, dateMidnight1);
      //  // Unstable assertion: assertNotSame(dateMidnight1, dateMidnight0);
      //  // Unstable assertion: assertNotSame(dateMidnight1, dateMidnight2);
      
      Months months0 = Months.ELEVEN;
      //  // Unstable assertion: assertEquals(1, months0.size());
      //  // Unstable assertion: assertNotNull(months0);
      
      Months months1 = months0.multipliedBy(int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(months0.equals((Object)months1));
      //  // Unstable assertion: assertFalse(months1.equals((Object)months0));
      //  // Unstable assertion: assertEquals(1, months0.size());
      //  // Unstable assertion: assertEquals(1, months1.size());
      //  // Unstable assertion: assertNotNull(months1);
      //  // Unstable assertion: assertNotSame(months0, months1);
      //  // Unstable assertion: assertNotSame(months1, months0);
      
      DateMidnight dateMidnight3 = dateMidnight2.minus((ReadablePeriod) months1);
      //  // Unstable assertion: assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      //  // Unstable assertion: assertFalse(dateMidnight0.equals((Object)dateMidnight3));
      //  // Unstable assertion: assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(dateMidnight3.equals((Object)dateMidnight1));
      //  // Unstable assertion: assertFalse(dateMidnight3.equals((Object)dateMidnight0));
      //  // Unstable assertion: assertFalse(dateMidnight3.equals((Object)dateMidnight2));
      //  // Unstable assertion: assertFalse(months0.equals((Object)months1));
      //  // Unstable assertion: assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      //  // Unstable assertion: assertTrue(dateMidnight2.equals((Object)dateMidnight1));
      //  // Unstable assertion: assertFalse(dateMidnight2.equals((Object)dateMidnight3));
      //  // Unstable assertion: assertFalse(months1.equals((Object)months0));
      //  // Unstable assertion: assertFalse(dateMidnight1.equals((Object)dateMidnight3));
      //  // Unstable assertion: assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      //  // Unstable assertion: assertTrue(dateMidnight1.equals((Object)dateMidnight2));
      //  // Unstable assertion: assertEquals(2178187632000000L, dateMidnight0.getMillis());
      //  // Unstable assertion: assertEquals((-1957671071925000L), dateMidnight3.getMillis());
      //  // Unstable assertion: assertEquals(1, months0.size());
      //  // Unstable assertion: assertEquals((-61945603125000L), dateMidnight2.getMillis());
      //  // Unstable assertion: assertEquals(1, months1.size());
      //  // Unstable assertion: assertEquals((-61945603125000L), dateMidnight1.getMillis());
      //  // Unstable assertion: assertNotNull(dateMidnight3);
      //  // Unstable assertion: assertNotSame(dateMidnight0, dateMidnight2);
      //  // Unstable assertion: assertNotSame(dateMidnight0, dateMidnight3);
      //  // Unstable assertion: assertNotSame(dateMidnight0, dateMidnight1);
      //  // Unstable assertion: assertNotSame(dateMidnight3, dateMidnight1);
      //  // Unstable assertion: assertNotSame(dateMidnight3, dateMidnight0);
      //  // Unstable assertion: assertNotSame(dateMidnight3, dateMidnight2);
      //  // Unstable assertion: assertNotSame(months0, months1);
      //  // Unstable assertion: assertNotSame(dateMidnight2, dateMidnight0);
      //  // Unstable assertion: assertNotSame(dateMidnight2, dateMidnight1);
      //  // Unstable assertion: assertNotSame(dateMidnight2, dateMidnight3);
      //  // Unstable assertion: assertNotSame(months1, months0);
      //  // Unstable assertion: assertNotSame(dateMidnight1, dateMidnight3);
      //  // Unstable assertion: assertNotSame(dateMidnight1, dateMidnight0);
      //  // Unstable assertion: assertNotSame(dateMidnight1, dateMidnight2);
      
      // Undeclared exception!
      try {
        GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (ReadableInstant) dateMidnight3);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Cutover too early. Must be on or after 0001-01-01.
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 3065;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:03.065", fixedDateTimeZone0.toString());
      assertEquals("+00:00:03.065", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = (-12219292800000L);
      // Undeclared exception!
      try {
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, long0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 3065
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      //  // Unstable assertion: assertNotNull(gJChronology0);
      
      int int0 = gJChronology0.hashCode();
      //  // Unstable assertion: assertEquals(634970638, int0);
  }

  @Test
  public void test28()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) gJChronology0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      int int0 = (-2226);
      YearMonthDay yearMonthDay1 = yearMonthDay0.minusDays(int0);
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertEquals(3, yearMonthDay1.size());
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay1);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay0, yearMonthDay1);
  }
}
