/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:25:14 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.YearMonth;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

 
public class LocalDateTimeEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      long long0 = 0L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      String string0 = null;
      String string1 = "centuryOfEra";
      Locale locale0 = Locale.forLanguageTag(string1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string2 = localDateTime0.toString(string0, locale0);
      assertEquals("1970-01-01T01:00:00.000", string2);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(4, localDateTime0.size());
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
  }

  @Test
  public void test001()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = 1440L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(localDateTime0);
      
      String string0 = cachedDateTimeZone0.getName(long0);
      assertEquals("British Summer Time", string0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(string0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      try {
        String string1 = localDateTime0.toString(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
      }
  }

  @Test
  public void test002()  throws Throwable  {
      Object object0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime(object0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      String string0 = "r-mR(.jmu]X\"{";
      // Undeclared exception!
      try {
        String string1 = localDateTime0.toString(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
      }
  }

  @Test
  public void test003()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try {
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
      }
  }

  @Test
  public void test004()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(int0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
  }

  @Test
  public void test005()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 3;
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(int0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test
  public void test006() {}
//   @Test
//   public void test006()  throws Throwable  {
//       int int0 = 1571;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1571,MONTH=1571,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1571,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-8323344000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1706,MONTH=2,WEEK_OF_YEAR=14,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=90,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(4, localDateTime0.size());
//       assertNotNull(localDateTime0);
//       
//       int int1 = 0;
//       LocalDateTime localDateTime1 = localDateTime0.minusSeconds(int1);
//       assertEquals(4, localDateTime1.size());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-8323344000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1706,MONTH=2,WEEK_OF_YEAR=14,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=90,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(4, localDateTime0.size());
//       assertSame(localDateTime1, localDateTime0);
//       assertSame(localDateTime0, localDateTime1);
//       assertNotNull(localDateTime1);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//   }

  @Test
  public void test007()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) buddhistChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 70;
      LocalDateTime localDateTime1 = localDateTime0.minusSeconds(int0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test
  public void test008()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) buddhistChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes(int0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
  }

  @Test
  public void test009()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) buddhistChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 70;
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes(int0);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test
  public void test010()  throws Throwable  {
      int int0 = 0;
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.minusHours(int0);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertSame(localDateTime1, localDateTime0);
      assertSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
  }

  @Test
  public void test011()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = localDateTime0.getCenturyOfEra();
      assertEquals(20, int0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusHours(int0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test
  public void test012()  throws Throwable  {
      Object object0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime(object0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.minusDays(int0);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertSame(localDateTime1, localDateTime0);
      assertSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
  }

  @Test
  public void test013()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 49;
      LocalDateTime localDateTime1 = localDateTime0.minusDays(int0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test
  public void test014()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.minusWeeks(int0);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertSame(localDateTime1, localDateTime0);
      assertSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
  }

  @Test
  public void test015()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = (-1);
      LocalDateTime localDateTime1 = localDateTime0.minusWeeks(int0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test
  public void test016()  throws Throwable  {
      int int0 = 0;
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.minusMonths(int0);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertSame(localDateTime1, localDateTime0);
      assertSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
  }

  @Test
  public void test017()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) buddhistChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 70;
      LocalDateTime localDateTime1 = localDateTime0.minusMonths(int0);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test
  public void test018()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.minusYears(int0);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertSame(localDateTime1, localDateTime0);
      assertSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
  }

  @Test
  public void test019()  throws Throwable  {
      long long0 = 3679L;
      DateTimeZone dateTimeZone0 = null;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime(long0, (Chronology) ethiopicChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 12;
      LocalDateTime localDateTime1 = localDateTime0.minusYears(int0);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test
  public void test020()  throws Throwable  {
      int int0 = 0;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusMillis(int0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
  }

  @Test
  public void test021()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 3;
      LocalDateTime localDateTime1 = localDateTime0.plusMillis(int0);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test
  public void test022()  throws Throwable  {
      long long0 = 86399999L;
      YearMonth yearMonth0 = new YearMonth(long0);
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      
      ISOChronology iSOChronology0 = (ISOChronology)yearMonth0.getChronology();
      assertEquals(2, yearMonth0.size());
      assertNotNull(iSOChronology0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) iSOChronology0);
      assertEquals(2, yearMonth0.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(int0);
      assertEquals(2, yearMonth0.size());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
  }

  @Test
  public void test023()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(int0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
  }

  @Test
  public void test024()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 1900;
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(int0);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test
  public void test025()  throws Throwable  {
      int int0 = 0;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusHours(int0);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertSame(localDateTime1, localDateTime0);
      assertSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
  }

  @Test
  public void test026()  throws Throwable  {
      int int0 = 672;
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
      assertEquals(4, localDateTime0.size());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusHours(int0);
      assertEquals(4, localDateTime0.size());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(4, localDateTime1.size());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test
  public void test027()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.plusDays(int0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
  }

  @Test
  public void test028() {}
//   @Test
//   public void test028()  throws Throwable  {
//       int int0 = 1571;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1571,MONTH=1571,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1571,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(mockGregorianCalendar0);
//       
//       LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertEquals(4, localDateTime0.size());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-8323344000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1706,MONTH=2,WEEK_OF_YEAR=14,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=90,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertNotNull(localDateTime0);
//       
//       LocalDateTime localDateTime1 = localDateTime0.plusDays(int0);
//       assertEquals(4, localDateTime0.size());
//       assertEquals(4, localDateTime1.size());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-8323344000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1706,MONTH=2,WEEK_OF_YEAR=14,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=90,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertNotSame(localDateTime0, localDateTime1);
//       assertNotSame(localDateTime1, localDateTime0);
//       assertNotNull(localDateTime1);
//       assertFalse(localDateTime0.equals((Object)localDateTime1));
//       assertFalse(localDateTime1.equals((Object)localDateTime0));
//   }

  @Test
  public void test029()  throws Throwable  {
      long long0 = 1000000000000000L;
      MockDate mockDate0 = new MockDate(long0);
      assertEquals("Fri Sep 27 01:46:40 GMT 33658", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertEquals("Fri Sep 27 01:46:40 GMT 33658", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(int0);
      assertEquals(4, localDateTime1.size());
      assertEquals("Fri Sep 27 01:46:40 GMT 33658", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertSame(localDateTime1, localDateTime0);
      assertSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
  }

  @Test
  public void test030()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 49;
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(int0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test
  public void test031()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.plusMonths(int0);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertSame(localDateTime1, localDateTime0);
      assertSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
  }

  @Test
  public void test032()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 3;
      LocalDateTime localDateTime1 = localDateTime0.plusMonths(int0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test
  public void test033()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gJChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.plusYears(int0);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertSame(localDateTime1, localDateTime0);
      assertSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
  }

  @Test
  public void test034() {}
//   @Test
//   public void test034()  throws Throwable  {
//       int int0 = (-557);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-557,MONTH=-557,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-557,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(mockGregorianCalendar0);
//       
//       LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertEquals(4, localDateTime0.size());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-81257990400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=606,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=21,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(localDateTime0);
//       
//       LocalDateTime localDateTime1 = localDateTime0.plusYears(int0);
//       assertEquals(4, localDateTime1.size());
//       assertEquals(4, localDateTime0.size());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-81257990400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=606,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=21,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotSame(localDateTime1, localDateTime0);
//       assertNotSame(localDateTime0, localDateTime1);
//       assertNotNull(localDateTime1);
//       assertFalse(localDateTime1.equals((Object)localDateTime0));
//       assertFalse(localDateTime0.equals((Object)localDateTime1));
//   }

  @Test
  public void test035()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) buddhistChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      Days days0 = Days.days(int0);
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      LocalDateTime localDateTime1 = localDateTime0.withPeriodAdded((ReadablePeriod) days0, int0);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertEquals(1, days0.size());
      assertSame(localDateTime1, localDateTime0);
      assertSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
  }

  @Test
  public void test036()  throws Throwable  {
      int int0 = 12;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.012", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.012", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.012", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.012", fixedDateTimeZone0.toString());
      assertNotNull(iSOChronology0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals(4, localDateTime0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.012", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.012", fixedDateTimeZone0.toString());
      assertNotNull(localDateTime0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int0, (Chronology) iSOChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.012", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.012", fixedDateTimeZone0.toString());
      assertNotNull(mutablePeriod0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((long) int0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      DateTime dateTime0 = yearMonthDay0.toDateTimeAtMidnight((DateTimeZone) fixedDateTimeZone0);
      assertEquals((-12L), dateTime0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.012", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.012", fixedDateTimeZone0.toString());
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(dateTime0);
      
      Duration duration0 = mutablePeriod0.toDurationTo((ReadableInstant) dateTime0);
      assertEquals(0L, duration0.getMillis());
      assertEquals((-12L), dateTime0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.012", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.012", fixedDateTimeZone0.toString());
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(duration0);
      
      int int1 = 0;
      LocalDateTime localDateTime1 = localDateTime0.withDurationAdded((ReadableDuration) duration0, int1);
      assertEquals(0L, duration0.getMillis());
      assertEquals((-12L), dateTime0.getMillis());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.012", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.012", fixedDateTimeZone0.toString());
      assertEquals(3, yearMonthDay0.size());
      assertSame(localDateTime1, localDateTime0);
      assertSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test037()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      LocalDateTime localDateTime1 = localDateTime0.withFieldAdded(durationFieldType0, int0);
      assertEquals(4, localDateTime1.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals(4, localDateTime0.size());
      assertSame(localDateTime1, localDateTime0);
      assertSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
  }

  @Test
  public void test038()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 49;
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        LocalDateTime localDateTime1 = localDateTime0.withFieldAdded(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test
  public void test039()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 3;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      LocalDateTime localDateTime1 = localDateTime0.withFieldAdded(durationFieldType0, int0);
      assertEquals(4, localDateTime1.size());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test
  public void test040()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 5;
      // Undeclared exception!
      try {
        LocalDateTime localDateTime1 = localDateTime0.withField(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test
  public void test041() {}
//   @Test
//   public void test041()  throws Throwable  {
//       int int0 = (-557);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-557,MONTH=-557,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-557,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertNotNull(mockGregorianCalendar0);
//       
//       LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-81257990400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=606,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=21,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(4, localDateTime0.size());
//       assertNotNull(localDateTime0);
//       
//       DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
//       assertEquals("weekyear", dateTimeFieldType0.toString());
//       assertEquals("weekyear", dateTimeFieldType0.getName());
//       assertNotNull(dateTimeFieldType0);
//       
//       LocalDateTime localDateTime1 = localDateTime0.withField(dateTimeFieldType0, int0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-81257990400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=606,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=21,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(4, localDateTime1.size());
//       assertEquals("weekyear", dateTimeFieldType0.toString());
//       assertEquals("weekyear", dateTimeFieldType0.getName());
//       assertEquals(4, localDateTime0.size());
//       assertNotSame(localDateTime1, localDateTime0);
//       assertNotSame(localDateTime0, localDateTime1);
//       assertNotNull(localDateTime1);
//       assertFalse(localDateTime1.equals((Object)localDateTime0));
//       assertFalse(localDateTime0.equals((Object)localDateTime1));
//   }

  @Test
  public void test042() {}
//   @Test
//   public void test042()  throws Throwable  {
//       int int0 = (-557);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-557,MONTH=-557,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-557,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertNotNull(mockGregorianCalendar0);
//       
//       LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertEquals(4, localDateTime0.size());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-81257990400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=606,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=21,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertNotNull(localDateTime0);
//       
//       ReadablePartial readablePartial0 = null;
//       LocalDateTime localDateTime1 = localDateTime0.withFields(readablePartial0);
//       assertEquals(4, localDateTime1.size());
//       assertEquals(4, localDateTime0.size());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-81257990400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=606,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=21,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertSame(localDateTime1, localDateTime0);
//       assertSame(localDateTime0, localDateTime1);
//       assertNotNull(localDateTime1);
//   }

  @Test
  public void test043()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.withFields((ReadablePartial) localDateTime0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
  }

  @Test
  public void test044()  throws Throwable  {
      Object object0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime(object0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfWeek();
      assertEquals("dayOfWeek", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
      
      LocalDateTime localDateTime1 = localDateTime_Property0.roundCeilingCopy();
      assertEquals(4, localDateTime1.size());
      assertEquals("dayOfWeek", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      
      int int0 = localDateTime1.compareTo((ReadablePartial) localDateTime0);
      assertEquals(1, int0);
      assertEquals(4, localDateTime1.size());
      assertEquals("dayOfWeek", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test
  public void test045()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 3;
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(int0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      
      int int1 = localDateTime0.compareTo((ReadablePartial) localDateTime1);
      assertEquals((-1), int1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertFalse(int0 == int1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(int1 == int0);
  }

  @Test
  public void test046() {}
//   @Test
//   public void test046()  throws Throwable  {
//       long long0 = (-756L);
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertNotNull(cachedDateTimeZone0);
//       
//       GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertNotNull(gJChronology0);
//       
//       LocalDateTime localDateTime0 = new LocalDateTime(long0, (Chronology) gJChronology0);
//       assertEquals(4, localDateTime0.size());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertNotNull(localDateTime0);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       LocalTime localTime0 = LocalTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertEquals(4, localTime0.size());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(localTime0);
//       
//       // Undeclared exception!
//       try {
//         boolean boolean0 = localDateTime0.isEqual((ReadablePartial) localTime0);
//         fail("Expecting exception: ClassCastException");
//       
//       } catch(ClassCastException e) {
//          //
//          // ReadablePartial objects must have matching field types
//          //
//       }
//   }

  @Test
  public void test047()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.withCenturyOfEra(int0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      
      boolean boolean0 = localDateTime1.equals((Object) localDateTime0);
      assertFalse(boolean0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test
  public void test048()  throws Throwable  {
      long long0 = 3679L;
      DateTimeZone dateTimeZone0 = null;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime(long0, (Chronology) ethiopicChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology0);
      
      boolean boolean0 = localDateTime0.equals((Object) islamicChronology0);
      assertFalse(boolean0);
      assertEquals(4, localDateTime0.size());
  }

  @Test
  public void test049()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) julianChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      MockDate mockDate0 = (MockDate)localDateTime0.toDate();
      assertEquals("Sat Feb 01 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(mockDate0);
  }

  @Test
  public void test050()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      DurationFieldType durationFieldType0 = null;
      boolean boolean0 = localDateTime0.isSupported(durationFieldType0);
      assertFalse(boolean0);
      assertEquals(4, localDateTime0.size());
  }

  @Test
  public void test051()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = 1440L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(localDateTime0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = localDateTime0.isSupported(durationFieldType0);
      assertTrue(boolean0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
  }

  @Test
  public void test052()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      DateTimeFieldType dateTimeFieldType0 = null;
      boolean boolean0 = localDateTime0.isSupported(dateTimeFieldType0);
      assertFalse(boolean0);
      assertEquals(4, localDateTime0.size());
  }

  @Test
  public void test053()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try {
        int int0 = localDateTime0.get(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
      }
  }

  @Test
  public void test054()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      int int0 = dateTime0.getMillisOfSecond();
      assertEquals(320, int0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(localDateTime0);
      
      // Undeclared exception!
      try {
        int int1 = localDateTime0.getValue(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 320
         //
      }
  }

  @Test
  public void test055()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = localDateTime0.indexOf(dateTimeFieldType0);
      assertEquals((-1), int0);
      assertEquals(4, localDateTime0.size());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      // Undeclared exception!
      try {
        DateTimeField dateTimeField0 = localDateTime0.getField(int0, gJChronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -1
         //
      }
  }

  @Test
  public void test056()  throws Throwable  {
      int int0 = (-557);
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      assertEquals("Tue Dec 28 09:43:00 GMT 1294", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Tue Dec 28 09:43:00 GMT 1294", mockDate0.toString());
      assertNotNull(localDateTime0);
  }

  @Test
  public void test057()  throws Throwable  {
      Date date0 = null;
      // Undeclared exception!
      try {
        LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test
  public void test058()  throws Throwable  {
      Object object0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime(object0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      MockDate mockDate0 = (MockDate)localDateTime0.toDate();
      assertEquals(4, localDateTime0.size());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
  }

  @Test
  public void test059()  throws Throwable  {
      Calendar calendar0 = null;
      // Undeclared exception!
      try {
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
      }
  }

  @Test
  public void test060()  throws Throwable  {
      Chronology chronology0 = null;
      // Undeclared exception!
      try {
        LocalDateTime localDateTime0 = LocalDateTime.now(chronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
      }
  }

  @Test
  public void test061()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      String string0 = "Zone must not be null";
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      // Undeclared exception!
      try {
        LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
      }
  }

  @Test
  public void test062()  throws Throwable  {
      Object object0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime(object0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = localDateTime0.getYearOfEra();
      assertEquals(2014, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test
  public void test063() {}
//   @Test
//   public void test063()  throws Throwable  {
//       int int0 = 1571;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1571,MONTH=1571,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1571,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(mockGregorianCalendar0);
//       
//       LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertEquals(4, localDateTime0.size());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-8323344000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1706,MONTH=2,WEEK_OF_YEAR=14,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=90,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(localDateTime0);
//       
//       // Undeclared exception!
//       try {
//         LocalDateTime localDateTime1 = localDateTime0.withMinuteOfHour(int0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Value 1571 for minuteOfHour must be in the range [0,59]
//          //
//       }
//   }

  @Test
  public void test064()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 1076;
      LocalDateTime localDateTime1 = localDateTime0.withMillisOfDay(int0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test
  public void test065() {}
//   @Test
//   public void test065()  throws Throwable  {
//       int int0 = 1571;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1571,MONTH=1571,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1571,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-8323344000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1706,MONTH=2,WEEK_OF_YEAR=14,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=90,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(4, localDateTime0.size());
//       assertNotNull(localDateTime0);
//       
//       Duration duration0 = Duration.standardSeconds((long) int0);
//       assertEquals(1571000L, duration0.getMillis());
//       assertNotNull(duration0);
//       
//       LocalDateTime localDateTime1 = localDateTime0.minus((ReadableDuration) duration0);
//       assertEquals(1571000L, duration0.getMillis());
//       assertEquals(4, localDateTime1.size());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-8323344000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1706,MONTH=2,WEEK_OF_YEAR=14,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=90,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(4, localDateTime0.size());
//       assertNotSame(localDateTime1, localDateTime0);
//       assertNotSame(localDateTime0, localDateTime1);
//       assertNotNull(localDateTime1);
//       assertFalse(localDateTime1.equals((Object)localDateTime0));
//       assertFalse(localDateTime0.equals((Object)localDateTime1));
//   }

  @Test
  public void test066()  throws Throwable  {
      long long0 = 3679L;
      DateTimeZone dateTimeZone0 = null;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime(long0, (Chronology) ethiopicChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      ReadablePeriod readablePeriod0 = null;
      LocalDateTime localDateTime1 = localDateTime0.plus(readablePeriod0);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertSame(localDateTime1, localDateTime0);
      assertSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
  }

  @Test
  public void test067() {}
//   @Test
//   public void test067()  throws Throwable  {
//       int int0 = 1571;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1571,MONTH=1571,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1571,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-8323344000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1706,MONTH=2,WEEK_OF_YEAR=14,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=90,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(4, localDateTime0.size());
//       assertNotNull(localDateTime0);
//       
//       LocalDateTime.Property localDateTime_Property0 = localDateTime0.weekOfWeekyear();
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-8323344000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1706,MONTH=2,WEEK_OF_YEAR=14,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=90,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(4, localDateTime0.size());
//       assertEquals("weekOfWeekyear", localDateTime_Property0.getName());
//       assertNotNull(localDateTime_Property0);
//   }

  @Test
  public void test068()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = localDateTime0.getYearOfCentury();
      assertEquals(14, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test
  public void test069()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = 1440L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.millisOfSecond();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("millisOfSecond", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
  }

  @Test
  public void test070()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) cachedDateTimeZone0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(localDateTime0);
      
      int int0 = 49;
      LocalDateTime localDateTime1 = localDateTime0.withYear(int0);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test
  public void test071()  throws Throwable  {
      Object object0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime(object0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfMonth();
      assertEquals("dayOfMonth", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
  }

  @Test
  public void test072()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 1076;
      // Undeclared exception!
      try {
        LocalDateTime localDateTime1 = localDateTime0.withDayOfWeek(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1076 for dayOfWeek must be in the range [1,7]
         //
      }
  }

  @Test
  public void test073()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = localDateTime0.getDayOfYear();
      assertEquals(45, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test
  public void test074()  throws Throwable  {
      long long0 = 2381L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.withTime(int0, int0, int0, int0);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test
  public void test075()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = 1440L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 779;
      // Undeclared exception!
      try {
        LocalDateTime localDateTime1 = localDateTime0.withWeekOfWeekyear(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 779 for weekOfWeekyear must be in the range [1,53]
         //
      }
  }

  @Test
  public void test076()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.year();
      assertEquals("year", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
  }

  @Test
  public void test077()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDate localDate0 = localDateTime0.toLocalDate();
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
  }

  @Test
  public void test078()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear(int0);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test
  public void test079()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = localDateTime0.getEra();
      assertEquals(1, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test
  public void test080()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.withHourOfDay(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test
  public void test081()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.withEra(int0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test
  public void test082()  throws Throwable  {
      int int0 = (-557);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      DateMidnight dateMidnight0 = new DateMidnight((long) int0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(dateMidnight0);
      
      YearMonthDay yearMonthDay0 = dateMidnight0.toYearMonthDay();
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(yearMonthDay0);
      
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime((Object) yearMonthDay0, (DateTimeZone) fixedDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'millisOfDay' is not supported
         //
      }
  }

  @Test
  public void test083()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) buddhistChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalTime localTime0 = localDateTime0.toLocalTime();
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
  }

  @Test
  public void test084()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = localDateTime0.getMillisOfDay();
      assertEquals(73281320, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test
  public void test085()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfYear();
      assertEquals(4, localDateTime0.size());
      assertEquals("dayOfYear", localDateTime_Property0.getName());
      assertNotNull(localDateTime_Property0);
  }

  @Test
  public void test086()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = localDateTime0.getWeekOfWeekyear();
      assertEquals(7, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test
  public void test087()  throws Throwable  {
      int int0 = 12;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("+00:00:00.012", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.012", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals(4, localDateTime0.size());
      assertEquals("+00:00:00.012", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.012", fixedDateTimeZone0.getID());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.withDate(int0, int0, int0);
      assertEquals(4, localDateTime0.size());
      assertEquals("+00:00:00.012", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.012", fixedDateTimeZone0.getID());
      assertEquals(4, localDateTime1.size());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test
  public void test088()  throws Throwable  {
      Object object0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime(object0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.withYearOfCentury(int0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test
  public void test089()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.yearOfEra();
      assertEquals("yearOfEra", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
  }

  @Test
  public void test090()  throws Throwable  {
      Object object0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime(object0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      String string0 = null;
      String string1 = localDateTime0.toString(string0);
      assertEquals("2014-02-14T20:21:21.320", string1);
      assertEquals(4, localDateTime0.size());
      assertNotNull(string1);
  }

  @Test
  public void test091()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 1900;
      // Undeclared exception!
      try {
        LocalDateTime localDateTime1 = localDateTime0.withDayOfMonth(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1900 for dayOfMonth must be in the range [1,28]
         //
      }
  }

  @Test
  public void test092()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.monthOfYear();
      assertEquals(4, localDateTime0.size());
      assertEquals("monthOfYear", localDateTime_Property0.getName());
      assertNotNull(localDateTime_Property0);
  }

  @Test
  public void test093()  throws Throwable  {
      Object object0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime(object0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadablePeriod) seconds0);
      assertEquals(4, localDateTime0.size());
      assertEquals(1, seconds0.size());
      assertEquals(4, localDateTime1.size());
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
  }

  @Test
  public void test094()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = localDateTime0.getWeekyear();
      assertEquals(2014, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test
  public void test095()  throws Throwable  {
      long long0 = 86399999L;
      YearMonth yearMonth0 = new YearMonth(long0);
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      
      ISOChronology iSOChronology0 = (ISOChronology)yearMonth0.getChronology();
      assertEquals(2, yearMonth0.size());
      assertNotNull(iSOChronology0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) iSOChronology0);
      assertEquals(4, localDateTime0.size());
      assertEquals(2, yearMonth0.size());
      assertNotNull(localDateTime0);
      
      int int0 = localDateTime0.getDayOfWeek();
      assertEquals(5, int0);
      assertEquals(4, localDateTime0.size());
      assertEquals(2, yearMonth0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withMonthOfYear(int0);
      assertEquals(4, localDateTime0.size());
      assertEquals(2, yearMonth0.size());
      assertEquals(4, localDateTime1.size());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test
  public void test096()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = (-1);
      // Undeclared exception!
      try {
        LocalDateTime localDateTime1 = localDateTime0.withDayOfYear(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for dayOfYear must be in the range [1,365]
         //
      }
  }

  @Test
  public void test097() {}
//   @Test
//   public void test097()  throws Throwable  {
//       int int0 = 1571;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1571,MONTH=1571,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1571,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(mockGregorianCalendar0);
//       
//       LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-8323344000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1706,MONTH=2,WEEK_OF_YEAR=14,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=90,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(4, localDateTime0.size());
//       assertNotNull(localDateTime0);
//       
//       LocalDateTime.Property localDateTime_Property0 = localDateTime0.hourOfDay();
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-8323344000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1706,MONTH=2,WEEK_OF_YEAR=14,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=90,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("hourOfDay", localDateTime_Property0.getName());
//       assertEquals(4, localDateTime0.size());
//       assertNotNull(localDateTime_Property0);
//   }

  @Test
  public void test098()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gJChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      // Undeclared exception!
      try {
        LocalDateTime localDateTime1 = localDateTime0.withYearOfEra(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for yearOfEra must be in the range [1,292278993]
         //
      }
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try {
        LocalDateTime localDateTime0 = LocalDateTime.parse(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test100()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.yearOfCentury();
      assertEquals(4, localDateTime0.size());
      assertEquals("yearOfCentury", localDateTime_Property0.getName());
      assertNotNull(localDateTime_Property0);
  }

  @Test
  public void test101()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.millisOfDay();
      assertEquals("millisOfDay", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
  }

  @Test
  public void test102()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) buddhistChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      ReadableDuration readableDuration0 = null;
      LocalDateTime localDateTime1 = localDateTime0.plus(readableDuration0);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertSame(localDateTime1, localDateTime0);
      assertSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
  }

  @Test
  public void test103()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.withMillisOfSecond(int0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test
  public void test104()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
  }

  @Test
  public void test105()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.withSecondOfMinute(int0);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test
  public void test106()  throws Throwable  {
      long long0 = 0L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.era();
      assertEquals(4, localDateTime0.size());
      assertEquals("era", localDateTime_Property0.getName());
      assertNotNull(localDateTime_Property0);
  }

  @Test
  public void test107()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = 1440L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.weekyear();
      assertEquals(4, localDateTime0.size());
      assertEquals("weekyear", localDateTime_Property0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(localDateTime_Property0);
  }

  @Test
  public void test108()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.secondOfMinute();
      assertEquals(4, localDateTime0.size());
      assertEquals("secondOfMinute", localDateTime_Property0.getName());
      assertNotNull(localDateTime_Property0);
      
      LocalDateTime localDateTime1 = localDateTime_Property0.roundFloorCopy();
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals("secondOfMinute", localDateTime_Property0.getName());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test
  public void test109()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.minuteOfHour();
      assertEquals("minuteOfHour", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
      
      LocalDateTime localDateTime1 = localDateTime_Property0.withMaximumValue();
      assertEquals(4, localDateTime1.size());
      assertEquals("minuteOfHour", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test
  public void test110()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) fixedDateTimeZone0);
      assertEquals(4, localDateTime0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(localDateTime0);
      
      DateTimeFieldType dateTimeFieldType0 = localDateTime0.getFieldType(int0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(dateTimeFieldType0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.property(dateTimeFieldType0);
      assertEquals("year", localDateTime_Property0.getName());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(localDateTime_Property0);
      
      ISOChronology iSOChronology0 = (ISOChronology)localDateTime_Property0.getChronology();
      assertEquals("year", localDateTime_Property0.getName());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(iSOChronology0);
  }

  @Test
  public void test111()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) buddhistChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 70;
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.centuryOfEra();
      assertEquals(4, localDateTime0.size());
      assertEquals("centuryOfEra", localDateTime_Property0.getName());
      assertNotNull(localDateTime_Property0);
      
      LocalDateTime localDateTime1 = localDateTime_Property0.addToCopy((long) int0);
      assertEquals(4, localDateTime0.size());
      assertEquals("centuryOfEra", localDateTime_Property0.getName());
      assertEquals(4, localDateTime1.size());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test
  public void test112()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.secondOfMinute();
      assertEquals(4, localDateTime0.size());
      assertEquals("secondOfMinute", localDateTime_Property0.getName());
      assertNotNull(localDateTime_Property0);
      
      LocalDateTime localDateTime1 = localDateTime_Property0.roundHalfCeilingCopy();
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertEquals("secondOfMinute", localDateTime_Property0.getName());
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test
  public void test113()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) buddhistChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 70;
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.centuryOfEra();
      assertEquals("centuryOfEra", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
      
      LocalDateTime localDateTime1 = localDateTime_Property0.addWrapFieldToCopy(int0);
      assertEquals("centuryOfEra", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test
  public void test114()  throws Throwable  {
      Object object0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime(object0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfWeek();
      assertEquals(4, localDateTime0.size());
      assertEquals("dayOfWeek", localDateTime_Property0.getName());
      assertNotNull(localDateTime_Property0);
      
      LocalDateTime localDateTime1 = localDateTime_Property0.getLocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals("dayOfWeek", localDateTime_Property0.getName());
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
  }

  @Test
  public void test115()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) buddhistChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.centuryOfEra();
      assertEquals(4, localDateTime0.size());
      assertEquals("centuryOfEra", localDateTime_Property0.getName());
      assertNotNull(localDateTime_Property0);
      
      LocalDateTime localDateTime1 = localDateTime_Property0.roundHalfEvenCopy();
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals("centuryOfEra", localDateTime_Property0.getName());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test
  public void test116()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.minuteOfHour();
      assertEquals("minuteOfHour", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
      
      int int0 = (-1452);
      LocalDateTime localDateTime1 = localDateTime_Property0.addToCopy(int0);
      assertEquals("minuteOfHour", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test
  public void test117()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.minuteOfHour();
      assertEquals("minuteOfHour", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
      
      LocalDateTime localDateTime1 = localDateTime_Property0.roundHalfFloorCopy();
      assertEquals("minuteOfHour", localDateTime_Property0.getName());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test
  public void test118()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotNull(dateTimeField0);
      
      LocalDateTime.Property localDateTime_Property0 = new LocalDateTime.Property(localDateTime0, dateTimeField0);
      assertEquals("minuteOfHour", localDateTime_Property0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
      
      String string0 = "";
      // Undeclared exception!
      try {
        LocalDateTime localDateTime1 = localDateTime_Property0.setCopy(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for minuteOfHour is not supported
         //
      }
  }

  @Test
  public void test119()  throws Throwable  {
      Object object0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime(object0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfWeek();
      assertEquals("dayOfWeek", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
      
      LocalDateTime localDateTime1 = localDateTime_Property0.withMinimumValue();
      assertEquals("dayOfWeek", localDateTime_Property0.getName());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }
}
