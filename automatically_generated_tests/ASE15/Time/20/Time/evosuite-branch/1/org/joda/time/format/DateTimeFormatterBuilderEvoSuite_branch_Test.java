/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:50:16 GMT 2014
 */

package org.joda.time.format;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadablePartial;
import org.joda.time.TimeOfDay;
import org.joda.time.YearMonth;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

 
public class DateTimeFormatterBuilderEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "7+kRB9N@V6yX}OyF|L";
      // Undeclared exception!
      try {
        MutableDateTime mutableDateTime0 = MutableDateTime.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"7+kRB9N@V6yX}OyF|L\" is malformed at \"+kRB9N@V6yX}OyF|L\"
         //
      }
  }

  @Test
  public void test001()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      int int0 = (-539);
      boolean boolean0 = false;
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, int0, boolean0, int0);
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[9];
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_PaddedNumber0;
      assertNotNull(dateTimeParserArray0[0]);
      assertEquals(-539, dateTimeParserArray0[0].estimateParsedLength());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      
      Chronology chronology0 = null;
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, chronology0, locale0, (Integer) int0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      
      String string0 = "";
      int int1 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(538, int1);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
  }

  @Test
  public void test002()  throws Throwable  {
      int int0 = (-901);
      String string0 = "7XNyPv\"3K={L";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) copticChronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      // Undeclared exception!
      try {
        int int1 = dateTimeFormatterBuilder_Composite0.parseInto(dateTimeParserBucket0, string0, int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test003()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      boolean boolean0 = dateTimeFormatterBuilder_Composite0.isPrinter();
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((OutputStream) byteArrayOutputStream0, boolean0);
      assertNotNull(mockPrintStream0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((OutputStream) mockPrintStream0, boolean0);
      assertNotNull(mockPrintWriter0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      LocalDate localDate0 = LocalDate.now((Chronology) gJChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
      try {
        dateTimeFormatterBuilder_Composite0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localDate0, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test004()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      
      StringBuffer stringBuffer0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      LocalTime localTime0 = new LocalTime((Chronology) gJChronology0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
      try {
        dateTimeFormatterBuilder_Composite0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test005()  throws Throwable  {
      int int0 = (-3202);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string0 = "\uFFFD";
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      assertNotNull(mockFileWriter0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_Composite0, (DateTimeParser) dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Locale locale0 = null;
      DateTimeZone dateTimeZone0 = dateTimeFormatter0.getZone();
      assertNull(dateTimeZone0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      // Undeclared exception!
      try {
        dateTimeFormatterBuilder_Composite0.printTo((Writer) mockFileWriter0, (long) int0, (Chronology) ethiopicChronology0, int0, dateTimeZone0, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test006()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      boolean boolean0 = dateTimeFormatterBuilder_Composite0.isPrinter();
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((OutputStream) byteArrayOutputStream0, boolean0);
      assertNotNull(mockPrintStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((OutputStream) mockPrintStream0, boolean0);
      assertNotNull(mockPrintWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      char char0 = 'y';
      BufferedWriter bufferedWriter0 = new BufferedWriter((Writer) mockPrintWriter0, (int) char0);
      assertNotNull(bufferedWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      
      dateTimeFormatterBuilder_TimeZoneId0.printTo((Writer) bufferedWriter0, (long) char0, (Chronology) gJChronology0, (int) char0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
  }

  @Test
  public void test007()  throws Throwable  {
      int int0 = 128;
      StringBuffer stringBuffer0 = null;
      String string0 = ";!cG~_RB7*T\\+jZ";
      Locale locale0 = new Locale(string0, string0);
      assertNotNull(locale0);
      assertEquals(";!cg~_rb7*t\\+jz", locale0.getLanguage());
      assertEquals(";!CG~_RB7*T\\+JZ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(";!cg~_rb7*t\\+jz_;!CG~_RB7*T\\+JZ", locale0.toString());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(julianChronology0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      int int1 = dateTimeFormatterBuilder_Composite0.estimateParsedLength();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try {
        dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (long) int0, (Chronology) julianChronology0, int1, (DateTimeZone) fixedDateTimeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test008()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      int int0 = 46;
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      Chronology chronology0 = null;
      String string0 = "#g{VLsi7\\0}c6y/P&";
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+46:46", fixedDateTimeZone0.toString());
      assertEquals("+46:46", fixedDateTimeZone0.getID());
      
      DateTimeZone dateTimeZone0 = hashMap0.put(string0, (DateTimeZone) fixedDateTimeZone0);
      assertNull(dateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+46:46", fixedDateTimeZone0.toString());
      assertEquals("+46:46", fixedDateTimeZone0.getID());
      assertEquals("{#g{VLsi7\\0}c6y/P&=+46:46}", hashMap0.toString());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      
      String string1 = "org.joda.time.TimeOfDay";
      assertNotSame(string1, string0);
      
      Locale locale0 = new Locale(string1);
      assertNotNull(locale0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.joda.time.timeofday", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("org.joda.time.timeofday", locale0.getLanguage());
      assertNotSame(string1, string0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, chronology0, locale0, (Integer) int0);
      assertNotNull(dateTimeParserBucket0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.joda.time.timeofday", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("org.joda.time.timeofday", locale0.getLanguage());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotSame(string1, string0);
      
      int int1 = 0;
      int int2 = dateTimeFormatterBuilder_TimeZoneName0.parseInto(dateTimeParserBucket0, string1, int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals((-1), int2);
      assertEquals("org.joda.time.timeofday", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("org.joda.time.timeofday", locale0.getLanguage());
      assertEquals("{#g{VLsi7\\0}c6y/P&=+46:46}", hashMap0.toString());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotSame(string1, string0);
  }

  @Test
  public void test009()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      int int0 = 46;
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      Chronology chronology0 = null;
      String string0 = "#g{VLsi7\\0}c6y/P&";
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+46:46", fixedDateTimeZone0.getID());
      assertEquals("+46:46", fixedDateTimeZone0.toString());
      
      DateTimeZone dateTimeZone0 = hashMap0.put(string0, (DateTimeZone) fixedDateTimeZone0);
      assertNull(dateTimeZone0);
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals("{#g{VLsi7\\0}c6y/P&=+46:46}", hashMap0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+46:46", fixedDateTimeZone0.getID());
      assertEquals("+46:46", fixedDateTimeZone0.toString());
      
      Locale locale0 = new Locale(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("#g{vlsi7\\0}c6y/p&", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("#g{vlsi7\\0}c6y/p&", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, chronology0, locale0, (Integer) int0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("", locale0.getVariant());
      assertEquals("#g{vlsi7\\0}c6y/p&", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("#g{vlsi7\\0}c6y/p&", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      int int1 = 0;
      int int2 = dateTimeFormatterBuilder_TimeZoneName0.parseInto(dateTimeParserBucket0, string0, int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(19, int2);
      assertEquals("", locale0.getVariant());
      assertEquals("#g{vlsi7\\0}c6y/p&", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("#g{vlsi7\\0}c6y/p&", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals("{#g{VLsi7\\0}c6y/P&=+46:46}", hashMap0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
  }

  @Test
  public void test010()  throws Throwable  {
      int int0 = (-1713);
      int int1 = 59;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>(int1);
      assertNotNull(hashMap0);
      assertFalse(int1 == int0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      int int2 = dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals(20, int2);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test
  public void test011()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendOptional((DateTimeParser) dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite)dateTimeFormatterBuilder2.toParser();
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "-(b";
      // Undeclared exception!
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-(b\" is malformed at \"(b\"
         //
      }
  }

  @Test
  public void test013()  throws Throwable  {
      int int0 = 45;
      boolean boolean0 = false;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      
      String string0 = "\uFFFD";
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) ethiopicChronology0, locale0, (Integer) int0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      int int1 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-46), int1);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals(0, dateTimeParserBucket0.getOffset());
  }

  @Test
  public void test014()  throws Throwable  {
      int int0 = 4;
      String string0 = "^|v$4>hX=n";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(4, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=^|v$4>hX=n,offset=4,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("^|v$4>hX=n", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(4, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=^|v$4>hX=n,offset=4,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("^|v$4>hX=n", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "~E}lSen:Iv+p\"4BFqY9";
      boolean boolean0 = true;
      int int0 = 3;
      int int1 = 1862;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int1);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((File) mockFile0);
      assertNotNull(mockPrintWriter0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(iSOChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) mockPrintWriter0, (long) int1, (Chronology) iSOChronology0, int0, (DateTimeZone) cachedDateTimeZone0, locale0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "~E}lSen:Iv+p\"4BFqY9";
      boolean boolean0 = true;
      int int0 = 3;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((File) mockFile0);
      assertNotNull(mockPrintWriter0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(iSOChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      
      int int1 = (-3402);
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) mockPrintWriter0, (long) int0, (Chronology) iSOChronology0, int1, (DateTimeZone) cachedDateTimeZone0, locale0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
  }

  @Test
  public void test017()  throws Throwable  {
      boolean boolean0 = false;
      int int0 = 0;
      char char0 = '_';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      int int1 = dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      DateTimeZone dateTimeZone0 = null;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      String string0 = "]]Y7ni-Fnl'fTjq|";
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, char0, char0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) stringWriter0, (long) int0, (Chronology) islamicChronology0, int1, dateTimeZone0, locale0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "~E}lSen:Iv+p\"4BFqY9";
      boolean boolean0 = true;
      int int0 = 3;
      int int1 = 1862;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int1);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(iSOChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertNotNull(stringBuffer0);
      assertEquals("~E}lSen:Iv+p\"4BFqY9", stringBuffer0.toString());
      assertEquals(35, stringBuffer0.capacity());
      assertEquals(19, stringBuffer0.length());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (long) int0, (Chronology) iSOChronology0, int1, (DateTimeZone) cachedDateTimeZone0, locale0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals(35, stringBuffer0.capacity());
      assertEquals(32, stringBuffer0.length());
      assertEquals("~E}lSen:Iv+p\"4BFqY9+00:00:01.862", stringBuffer0.toString());
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = "~E}lSen:Iv+p\"4BFqY9";
      boolean boolean0 = true;
      int int0 = 3;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(iSOChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertNotNull(stringBuffer0);
      assertEquals("~E}lSen:Iv+p\"4BFqY9", stringBuffer0.toString());
      assertEquals(35, stringBuffer0.capacity());
      assertEquals(19, stringBuffer0.length());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (long) int0, (Chronology) iSOChronology0, int0, (DateTimeZone) cachedDateTimeZone0, locale0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(28, stringBuffer0.length());
      assertEquals(35, stringBuffer0.capacity());
      assertEquals("~E}lSen:Iv+p\"4BFqY9+00:00:00", stringBuffer0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = "TV&";
      boolean boolean0 = false;
      int int0 = 44;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      
      int int1 = dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength();
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(10, int1);
  }

  @Test
  public void test021()  throws Throwable  {
      String string0 = "B'XF";
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 2183;
      int int1 = 0;
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildParser();
      assertFalse(boolean0);
      
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = null;
      try {
        dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test022()  throws Throwable  {
      boolean boolean0 = false;
      int int0 = (-1605);
      char char0 = ':';
      String string0 = "US/Centraltype must not be null";
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = null;
      try {
        dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, char0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test023()  throws Throwable  {
      char char0 = 'K';
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, char0, char0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, char0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
      assertEquals(2, int0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) char0, (Chronology) buddhistChronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      String string0 = " cannot be compared to ";
      int int1 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-3), int1);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals(0, dateTimeParserBucket0.getOffset());
  }

  @Test
  public void test024()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.minuteOfHour();
      assertNotNull(dateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) iSOChronology0, dateTimeField0);
      assertNotNull(skipUndoDateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals("minuteOfHour", skipUndoDateTimeField0.getName());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      
      DateTimeFieldType dateTimeFieldType0 = skipUndoDateTimeField0.getType();
      assertNotNull(dateTimeFieldType0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals("minuteOfHour", skipUndoDateTimeField0.getName());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      int int0 = (-2461);
      int int1 = 48;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int1);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals("minuteOfHour", skipUndoDateTimeField0.getName());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      String string0 = "_Wi}5*qQ)r-)(Tj{+ps";
      String string1 = "+uD=,LVn3U%DJpME";
      assertNotSame(string1, string0);
      
      Locale locale0 = new Locale(string0, string0, string1);
      assertNotNull(locale0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("+uD=,LVn3U%DJpME", locale0.getVariant());
      assertEquals("_WI}5*QQ)R-)(TJ{+PS", locale0.getCountry());
      assertEquals("_wi}5*qq)r-)(tj{+ps__WI}5*QQ)R-)(TJ{+PS_+uD=,LVn3U%DJpME", locale0.toString());
      assertEquals("_wi}5*qq)r-)(tj{+ps", locale0.getLanguage());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int2 = 0;
      Integer integer0 = new Integer(int2);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) ethiopicChronology0, locale0, integer0, (int) integer0);
      assertNotNull(dateTimeParserBucket0);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("+uD=,LVn3U%DJpME", locale0.getVariant());
      assertEquals("_WI}5*QQ)R-)(TJ{+PS", locale0.getCountry());
      assertEquals("_wi}5*qq)r-)(tj{+ps__WI}5*QQ)R-)(TJ{+PS_+uD=,LVn3U%DJpME", locale0.toString());
      assertEquals("_wi}5*qq)r-)(tj{+ps", locale0.getLanguage());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int3 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, string1, (int) integer0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), int3);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals("minuteOfHour", skipUndoDateTimeField0.getName());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("+uD=,LVn3U%DJpME", locale0.getVariant());
      assertEquals("_WI}5*QQ)R-)(TJ{+PS", locale0.getCountry());
      assertEquals("_wi}5*qq)r-)(tj{+ps__WI}5*QQ)R-)(TJ{+PS_+uD=,LVn3U%DJpME", locale0.toString());
      assertEquals("_wi}5*qq)r-)(tj{+ps", locale0.getLanguage());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test025()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      
      int int0 = 0;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      
      char char0 = '_';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      int int1 = dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      
      String string0 = "]]Y7ni-Fnl'fTjq|";
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) islamicChronology0, locale0, (Integer) int1);
      assertNotNull(dateTimeParserBucket0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      
      int int2 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, string0, int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-2), int2);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
  }

  @Test
  public void test026()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      
      int int0 = 0;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      
      char char0 = '_';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      int int1 = dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      
      DateTimeZone dateTimeZone0 = null;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      assertNotNull(gregorianChronology0);
      
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, stringWriter0, int1, gregorianChronology0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("0", stringWriter0.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals("0", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
  }

  @Test
  public void test027()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      
      int int0 = 128;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      
      StringBuffer stringBuffer0 = null;
      String string0 = ";!cG~_RB7*T\\+jZ";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((File) mockFile0);
      assertNotNull(mockPrintWriter0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(julianChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, mockPrintWriter0, int0, julianChronology0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
  }

  @Test
  public void test028()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      
      int int0 = 1;
      int int1 = 5;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int1);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      
      String string0 = "t2";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, mockPrintWriter0, int1, copticChronology0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("04166", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(5, stringBuffer0.length());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
  }

  @Test
  public void test029()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      
      int int0 = 128;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      
      StringBuffer stringBuffer0 = null;
      String string0 = ";!cG~_RB7*T\\+jZ";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((File) mockFile0);
      assertNotNull(mockPrintWriter0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      long long0 = (-1007L);
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, mockPrintWriter0, long0, iSOChronology0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
  }

  @Test
  public void test030()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      char char0 = '_';
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours((int) char0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+95:00", fixedDateTimeZone0.getID());
      assertEquals("+95:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      int int0 = 0;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      StringBuffer stringBuffer0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withUTC();
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertNotSame(gJChronology1, gJChronology0);
      assertNotSame(gJChronology0, gJChronology1);
      
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (long) int0, (Chronology) gJChronology1, int0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("+95:00", fixedDateTimeZone0.getID());
      assertEquals("+95:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotSame(gJChronology1, gJChronology0);
      assertNotSame(gJChronology0, gJChronology1);
  }

  @Test
  public void test031()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      char char0 = '_';
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours((int) char0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+95:00", fixedDateTimeZone0.toString());
      assertEquals("+95:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, char0, char0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      StringBuffer stringBuffer0 = null;
      long long0 = 0L;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withUTC();
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertNotSame(gJChronology1, gJChronology0);
      assertNotSame(gJChronology0, gJChronology1);
      
      // Undeclared exception!
      try {
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, long0, (Chronology) gJChronology1, (int) char0, (DateTimeZone) fixedDateTimeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test032()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      boolean boolean0 = false;
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      int int0 = 0;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) copticChronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      String string0 = "TV&G8AkHIH!]5";
      int int1 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeParserBucket0.getOffset());
  }

  @Test
  public void test033()  throws Throwable  {
      long long0 = 2147483647L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      String string0 = "\"G";
      String string1 = localDateTime0.toString(string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"AD", string1);
      assertEquals(4, localDateTime0.size());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test034()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[10];
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_TextField0;
      assertNotNull(dateTimeParserArray0[1]);
      assertEquals(6, dateTimeParserArray0[1].estimateParsedLength());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
  }

  @Test
  public void test035()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      int int0 = 4978125;
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      
      String string0 = " M@9)";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(2, yearMonth0.size());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
  }

  @Test
  public void test036()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = dateTimeFormatterBuilder_Composite0.isPrinter();
      assertFalse(boolean0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      int int0 = byteArrayOutputStream0.size();
      assertEquals(0, int0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      DateTimeFieldType dateTimeFieldType0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      
      String string0 = "Invalid min days in first week: ";
      Locale locale0 = new Locale(string0, string0, string0);
      assertNotNull(locale0);
      assertEquals("invalid min days in first week: _INVALID MIN DAYS IN FIRST WEEK: _Invalid min days in first week: ", locale0.toString());
      assertEquals("invalid min days in first week: ", locale0.getLanguage());
      assertEquals("INVALID MIN DAYS IN FIRST WEEK: ", locale0.getCountry());
      assertEquals("Invalid min days in first week: ", locale0.getVariant());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try {
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) localDateTime0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test037()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      int int0 = 4978125;
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      
      String string0 = " M@9)";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockPrintWriter0, (long) int0, (Chronology) iSOChronology0, int0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test
  public void test038()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      
      boolean boolean0 = false;
      int int0 = 0;
      char char0 = '_';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      int int1 = dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("", stringWriter0.toString());
      
      DateTimeZone dateTimeZone0 = null;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int1, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertFalse(int1 == int0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      
      dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (long) int0, (Chronology) islamicChronology0, (int) char0, dateTimeZone0, locale0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("90", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(2, stringBuffer0.length());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("90", stringWriter0.toString());
  }

  @Test
  public void test039()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      int int0 = (-539);
      boolean boolean0 = false;
      int int1 = 3;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int1, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertFalse(int1 == int0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      Chronology chronology0 = null;
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, chronology0, locale0, (Integer) int1);
      assertNotNull(dateTimeParserBucket0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      String string0 = "Incomplete parser array";
      int int2 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, string0, int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals((-4), int2);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
  }

  @Test
  public void test040()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 0;
      boolean boolean0 = true;
      String string0 = "J0TV";
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      
      DateTimeParserBucket dateTimeParserBucket0 = null;
      int int1 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test
  public void test041()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      int int0 = 4978125;
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      
      int int1 = 0;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int1, (Chronology) iSOChronology0, locale0, (Integer) int1, int1);
      assertNotNull(dateTimeParserBucket0);
      assertFalse(int1 == int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      
      String string0 = "1970-01-01--0:00:04.901z";
      int int2 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, string0, int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(4, int2);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
  }

  @Test
  public void test042()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      int int0 = 719541;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) gregorianChronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      String string0 = "a6]E}";
      int int1 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-719542), int1);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeParserBucket0.getOffset());
  }

  @Test
  public void test043()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      int int0 = 4978125;
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string0 = " M@9)";
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) iSOChronology0, locale0, (Integer) int0, int0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      int int1 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-4978126), int1);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, dateTimeParserBucket0.getOffset());
  }

  @Test
  public void test044()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      int int0 = 4978125;
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      int int1 = dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
  }

  @Test
  public void test045()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      int int0 = dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
      assertEquals(20, int0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      int int1 = (-840);
      assertFalse(int1 == int0);
      
      boolean boolean1 = true;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, int1, boolean1);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertFalse(int1 == int0);
      assertFalse(boolean1 == boolean0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int1, (Chronology) buddhistChronology0, locale0, (Integer) int0);
      assertNotNull(dateTimeParserBucket0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(boolean0 == boolean1);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      String string0 = "Parsing is not supported";
      // Undeclared exception!
      try {
        int int2 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, string0, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -840
         //
      }
  }

  @Test
  public void test046()  throws Throwable  {
      int int0 = (-975);
      boolean boolean0 = false;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      int int1 = 0;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, int1, boolean0);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertFalse(int1 == int0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      TimeOfDay timeOfDay0 = new TimeOfDay((long) int1);
      assertNotNull(timeOfDay0);
      assertFalse(int1 == int0);
      assertEquals(4, timeOfDay0.size());
      
      ISOChronology iSOChronology0 = (ISOChronology)timeOfDay0.getChronology();
      assertNotNull(iSOChronology0);
      assertFalse(int1 == int0);
      assertEquals(4, timeOfDay0.size());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int1, (Chronology) iSOChronology0, locale0, (Integer) int1, int0);
      assertNotNull(dateTimeParserBucket0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(4, timeOfDay0.size());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      String string0 = "Ya]nF/,Kp1Ef]~gRX";
      int int2 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, string0, int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals((-1), int2);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(4, timeOfDay0.size());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeParserBucket0.getOffset());
  }

  @Test
  public void test047()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      int int0 = dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
      assertEquals(20, int0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      int int1 = (-840);
      assertFalse(int1 == int0);
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, int1, boolean0);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertFalse(int1 == int0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) buddhistChronology0, locale0, (Integer) int0);
      assertNotNull(dateTimeParserBucket0);
      assertFalse(int0 == int1);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      
      String string0 = "Parsing is not supported";
      int int2 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, string0, int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1678, int2);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
  }

  @Test
  public void test048()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      
      int int0 = (-2776);
      boolean boolean0 = true;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      
      Writer writer0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      
      // Undeclared exception!
      try {
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(writer0, (ReadablePartial) localDateTime0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test049() {}
//   @Test
//   public void test049()  throws Throwable  {
//       boolean boolean0 = false;
//       DateTimeFieldType dateTimeFieldType0 = null;
//       int int0 = (-1605);
//       DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, int0, boolean0);
//       assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
//       
//       CharArrayWriter charArrayWriter0 = new CharArrayWriter();
//       assertNotNull(charArrayWriter0);
//       assertEquals("", charArrayWriter0.toString());
//       assertEquals(0, charArrayWriter0.size());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1605,MONTH=-1605,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1605,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       
//       LocalTime localTime0 = LocalTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertNotNull(localTime0);
//       assertEquals(4, localTime0.size());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-117176976000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1745,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=312,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       Locale locale0 = Locale.PRC;
//       assertNotNull(locale0);
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zho", locale0.getISO3Language());
//       
//       dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) charArrayWriter0, (ReadablePartial) localTime0, locale0);
//       assertEquals(1, charArrayWriter0.size());
//       assertEquals("\uFFFD", charArrayWriter0.toString());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals(4, localTime0.size());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-117176976000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1745,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=312,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//   }

  @Test
  public void test050()  throws Throwable  {
      StringBuffer stringBuffer0 = null;
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 1325;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      YearMonth yearMonth0 = new YearMonth((long) int0, (Chronology) julianChronology0);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      // Undeclared exception!
      try {
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test051()  throws Throwable  {
      int int0 = 0;
      char char0 = '_';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      int int1 = dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      String string0 = "]]Y7ni-Fnl'fTjq|";
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int1, (Chronology) islamicChronology0, locale0, (Integer) int1);
      assertNotNull(dateTimeParserBucket0);
      assertFalse(int1 == int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      int int2 = dateTimeFormatterBuilder_StringLiteral0.parseInto(dateTimeParserBucket0, string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(17, int2);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
  }

  @Test
  public void test052()  throws Throwable  {
      String string0 = "--";
      // Undeclared exception!
      try {
        LocalTime localTime0 = LocalTime.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"--\"
         //
      }
  }

  @Test
  public void test053()  throws Throwable  {
      int int0 = (-3102);
      Instant instant0 = new Instant((long) int0);
      assertNotNull(instant0);
      assertEquals((-3102L), instant0.getMillis());
      
      String string0 = instant0.toString();
      assertNotNull(string0);
      assertEquals("1969-12-31T23:59:56.898Z", string0);
      assertEquals((-3102L), instant0.getMillis());
      
      // Undeclared exception!
      try {
        MonthDay monthDay0 = MonthDay.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"1969-12-31T23:59:56.898Z\" is malformed at \"T23:59:56.898Z\"
         //
      }
  }

  @Test
  public void test054()  throws Throwable  {
      char char0 = ')';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) char0, (Chronology) gJChronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      String string0 = "#g{VLsi7\\0}c6y/P&";
      int int0 = dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket0, string0, (int) char0);
      assertEquals((-42), int0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(0, dateTimeParserBucket0.getOffset());
  }

  @Test
  public void test055()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      boolean boolean0 = dateTimeFormatterBuilder_Composite0.isPrinter();
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((OutputStream) byteArrayOutputStream0, boolean0);
      assertNotNull(mockPrintStream0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((OutputStream) mockPrintStream0, boolean0);
      assertNotNull(mockPrintWriter0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      char char0 = 'y';
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      DateTimeFieldType dateTimeFieldType0 = null;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, char0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      dateTimeFormatterBuilder_FixedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localDateTime0, locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test
  public void test056()  throws Throwable  {
      int int0 = 8;
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder.appendUnknownString(stringBuffer0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test057()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 0;
      boolean boolean0 = true;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      
      String string0 = "J0TV";
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertNotNull(stringBuffer0);
      assertEquals(4, stringBuffer0.length());
      assertEquals("J0TV", stringBuffer0.toString());
      assertEquals(20, stringBuffer0.capacity());
      
      LocalDate localDate0 = new LocalDate((long) int0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      Locale locale0 = null;
      dateTimeFormatterBuilder_FixedNumber0.printTo(stringBuffer0, (ReadablePartial) localDate0, locale0);
      assertEquals(3, localDate0.size());
      assertEquals(4, stringBuffer0.length());
      assertEquals("J0TV", stringBuffer0.toString());
      assertEquals(20, stringBuffer0.capacity());
  }

  @Test
  public void test058()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearShortText();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildFormatter();
      assertTrue(boolean0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test059()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendOptional((DateTimeParser) dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = (DateTimeFormatterBuilder.MatchingParser)dateTimeFormatterBuilder1.toParser();
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildParser();
      assertTrue(boolean0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test060()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfMinute(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test061()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 2183;
      int int1 = 32;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(int0, int1);
      assertNotNull(dateTimeFormatterBuilder1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test
  public void test062()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      
      int int0 = 0;
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: 0
         //
      }
  }

  @Test
  public void test063()  throws Throwable  {
      int int0 = 80;
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
      }
  }

  @Test
  public void test064()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 2743;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test065()  throws Throwable  {
      char char0 = ':';
      int int0 = 0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYear(int0, (int) char0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test
  public void test066()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 212;
      int int1 = (-3258);
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYear(int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test067()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 2743;
      int int1 = 604800;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendCenturyOfEra(int1, int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test068()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      
      int int0 = 14;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test069()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      int int0 = 0;
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: 0
         //
      }
  }

  @Test
  public void test070()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfCentury(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test071()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      String string0 = "p";
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test
  public void test072()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimePrinter dateTimePrinter0 = null;
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimePrinter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No printer supplied
         //
      }
  }

  @Test
  public void test073()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      int int0 = 46;
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_TimeZoneName0;
      assertNotNull(dateTimeParserArray0[0]);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(20, dateTimeParserArray0[0].estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0, dateTimeParserArray0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test
  public void test074()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      int int0 = 46;
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0, dateTimeParserArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No parser supplied
         //
      }
  }

  @Test
  public void test075()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[4];
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneId0, dateTimeParserArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incomplete parser array
         //
      }
  }

  @Test
  public void test076()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try {
        DateTimePrinter dateTimePrinter0 = dateTimeFormatterBuilder0.toPrinter();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing is not supported
         //
      }
  }

  @Test
  public void test077()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try {
        DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder0.toFormatter();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Both printing and parsing not supported
         //
      }
  }

  @Test
  public void test078()  throws Throwable  {
      int int0 = 1946;
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfDay(int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test
  public void test079()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      dateTimeFormatterBuilder0.clear();
  }

  @Test
  public void test080()  throws Throwable  {
      int int0 = (-975);
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfCentury(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "ce";
      boolean boolean0 = false;
      int int0 = 80;
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneOffset(string0, string0, boolean0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test082()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      char char0 = 't';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_CharacterLiteral0, (DateTimeParser) dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test083()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      int int0 = 46;
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      String string0 = File.separator;
      assertNotNull(string0);
      assertEquals("/", string0);
      
      int int1 = 0;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneName0);
      assertNotNull(dateTimeFormatter0);
      assertFalse(int0 == int1);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      Chronology chronology0 = dateTimeFormatter0.getChronology();
      assertNull(chronology0);
      assertFalse(int0 == int1);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, chronology0, locale0, (Integer) int0);
      assertNotNull(dateTimeParserBucket0);
      assertFalse(int0 == int1);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      int int2 = dateTimeFormatterBuilder_TimeZoneName0.parseInto(dateTimeParserBucket0, string0, int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals((-1), int2);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfDay(int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test084()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      String string0 = "]Q]s?_K<";
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendPattern(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
      }
  }

  @Test
  public void test085()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test
  public void test086()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildFormatter();
      assertFalse(boolean0);
  }

  @Test
  public void test087()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekShortText();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test088()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHalfdayOfDayText();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test
  public void test089()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      char char0 = 't';
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) char0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test090()  throws Throwable  {
      char char0 = '_';
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfSecond((int) char0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test091()  throws Throwable  {
      int int0 = 1946;
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSecondOfDay(int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test
  public void test092()  throws Throwable  {
      int int0 = (-1605);
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test093()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      int int0 = dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
      assertEquals(20, int0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfEra(int0, int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test094()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test095()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test096()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearText();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test097()  throws Throwable  {
      int int0 = (-1605);
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfDay(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test098()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      int int0 = 46;
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      String string0 = File.separator;
      assertNotNull(string0);
      assertEquals("/", string0);
      
      int int1 = 0;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneName0);
      assertNotNull(dateTimeFormatter0);
      assertFalse(int0 == int1);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      Chronology chronology0 = dateTimeFormatter0.getChronology();
      assertNull(chronology0);
      assertFalse(int0 == int1);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int1, chronology0, locale0, (Integer) int0);
      assertNotNull(dateTimeParserBucket0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      int int2 = dateTimeFormatterBuilder_TimeZoneName0.parseInto(dateTimeParserBucket0, string0, int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals((-1), int2);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfDay(int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test099()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test100()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      int int0 = 46;
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      String string0 = File.separator;
      assertNotNull(string0);
      assertEquals("/", string0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertNotNull(stringBuffer0);
      assertEquals("/", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals(17, stringBuffer0.capacity());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneName0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      
      Chronology chronology0 = dateTimeFormatter0.getChronology();
      assertNull(chronology0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      
      dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (long) int0, chronology0, int0, dateTimeZone0, locale0);
      assertEquals("/", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals(17, stringBuffer0.capacity());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
  }

  @Test
  public void test101()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      String string0 = "1970-01-01--0:00:04.901z";
      String string1 = yearMonth0.toString(string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("1970-01-01--0:00:04.901", string1);
      assertEquals(2, yearMonth0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test102()  throws Throwable  {
      int int0 = 4;
      Map<String, DateTimeZone> map0 = null;
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, map0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      assertEquals(false, pipedReader0.markSupported());
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      assertEquals(false, pipedReader0.ready());
      assertEquals(false, pipedReader0.markSupported());
      
      char char0 = '_';
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours((int) char0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+95:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+95:00", fixedDateTimeZone0.getID());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(gregorianChronology0);
      assertEquals("+95:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+95:00", fixedDateTimeZone0.getID());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      
      dateTimeFormatterBuilder_TimeZoneName0.printTo((Writer) pipedWriter0, (long) int0, (Chronology) gregorianChronology0, (int) char0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals(false, pipedReader0.ready());
      assertEquals(false, pipedReader0.markSupported());
      assertEquals("+95:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+95:00", fixedDateTimeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
  }

  @Test
  public void test103()  throws Throwable  {
      int int0 = (-1314);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      ReadablePartial readablePartial0 = null;
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      dateTimeFormatterBuilder_TimeZoneName0.printTo((Writer) pipedWriter0, readablePartial0, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
  }

  @Test
  public void test104()  throws Throwable  {
      int int0 = 2743;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      boolean boolean0 = true;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((Writer) stringWriter0);
      assertNotNull(mockPrintWriter0);
      assertEquals("", stringWriter0.toString());
      
      MonthDay monthDay0 = MonthDay.now();
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      
      ISOChronology iSOChronology0 = (ISOChronology)monthDay0.getChronology();
      assertNotNull(iSOChronology0);
      assertEquals(2, monthDay0.size());
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      
      dateTimeFormatterBuilder_FixedNumber0.printTo((Writer) mockPrintWriter0, (long) int0, (Chronology) iSOChronology0, int0, (DateTimeZone) cachedDateTimeZone0, locale0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(2, monthDay0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
  }

  @Test
  public void test105()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      
      long long0 = 0L;
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      String string0 = "0L7y9";
      Locale locale0 = new Locale(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("0l7y9", locale0.getLanguage());
      assertEquals("0l7y9", locale0.toString());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0, boolean0);
      assertNotNull(mockFileWriter0);
      
      int int0 = 100;
      DateTimeZone dateTimeZone0 = null;
      dateTimeFormatterBuilder_TextField0.printTo((Writer) mockFileWriter0, long0, (Chronology) julianChronology0, int0, dateTimeZone0, locale0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("0l7y9", locale0.getLanguage());
      assertEquals("0l7y9", locale0.toString());
  }

  @Test
  public void test106()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      
      int int0 = 128;
      String string0 = ";!cG~_RB7*T\\+jZ";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((File) mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = new Locale(string0, string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals(";!cg~_rb7*t\\+jz_;!CG~_RB7*T\\+JZ", locale0.toString());
      assertEquals(";!cg~_rb7*t\\+jz", locale0.getLanguage());
      assertEquals(";!CG~_RB7*T\\+JZ", locale0.getCountry());
      
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((long) int0, (Chronology) iSOChronology0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      dateTimeFormatterBuilder_TextField0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonthDay0, locale0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals(";!cg~_rb7*t\\+jz_;!CG~_RB7*T\\+JZ", locale0.toString());
      assertEquals(";!cg~_rb7*t\\+jz", locale0.getLanguage());
      assertEquals(";!CG~_RB7*T\\+JZ", locale0.getCountry());
      assertEquals(3, yearMonthDay0.size());
  }

  @Test
  public void test107()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      
      boolean boolean0 = false;
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      char char0 = 'u';
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (long) char0, (Chronology) gJChronology0, (int) char0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("\uBAA9\uC694\uC77C", stringWriter0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(3, stringBuffer0.length());
      assertEquals("\uBAA9\uC694\uC77C", stringBuffer0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
  }

  @Test
  public void test108()  throws Throwable  {
      char char0 = '<';
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      String string0 = "org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField";
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertNotNull(stringBuffer0);
      assertEquals("org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField", stringBuffer0.toString());
      assertEquals(62, stringBuffer0.length());
      assertEquals(78, stringBuffer0.capacity());
      
      DateMidnight dateMidnight0 = new DateMidnight((long) char0);
      assertNotNull(dateMidnight0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateMidnight0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) localDateTime0, locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(64, stringBuffer0.length());
      assertEquals("org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField20", stringBuffer0.toString());
      assertEquals(78, stringBuffer0.capacity());
      assertEquals(4, localDateTime0.size());
  }

  @Test
  public void test109()  throws Throwable  {
      String string0 = "ce";
      boolean boolean0 = false;
      int int0 = 80;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter((File) mockFile0, boolean0);
      assertNotNull(mockFileWriter0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(gregorianChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      YearMonth yearMonth0 = new YearMonth((Chronology) gregorianChronology0);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) mockFileWriter0, (ReadablePartial) yearMonth0, locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals(2, yearMonth0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
  }

  @Test
  public void test110()  throws Throwable  {
      char char0 = '{';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      ReadablePartial readablePartial0 = null;
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      try {
        dateTimeFormatterBuilder_CharacterLiteral0.printTo((Writer) pipedWriter0, readablePartial0, locale0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test111()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = dateTimeFormatterBuilder_Composite0.isPrinter();
      assertFalse(boolean0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((OutputStream) byteArrayOutputStream0, boolean0);
      assertNotNull(mockPrintStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((OutputStream) mockPrintStream0, boolean0);
      assertNotNull(mockPrintWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      char char0 = 'y';
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      dateTimeFormatterBuilder_CharacterLiteral0.printTo((Writer) mockPrintWriter0, (long) char0, (Chronology) gJChronology0, (int) char0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
  }

  @Test
  public void test112()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.minuteOfHour();
      assertNotNull(dateTimeField0);
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) iSOChronology0, dateTimeField0);
      assertNotNull(skipUndoDateTimeField0);
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals("minuteOfHour", skipUndoDateTimeField0.getName());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      
      DateTimeFieldType dateTimeFieldType0 = skipUndoDateTimeField0.getType();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals("minuteOfHour", skipUndoDateTimeField0.getName());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      
      int int0 = (-2461);
      String string0 = "_Wi}5*qQ)r-)(Tj{+ps";
      Locale locale0 = new Locale(string0, string0, string0);
      assertNotNull(locale0);
      assertEquals("_Wi}5*qQ)r-)(Tj{+ps", locale0.getVariant());
      assertEquals("_wi}5*qq)r-)(tj{+ps", locale0.getLanguage());
      assertEquals("_WI}5*QQ)R-)(TJ{+PS", locale0.getCountry());
      assertEquals("_wi}5*qq)r-)(tj{+ps__WI}5*QQ)R-)(TJ{+PS__Wi}5*qQ)r-)(Tj{+ps", locale0.toString());
      
      boolean boolean0 = false;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals("minuteOfHour", skipUndoDateTimeField0.getName());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertNotNull(stringBuffer0);
      assertEquals(19, stringBuffer0.length());
      assertEquals("_Wi}5*qQ)r-)(Tj{+ps", stringBuffer0.toString());
      assertEquals(35, stringBuffer0.capacity());
      
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-2461), (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) ethiopicChronology0, locale0, integer0, (int) integer0);
      assertNotNull(dateTimeParserBucket0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("_Wi}5*qQ)r-)(Tj{+ps", locale0.getVariant());
      assertEquals("_wi}5*qq)r-)(tj{+ps", locale0.getLanguage());
      assertEquals("_WI}5*QQ)R-)(TJ{+PS", locale0.getCountry());
      assertEquals("_wi}5*qq)r-)(tj{+ps__WI}5*QQ)R-)(TJ{+PS__Wi}5*qQ)r-)(Tj{+ps", locale0.toString());
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateTimeParserBucket0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("_Wi}5*qQ)r-)(Tj{+ps", locale0.getVariant());
      assertEquals("_wi}5*qq)r-)(tj{+ps", locale0.getLanguage());
      assertEquals("_WI}5*QQ)R-)(TJ{+PS", locale0.getCountry());
      assertEquals("_wi}5*qq)r-)(tj{+ps__WI}5*QQ)R-)(TJ{+PS__Wi}5*qQ)r-)(Tj{+ps", locale0.toString());
      
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (long) int0, (Chronology) ethiopicChronology0, int0, (DateTimeZone) cachedDateTimeZone0, locale0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals("minuteOfHour", skipUndoDateTimeField0.getName());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(21, stringBuffer0.length());
      assertEquals("_Wi}5*qQ)r-)(Tj{+ps59", stringBuffer0.toString());
      assertEquals(35, stringBuffer0.capacity());
      assertEquals("_Wi}5*qQ)r-)(Tj{+ps", locale0.getVariant());
      assertEquals("_wi}5*qq)r-)(tj{+ps", locale0.getLanguage());
      assertEquals("_WI}5*QQ)R-)(TJ{+PS", locale0.getCountry());
      assertEquals("_wi}5*qq)r-)(tj{+ps__WI}5*QQ)R-)(TJ{+PS__Wi}5*qQ)r-)(Tj{+ps", locale0.toString());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
  }

  @Test
  public void test113()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      
      String string0 = "TV&G8AkHIH!]5";
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      MonthDay monthDay0 = new MonthDay((Chronology) gJChronology0);
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      dateTimeFormatterBuilder_StringLiteral0.printTo((Writer) stringWriter0, (ReadablePartial) monthDay0, locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals(2, monthDay0.size());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("TV&G8AkHIH!]5", stringWriter0.toString());
  }

  @Test
  public void test114()  throws Throwable  {
      int int0 = 0;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      
      int int1 = dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength();
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(20, int1);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      
      String string0 = "org.joda.time.field.RemainderDateTimeField";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", stringWriter0.toString());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int1);
      assertNotNull(fixedDateTimeZone0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.020", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.020", fixedDateTimeZone0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      
      DateMidnight dateMidnight0 = DateMidnight.now((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(dateMidnight0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.020", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.020", fixedDateTimeZone0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(1392335999980L, dateMidnight0.getMillis());
      
      Interval interval0 = dateMidnight0.toInterval();
      assertNotNull(interval0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1392422399980L, interval0.getEndMillis());
      assertEquals(1392335999980L, interval0.getStartMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.020", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.020", fixedDateTimeZone0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(1392335999980L, dateMidnight0.getMillis());
      
      ISOChronology iSOChronology0 = (ISOChronology)interval0.getChronology();
      assertNotNull(iSOChronology0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1392422399980L, interval0.getEndMillis());
      assertEquals(1392335999980L, interval0.getStartMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.020", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.020", fixedDateTimeZone0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(1392335999980L, dateMidnight0.getMillis());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      
      dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (long) int1, (Chronology) iSOChronology0, int1, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1392422399980L, interval0.getEndMillis());
      assertEquals(1392335999980L, interval0.getStartMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.020", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.020", fixedDateTimeZone0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(1392335999980L, dateMidnight0.getMillis());
      assertEquals("org.joda.time.field.RemainderDateTimeField", stringBuffer0.toString());
      assertEquals(42, stringBuffer0.capacity());
      assertEquals(42, stringBuffer0.length());
      assertEquals("org.joda.time.field.RemainderDateTimeField", stringWriter0.toString());
  }

  @Test
  public void test115()  throws Throwable  {
      String string0 = "t-SU";
      // Undeclared exception!
      try {
        DateTime dateTime0 = DateTime.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"t-SU\" is malformed at \"-SU\"
         //
      }
  }

  @Test
  public void test116()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      String string0 = " M@9)";
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      String string1 = yearMonth0.toString(string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, yearMonth0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test117()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendEraText();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      
      int int0 = 8;
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTwoDigitWeekyear(int0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      
      DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder2.toFormatter();
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test
  public void test118()  throws Throwable  {
      char char0 = 'K';
      StringBuffer stringBuffer0 = null;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, char0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
      assertEquals(2, int0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      
      MockDate mockDate0 = new MockDate((int) char0, (int) char0, (int) char0, (int) char0, int0);
      assertNotNull(mockDate0);
      assertEquals("Wed Jun 17 03:02:00 GMT 1981", mockDate0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      YearMonthDay yearMonthDay0 = YearMonthDay.fromDateFields((Date) mockDate0);
      assertNotNull(yearMonthDay0);
      assertEquals("Wed Jun 17 03:02:00 GMT 1981", mockDate0.toString());
      assertEquals(3, yearMonthDay0.size());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (ReadablePartial) yearMonthDay0, locale0);
      assertEquals("Wed Jun 17 03:02:00 GMT 1981", mockDate0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(3, yearMonthDay0.size());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
  }

  @Test
  public void test119()  throws Throwable  {
      int int0 = 18;
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHourOfHalfday(int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneId();
      assertNotNull(dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      
      boolean boolean0 = dateTimeFormatterBuilder2.canBuildPrinter();
      assertTrue(boolean0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
  }

  @Test
  public void test120()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      
      int int0 = 1;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      DateTimeZone dateTimeZone0 = null;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      
      dateTimeFormatterBuilder_Fraction0.printTo((Writer) stringWriter0, (long) int0, (Chronology) islamicChronology0, int0, dateTimeZone0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("8", stringWriter0.toString());
  }

  @Test
  public void test121()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      
      int int0 = 1;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (ReadablePartial) timeOfDay0, locale0);
      assertEquals("0", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(1, stringBuffer0.length());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(4, timeOfDay0.size());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
  }
}
