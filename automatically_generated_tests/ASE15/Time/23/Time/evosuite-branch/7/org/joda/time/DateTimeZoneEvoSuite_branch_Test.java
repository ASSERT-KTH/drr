/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:50:27 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Date;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class DateTimeZoneEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      long long0 = (-1242L);
      String string0 = "GMT-\uADF8\uB9AC\uB2C8\uCE58 \uD45C\uC900\uC2DC";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      boolean boolean0 = true;
      long long1 = fixedDateTimeZone0.adjustOffset(long0, boolean0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals((-1242L), long1);
  }

  @Test
  public void test01()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      ReadableInstant readableInstant0 = null;
      int int0 = cachedDateTimeZone0.getOffset(readableInstant0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(0, int0);
      
      boolean boolean0 = false;
      long long0 = cachedDateTimeZone0.adjustOffset((long) int0, boolean0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(0L, long0);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = (-207);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-207:00", fixedDateTimeZone0.toString());
      assertEquals("-207:00", fixedDateTimeZone0.getID());
      
      LocalDateTime localDateTime0 = null;
      boolean boolean0 = fixedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-207:00", fixedDateTimeZone0.toString());
      assertEquals("-207:00", fixedDateTimeZone0.getID());
      assertFalse(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 322;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Mon Oct 01 15:27:22 GMT 2249", mockDate0.toString());
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Mon Oct 01 15:27:22 GMT 2249", mockDate0.toString());
      
      boolean boolean0 = cachedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Mon Oct 01 15:27:22 GMT 2249", mockDate0.toString());
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      long long0 = 31L;
      Chronology chronology0 = null;
      DateMidnight dateMidnight0 = new DateMidnight(long0, chronology0);
      assertNotNull(dateMidnight0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      
      int int0 = 0;
      Instant instant0 = dateMidnight0.toInstant();
      assertNotNull(instant0);
      assertEquals((-3600000L), instant0.getMillis());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      
      int int1 = fixedDateTimeZone0.getOffset((ReadableInstant) instant0);
      assertEquals((-3600000L), instant0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = 59;
      assertFalse(int2 == int1);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int1, int2);
      assertNotNull(fixedDateTimeZone1);
      assertEquals((-3600000L), instant0.getMillis());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("+00:59", fixedDateTimeZone1.toString());
      assertEquals("+00:59", fixedDateTimeZone1.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone1));
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotSame(fixedDateTimeZone0, fixedDateTimeZone1);
      
      long long1 = fixedDateTimeZone1.getMillisKeepLocal((DateTimeZone) fixedDateTimeZone0, (long) int0);
      assertEquals((-3600000L), instant0.getMillis());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("+00:59", fixedDateTimeZone1.toString());
      assertEquals("+00:59", fixedDateTimeZone1.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone1));
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertEquals(3540000L, long1);
  }

  @Test
  public void test05()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      int int0 = 0;
      long long0 = fixedDateTimeZone0.getMillisKeepLocal((DateTimeZone) fixedDateTimeZone0, (long) int0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0L, long0);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = (-16);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("-00:00:00.016", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.016", fixedDateTimeZone0.toString());
      
      boolean boolean0 = false;
      long long0 = fixedDateTimeZone0.convertLocalToUTC((long) int0, boolean0);
      assertEquals("-00:00:00.016", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.016", fixedDateTimeZone0.toString());
      assertEquals(0L, long0);
  }

  @Test
  public void test07()  throws Throwable  {
      long long0 = 31L;
      Chronology chronology0 = null;
      DateMidnight dateMidnight0 = new DateMidnight(long0, chronology0);
      assertNotNull(dateMidnight0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      
      int int0 = 0;
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfCentury(int0);
      assertNotNull(dateMidnight1);
      assertEquals((-2208988800000L), dateMidnight1.getMillis());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight0, dateMidnight1);
  }

  @Test
  public void test08()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      //  // Unstable assertion: assertNotNull(cachedDateTimeZone0);
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      long long0 = 9223372036854775802L;
      // Undeclared exception!
      try {
        long long1 = cachedDateTimeZone0.convertUTCToLocal(long0);
       //  fail("Expecting exception: ArithmeticException");
       // Unstable assertion
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "Asia/Kolkata";
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      //  // Unstable assertion: assertNotNull(simpleTimeZone0);
      //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id=Asia/Kolkata,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      //  // Unstable assertion: assertEquals(false, simpleTimeZone0.useDaylightTime());
      //  // Unstable assertion: assertEquals("Asia/Kolkata", simpleTimeZone0.getID());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getRawOffset());
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      //  // Unstable assertion: assertNotNull(cachedDateTimeZone0);
      //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id=Asia/Kolkata,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      //  // Unstable assertion: assertEquals(false, simpleTimeZone0.useDaylightTime());
      //  // Unstable assertion: assertEquals("Asia/Kolkata", simpleTimeZone0.getID());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getRawOffset());
      //  // Unstable assertion: assertEquals("Asia/Kolkata", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("Asia/Kolkata", cachedDateTimeZone0.getID());
      
      long long0 = 9223372036854775807L;
      int int1 = cachedDateTimeZone0.getOffsetFromLocal(long0);
      //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id=Asia/Kolkata,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      //  // Unstable assertion: assertEquals(false, simpleTimeZone0.useDaylightTime());
      //  // Unstable assertion: assertEquals("Asia/Kolkata", simpleTimeZone0.getID());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getRawOffset());
      //  // Unstable assertion: assertEquals("Asia/Kolkata", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("Asia/Kolkata", cachedDateTimeZone0.getID());
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(19800000, int1);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "America/Los_Angeles";
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("America/Los_Angeles", cachedDateTimeZone0.getID());
      assertEquals("America/Los_Angeles", cachedDateTimeZone0.toString());
      
      long long0 = 9223372036854775807L;
      int int1 = cachedDateTimeZone0.getOffsetFromLocal(long0);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("America/Los_Angeles", cachedDateTimeZone0.getID());
      assertEquals("America/Los_Angeles", cachedDateTimeZone0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-28378000), int1);
  }

  @Test
  public void test11()  throws Throwable  {
      long long0 = (-1242L);
      String string0 = "GMT-\uADF8\uB9AC\uB2C8\uCE58 \uD45C\uC900\uC2DC";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      boolean boolean0 = fixedDateTimeZone0.isStandardOffset(long0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 322;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      boolean boolean0 = cachedDateTimeZone0.isStandardOffset((long) int0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertFalse(boolean0);
  }

  @Test
  public void test13() {}
//   @Test
//   public void test13()  throws Throwable  {
//       BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
//       assertNotNull(buddhistChronology0);
//       
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
//       assertNotNull(cachedDateTimeZone0);
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       
//       ReadableInstant readableInstant0 = null;
//       int int0 = cachedDateTimeZone0.getOffset(readableInstant0);
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(0, int0);
//       
//       String string0 = cachedDateTimeZone0.getName((long) int0);
//       assertNotNull(string0);
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("\u82F1\u56FD\u590F\u6642\u9593", string0);
//   }

  @Test
  public void test14()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      long long0 = (-12219292800011L);
      String string0 = cachedDateTimeZone0.getShortName(long0);
      assertNotNull(string0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("-00:01:15", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 4;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.004", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.004", fixedDateTimeZone0.toString());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      
      String string0 = fixedDateTimeZone0.getShortName((long) int0, locale0);
      assertNotNull(string0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.004", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.004", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.004", string0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(fixedDateTimeZone1);
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("+00:00:00.004", fixedDateTimeZone1.toString());
      assertEquals("+00:00:00.004", fixedDateTimeZone1.getID());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.004", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.004", fixedDateTimeZone0.toString());
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)fixedDateTimeZone0.toTimeZone();
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=+00:00:00.004,offset=4,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(4, simpleTimeZone0.getRawOffset());
      assertEquals("+00:00:00.004", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.004", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.004", fixedDateTimeZone0.toString());
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      
      FixedDateTimeZone fixedDateTimeZone2 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertNotNull(fixedDateTimeZone2);
      assertEquals(true, fixedDateTimeZone2.isFixed());
      assertEquals("UTC", fixedDateTimeZone2.toString());
      assertEquals("UTC", fixedDateTimeZone2.getID());
      assertEquals("java.util.SimpleTimeZone[id=+00:00:00.004,offset=4,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(4, simpleTimeZone0.getRawOffset());
      assertEquals("+00:00:00.004", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.004", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.004", fixedDateTimeZone0.toString());
      assertFalse(fixedDateTimeZone2.equals((Object)fixedDateTimeZone1));
      assertFalse(fixedDateTimeZone2.equals((Object)fixedDateTimeZone0));
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone2));
      assertNotSame(fixedDateTimeZone2, fixedDateTimeZone1);
      assertNotSame(fixedDateTimeZone2, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertNotSame(fixedDateTimeZone0, fixedDateTimeZone2);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "GMT-\uADF8\uB9AC\uB2C8\uCE58 \uD45C\uC900\uC2DC";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("GMT-\uADF8\uB9AC\uB2C8\uCE58 \uD45C\uC900\uC2DC", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=GMT-\uADF8\uB9AC\uB2C8\uCE58 \uD45C\uC900\uC2DC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      // Undeclared exception!
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-\uADF8\uB9AC\uB2C8\uCE58 \uD45C\uC900\uC2DC\" is malformed at \"\uADF8\uB9AC\uB2C8\uCE58 \uD45C\uC900\uC2DC\"
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      DefaultNameProvider defaultNameProvider0 = (DefaultNameProvider)DateTimeZone.getNameProvider();
      assertNotNull(defaultNameProvider0);
      
      DateTimeZone.setNameProvider((NameProvider) defaultNameProvider0);
  }

  @Test
  public void test18()  throws Throwable  {
      NameProvider nameProvider0 = null;
      DateTimeZone.setNameProvider(nameProvider0);
  }

  @Test
  public void test19()  throws Throwable  {
      Provider provider0 = null;
      DateTimeZone.setProvider(provider0);
  }

  @Test
  public void test20()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      ReadableInstant readableInstant0 = null;
      int int0 = cachedDateTimeZone0.getOffset(readableInstant0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(0, int0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test
  public void test21()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)cachedDateTimeZone0.toTimeZone();
      assertNotNull(zoneInfo0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", zoneInfo0.getID());
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone.setProvider((Provider) uTCProvider0);
      // Undeclared exception!
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'Europe/London' is not recognised
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      long long0 = (-42521587200000L);
      String string0 = cachedDateTimeZone0.getName(long0);
      assertNotNull(string0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("-00:01:15", string0);
      
      long long1 = (-2703L);
      int int0 = cachedDateTimeZone0.getOffsetFromLocal(long1);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertFalse(long1 == long0);
      assertEquals(3600000, int0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("-00:01:15", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=-00:01:15,offset=3600000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(3600000, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("-00:01:15", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=-00:01:15,offset=3600000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(3600000, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+01:00", fixedDateTimeZone0.getID());
      assertEquals("+01:00", fixedDateTimeZone0.toString());
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test23()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)fixedDateTimeZone0.toTimeZone();
      assertNotNull(simpleTimeZone0);
      assertEquals("UTC", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertNotNull(fixedDateTimeZone1);
      assertEquals("UTC", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 623;
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 623
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 558;
      int int1 = (-3990);
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -3990
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = (-2);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("-00:00:00.002", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.002", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      
      String string0 = fixedDateTimeZone0.getName((long) int0, locale0);
      assertNotNull(string0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("-00:00:00.002", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.002", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.002", string0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(fixedDateTimeZone1);
      assertEquals("-00:00:00.002", fixedDateTimeZone1.getID());
      assertEquals("-00:00:00.002", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("-00:00:00.002", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.002", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "UTC";
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      DateTimeZone.setDefault((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
  }

  @Test
  public void test30()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try {
        DateTimeZone.setDefault(dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
      }
  }

  @Test
  public void test31() {}
//   @Test
//   public void test31()  throws Throwable  {
//       TimeZone timeZone0 = null;
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
//       assertNotNull(cachedDateTimeZone0);
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       
//       DateTimeZone dateTimeZone0 = null;
//       long long0 = 10800031L;
//       long long1 = cachedDateTimeZone0.getMillisKeepLocal(dateTimeZone0, long0);
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertTrue(long1 == long0);
//       assertTrue(long0 == long1);
//       assertEquals(10800031L, long1);
//   }

  @Test
  public void test32() {}
//   @Test
//   public void test32()  throws Throwable  {
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
//       assertNotNull(cachedDateTimeZone0);
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       
//       long long0 = (-42521587200000L);
//       String string0 = cachedDateTimeZone0.getName(long0);
//       assertNotNull(string0);
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("-00:01:15", string0);
//       
//       int int0 = cachedDateTimeZone0.getOffsetFromLocal(long0);
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals((-75000), int0);
//       
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
//       assertNotNull(simpleTimeZone0);
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("-00:01:15", simpleTimeZone0.getID());
//       assertEquals("java.util.SimpleTimeZone[id=-00:01:15,offset=-75000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(-75000, simpleTimeZone0.getRawOffset());
//       
//       FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
//       assertNotNull(fixedDateTimeZone0);
//       assertEquals("-00:01", fixedDateTimeZone0.getID());
//       assertEquals("-00:01", fixedDateTimeZone0.toString());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("-00:01:15", simpleTimeZone0.getID());
//       assertEquals("java.util.SimpleTimeZone[id=-00:01:15,offset=-75000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(-75000, simpleTimeZone0.getRawOffset());
//   }

  @Test
  public void test33() {}
//   @Test
//   public void test33()  throws Throwable  {
//       Set<String> set0 = DateTimeZone.getAvailableIDs();
//       assertNotNull(set0);
//       assertEquals(false, set0.isEmpty());
//       assertEquals(567, set0.size());
//   }

  @Test
  public void test34()  throws Throwable  {
      int int0 = (-2);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("-00:00:00.002", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.002", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      String string0 = fixedDateTimeZone0.toString();
      assertNotNull(string0);
      assertEquals("-00:00:00.002", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.002", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.002", string0);
  }

  @Test
  public void test35() {}
//   @Test
//   public void test35()  throws Throwable  {
//       ZoneInfoProvider zoneInfoProvider0 = (ZoneInfoProvider)DateTimeZone.getProvider();
//       assertNotNull(zoneInfoProvider0);
//   }

  @Test
  public void test36() {}
//   @Test
//   public void test36()  throws Throwable  {
//       BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
//       assertNotNull(buddhistChronology0);
//       
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
//       assertNotNull(cachedDateTimeZone0);
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       
//       ReadableInstant readableInstant0 = null;
//       int int0 = cachedDateTimeZone0.getOffset(readableInstant0);
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(0, int0);
//       
//       String string0 = cachedDateTimeZone0.getShortName((long) int0);
//       assertNotNull(string0);
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("BST", string0);
//   }

  @Test
  public void test37() {}
//   @Test
//   public void test37()  throws Throwable  {
//       TimeZone timeZone0 = null;
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
//       assertNotNull(cachedDateTimeZone0);
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       
//       Object object0 = cachedDateTimeZone0.writeReplace();
//       assertNotNull(object0);
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//   }
}
