/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:36:57 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.DateTimeFormatter;
import org.junit.runner.RunWith;

 
public class PartialEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      assertEquals(3, partial0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(partial0);
      
      String string0 = "=4H";
      Locale locale0 = Locale.TAIWAN;
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string1 = partial0.toString(string0, locale0);
      assertEquals(3, partial0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(3, localDate0.size());
      assertEquals("=4\uFFFD", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test01()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      assertEquals(3, partial0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(partial0);
      
      String string0 = "=4H";
      String string1 = partial0.toString(string0);
      assertEquals(3, partial0.size());
      assertEquals(3, localDate0.size());
      assertEquals("=4\uFFFD", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test02()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) ethiopicChronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      assertEquals(3, partial0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(partial0);
      
      String string0 = partial0.toStringList();
      assertEquals(3, partial0.size());
      assertEquals(3, localDate0.size());
      assertEquals("[year=2006, monthOfYear=6, dayOfMonth=7]", string0);
      assertNotNull(string0);
  }

  @Test
  public void test03()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 1716;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      String string0 = partial0.toString();
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertEquals("[centuryOfEra=1716]", string0);
      assertNotNull(string0);
      
      String string1 = null;
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("[centuryofera=1716]_[CENTURYOFERA=1716]_[centuryOfEra=1716]", locale0.toString());
      assertEquals("[CENTURYOFERA=1716]", locale0.getCountry());
      assertEquals("[centuryofera=1716]", locale0.getLanguage());
      assertEquals("[centuryOfEra=1716]", locale0.getVariant());
      assertEquals(1, partial0.size());
      assertNotNull(locale0);
      
      String string2 = partial0.toString(string1, locale0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("[centuryofera=1716]_[CENTURYOFERA=1716]_[centuryOfEra=1716]", locale0.toString());
      assertEquals("[CENTURYOFERA=1716]", locale0.getCountry());
      assertEquals("[centuryofera=1716]", locale0.getLanguage());
      assertEquals("[centuryOfEra=1716]", locale0.getVariant());
      assertEquals(1, partial0.size());
      assertEquals("[centuryOfEra=1716]", string2);
      assertNotNull(string2);
      assertTrue(string0.equals((Object)string2));
      assertTrue(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
  }

  @Test
  public void test04()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      DateTimeZone dateTimeZone0 = null;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      assertNotNull(gregorianChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) gregorianChronology0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      String string0 = partial0.toString();
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertEquals("00", string0);
      assertNotNull(string0);
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(dateTimeFormatter0);
      
      LocalDateTime localDateTime0 = LocalDateTime.parse(string0, dateTimeFormatter0);
      assertEquals(4, localDateTime0.size());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(localDateTime0);
      
      Partial partial1 = new Partial((ReadablePartial) localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(4, partial1.size());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      
      DateTimeFormatter dateTimeFormatter1 = partial1.getFormatter();
      assertEquals(4, localDateTime0.size());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(4, partial1.size());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(dateTimeFormatter1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
  }

  @Test
  public void test05()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      String string0 = null;
      String string1 = partial0.toString(string0);
      assertEquals(0, partial0.size());
      assertEquals("[]", string1);
      assertNotNull(string1);
  }

  @Test
  public void test06() {}
//   @Test
//   public void test06()  throws Throwable  {
//       LocalDate localDate0 = LocalDate.now();
//       assertEquals(3, localDate0.size());
//       assertNotNull(localDate0);
//       
//       Partial partial0 = new Partial((ReadablePartial) localDate0);
//       assertEquals(3, partial0.size());
//       assertEquals(3, localDate0.size());
//       assertNotNull(partial0);
//       
//       DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
//       assertEquals("dayOfMonth", dateTimeFieldType0.getName());
//       assertEquals("dayOfMonth", dateTimeFieldType0.toString());
//       assertNotNull(dateTimeFieldType0);
//       
//       int int0 = 1;
//       Partial partial1 = partial0.with(dateTimeFieldType0, int0);
//       assertEquals(3, partial0.size());
//       assertEquals(3, partial1.size());
//       assertEquals("dayOfMonth", dateTimeFieldType0.getName());
//       assertEquals("dayOfMonth", dateTimeFieldType0.toString());
//       assertEquals(3, localDate0.size());
//       assertNotNull(partial1);
//       assertFalse(partial0.equals((Object)partial1));
//       assertFalse(partial1.equals((Object)partial0));
//       assertNotSame(partial0, partial1);
//       assertNotSame(partial1, partial0);
//       
//       boolean boolean0 = partial1.isMatch((ReadablePartial) partial0);
//       assertEquals(3, partial0.size());
//       assertEquals(3, partial1.size());
//       assertEquals("dayOfMonth", dateTimeFieldType0.getName());
//       assertEquals("dayOfMonth", dateTimeFieldType0.toString());
//       assertEquals(3, localDate0.size());
//       assertFalse(boolean0);
//       assertFalse(partial0.equals((Object)partial1));
//       assertFalse(partial1.equals((Object)partial0));
//       assertNotSame(partial0, partial1);
//       assertNotSame(partial1, partial0);
//   }

  @Test
  public void test07()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      assertEquals(3, partial0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(partial0);
      
      boolean boolean0 = partial0.isMatch((ReadablePartial) partial0);
      assertEquals(3, partial0.size());
      assertEquals(3, localDate0.size());
      assertTrue(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      DateTimeZone dateTimeZone0 = null;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      assertNotNull(gregorianChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) gregorianChronology0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      ReadableInstant readableInstant0 = null;
      boolean boolean0 = partial0.isMatch(readableInstant0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      DateTimeZone dateTimeZone0 = null;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      assertNotNull(gregorianChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) gregorianChronology0);
      assertEquals(1, partial0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      long long0 = (-463L);
      DateTimeUtils.setCurrentMillisFixed(long0);
      ReadableInstant readableInstant0 = null;
      boolean boolean0 = partial0.isMatch(readableInstant0);
      assertEquals(1, partial0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertTrue(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      DateTimeZone dateTimeZone0 = null;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      assertNotNull(gregorianChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) gregorianChronology0);
      assertEquals(1, partial0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      DateTime dateTime0 = new DateTime((Object) dateTimeZone0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Hours hours0 = Hours.EIGHT;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Duration duration0 = hours0.toStandardDuration();
      assertEquals(28800000L, duration0.getMillis());
      assertEquals(1, hours0.size());
      assertNotNull(duration0);
      
      Period period0 = new Period((ReadableInstant) dateTime0, (ReadableDuration) duration0);
      assertEquals(28800000L, duration0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, hours0.size());
      assertNotNull(period0);
      
      MutablePeriod mutablePeriod0 = period0.toMutablePeriod();
      assertEquals(28800000L, duration0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, hours0.size());
      assertNotNull(mutablePeriod0);
      
      int int1 = (-235);
      // Undeclared exception!
      try {
        Partial partial1 = partial0.withPeriodAdded((ReadablePeriod) mutablePeriod0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Maximum value exceeded for add
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      int int0 = 0;
      Weeks weeks0 = Weeks.MIN_VALUE;
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Partial partial1 = partial0.withPeriodAdded((ReadablePeriod) weeks0, int0);
      assertEquals(0, partial1.size());
      assertEquals(0, partial0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
  }

  @Test
  public void test12() {}
//   @Test
//   public void test12()  throws Throwable  {
//       int int0 = 13;
//       LocalDate localDate0 = new LocalDate();
//       assertEquals(3, localDate0.size());
//       assertNotNull(localDate0);
//       
//       Partial partial0 = new Partial((ReadablePartial) localDate0);
//       assertEquals(3, partial0.size());
//       assertEquals(3, localDate0.size());
//       assertNotNull(partial0);
//       
//       Months months0 = Months.months(int0);
//       assertEquals(1, months0.size());
//       assertNotNull(months0);
//       
//       DurationFieldType durationFieldType0 = months0.getFieldType();
//       assertEquals(1, months0.size());
//       assertEquals("months", durationFieldType0.toString());
//       assertEquals("months", durationFieldType0.getName());
//       assertNotNull(durationFieldType0);
//       
//       int int1 = 0;
//       Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, int1);
//       assertEquals(3, partial0.size());
//       assertEquals(1, months0.size());
//       assertEquals(3, partial1.size());
//       assertEquals("months", durationFieldType0.toString());
//       assertEquals("months", durationFieldType0.getName());
//       assertEquals(3, localDate0.size());
//       assertNotNull(partial1);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertSame(partial0, partial1);
//       assertSame(partial1, partial0);
//   }

  @Test
  public void test13() {}
//   @Test
//   public void test13()  throws Throwable  {
//       LocalDate localDate0 = LocalDate.now();
//       assertEquals(3, localDate0.size());
//       assertNotNull(localDate0);
//       
//       Partial partial0 = new Partial((ReadablePartial) localDate0);
//       assertEquals(3, partial0.size());
//       assertEquals(3, localDate0.size());
//       assertNotNull(partial0);
//       
//       DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
//       assertEquals("dayOfMonth", dateTimeFieldType0.toString());
//       assertEquals("dayOfMonth", dateTimeFieldType0.getName());
//       assertNotNull(dateTimeFieldType0);
//       
//       Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
//       assertEquals(3, partial0.size());
//       assertEquals("dayOfMonth", dateTimeFieldType0.toString());
//       assertEquals("dayOfMonth", dateTimeFieldType0.getName());
//       assertEquals(3, localDate0.size());
//       assertNotNull(partial_Property0);
//       
//       DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
//       assertEquals("days", durationFieldType0.getName());
//       assertEquals("days", durationFieldType0.toString());
//       assertEquals("dayOfMonth", dateTimeFieldType0.toString());
//       assertEquals("dayOfMonth", dateTimeFieldType0.getName());
//       assertNotNull(durationFieldType0);
//       
//       int int0 = partial_Property0.get();
//       assertEquals(3, partial0.size());
//       assertEquals("dayOfMonth", dateTimeFieldType0.toString());
//       assertEquals("dayOfMonth", dateTimeFieldType0.getName());
//       assertEquals(3, localDate0.size());
//       assertEquals(14, int0);
//       
//       Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, int0);
//       assertEquals(3, partial0.size());
//       assertEquals("days", durationFieldType0.getName());
//       assertEquals("days", durationFieldType0.toString());
//       assertEquals("dayOfMonth", dateTimeFieldType0.toString());
//       assertEquals("dayOfMonth", dateTimeFieldType0.getName());
//       assertEquals(3, localDate0.size());
//       assertEquals(3, partial1.size());
//       assertNotNull(partial1);
//       assertFalse(partial0.equals((Object)partial1));
//       assertFalse(partial1.equals((Object)partial0));
//       assertNotSame(partial0, partial1);
//       assertNotSame(partial1, partial0);
//   }

  @Test
  public void test14()  throws Throwable  {
      Chronology chronology0 = null;
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[0].getName());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[0].toString());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[1].getName());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[1].toString());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[2].toString());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[2].getName());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.monthOfYear();
      assertEquals("monthOfYear", dateTimeFieldType1.getName());
      assertEquals("monthOfYear", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldType1);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType1;
      assertEquals("monthOfYear", dateTimeFieldType1.getName());
      assertEquals("monthOfYear", dateTimeFieldType1.toString());
      assertEquals("monthOfYear", dateTimeFieldTypeArray0[3].toString());
      assertEquals("monthOfYear", dateTimeFieldTypeArray0[3].getName());
      assertNotNull(dateTimeFieldTypeArray0[3]);
      
      int[] intArray0 = new int[9];
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      assertEquals(5, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(partial0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int0 = 0;
      Partial partial1 = partial0.withFieldAdded(durationFieldType0, int0);
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertEquals(5, partial0.size());
      assertEquals(5, partial1.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(partial1);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
  }

  @Test
  public void test15() {}
//   @Test
//   public void test15()  throws Throwable  {
//       int int0 = 13;
//       LocalDate localDate0 = new LocalDate();
//       assertEquals(3, localDate0.size());
//       assertNotNull(localDate0);
//       
//       Partial partial0 = new Partial((ReadablePartial) localDate0);
//       assertEquals(3, partial0.size());
//       assertEquals(3, localDate0.size());
//       assertNotNull(partial0);
//       
//       Months months0 = Months.months(int0);
//       assertEquals(1, months0.size());
//       assertNotNull(months0);
//       
//       DurationFieldType durationFieldType0 = months0.getFieldType();
//       assertEquals(1, months0.size());
//       assertEquals("months", durationFieldType0.getName());
//       assertEquals("months", durationFieldType0.toString());
//       assertNotNull(durationFieldType0);
//       
//       Partial partial1 = partial0.withFieldAdded(durationFieldType0, int0);
//       assertEquals(3, partial1.size());
//       assertEquals(3, partial0.size());
//       assertEquals(1, months0.size());
//       assertEquals(3, localDate0.size());
//       assertEquals("months", durationFieldType0.getName());
//       assertEquals("months", durationFieldType0.toString());
//       assertNotNull(partial1);
//       assertFalse(partial1.equals((Object)partial0));
//       assertFalse(partial0.equals((Object)partial1));
//       assertNotSame(partial1, partial0);
//       assertNotSame(partial0, partial1);
//   }

  @Test
  public void test16()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 10;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.withField(dateTimeFieldType0, int0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertNotNull(partial1);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
  }

  @Test
  public void test17()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 70;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      int int1 = 142;
      Partial partial1 = partial0.withField(dateTimeFieldType0, int1);
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertNotNull(partial1);
      assertFalse(int1 == int0);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(int0 == int1);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
  }

  @Test
  public void test18() {}
//   @Test
//   public void test18()  throws Throwable  {
//       LocalDate localDate0 = LocalDate.now();
//       assertEquals(3, localDate0.size());
//       assertNotNull(localDate0);
//       
//       Partial partial0 = new Partial((ReadablePartial) localDate0);
//       assertEquals(3, localDate0.size());
//       assertEquals(3, partial0.size());
//       assertNotNull(partial0);
//       
//       DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
//       assertEquals("dayOfMonth", dateTimeFieldType0.toString());
//       assertEquals("dayOfMonth", dateTimeFieldType0.getName());
//       assertNotNull(dateTimeFieldType0);
//       
//       Partial partial1 = partial0.without(dateTimeFieldType0);
//       assertEquals(3, localDate0.size());
//       assertEquals(2, partial1.size());
//       assertEquals(3, partial0.size());
//       assertEquals("dayOfMonth", dateTimeFieldType0.toString());
//       assertEquals("dayOfMonth", dateTimeFieldType0.getName());
//       assertNotNull(partial1);
//       assertFalse(partial1.equals((Object)partial0));
//       assertFalse(partial0.equals((Object)partial1));
//       assertNotSame(partial1, partial0);
//       assertNotSame(partial0, partial1);
//   }

  @Test
  public void test19()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) ethiopicChronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      assertEquals(3, partial0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = null;
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertEquals(3, partial1.size());
      assertEquals(3, partial0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
  }

  @Test
  public void test20() {}
//   @Test
//   public void test20()  throws Throwable  {
//       LocalDate localDate0 = LocalDate.now();
//       assertEquals(3, localDate0.size());
//       assertNotNull(localDate0);
//       
//       Partial partial0 = new Partial((ReadablePartial) localDate0);
//       assertEquals(3, partial0.size());
//       assertEquals(3, localDate0.size());
//       assertNotNull(partial0);
//       
//       DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
//       assertEquals("dayOfMonth", dateTimeFieldType0.toString());
//       assertEquals("dayOfMonth", dateTimeFieldType0.getName());
//       assertNotNull(dateTimeFieldType0);
//       
//       int int0 = 1;
//       Partial partial1 = partial0.with(dateTimeFieldType0, int0);
//       assertEquals(3, partial0.size());
//       assertEquals(3, partial1.size());
//       assertEquals(3, localDate0.size());
//       assertEquals("dayOfMonth", dateTimeFieldType0.toString());
//       assertEquals("dayOfMonth", dateTimeFieldType0.getName());
//       assertNotNull(partial1);
//       assertFalse(partial0.equals((Object)partial1));
//       assertFalse(partial1.equals((Object)partial0));
//       assertNotSame(partial0, partial1);
//       assertNotSame(partial1, partial0);
//       
//       Partial partial2 = partial1.with(dateTimeFieldType0, int0);
//       assertEquals(3, partial0.size());
//       assertEquals(3, partial2.size());
//       assertEquals(3, partial1.size());
//       assertEquals(3, localDate0.size());
//       assertEquals("dayOfMonth", dateTimeFieldType0.toString());
//       assertEquals("dayOfMonth", dateTimeFieldType0.getName());
//       assertNotNull(partial2);
//       assertFalse(partial0.equals((Object)partial2));
//       assertFalse(partial0.equals((Object)partial1));
//       assertFalse(partial2.equals((Object)partial0));
//       assertFalse(partial1.equals((Object)partial0));
//       assertNotSame(partial0, partial2);
//       assertNotSame(partial0, partial1);
//       assertSame(partial2, partial1);
//       assertNotSame(partial2, partial0);
//       assertSame(partial1, partial2);
//       assertNotSame(partial1, partial0);
//   }

  @Test
  public void test21()  throws Throwable  {
      long long0 = (-1942L);
      Chronology chronology0 = null;
      LocalDate localDate0 = new LocalDate(long0, chronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(3, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 15356236;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 15356236 for weekOfWeekyear must not be larger than 53
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      int int0 = 0;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for yearOfEra must not be smaller than 1
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 1;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      assertEquals(3, partial0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(partial0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Partial partial1 = partial0.withChronologyRetainFields((Chronology) iSOChronology0);
      assertEquals(3, partial0.size());
      assertEquals(3, localDate0.size());
      assertEquals(3, partial1.size());
      assertNotNull(partial1);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
  }

  @Test
  public void test25()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 1716;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      Partial partial1 = partial0.withChronologyRetainFields((Chronology) buddhistChronology0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertNotNull(partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
  }

  @Test
  public void test26()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 65;
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      Partial partial0 = new Partial((ReadablePartial) localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertEquals(4, localTime0.size());
      assertEquals(4, partial0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(5, partial1.size());
      assertNotNull(partial1);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
  }

  @Test
  public void test28()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType1.toString());
      assertEquals("weekyear", dateTimeFieldType1.getName());
      assertNotNull(dateTimeFieldType1);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      
      int[] intArray0 = new int[4];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
      assertEquals("weekyear", dateTimeFieldType1.toString());
      assertEquals("weekyear", dateTimeFieldType1.getName());
      assertEquals("weekyear", dateTimeFieldTypeArray0[0].getName());
      assertEquals("weekyear", dateTimeFieldTypeArray0[0].toString());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertEquals("weekyear", dateTimeFieldTypeArray0[1].toString());
      assertEquals("weekyear", dateTimeFieldTypeArray0[1].getName());
      assertEquals("weekyear", dateTimeFieldType1.toString());
      assertEquals("weekyear", dateTimeFieldType1.getName());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[2].toString());
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[2].getName());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[3].getName());
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[3].toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[3]);
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: weekyear and weekyear
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 13;
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(3, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertEquals(4, partial1.size());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(3, partial0.size());
      assertNotNull(partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
  }

  @Test
  public void test30()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[0].toString());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[0].getName());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType1.toString());
      assertEquals("weekyear", dateTimeFieldType1.getName());
      assertNotNull(dateTimeFieldType1);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertEquals("weekyear", dateTimeFieldTypeArray0[1].getName());
      assertEquals("weekyear", dateTimeFieldTypeArray0[1].toString());
      assertEquals("weekyear", dateTimeFieldType1.toString());
      assertEquals("weekyear", dateTimeFieldType1.getName());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType1;
      assertEquals("weekyear", dateTimeFieldType1.toString());
      assertEquals("weekyear", dateTimeFieldType1.getName());
      assertEquals("weekyear", dateTimeFieldTypeArray0[2].getName());
      assertEquals("weekyear", dateTimeFieldTypeArray0[2].toString());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldTypeArray0[0];
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[3].toString());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[3].getName());
      assertNotNull(dateTimeFieldTypeArray0[3]);
      
      int[] intArray0 = new int[4];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: dayOfYear < weekyear
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("era", dateTimeFieldTypeArray0[0].getName());
      assertEquals("era", dateTimeFieldTypeArray0[0].toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldTypeArray0[1].getName());
      assertEquals("era", dateTimeFieldTypeArray0[1].toString());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertEquals("era", dateTimeFieldTypeArray0[2].getName());
      assertEquals("era", dateTimeFieldTypeArray0[2].toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      assertEquals("era", dateTimeFieldTypeArray0[3].toString());
      assertEquals("era", dateTimeFieldTypeArray0[3].getName());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[3]);
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      assertEquals("era", dateTimeFieldTypeArray0[4].getName());
      assertEquals("era", dateTimeFieldTypeArray0[4].toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[4]);
      
      dateTimeFieldTypeArray0[5] = dateTimeFieldType0;
      assertEquals("era", dateTimeFieldTypeArray0[5].toString());
      assertEquals("era", dateTimeFieldTypeArray0[5].getName());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[5]);
      
      int[] intArray0 = new int[6];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate unsupported: era and era
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[0].toString());
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[0].getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType1.toString());
      assertEquals("era", dateTimeFieldType1.getName());
      assertNotNull(dateTimeFieldType1);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertEquals("era", dateTimeFieldTypeArray0[1].toString());
      assertEquals("era", dateTimeFieldTypeArray0[1].getName());
      assertEquals("era", dateTimeFieldType1.toString());
      assertEquals("era", dateTimeFieldType1.getName());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[2].getName());
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[2].toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[3].toString());
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[3].getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[3]);
      
      int[] intArray0 = new int[4];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: dayOfMonth < era
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      Partial partial0 = new Partial((Chronology) julianChronology0);
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-237);
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -237 for era must not be smaller than 0
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[0].toString());
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[0].getName());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[1].getName());
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[1].toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[2].toString());
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[2].getName());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[3].toString());
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[3].getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[3]);
      
      int[] intArray0 = new int[4];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: dayOfMonth and dayOfMonth
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      int[] intArray0 = new int[12];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      int[] intArray0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must not be null
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      int[] intArray0 = new int[4];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null: index 0
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = (-572);
      Chronology chronology0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, int0, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 1716;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      ReadablePeriod readablePeriod0 = null;
      Partial partial1 = partial0.minus(readablePeriod0);
      assertEquals(1, partial0.size());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(1, partial1.size());
      assertNotNull(partial1);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
  }

  @Test
  public void test40()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = partial0.getFieldTypes();
      assertEquals(0, partial0.size());
      assertNotNull(dateTimeFieldTypeArray0);
  }

  @Test
  public void test41()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 1716;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      Months months0 = Months.TEN;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Partial partial1 = partial0.plus((ReadablePeriod) months0);
      assertEquals(1, months0.size());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertNotNull(partial1);
      assertTrue(partial1.equals((Object)partial0));
      assertTrue(partial0.equals((Object)partial1));
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
  }

  @Test
  public void test42()  throws Throwable  {
      Chronology chronology0 = null;
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      int[] intArray0 = new int[9];
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      assertEquals(5, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldTypeArray0[1]);
      assertEquals(5, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(partial_Property0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.addToCopy(intArray0[6]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test43() {}
//   @Test
//   public void test43()  throws Throwable  {
//       LocalDate localDate0 = LocalDate.now();
//       assertEquals(3, localDate0.size());
//       assertNotNull(localDate0);
//       
//       Partial partial0 = new Partial((ReadablePartial) localDate0);
//       assertEquals(3, localDate0.size());
//       assertEquals(3, partial0.size());
//       assertNotNull(partial0);
//       
//       DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
//       assertEquals("dayOfMonth", dateTimeFieldType0.toString());
//       assertEquals("dayOfMonth", dateTimeFieldType0.getName());
//       assertNotNull(dateTimeFieldType0);
//       
//       Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
//       assertEquals(3, localDate0.size());
//       assertEquals("dayOfMonth", dateTimeFieldType0.toString());
//       assertEquals("dayOfMonth", dateTimeFieldType0.getName());
//       assertEquals(3, partial0.size());
//       assertNotNull(partial_Property0);
//       
//       Partial partial1 = partial_Property0.withMinimumValue();
//       assertEquals(3, localDate0.size());
//       assertEquals(3, partial1.size());
//       assertEquals("dayOfMonth", dateTimeFieldType0.toString());
//       assertEquals("dayOfMonth", dateTimeFieldType0.getName());
//       assertEquals(3, partial0.size());
//       assertNotNull(partial1);
//       assertFalse(partial1.equals((Object)partial0));
//       assertFalse(partial0.equals((Object)partial1));
//       assertNotSame(partial1, partial0);
//       assertNotSame(partial0, partial1);
//   }

  @Test
  public void test44()  throws Throwable  {
      int int0 = (-1815);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Partial partial0 = new Partial((Chronology) gJChronology0);
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertEquals(0, partial0.size());
      assertNotNull(partial_Property0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.withMaximumValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      Partial partial0 = null;
      int int0 = 735;
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      
      String string0 = ",K4";
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.setCopy(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 10;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertEquals(1, partial0.size());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertNotNull(partial_Property0);
      
      Partial partial1 = partial_Property0.getPartial();
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
  }

  @Test
  public void test47() {}
//   @Test
//   public void test47()  throws Throwable  {
//       LocalDate localDate0 = LocalDate.now();
//       assertEquals(3, localDate0.size());
//       assertNotNull(localDate0);
//       
//       Partial partial0 = new Partial((ReadablePartial) localDate0);
//       assertEquals(3, localDate0.size());
//       assertEquals(3, partial0.size());
//       assertNotNull(partial0);
//       
//       DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
//       assertEquals("dayOfMonth", dateTimeFieldType0.toString());
//       assertEquals("dayOfMonth", dateTimeFieldType0.getName());
//       assertNotNull(dateTimeFieldType0);
//       
//       int int0 = 1;
//       Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
//       assertEquals(3, localDate0.size());
//       assertEquals(3, partial0.size());
//       assertEquals("dayOfMonth", dateTimeFieldType0.toString());
//       assertEquals("dayOfMonth", dateTimeFieldType0.getName());
//       assertNotNull(partial_Property0);
//       
//       Partial partial1 = partial_Property0.addWrapFieldToCopy(int0);
//       assertEquals(3, localDate0.size());
//       assertEquals(3, partial0.size());
//       assertEquals(3, partial1.size());
//       assertEquals("dayOfMonth", dateTimeFieldType0.toString());
//       assertEquals("dayOfMonth", dateTimeFieldType0.getName());
//       assertNotNull(partial1);
//       assertFalse(partial0.equals((Object)partial1));
//       assertFalse(partial1.equals((Object)partial0));
//       assertNotSame(partial0, partial1);
//       assertNotSame(partial1, partial0);
//   }
}
