/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:57:24 GMT 2014
 */

package org.joda.time.field;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.field.FieldUtils;
import org.junit.runner.RunWith;

 
public class FieldUtilsEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "13r is tosmall: ";
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FieldUtils.equals((Object) string0, object0);
      assertFalse(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = (-5);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-5), (int)integer0);
      
      Object object0 = null;
      boolean boolean0 = FieldUtils.equals(object0, (Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "13r is tosmall: ";
      boolean boolean0 = FieldUtils.equals((Object) string0, (Object) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      Object object0 = null;
      boolean boolean0 = FieldUtils.equals((Object) dateTimeFieldType0, object0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = (-2114);
      int int1 = (-28);
      int int2 = 1;
      int int3 = FieldUtils.getWrappedValue(int0, int0, int1, int2);
      assertFalse(int1 == int2);
      assertTrue(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals((-28), int3);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 0;
      int int1 = FieldUtils.safeNegate(int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      long long0 = (-3233L);
      long long1 = 1448L;
      int int2 = FieldUtils.safeMultiplyToInt(long0, long1);
      assertFalse(long1 == long0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(long0 == long1);
      assertEquals((-4681384), int2);
      
      int int3 = FieldUtils.getWrappedValue(int0, int1, int2, int1);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int0 == int3);
      assertFalse(long1 == long0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(long0 == long1);
      assertTrue(int1 == int0);
      assertTrue(int1 == int3);
      assertFalse(int1 == int2);
      assertEquals(0, int3);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = (-5);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-5), (int)integer0);
      
      String string0 = "Yer is too large: ";
      int int1 = (-3611);
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(string0, int0, (int) integer0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -5 for Yer is too large:  must be in the range [-5,-3611]
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "13r is tosmall: ";
      int int0 = 1085;
      FieldUtils.verifyValueBounds(string0, int0, int0, int0);
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 4978097;
      int int1 = (-2147483595);
      int int2 = (-8);
      int int3 = FieldUtils.getWrappedValue(int0, int1, int2, int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(3058188, int3);
      
      String string0 = "";
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(string0, int1, int0, int3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147483595 for  must be in the range [4978097,3058188]
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 73;
      int int1 = 2;
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeFieldType0, int0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 73 for dayOfWeek must be in the range [73,2]
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      long long0 = 1L;
      int int0 = FieldUtils.safeMultiplyToInt(long0, long0);
      assertEquals(1, int0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      FieldUtils.verifyValueBounds(dateTimeFieldType0, int0, int0, int0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-228);
      int int1 = 366;
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeFieldType0, int0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -228 for minuteOfHour must be in the range [366,366]
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertNotNull(dateTimeField0);
      
      int int0 = 408;
      int int1 = 20;
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeField0, int0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 408 for weekyear must be in the range [408,20]
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 1;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.minuteOfDay();
      assertEquals("minuteOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertNotNull(dateTimeField0);
      
      FieldUtils.verifyValueBounds(dateTimeField0, int0, int0, int0);
      assertEquals("minuteOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
  }

  @Test
  public void test14()  throws Throwable  {
      DateTimeField dateTimeField0 = null;
      int int0 = 53;
      int int1 = 676;
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeField0, int0, int1, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      long long0 = 2147483694L;
      // Undeclared exception!
      try {
        int int0 = FieldUtils.safeMultiplyToInt(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 4611686215995885636
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      long long0 = (-2147483648L);
      long long1 = 1799L;
      // Undeclared exception!
      try {
        int int0 = FieldUtils.safeMultiplyToInt(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -3863323082752
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      long long1 = (-1L);
      // Undeclared exception!
      try {
        long long2 = FieldUtils.safeMultiply(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      long long0 = 9223372036854775758L;
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeMultiply(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 9223372036854775758 * 9223372036854775758
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 0;
      int int1 = FieldUtils.safeNegate(int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      long long0 = (-3233L);
      int int2 = FieldUtils.safeMultiplyToInt(long0, (long) int1);
      assertTrue(int0 == int2);
      assertTrue(int0 == int1);
      assertTrue(int1 == int2);
      assertTrue(int1 == int0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
  }

  @Test
  public void test20()  throws Throwable  {
      long long0 = 1L;
      long long1 = 776L;
      int int0 = FieldUtils.safeMultiplyToInt(long0, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(776, int0);
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = 1085;
      long long0 = (-9223372036854775807L);
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeMultiply(long0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775807 * 1085
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      int int0 = (-1);
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeMultiply(long0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = 1085;
      long long0 = FieldUtils.safeMultiply((long) int0, int0);
      assertEquals(1177225L, long0);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = (-4259);
      int int1 = 0;
      long long0 = FieldUtils.safeMultiply((long) int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0L, long0);
  }

  @Test
  public void test25()  throws Throwable  {
      long long0 = (-980L);
      int int0 = 1;
      long long1 = FieldUtils.safeMultiply(long0, int0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals((-980L), long1);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = (-1);
      long long0 = FieldUtils.safeMultiply((long) int0, int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 2147483577;
      // Undeclared exception!
      try {
        int int1 = FieldUtils.safeMultiply(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 2147483577 * 2147483577
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 0;
      int int1 = FieldUtils.safeNegate(int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
      
      int int2 = FieldUtils.safeMultiply(int1, int1);
      assertTrue(int1 == int0);
      assertTrue(int1 == int2);
      assertTrue(int0 == int1);
      assertTrue(int0 == int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = (-2114);
      int int1 = 1;
      int int2 = FieldUtils.getWrappedValue(int0, int0, int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals((-2112), int2);
      
      int int3 = 292279017;
      assertFalse(int3 == int2);
      
      // Undeclared exception!
      try {
        int int4 = FieldUtils.safeMultiply(int2, int3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2112 * 292279017
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      long long0 = 24L;
      long long1 = (-9223372036854775804L);
      // Undeclared exception!
      try {
        long long2 = FieldUtils.safeSubtract(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 24 - -9223372036854775804
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = (-4259);
      long long0 = FieldUtils.safeSubtract((long) int0, (long) int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test32()  throws Throwable  {
      long long0 = (-78L);
      long long1 = 234L;
      long long2 = FieldUtils.safeSubtract(long0, long1);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertEquals((-312L), long2);
  }

  @Test
  public void test33()  throws Throwable  {
      long long0 = 604799991L;
      long long1 = FieldUtils.safeAdd(long0, long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(1209599982L, long1);
      
      int int0 = Integer.MIN_VALUE;
      long long2 = FieldUtils.safeAdd(long1, (long) int0);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals((-937883666L), long2);
  }

  @Test
  public void test34()  throws Throwable  {
      long long0 = (-9223372036854775785L);
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeAdd(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -9223372036854775785 + -9223372036854775785
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        int int1 = FieldUtils.safeAdd(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = 0;
      long long0 = (-3233L);
      long long1 = 1448L;
      int int1 = FieldUtils.safeMultiplyToInt(long0, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(int1 == int0);
      assertEquals((-4681384), int1);
      
      int int2 = FieldUtils.safeAdd(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals((-4681384), int2);
  }

  @Test
  public void test37()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = 7;
      int int2 = FieldUtils.safeAdd(int0, int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals((-2147483641), int2);
  }

  @Test
  public void test38()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        int int1 = FieldUtils.safeNegate(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      int int0 = 0;
      int int1 = FieldUtils.safeNegate(int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try {
        int int2 = FieldUtils.getWrappedValue(int0, int1, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MIN > MAX
         //
      }
  }

  @Test
  public void test40()  throws Throwable  {
      int int0 = 0;
      int int1 = FieldUtils.safeNegate(int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
      
      int int2 = FieldUtils.safeMultiplyToInt((long) int1, (long) int1);
      assertTrue(int1 == int0);
      assertTrue(int1 == int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertTrue(int0 == int2);
      assertTrue(int0 == int1);
      assertEquals(0, int2);
  }
}
