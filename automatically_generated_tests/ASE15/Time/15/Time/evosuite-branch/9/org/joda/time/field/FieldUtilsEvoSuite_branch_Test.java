/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:10:01 GMT 2014
 */

package org.joda.time.field;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.field.FieldUtils;
import org.junit.runner.RunWith;

 
public class FieldUtilsEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = null;
      boolean boolean0 = FieldUtils.equals(object0, object1);
      assertFalse(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 0;
      int int1 = FieldUtils.safeMultiplyToInt((long) int0, (long) int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      Object object0 = null;
      boolean boolean0 = FieldUtils.equals(object0, (Object) int1);
      assertFalse(boolean0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 0;
      int int1 = FieldUtils.safeMultiplyToInt((long) int0, (long) int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      boolean boolean0 = FieldUtils.equals((Object) int1, (Object) int1);
      assertTrue(boolean0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FieldUtils.equals((Object) integer0, object0);
      assertFalse(boolean0);
      assertTrue(integer0.equals((Object)int0));
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = (-388);
      int int1 = (-1);
      int int2 = FieldUtils.getWrappedValue(int0, int0, int0, int1);
      assertEquals((-388), int2);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 0;
      int int1 = FieldUtils.safeMultiplyToInt((long) int0, (long) int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      int int2 = (-471);
      assertFalse(int2 == int1);
      
      int int3 = FieldUtils.getWrappedValue(int0, int2, int1);
      assertEquals(0, int3);
      assertFalse(int0 == int2);
      assertTrue(int0 == int3);
      assertTrue(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int1 == int2);
      assertTrue(int1 == int3);
      assertTrue(int1 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = 1925;
      int int2 = FieldUtils.getWrappedValue(int0, int0, int0, int1);
      assertEquals(3852, int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      
      String string0 = "";
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(string0, int2, int2, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3852 for  must be in the range [3852,1925]
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 0;
      String string0 = "oK";
      FieldUtils.verifyValueBounds(string0, int0, int0, int0);
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = (-1);
      int int1 = 392;
      int int2 = FieldUtils.getWrappedValue(int0, int0, int0, int1);
      assertEquals(392, int2);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      String string0 = "4!~rK{";
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(string0, int0, int1, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for 4!~rK{ must be in the range [392,392]
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 408;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      
      int int1 = 90;
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeFieldType0, int0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 408 for weekyearOfCentury must be in the range [90,90]
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 408;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      
      FieldUtils.verifyValueBounds(dateTimeFieldType0, int0, int0, int0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
  }

  @Test
  public void test11()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      int int0 = (-55);
      int int1 = 547;
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeFieldType0, int0, int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -55 for clockhourOfDay must be in the range [547,-55]
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      DateTimeField dateTimeField0 = islamicChronology0.secondOfMinute();
      assertNotNull(dateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("secondOfMinute", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      int int0 = (-4158);
      int int1 = (-292269056);
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeField0, int0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -4158 for secondOfMinute must be in the range [-4158,-292269056]
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      DateTimeField dateTimeField0 = islamicChronology0.secondOfMinute();
      assertNotNull(dateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("secondOfMinute", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      
      int int0 = (-4158);
      FieldUtils.verifyValueBounds(dateTimeField0, int0, int0, int0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("secondOfMinute", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
  }

  @Test
  public void test14()  throws Throwable  {
      long long0 = 1L;
      int int0 = 0;
      int int1 = FieldUtils.safeMultiplyToInt(long0, long0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      DateTimeField dateTimeField0 = islamicChronology0.clockhourOfHalfday();
      assertNotNull(dateTimeField0);
      assertEquals("clockhourOfHalfday", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeField0, int0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for clockhourOfHalfday must be in the range [1,1]
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      long long0 = 1321L;
      long long1 = 999999999983L;
      // Undeclared exception!
      try {
        int int0 = FieldUtils.safeMultiplyToInt(long1, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 1320999999977543
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      long long0 = (-1993L);
      long long1 = 999999999881L;
      // Undeclared exception!
      try {
        int int0 = FieldUtils.safeMultiplyToInt(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -1992999999762833
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      long long0 = (-1L);
      long long1 = (-9223372036854775808L);
      // Undeclared exception!
      try {
        long long2 = FieldUtils.safeMultiply(long1, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = (-1680);
      long long0 = (-9223372036854775778L);
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeMultiply(long0, (long) int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775778 * -1680
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = 213;
      int int2 = FieldUtils.safeMultiplyToInt((long) int1, (long) integer0);
      assertEquals(0, int2);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
  }

  @Test
  public void test20()  throws Throwable  {
      long long0 = 999999999999999980L;
      int int0 = 27;
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeMultiply(long0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 999999999999999980 * 27
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = (-1);
      long long0 = (-9223372036854775808L);
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeMultiply(long0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      long long0 = 1L;
      long long1 = 3255L;
      int int0 = FieldUtils.safeMultiplyToInt(long0, long1);
      assertEquals(3255, int0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      long long2 = FieldUtils.safeMultiply(long1, int0);
      assertEquals(10595025L, long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
  }

  @Test
  public void test23()  throws Throwable  {
      long long0 = 1L;
      int int0 = FieldUtils.safeToInt(long0);
      assertEquals(1, int0);
      
      long long1 = FieldUtils.safeMultiply((long) int0, int0);
      assertEquals(1L, long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 0;
      long long0 = FieldUtils.safeMultiply((long) int0, int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = (-1);
      long long0 = FieldUtils.safeMultiply((long) int0, int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = (-3027);
      int int1 = (-2147483640);
      // Undeclared exception!
      try {
        int int2 = FieldUtils.safeMultiply(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -3027 * -2147483640
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 0;
      int int1 = FieldUtils.safeMultiply(int0, int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = (-1344);
      int int1 = 86400015;
      // Undeclared exception!
      try {
        int int2 = FieldUtils.safeMultiply(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -1344 * 86400015
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      long long1 = 1466L;
      // Undeclared exception!
      try {
        long long2 = FieldUtils.safeSubtract(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -9223372036854775808 - 1466
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = (-386);
      long long0 = FieldUtils.safeSubtract((long) int0, (long) int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = (-1680);
      long long0 = 79L;
      long long1 = FieldUtils.safeSubtract((long) int0, long0);
      assertEquals((-1759L), long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test32()  throws Throwable  {
      long long0 = 9223372036854775726L;
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeAdd(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 9223372036854775726 + 9223372036854775726
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = 0;
      long long0 = (-940L);
      long long1 = FieldUtils.safeAdd((long) int0, long0);
      assertEquals((-940L), long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test34()  throws Throwable  {
      long long0 = 1L;
      long long1 = FieldUtils.safeAdd(long0, long0);
      assertEquals(2L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = (-386);
      int int1 = (-2147483632);
      // Undeclared exception!
      try {
        int int2 = FieldUtils.safeAdd(int1, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483632 + -386
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      long long0 = 1L;
      int int0 = FieldUtils.safeToInt(long0);
      assertEquals(1, int0);
      
      int int1 = (-1132);
      assertFalse(int1 == int0);
      
      int int2 = FieldUtils.safeAdd(int0, int1);
      assertEquals((-1131), int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test
  public void test37()  throws Throwable  {
      int int0 = (-1680);
      int int1 = FieldUtils.safeAdd(int0, int0);
      assertEquals((-3360), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test38()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        int int1 = FieldUtils.safeNegate(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      int int0 = 0;
      int int1 = FieldUtils.safeNegate(int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test40()  throws Throwable  {
      int int0 = (-388);
      // Undeclared exception!
      try {
        int int1 = FieldUtils.getWrappedValue(int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MIN > MAX
         //
      }
  }
}
