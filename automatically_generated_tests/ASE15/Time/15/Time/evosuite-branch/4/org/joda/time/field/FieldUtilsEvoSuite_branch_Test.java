/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:18:09 GMT 2014
 */

package org.joda.time.field;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.ReadableDuration;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.field.FieldUtils;
import org.junit.runner.RunWith;

 
public class FieldUtilsEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "H5*";
      Object object0 = null;
      boolean boolean0 = FieldUtils.equals((Object) string0, object0);
      assertFalse(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      Object object0 = null;
      int int0 = (-2707);
      boolean boolean0 = FieldUtils.equals(object0, (Object) int0);
      assertFalse(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = (-1);
      int int1 = FieldUtils.safeToInt((long) int0);
      assertEquals((-1), int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = FieldUtils.equals((Object) int1, (Object) int1);
      assertTrue(boolean0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "k6.~R=";
      boolean boolean0 = FieldUtils.equals(object0, (Object) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = (-1);
      int int1 = (-999);
      int int2 = 1;
      int int3 = FieldUtils.getWrappedValue(int0, int1, int0, int2);
      assertEquals((-1), int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
  }

  @Test
  public void test05()  throws Throwable  {
      long long0 = 0L;
      int int0 = FieldUtils.safeToInt(long0);
      assertEquals(0, int0);
      
      int int1 = 2284;
      assertFalse(int1 == int0);
      
      int int2 = 2757;
      assertFalse(int2 == int0);
      
      int int3 = FieldUtils.getWrappedValue(int0, int0, int1, int2);
      assertEquals(2370, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test
  public void test06()  throws Throwable  {
      long long0 = 0L;
      int int0 = FieldUtils.safeToInt(long0);
      assertEquals(0, int0);
      
      int int1 = 2757;
      assertFalse(int1 == int0);
      
      int int2 = FieldUtils.getWrappedValue(int0, int0, int0, int1);
      assertEquals(0, int2);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "I2\\D!*#erUJ%_#$>)*D";
      int int0 = 690562341;
      int int1 = (-1);
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(string0, int0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 690562341 for I2\\D!*#erUJ%_#$>)*D must be in the range [690562341,-1]
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 0;
      String string0 = "A";
      FieldUtils.verifyValueBounds(string0, int0, int0, int0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = null;
      int int0 = (-1858);
      int int1 = (-1749);
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(string0, int0, int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1858 for null must be in the range [-1749,-1858]
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      int int0 = (-8);
      int int1 = (-2551);
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeFieldType0, int0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -8 for weekyear must be in the range [-2551,-2551]
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-89);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      
      FieldUtils.verifyValueBounds(dateTimeFieldType0, int0, int0, int0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 44;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      
      int int1 = 1381;
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeFieldType0, int0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 44 for dayOfWeek must be in the range [1381,1381]
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.secondOfMinute();
      assertNotNull(dateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("secondOfMinute", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      
      int int0 = 4605;
      int int1 = (-2855);
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeField0, int0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 4605 for secondOfMinute must be in the range [4605,-2855]
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) ethiopicChronology0);
      assertNotNull(strictChronology0);
      
      DateTimeField dateTimeField0 = strictChronology0.yearOfCentury();
      assertNotNull(dateTimeField0);
      assertEquals("yearOfCentury", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      
      int int0 = (-985);
      FieldUtils.verifyValueBounds(dateTimeField0, int0, int0, int0);
      assertEquals("yearOfCentury", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      DateTimeField dateTimeField0 = null;
      int int1 = 8;
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeField0, int0, int1, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      long long0 = 2147483624L;
      // Undeclared exception!
      try {
        int int0 = FieldUtils.safeMultiplyToInt(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 4611685915348173376
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = (-89);
      long long0 = 26607895200044L;
      // Undeclared exception!
      try {
        int int1 = FieldUtils.safeMultiplyToInt(long0, (long) int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -2368102672803916
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      long long1 = (-1L);
      // Undeclared exception!
      try {
        int int0 = FieldUtils.safeMultiplyToInt(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = (-3179);
      long long0 = 9223372036854775803L;
      // Undeclared exception!
      try {
        int int1 = FieldUtils.safeMultiplyToInt((long) int0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -3179 * 9223372036854775803
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1179);
      int int2 = FieldUtils.safeAdd(int1, int0);
      assertEquals((-1179), int2);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      
      int int3 = FieldUtils.safeMultiplyToInt((long) int2, (long) int0);
      assertEquals(0, int3);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int0 == int3);
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = (-1);
      int int1 = FieldUtils.safeToInt((long) int0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      long long0 = FieldUtils.safeMultiply((long) int0, (long) int0);
      assertEquals(1L, long0);
      assertTrue(int0 == int1);
      
      int int2 = FieldUtils.safeMultiplyToInt(long0, (long) int1);
      assertEquals((-1), int2);
      assertTrue(int1 == int0);
      assertTrue(int1 == int2);
      assertTrue(int0 == int2);
      assertTrue(int0 == int1);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = 0;
      int int1 = FieldUtils.safeAdd(int0, int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      long long0 = 1L;
      long long1 = FieldUtils.safeMultiply((long) int1, long0);
      assertEquals(0L, long1);
      assertTrue(int0 == int1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test23()  throws Throwable  {
      long long0 = 999999999999999973L;
      int int0 = 3235;
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeMultiply(long0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 999999999999999973 * 3235
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      int int0 = (-1);
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeMultiply(long0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      long long0 = 0L;
      int int0 = FieldUtils.safeMultiplyToInt(long0, long0);
      assertEquals(0, int0);
      
      int int1 = 72;
      assertFalse(int1 == int0);
      
      long long1 = FieldUtils.safeMultiply((long) int0, int1);
      assertEquals(0L, long1);
      assertFalse(int0 == int1);
      assertTrue(long0 == long1);
      assertFalse(int1 == int0);
      assertTrue(long1 == long0);
  }

  @Test
  public void test26()  throws Throwable  {
      long long0 = 0L;
      int int0 = FieldUtils.safeToInt(long0);
      assertEquals(0, int0);
      
      long long1 = FieldUtils.safeMultiply(long0, int0);
      assertEquals(0L, long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 1520;
      int int1 = 0;
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset is too large
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = (-2147483445);
      int int1 = 83;
      // Undeclared exception!
      try {
        int int2 = FieldUtils.safeMultiply(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483445 * 83
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 1;
      int int1 = FieldUtils.safeAdd(int0, int0);
      assertEquals(2, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      long long0 = (-9223372036854775808L);
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeSubtract((long) int1, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2 - -9223372036854775808
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = 0;
      int int1 = FieldUtils.safeAdd(int0, int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      long long0 = 1L;
      long long1 = FieldUtils.safeSubtract((long) int1, long0);
      assertEquals((-1L), long1);
      assertTrue(int0 == int1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertTrue(int1 == int0);
  }

  @Test
  public void test31()  throws Throwable  {
      long long0 = 0L;
      int int0 = FieldUtils.safeToInt(long0);
      assertEquals(0, int0);
      
      long long1 = FieldUtils.safeSubtract((long) int0, (long) int0);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = (-8);
      long long0 = (-9223372036854775808L);
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeAdd(long0, (long) int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -9223372036854775808 + -8
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      long long0 = 0L;
      int int0 = FieldUtils.safeToInt(long0);
      assertEquals(0, int0);
      
      int int1 = 2284;
      assertFalse(int1 == int0);
      
      Duration duration0 = Duration.standardMinutes((long) int0);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      assertFalse(int0 == int1);
      
      Duration duration1 = duration0.minus((long) int1);
      assertNotNull(duration1);
      assertNotSame(duration1, duration0);
      assertNotSame(duration0, duration1);
      assertEquals((-2284L), duration1.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertFalse(int0 == int1);
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(int1 == int0);
      
      Duration duration2 = duration1.plus((ReadableDuration) duration1);
      assertNotNull(duration2);
      assertNotSame(duration1, duration2);
      assertNotSame(duration1, duration0);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertEquals((-2284L), duration1.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals((-4568L), duration2.getMillis());
      assertFalse(int0 == int1);
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(int1 == int0);
  }

  @Test
  public void test34()  throws Throwable  {
      long long0 = (-2147483631L);
      int int0 = FieldUtils.safeToInt(long0);
      assertEquals((-2147483631), int0);
      
      // Undeclared exception!
      try {
        int int1 = FieldUtils.safeAdd(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483631 + -2147483631
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1179);
      int int2 = FieldUtils.safeAdd(int1, int0);
      assertEquals((-1179), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      
      int int3 = FieldUtils.safeAdd(int0, int2);
      assertEquals((-1179), int3);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int2 == int3);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int1 == int2);
      assertTrue(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        int int1 = FieldUtils.safeNegate(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      int int0 = 1;
      int int1 = FieldUtils.safeAdd(int0, int0);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      int int2 = FieldUtils.safeNegate(int1);
      assertEquals((-2), int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test
  public void test38()  throws Throwable  {
      long long0 = 0L;
      int int0 = FieldUtils.safeToInt(long0);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try {
        int int1 = FieldUtils.getWrappedValue(int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MIN > MAX
         //
      }
  }
}
