/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:42:45 GMT 2014
 */

package org.joda.time.chrono;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Hours;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class GJChronologyEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      long long0 = (-2172L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      int int0 = 1;
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, long0, int0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
      assertNotNull(gJChronology1);
      
      long long1 = (-3009L);
      long long2 = gJChronology0.julianToGregorianByYear(long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertNotSame(gJChronology0, gJChronology1);
      assertEquals((-1123202172L), long2);
      
      Weeks weeks0 = Weeks.THREE;
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Minutes minutes0 = weeks0.toStandardMinutes();
      assertEquals(1, weeks0.size());
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      Hours hours0 = minutes0.toStandardHours();
      assertEquals(1, weeks0.size());
      assertEquals(1, minutes0.size());
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      MutablePeriod mutablePeriod0 = hours0.toMutablePeriod();
      assertEquals(1, weeks0.size());
      assertEquals(1, minutes0.size());
      assertEquals(1, hours0.size());
      assertNotNull(mutablePeriod0);
      
      int[] intArray0 = gJChronology1.get((ReadablePeriod) mutablePeriod0, long2, long1);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(1, weeks0.size());
      assertEquals(1, minutes0.size());
      assertEquals(1, hours0.size());
      assertArrayEquals(new int[] {0, 0, 1, 5, 23, 59, 59, 163}, intArray0);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertNotSame(gJChronology1, gJChronology0);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotNull(intArray0);
  }

  @Test
  public void test01()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gJChronology0);
      assertNotNull(lenientChronology0);
      
      int int0 = 1296;
      DateMidnight dateMidnight0 = new DateMidnight(int0, int0, int0, (Chronology) lenientChronology0);
      assertEquals((-17751311925000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int1 = 153692453;
      DateMidnight dateMidnight1 = dateMidnight0.withYear(int1);
      assertEquals(4850003209474800000L, dateMidnight1.getMillis());
      assertEquals((-17751311925000L), dateMidnight0.getMillis());
      assertFalse(int0 == int1);
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(int1 == int0);
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotNull(dateMidnight1);
  }

  @Test
  public void test02()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gJChronology0);
      assertNotNull(lenientChronology0);
      
      int int0 = 2230;
      DateMidnight dateMidnight0 = new DateMidnight(int0, int0, int0, (Chronology) lenientChronology0);
      assertEquals(14259024000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
  }

  @Test
  public void test03()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      long long0 = (-2172L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      int int0 = 1;
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, long0, int0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
      assertNotNull(gJChronology1);
      
      long long1 = gJChronology0.julianToGregorianByYear(int0);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(long1 == long0);
      assertNotSame(gJChronology0, gJChronology1);
      assertEquals((-1123199999L), long1);
      
      Weeks weeks0 = Weeks.THREE;
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Minutes minutes0 = weeks0.toStandardMinutes();
      assertEquals(1, weeks0.size());
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      Hours hours0 = minutes0.toStandardHours();
      assertEquals(1, weeks0.size());
      assertEquals(1, minutes0.size());
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      MutablePeriod mutablePeriod0 = hours0.toMutablePeriod();
      assertEquals(1, weeks0.size());
      assertEquals(1, minutes0.size());
      assertEquals(1, hours0.size());
      assertNotNull(mutablePeriod0);
      
      int[] intArray0 = gJChronology1.get((ReadablePeriod) mutablePeriod0, long1, long0);
      assertEquals(1, weeks0.size());
      assertEquals(1, minutes0.size());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1, hours0.size());
      assertArrayEquals(new int[] {0, 0, 1, 5, 23, 59, 57, 827}, intArray0);
      assertFalse(long0 == long1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(long1 == long0);
      assertNotSame(gJChronology1, gJChronology0);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotNull(intArray0);
  }

  @Test
  public void test04()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateMidnight0.getZone();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (ReadableInstant) dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(gJChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) gJChronology0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(localDate0);
      
      int int0 = 582;
      LocalDate localDate1 = localDate0.minusYears(int0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
      assertNotNull(localDate1);
  }

  @Test
  public void test05()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = 1;
      long long0 = gJChronology0.getDateTimeMillis(int0, int0, int0, int0, int0, int0, int0);
      assertEquals((-62135765938999L), long0);
      
      Period period0 = Period.minutes(int0);
      assertNotNull(period0);
      
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, long0, (long) int0);
      assertArrayEquals(new int[] {1968, 11, 4, 2, 22, 58, 59, 0}, intArray0);
      assertNotNull(intArray0);
  }

  @Test
  public void test06()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) gJChronology0);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      int int0 = 3475;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.dayOfYear, cachedDateTimeZone0, assembledChronology_Fields0.halfdays, assembledChronology_Fields0.months, assembledChronology_Fields0.weekyears);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = zonedChronology_ZonedDateTimeField0.roundCeiling((long) int0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(79200000L, long0);
  }

  @Test
  public void test07()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) gJChronology0);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = 100000000000000000L;
      DateMidnight dateMidnight0 = new DateMidnight(long0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(99999999964800000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)dateMidnight0.toCalendar(locale0);
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, gregorianCalendar0.isLenient());
      assertEquals("java.util.GregorianCalendar[time=99999999964800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3170843,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=7,DAY_OF_YEAR=311,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(99999999964800000L, dateMidnight0.getMillis());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(gregorianCalendar0);
      
      YearMonthDay yearMonthDay0 = YearMonthDay.fromCalendarFields((Calendar) gregorianCalendar0);
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, gregorianCalendar0.isLenient());
      assertEquals("java.util.GregorianCalendar[time=99999999964800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3170843,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=7,DAY_OF_YEAR=311,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(99999999964800000L, dateMidnight0.getMillis());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(yearMonthDay0);
      
      int int0 = 3475;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.dayOfYear, cachedDateTimeZone0, assembledChronology_Fields0.halfdays, assembledChronology_Fields0.months, assembledChronology_Fields0.weekyears);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      int int1 = zonedChronology_ZonedDateTimeField0.getMinimumValue(long0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = int1;
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      
      intArray0[1] = int0;
      // Undeclared exception!
      try {
        int int2 = zonedChronology_ZonedDateTimeField0.getMaximumValue((ReadablePartial) yearMonthDay0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) gJChronology0);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = 100000000000000000L;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.dayOfYear, cachedDateTimeZone0, assembledChronology_Fields0.halfdays, assembledChronology_Fields0.months, assembledChronology_Fields0.weekyears);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      int int0 = zonedChronology_ZonedDateTimeField0.getLeapAmount(long0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(0, int0);
  }

  @Test
  public void test09()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) gJChronology0);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      int int0 = 3475;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.dayOfYear, cachedDateTimeZone0, assembledChronology_Fields0.halfdays, assembledChronology_Fields0.months, assembledChronology_Fields0.weekyears);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      boolean boolean0 = zonedChronology_ZonedDateTimeField0.isLeap((long) int0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertFalse(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) gJChronology0);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = 100000000000000000L;
      DateMidnight dateMidnight0 = new DateMidnight(long0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals(99999999964800000L, dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(dateMidnight0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)dateMidnight0.toCalendar(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(true, gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("java.util.GregorianCalendar[time=99999999964800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3170843,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=7,DAY_OF_YEAR=311,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(99999999964800000L, dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(gregorianCalendar0);
      
      YearMonthDay yearMonthDay0 = YearMonthDay.fromCalendarFields((Calendar) gregorianCalendar0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(true, gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("java.util.GregorianCalendar[time=99999999964800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3170843,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=7,DAY_OF_YEAR=311,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(99999999964800000L, dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(yearMonthDay0);
      
      int int0 = 3454;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.dayOfYear, cachedDateTimeZone0, assembledChronology_Fields0.halfdays, assembledChronology_Fields0.months, assembledChronology_Fields0.weekyears);
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      Months months0 = Months.monthsBetween((ReadablePartial) yearMonthDay0, (ReadablePartial) yearMonthDay0);
      assertEquals(1, months0.size());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(true, gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("java.util.GregorianCalendar[time=99999999964800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3170843,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=7,DAY_OF_YEAR=311,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(99999999964800000L, dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(months0);
      
      long long1 = gJChronology0.add((ReadablePeriod) months0, (long) int0, int0);
      assertEquals(1, months0.size());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(true, gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("java.util.GregorianCalendar[time=99999999964800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3170843,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=7,DAY_OF_YEAR=311,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(99999999964800000L, dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(3454L, long1);
      
      String string0 = zonedChronology_ZonedDateTimeField0.getAsShortText(long1);
      assertEquals(1, months0.size());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(3, yearMonthDay0.size());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("java.util.GregorianCalendar[time=99999999964800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3170843,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=7,DAY_OF_YEAR=311,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(99999999964800000L, dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals("1", string0);
      assertNotNull(string0);
      
      long long2 = zonedChronology_ZonedDateTimeField0.set(long0, string0, locale0);
      assertEquals(1, months0.size());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(3, yearMonthDay0.size());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("java.util.GregorianCalendar[time=99999999964800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3170843,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=7,DAY_OF_YEAR=311,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(99999999964800000L, dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertEquals(99999973216000000L, long2);
  }

  @Test
  public void test11()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) gJChronology0);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = 100000000000000000L;
      DateMidnight dateMidnight0 = new DateMidnight(long0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(99999999964800000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)dateMidnight0.toCalendar(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("java.util.GregorianCalendar[time=99999999964800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3170843,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=7,DAY_OF_YEAR=311,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(99999999964800000L, dateMidnight0.getMillis());
      assertNotNull(gregorianCalendar0);
      
      YearMonthDay yearMonthDay0 = YearMonthDay.fromCalendarFields((Calendar) gregorianCalendar0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("java.util.GregorianCalendar[time=99999999964800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3170843,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=7,DAY_OF_YEAR=311,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(99999999964800000L, dateMidnight0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      int int0 = 3454;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.dayOfYear, cachedDateTimeZone0, assembledChronology_Fields0.halfdays, assembledChronology_Fields0.months, assembledChronology_Fields0.weekyears);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      String string0 = zonedChronology_ZonedDateTimeField0.getAsText((ReadablePartial) yearMonthDay0, int0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("java.util.GregorianCalendar[time=99999999964800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3170843,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=7,DAY_OF_YEAR=311,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(99999999964800000L, dateMidnight0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals("3454", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try {
        long long1 = zonedChronology_ZonedDateTimeField0.set(long0, string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3454 for dayOfYear must be in the range [1,365]
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateMidnight0.getZone();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (ReadableInstant) dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(gJChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) gJChronology0);
      assertEquals(3, localDate0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(localDate0);
      
      int int0 = 582;
      long long0 = gJChronology0.set((ReadablePartial) localDate0, (long) int0);
      assertEquals(3, localDate0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1392339600582L, long0);
  }

  @Test
  public void test13()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = 1296;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      assertEquals("Sun Sep 11 21:36:00 GMT 3307", mockDate0.toString());
      assertNotNull(mockDate0);
      
      YearMonthDay yearMonthDay0 = YearMonthDay.fromDateFields((Date) mockDate0);
      assertEquals("Sun Sep 11 21:36:00 GMT 3307", mockDate0.toString());
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      YearMonthDay yearMonthDay1 = yearMonthDay0.withChronologyRetainFields((Chronology) gJChronology0);
      assertEquals("Sun Sep 11 21:36:00 GMT 3307", mockDate0.toString());
      assertEquals(3, yearMonthDay1.size());
      assertEquals(3, yearMonthDay0.size());
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertNotNull(yearMonthDay1);
      
      YearMonthDay yearMonthDay2 = yearMonthDay1.withYear(int0);
      assertEquals("Sun Sep 11 21:36:00 GMT 3307", mockDate0.toString());
      assertEquals(3, yearMonthDay1.size());
      assertEquals(3, yearMonthDay2.size());
      assertEquals(3, yearMonthDay0.size());
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay2));
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay2.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay2.equals((Object)yearMonthDay1));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay2));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertNotSame(yearMonthDay1, yearMonthDay2);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay2, yearMonthDay0);
      assertNotSame(yearMonthDay2, yearMonthDay1);
      assertNotSame(yearMonthDay0, yearMonthDay2);
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertNotNull(yearMonthDay2);
  }

  @Test
  public void test14()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) gJChronology0);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      int int0 = 3475;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.dayOfYear, cachedDateTimeZone0, assembledChronology_Fields0.halfdays, assembledChronology_Fields0.months, assembledChronology_Fields0.weekyears);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      String string0 = zonedChronology_ZonedDateTimeField0.getAsText((long) int0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("1", string0);
      assertNotNull(string0);
  }

  @Test
  public void test15()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      gJChronology0.assemble(assembledChronology_Fields0);
  }

  @Test
  public void test16()  throws Throwable  {
      long long0 = 0L;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      int int0 = 1;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, long0, int0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(gJChronology0);
      
      String string0 = gJChronology0.toString();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("GJChronology[UTC,cutover=1970-01-01,mdfw=1]", string0);
      assertNotNull(string0);
  }

  @Test
  public void test17()  throws Throwable  {
      long long0 = (-2172L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      int int0 = 1;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, long0, int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(gJChronology0);
      
      String string0 = gJChronology0.toString();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("GJChronology[UTC,cutover=1969-12-31T23:59:57.828Z,mdfw=1]", string0);
      assertNotNull(string0);
  }

  @Test
  public void test18()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[UTC]", string0);
      assertNotNull(string0);
  }

  @Test
  public void test19()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = 1092L;
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0, (Chronology) gJChronology0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      DateTime dateTime0 = yearMonthDay0.toDateTimeAtMidnight((DateTimeZone) fixedDateTimeZone0);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(dateTime0);
  }

  @Test
  public void test20()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = 0;
      int int1 = 2;
      int int2 = (-1803);
      try {
        long long0 = gJChronology0.getDateTimeMillis(int0, int1, int1, int0, int0, int2, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1803 for secondOfMinute must be in the range [0,59]
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = 0;
      try {
        long long0 = gJChronology0.getDateTimeMillis(int0, int0, int0, int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = 339;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      int int1 = 1;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) int0, int1);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.getDateTimeMillis(int0, int1, int1, int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-51469343999661L), long0);
  }

  @Test
  public void test23()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = 2591;
      int int1 = 1;
      long long0 = gJChronology0.getDateTimeMillis(int0, int1, int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(19596902402591L, long0);
  }

  @Test
  public void test24()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateMidnight0.getZone();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (ReadableInstant) dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(gJChronology0);
      
      int int0 = 582;
      try {
        long long0 = gJChronology0.getDateTimeMillis(int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 582 for monthOfYear must be in the range [1,12]
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = 1296;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      assertEquals("Sun Sep 11 21:36:00 GMT 3307", mockDate0.toString());
      assertNotNull(mockDate0);
      
      YearMonthDay yearMonthDay0 = YearMonthDay.fromDateFields((Date) mockDate0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals("Sun Sep 11 21:36:00 GMT 3307", mockDate0.toString());
      assertNotNull(yearMonthDay0);
      
      YearMonthDay yearMonthDay1 = yearMonthDay0.withChronologyRetainFields((Chronology) gJChronology0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, yearMonthDay1.size());
      assertEquals("Sun Sep 11 21:36:00 GMT 3307", mockDate0.toString());
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotNull(yearMonthDay1);
      
      DateTime dateTime0 = yearMonthDay1.toDateTimeAtCurrentTime();
      assertEquals(42213554481320L, dateTime0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, yearMonthDay1.size());
      assertEquals("Sun Sep 11 21:36:00 GMT 3307", mockDate0.toString());
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotNull(dateTime0);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = (-1681);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:01.681", fixedDateTimeZone0.toString());
      assertEquals("-00:00:01.681", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = (-12219292800000L);
      // Undeclared exception!
      try {
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, long0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -1681
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      boolean boolean0 = gJChronology0.equals((Object) gJChronology0);
      assertTrue(boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) buddhistChronology0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = 120;
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(int0);
      assertEquals((-75512217600000L), dateMidnight1.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotNull(dateMidnight1);
  }

  @Test
  public void test29()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertSame(gJChronology1, gJChronology0);
      assertSame(gJChronology0, gJChronology1);
      assertNotNull(gJChronology1);
  }

  @Test
  public void test30()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      long long0 = 3356L;
      long long1 = gJChronology0.julianToGregorianByWeekyear(long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals((-1209596644L), long1);
  }

  @Test
  public void test31()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      //  // Unstable assertion: assertNotNull(gJChronology0);
      
      int int0 = gJChronology0.hashCode();
      //  // Unstable assertion: assertEquals(302621044, int0);
  }

  @Test
  public void test32()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) gJChronology0);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      int int0 = 3475;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.dayOfYear, cachedDateTimeZone0, assembledChronology_Fields0.halfdays, assembledChronology_Fields0.months, assembledChronology_Fields0.weekyears);
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      int int1 = zonedChronology_ZonedDateTimeField0.getDifference((long) int0, (long) int0);
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, int1);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) cachedDateTimeZone0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(localDateTime0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = zonedChronology_ZonedDateTimeField0.getAsShortText((ReadablePartial) localDateTime0, int1, locale0);
      assertEquals(4, localDateTime0.size());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("0", string0);
      assertNotNull(string0);
  }

  @Test
  public void test33()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) gJChronology0);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      int int0 = 3454;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.dayOfYear, cachedDateTimeZone0, assembledChronology_Fields0.halfdays, assembledChronology_Fields0.months, assembledChronology_Fields0.weekyears);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = zonedChronology_ZonedDateTimeField0.getDifferenceAsLong((long) int0, (long) int0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(0L, long0);
  }

  @Test
  public void test34()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      gJChronology0.assemble(assembledChronology_Fields0);
  }

  @Test
  public void test35()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) gJChronology0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      int int0 = 3475;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.dayOfYear, fixedDateTimeZone0, assembledChronology_Fields0.halfdays, assembledChronology_Fields0.months, assembledChronology_Fields0.weekyears);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = zonedChronology_ZonedDateTimeField0.add((long) int0, int0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(300240003475L, long0);
  }

  @Test
  public void test36()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) gJChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology0);
  }

  @Test
  public void test37()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      long long0 = 794L;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, (Chronology) gJChronology0);
      assertNotNull(mutablePeriod0);
      
      int int0 = 1296;
      mutablePeriod0.addMonths(int0);
      MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      MonthDay monthDay1 = monthDay0.minus((ReadablePeriod) mutablePeriod0);
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay1.size());
      assertTrue(monthDay0.equals((Object)monthDay1));
      assertTrue(monthDay1.equals((Object)monthDay0));
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertNotNull(monthDay1);
  }
}
