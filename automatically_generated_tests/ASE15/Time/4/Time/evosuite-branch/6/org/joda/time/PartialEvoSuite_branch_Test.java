/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:40:32 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Instant;
import org.joda.time.LocalDateTime;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TimeOfDay;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class PartialEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      Instant instant0 = Instant.now();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1392409281320L, instant0.getMillis());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)mutableDateTime0.toCalendar(locale0);
      assertNotNull(gregorianCalendar0);
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("java.util.GregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, gregorianCalendar0.isLenient());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(1392409281320L, instant0.getMillis());
      
      MonthDay monthDay0 = MonthDay.fromCalendarFields((Calendar) gregorianCalendar0);
      assertNotNull(monthDay0);
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("java.util.GregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, gregorianCalendar0.isLenient());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(2, monthDay0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(1392409281320L, instant0.getMillis());
      
      Partial partial0 = new Partial((ReadablePartial) monthDay0);
      assertNotNull(partial0);
      assertEquals(2, partial0.size());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("java.util.GregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, gregorianCalendar0.isLenient());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(2, monthDay0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(1392409281320L, instant0.getMillis());
      
      String string0 = "";
      // Undeclared exception!
      try {
        String string1 = partial0.toString(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      String string0 = " < ";
      String string1 = partial0.toString(string0);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, partial0.size());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(" < ", string1);
  }

  @Test
  public void test02()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      int int0 = 2;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      String string0 = partial0.toString();
      assertNotNull(string0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertEquals("[secondOfDay=2]", string0);
      
      String string1 = null;
      Locale locale0 = null;
      String string2 = partial0.toString(string1, locale0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotSame(string2, string0);
      assertEquals("[secondOfDay=2]", string2);
  }

  @Test
  public void test03()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      int int0 = 21;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) gJChronology0);
      assertNotNull(partial0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      String string0 = partial0.toString();
      assertNotNull(string0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertEquals("0021", string0);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 2926;
      LocalDateTime localDateTime0 = new LocalDateTime((long) int0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Partial partial0 = new Partial((ReadablePartial) localDateTime0);
      assertNotNull(partial0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
      
      String string0 = partial0.toString();
      assertNotNull(string0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
      assertEquals("[year=1970, monthOfYear=1, dayOfMonth=1, millisOfDay=3602926]", string0);
  }

  @Test
  public void test05()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      String string0 = null;
      String string1 = partial0.toString(string0);
      assertNotNull(string1);
      assertEquals(0, partial0.size());
      assertEquals("[]", string1);
  }

  @Test
  public void test06()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      int int0 = 2;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      String string0 = partial0.toString();
      assertNotNull(string0);
      assertEquals(1, partial0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("[secondOfDay=2]", string0);
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertNull(dateTimeFormatter0);
      assertEquals(1, partial0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
  }

  @Test
  public void test07()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      int int0 = 2;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = partial0.isMatch(readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      Instant instant0 = Instant.now();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)mutableDateTime0.toCalendar(locale0);
      assertNotNull(gregorianCalendar0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, gregorianCalendar0.isLenient());
      assertEquals("java.util.GregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      MonthDay monthDay0 = MonthDay.fromCalendarFields((Calendar) gregorianCalendar0);
      assertNotNull(monthDay0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(2, monthDay0.size());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, gregorianCalendar0.isLenient());
      assertEquals("java.util.GregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      Partial partial0 = new Partial((ReadablePartial) monthDay0);
      assertNotNull(partial0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(2, monthDay0.size());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, gregorianCalendar0.isLenient());
      assertEquals("java.util.GregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(2, partial0.size());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      boolean boolean0 = partial0.isMatch((ReadablePartial) monthDay0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(2, monthDay0.size());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, gregorianCalendar0.isLenient());
      assertEquals("java.util.GregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(2, partial0.size());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertTrue(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      long long0 = 1252L;
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) yearMonthDay0);
      assertNotNull(partial0);
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      
      int int0 = (-1);
      YearMonthDay yearMonthDay1 = yearMonthDay0.minusMonths(int0);
      assertNotNull(yearMonthDay1);
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertEquals(3, yearMonthDay1.size());
      assertEquals(3, yearMonthDay0.size());
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay0, yearMonthDay1);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      DateMidnight dateMidnight0 = yearMonthDay1.toDateMidnight((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(dateMidnight0);
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(3, yearMonthDay1.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(2674800000L, dateMidnight0.getMillis());
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay0, yearMonthDay1);
      
      boolean boolean0 = partial0.isMatch((ReadableInstant) dateMidnight0);
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay1.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(2674800000L, dateMidnight0.getMillis());
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertFalse(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      long long0 = 1252L;
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) yearMonthDay0);
      assertNotNull(partial0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, partial0.size());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      DateMidnight dateMidnight0 = yearMonthDay0.toDateMidnight((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(dateMidnight0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      boolean boolean0 = partial0.isMatch((ReadableInstant) dateMidnight0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(3, partial0.size());
      assertTrue(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      int int0 = 0;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(mutablePeriod0);
      
      Partial partial1 = partial0.withPeriodAdded((ReadablePeriod) mutablePeriod0, int0);
      assertNotNull(partial1);
      assertEquals(0, partial1.size());
      assertEquals(0, partial0.size());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
  }

  @Test
  public void test12()  throws Throwable  {
      long long0 = 1252L;
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) yearMonthDay0);
      assertNotNull(partial0);
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      
      int int0 = 0;
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, int0);
      assertNotNull(partial1);
      assertEquals(3, partial1.size());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
  }

  @Test
  public void test13()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.getName());
      
      int int1 = (-61);
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, int1);
      assertNotNull(partial1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial1.size());
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
  }

  @Test
  public void test14()  throws Throwable  {
      long long0 = 1252L;
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) yearMonthDay0);
      assertNotNull(partial0);
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      
      int int0 = 0;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      
      Partial partial1 = partial0.withFieldAdded(durationFieldType0, int0);
      assertNotNull(partial1);
      assertEquals(3, partial0.size());
      assertEquals(3, partial1.size());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(3, yearMonthDay0.size());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
  }

  @Test
  public void test15()  throws Throwable  {
      long long0 = 1252L;
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) yearMonthDay0);
      assertNotNull(partial0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, partial0.size());
      
      int int0 = (-1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      
      Partial partial1 = partial0.withFieldAdded(durationFieldType0, int0);
      assertNotNull(partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, partial1.size());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals(3, partial0.size());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
  }

  @Test
  public void test16()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      int int0 = 69;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) gJChronology0);
      assertNotNull(partial0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      Partial partial1 = partial0.withField(dateTimeFieldType0, int0);
      assertNotNull(partial1);
      assertEquals(1, partial1.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
  }

  @Test
  public void test17()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      int int0 = 21;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) gJChronology0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      int int1 = (-3882);
      Partial partial1 = partial0.withField(dateTimeFieldType0, int1);
      assertNotNull(partial1);
      assertFalse(int1 == int0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(int0 == int1);
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
  }

  @Test
  public void test18()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertNotNull(partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertEquals(0, partial1.size());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
  }

  @Test
  public void test19()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertNotNull(partial1);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals(0, partial1.size());
      assertEquals(0, partial0.size());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
  }

  @Test
  public void test20()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      int int1 = (-61);
      Partial partial1 = partial0.with(dateTimeFieldType0, int1);
      assertNotNull(partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
  }

  @Test
  public void test21()  throws Throwable  {
      long long0 = 1L;
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      TimeOfDay timeOfDay0 = new TimeOfDay(long0, (Chronology) copticChronology0);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) timeOfDay0);
      assertNotNull(partial0);
      assertEquals(4, partial0.size());
      assertEquals(4, timeOfDay0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      int int0 = 0;
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertNotNull(partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertEquals(5, partial1.size());
      assertEquals(4, partial0.size());
      assertEquals(4, timeOfDay0.size());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
  }

  @Test
  public void test22()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      int int0 = 0;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for weekOfWeekyear must not be smaller than 1
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      int int0 = 2;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertNotNull(partial1);
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
  }

  @Test
  public void test24()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      Partial partial0 = new Partial((Chronology) buddhistChronology0);
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 10;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      long long0 = 1L;
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      TimeOfDay timeOfDay0 = new TimeOfDay(long0, (Chronology) copticChronology0);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) timeOfDay0);
      assertNotNull(partial0);
      assertEquals(4, partial0.size());
      assertEquals(4, timeOfDay0.size());
      
      Partial partial1 = partial0.withChronologyRetainFields((Chronology) copticChronology0);
      assertNotNull(partial1);
      assertEquals(4, partial0.size());
      assertEquals(4, partial1.size());
      assertEquals(4, timeOfDay0.size());
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
  }

  @Test
  public void test26()  throws Throwable  {
      Chronology chronology0 = null;
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
      int[] intArray0 = new int[9];
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, partial0.size());
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.withChronologyRetainFields(chronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      Partial partial0 = null;
      Partial partial1 = null;
      try {
        partial1 = new Partial((ReadablePartial) partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      
      int[] intArray0 = new int[2];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[0].toString());
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[0].getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[1].getName());
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[1].toString());
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: dayOfMonth
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldTypeArray0[1].toString());
      assertEquals("era", dateTimeFieldTypeArray0[1].getName());
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldTypeArray0[1];
      assertNotNull(dateTimeFieldTypeArray0[3]);
      assertEquals("era", dateTimeFieldTypeArray0[3].getName());
      assertEquals("era", dateTimeFieldTypeArray0[3].toString());
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      TimeOfDay timeOfDay0 = new TimeOfDay((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      Partial partial0 = new Partial((ReadablePartial) timeOfDay0);
      assertNotNull(partial0);
      assertEquals(4, partial0.size());
      assertEquals(4, timeOfDay0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      int int0 = 83;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldTypeArray0[3], int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 83 for era must not be larger than 1
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType1);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertEquals("clockhourOfDay", dateTimeFieldType1.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType1.getName());
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      int[] intArray0 = new int[2];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("clockhourOfDay", dateTimeFieldType1.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType1.getName());
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[0].toString());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldTypeArray0[1].toString());
      assertEquals("era", dateTimeFieldTypeArray0[1].getName());
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: clockhourOfDay < era
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("hourOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("hourOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.halfdayOfDay();
      assertNotNull(dateTimeFieldType1);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertEquals("halfdayOfDay", dateTimeFieldType1.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType1.toString());
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("halfdayOfDay", dateTimeFieldType1.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType1.toString());
      assertEquals("halfdayOfDay", dateTimeFieldTypeArray0[1].toString());
      assertEquals("halfdayOfDay", dateTimeFieldTypeArray0[1].getName());
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("hourOfDay", dateTimeFieldTypeArray0[2].getName());
      assertEquals("hourOfDay", dateTimeFieldTypeArray0[2].toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldTypeArray0[0];
      assertNotNull(dateTimeFieldTypeArray0[3]);
      assertEquals("hourOfDay", dateTimeFieldTypeArray0[3].toString());
      assertEquals("hourOfDay", dateTimeFieldTypeArray0[3].getName());
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[4]);
      assertEquals("halfdayOfDay", dateTimeFieldType1.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType1.toString());
      assertEquals("halfdayOfDay", dateTimeFieldTypeArray0[4].toString());
      assertEquals("halfdayOfDay", dateTimeFieldTypeArray0[4].getName());
      
      int[] intArray0 = new int[5];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: hourOfDay < halfdayOfDay
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      int[] intArray0 = new int[7];
      int int0 = 0;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      TimeOfDay timeOfDay0 = new TimeOfDay(intArray0[1], int0, (Chronology) iSOChronology0);
      assertNotNull(timeOfDay0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(4, timeOfDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) timeOfDay0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(4, partial0.size());
      assertEquals(4, timeOfDay0.size());
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertNotNull(partial1);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(4, partial0.size());
      assertEquals(4, timeOfDay0.size());
      assertEquals(5, partial1.size());
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
  }

  @Test
  public void test33()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      int[] intArray0 = new int[2];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("era", dateTimeFieldTypeArray0[0].toString());
      assertEquals("era", dateTimeFieldTypeArray0[0].getName());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("era", dateTimeFieldTypeArray0[1].getName());
      assertEquals("era", dateTimeFieldTypeArray0[1].toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: era
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      int[] intArray0 = new int[2];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      int[] intArray0 = new int[2];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null: index 0
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 31;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      int[] intArray0 = new int[9];
      Partial partial0 = new Partial(gJChronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(2, partial0.size());
      
      ReadablePeriod readablePeriod0 = null;
      Partial partial1 = partial0.minus(readablePeriod0);
      assertNotNull(partial1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(2, partial1.size());
      assertEquals(2, partial0.size());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
  }

  @Test
  public void test38()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = partial0.getFieldTypes();
      assertNotNull(dateTimeFieldTypeArray0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
  }

  @Test
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 0;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      TimeOfDay timeOfDay0 = new TimeOfDay(intArray0[1], int0, (Chronology) iSOChronology0);
      assertNotNull(timeOfDay0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(4, timeOfDay0.size());
      
      Period period0 = new Period((ReadablePartial) timeOfDay0, (ReadablePartial) timeOfDay0);
      assertNotNull(period0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(4, timeOfDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) timeOfDay0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(4, partial0.size());
      
      Partial partial1 = partial0.plus((ReadablePeriod) period0);
      assertNotNull(partial1);
      assertTrue(partial1.equals((Object)partial0));
      assertTrue(partial0.equals((Object)partial1));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(4, partial1.size());
      assertEquals(4, partial0.size());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
  }

  @Test
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 0;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      TimeOfDay timeOfDay0 = new TimeOfDay(intArray0[1], int0, (Chronology) iSOChronology0);
      assertNotNull(timeOfDay0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(4, timeOfDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) timeOfDay0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(4, partial0.size());
      assertEquals(4, timeOfDay0.size());
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, intArray0[0]);
      assertNotNull(partial_Property0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(4, partial0.size());
      assertEquals(4, timeOfDay0.size());
      
      Partial partial1 = partial_Property0.withMinimumValue();
      assertNotNull(partial1);
      assertTrue(partial0.equals((Object)partial1));
      assertTrue(partial1.equals((Object)partial0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(4, partial0.size());
      assertEquals(4, partial1.size());
      assertEquals(4, timeOfDay0.size());
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
  }

  @Test
  public void test41()  throws Throwable  {
      int int0 = 44;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      int[] intArray0 = new int[9];
      Partial partial0 = new Partial(gJChronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(2, partial0.size());
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(2, partial0.size());
      
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.addToCopy(intArray0[8]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      int int0 = 0;
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      assertEquals(0, partial0.size());
      
      // Undeclared exception!
      try {
        int int1 = partial_Property0.get();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      int int0 = 0;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) iSOChronology0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertNotNull(partial_Property0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      Partial partial1 = partial_Property0.withMaximumValue();
      assertNotNull(partial1);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial1.size());
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
  }

  @Test
  public void test44()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      String string0 = partial0.toStringList();
      assertNotNull(string0);
      assertEquals(0, partial0.size());
      assertEquals("[]", string0);
      
      int int0 = 4484;
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      assertEquals(0, partial0.size());
      
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.setCopy(string0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      int int0 = 69;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) gJChronology0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertNotNull(partial_Property0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      Partial partial1 = partial_Property0.getPartial();
      assertNotNull(partial1);
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
  }

  @Test
  public void test46()  throws Throwable  {
      long long0 = 1252L;
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) yearMonthDay0);
      assertNotNull(partial0);
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      
      int int0 = (-1);
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.addWrapFieldToCopy(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
